/*
 * MIT License
 *
 * Copyright (c) 2021 zeromicro
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 */

// Code generated from /Users/anqiansong/goland/go/ddl-parser/grammar/MySqlParser.g4 by ANTLR 4.9.1. DO NOT EDIT.

package gen // MySqlParser
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 1092, 6497,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174,
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178,
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183,
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 4, 186, 9, 186, 4, 187, 9, 187,
	4, 188, 9, 188, 4, 189, 9, 189, 4, 190, 9, 190, 4, 191, 9, 191, 4, 192,
	9, 192, 4, 193, 9, 193, 4, 194, 9, 194, 4, 195, 9, 195, 4, 196, 9, 196,
	4, 197, 9, 197, 4, 198, 9, 198, 4, 199, 9, 199, 4, 200, 9, 200, 4, 201,
	9, 201, 4, 202, 9, 202, 4, 203, 9, 203, 4, 204, 9, 204, 4, 205, 9, 205,
	4, 206, 9, 206, 4, 207, 9, 207, 4, 208, 9, 208, 4, 209, 9, 209, 4, 210,
	9, 210, 4, 211, 9, 211, 4, 212, 9, 212, 4, 213, 9, 213, 4, 214, 9, 214,
	4, 215, 9, 215, 4, 216, 9, 216, 4, 217, 9, 217, 4, 218, 9, 218, 4, 219,
	9, 219, 4, 220, 9, 220, 4, 221, 9, 221, 4, 222, 9, 222, 4, 223, 9, 223,
	4, 224, 9, 224, 4, 225, 9, 225, 4, 226, 9, 226, 4, 227, 9, 227, 4, 228,
	9, 228, 4, 229, 9, 229, 4, 230, 9, 230, 4, 231, 9, 231, 4, 232, 9, 232,
	4, 233, 9, 233, 4, 234, 9, 234, 4, 235, 9, 235, 4, 236, 9, 236, 4, 237,
	9, 237, 4, 238, 9, 238, 4, 239, 9, 239, 4, 240, 9, 240, 4, 241, 9, 241,
	4, 242, 9, 242, 4, 243, 9, 243, 4, 244, 9, 244, 4, 245, 9, 245, 4, 246,
	9, 246, 4, 247, 9, 247, 4, 248, 9, 248, 4, 249, 9, 249, 4, 250, 9, 250,
	4, 251, 9, 251, 4, 252, 9, 252, 4, 253, 9, 253, 4, 254, 9, 254, 4, 255,
	9, 255, 4, 256, 9, 256, 4, 257, 9, 257, 4, 258, 9, 258, 4, 259, 9, 259,
	4, 260, 9, 260, 4, 261, 9, 261, 4, 262, 9, 262, 4, 263, 9, 263, 4, 264,
	9, 264, 4, 265, 9, 265, 4, 266, 9, 266, 4, 267, 9, 267, 4, 268, 9, 268,
	4, 269, 9, 269, 4, 270, 9, 270, 4, 271, 9, 271, 4, 272, 9, 272, 4, 273,
	9, 273, 4, 274, 9, 274, 4, 275, 9, 275, 4, 276, 9, 276, 4, 277, 9, 277,
	4, 278, 9, 278, 4, 279, 9, 279, 4, 280, 9, 280, 4, 281, 9, 281, 4, 282,
	9, 282, 4, 283, 9, 283, 4, 284, 9, 284, 4, 285, 9, 285, 4, 286, 9, 286,
	4, 287, 9, 287, 4, 288, 9, 288, 4, 289, 9, 289, 4, 290, 9, 290, 4, 291,
	9, 291, 4, 292, 9, 292, 4, 293, 9, 293, 4, 294, 9, 294, 4, 295, 9, 295,
	4, 296, 9, 296, 4, 297, 9, 297, 4, 298, 9, 298, 4, 299, 9, 299, 4, 300,
	9, 300, 4, 301, 9, 301, 4, 302, 9, 302, 4, 303, 9, 303, 4, 304, 9, 304,
	4, 305, 9, 305, 4, 306, 9, 306, 4, 307, 9, 307, 4, 308, 9, 308, 4, 309,
	9, 309, 4, 310, 9, 310, 4, 311, 9, 311, 4, 312, 9, 312, 4, 313, 9, 313,
	4, 314, 9, 314, 4, 315, 9, 315, 4, 316, 9, 316, 4, 317, 9, 317, 4, 318,
	9, 318, 4, 319, 9, 319, 3, 2, 5, 2, 640, 10, 2, 3, 2, 5, 2, 643, 10, 2,
	3, 2, 3, 2, 3, 3, 3, 3, 5, 3, 649, 10, 3, 3, 3, 5, 3, 652, 10, 3, 3, 3,
	7, 3, 655, 10, 3, 12, 3, 14, 3, 658, 11, 3, 3, 3, 3, 3, 5, 3, 662, 10,
	3, 3, 3, 5, 3, 665, 10, 3, 3, 3, 5, 3, 668, 10, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 5, 4, 677, 10, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 716, 10, 6, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 728, 10, 7, 3,
	8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 739, 10, 8, 3,
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3,
	9, 3, 9, 3, 9, 5, 9, 756, 10, 9, 3, 10, 3, 10, 3, 10, 5, 10, 761, 10, 10,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5,
	11, 773, 10, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 800, 10, 12, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 809, 10, 13, 3, 14, 3,
	14, 3, 14, 5, 14, 814, 10, 14, 3, 14, 3, 14, 7, 14, 818, 10, 14, 12, 14,
	14, 14, 821, 11, 14, 3, 15, 3, 15, 5, 15, 825, 10, 15, 3, 15, 3, 15, 5,
	15, 829, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15,
	838, 10, 15, 3, 15, 5, 15, 841, 10, 15, 3, 15, 5, 15, 844, 10, 15, 3, 15,
	3, 15, 5, 15, 848, 10, 15, 3, 15, 3, 15, 3, 15, 3, 16, 3, 16, 5, 16, 855,
	10, 16, 3, 16, 5, 16, 858, 10, 16, 3, 16, 3, 16, 3, 16, 5, 16, 863, 10,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 7, 16, 869, 10, 16, 12, 16, 14, 16, 872,
	11, 16, 3, 16, 3, 16, 5, 16, 876, 10, 16, 3, 16, 3, 16, 3, 16, 5, 16, 881,
	10, 16, 3, 16, 7, 16, 884, 10, 16, 12, 16, 14, 16, 887, 11, 16, 3, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 898, 10,
	17, 3, 17, 5, 17, 901, 10, 17, 3, 17, 3, 17, 5, 17, 905, 10, 17, 3, 17,
	5, 17, 908, 10, 17, 3, 17, 3, 17, 5, 17, 912, 10, 17, 3, 17, 5, 17, 915,
	10, 17, 3, 17, 3, 17, 5, 17, 919, 10, 17, 3, 17, 5, 17, 922, 10, 17, 3,
	17, 5, 17, 925, 10, 17, 3, 17, 3, 17, 5, 17, 929, 10, 17, 3, 17, 5, 17,
	932, 10, 17, 3, 17, 3, 17, 5, 17, 936, 10, 17, 3, 17, 3, 17, 3, 18, 3,
	18, 5, 18, 942, 10, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 948, 10, 18,
	3, 18, 3, 18, 7, 18, 952, 10, 18, 12, 18, 14, 18, 955, 11, 18, 3, 18, 3,
	18, 7, 18, 959, 10, 18, 12, 18, 14, 18, 962, 11, 18, 3, 18, 3, 18, 3, 19,
	3, 19, 5, 19, 968, 10, 19, 3, 19, 3, 19, 3, 19, 3, 19, 5, 19, 974, 10,
	19, 3, 19, 3, 19, 7, 19, 978, 10, 19, 12, 19, 14, 19, 981, 11, 19, 3, 19,
	3, 19, 3, 19, 3, 19, 7, 19, 987, 10, 19, 12, 19, 14, 19, 990, 11, 19, 3,
	19, 3, 19, 5, 19, 994, 10, 19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 7, 20, 1008, 10, 20, 12, 20,
	14, 20, 1011, 11, 20, 3, 20, 3, 20, 3, 21, 3, 21, 5, 21, 1017, 10, 21,
	3, 21, 3, 21, 5, 21, 1021, 10, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 21, 5, 21, 1031, 10, 21, 3, 21, 3, 21, 5, 21, 1035, 10, 21,
	3, 21, 3, 21, 5, 21, 1039, 10, 21, 3, 21, 3, 21, 5, 21, 1043, 10, 21, 3,
	21, 3, 21, 5, 21, 1047, 10, 21, 3, 21, 7, 21, 1050, 10, 21, 12, 21, 14,
	21, 1053, 11, 21, 5, 21, 1055, 10, 21, 3, 21, 5, 21, 1058, 10, 21, 3, 21,
	5, 21, 1061, 10, 21, 3, 21, 5, 21, 1064, 10, 21, 3, 21, 3, 21, 3, 21, 3,
	21, 5, 21, 1070, 10, 21, 3, 21, 3, 21, 5, 21, 1074, 10, 21, 3, 21, 3, 21,
	3, 21, 3, 21, 5, 21, 1080, 10, 21, 3, 21, 7, 21, 1083, 10, 21, 12, 21,
	14, 21, 1086, 11, 21, 5, 21, 1088, 10, 21, 3, 21, 5, 21, 1091, 10, 21,
	5, 21, 1093, 10, 21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3,
	22, 3, 22, 5, 22, 1104, 10, 22, 3, 22, 3, 22, 5, 22, 1108, 10, 22, 3, 22,
	5, 22, 1111, 10, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3,
	23, 3, 23, 3, 23, 3, 23, 3, 23, 5, 23, 1125, 10, 23, 3, 23, 5, 23, 1128,
	10, 23, 3, 23, 3, 23, 5, 23, 1132, 10, 23, 3, 23, 5, 23, 1135, 10, 23,
	3, 23, 3, 23, 5, 23, 1139, 10, 23, 3, 23, 5, 23, 1142, 10, 23, 3, 23, 3,
	23, 5, 23, 1146, 10, 23, 3, 23, 5, 23, 1149, 10, 23, 3, 23, 3, 23, 5, 23,
	1153, 10, 23, 3, 23, 5, 23, 1156, 10, 23, 3, 23, 5, 23, 1159, 10, 23, 3,
	23, 3, 23, 5, 23, 1163, 10, 23, 3, 23, 5, 23, 1166, 10, 23, 3, 23, 3, 23,
	5, 23, 1170, 10, 23, 3, 23, 3, 23, 3, 24, 3, 24, 5, 24, 1176, 10, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	5, 24, 1189, 10, 24, 3, 24, 3, 24, 3, 25, 3, 25, 3, 25, 5, 25, 1196, 10,
	25, 3, 25, 3, 25, 3, 25, 5, 25, 1201, 10, 25, 3, 25, 5, 25, 1204, 10, 25,
	3, 25, 3, 25, 3, 25, 5, 25, 1209, 10, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3,
	25, 3, 25, 5, 25, 1217, 10, 25, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 1223,
	10, 25, 3, 25, 3, 25, 5, 25, 1227, 10, 25, 3, 26, 5, 26, 1230, 10, 26,
	3, 26, 3, 26, 3, 26, 5, 26, 1235, 10, 26, 3, 26, 5, 26, 1238, 10, 26, 3,
	26, 3, 26, 5, 26, 1242, 10, 26, 3, 26, 5, 26, 1245, 10, 26, 3, 26, 3, 26,
	5, 26, 1249, 10, 26, 3, 26, 5, 26, 1252, 10, 26, 3, 27, 3, 27, 3, 27, 3,
	27, 3, 27, 3, 27, 5, 27, 1260, 10, 27, 5, 27, 1262, 10, 27, 3, 28, 3, 28,
	3, 28, 7, 28, 1267, 10, 28, 12, 28, 14, 28, 1270, 11, 28, 3, 28, 3, 28,
	3, 28, 5, 28, 1275, 10, 28, 3, 28, 3, 28, 3, 28, 3, 28, 7, 28, 1281, 10,
	28, 12, 28, 14, 28, 1284, 11, 28, 5, 28, 1286, 10, 28, 3, 28, 3, 28, 3,
	28, 7, 28, 1291, 10, 28, 12, 28, 14, 28, 1294, 11, 28, 5, 28, 1296, 10,
	28, 5, 28, 1298, 10, 28, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 1304, 10, 29,
	3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 1310, 10, 30, 3, 30, 3, 30, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 5, 31, 1327, 10, 31, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 1334,
	10, 32, 3, 33, 3, 33, 3, 33, 3, 34, 3, 34, 5, 34, 1341, 10, 34, 3, 34,
	3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 1352, 10,
	34, 3, 35, 5, 35, 1355, 10, 35, 3, 35, 3, 35, 3, 35, 3, 36, 3, 36, 3, 36,
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5, 37, 1368, 10, 37, 3, 37, 3, 37, 3,
	37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5, 37, 1381,
	10, 37, 3, 37, 3, 37, 3, 37, 5, 37, 1386, 10, 37, 3, 38, 3, 38, 3, 38,
	3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3,
	38, 5, 38, 1402, 10, 38, 3, 39, 3, 39, 3, 39, 3, 39, 7, 39, 1408, 10, 39,
	12, 39, 14, 39, 1411, 11, 39, 3, 39, 3, 39, 3, 40, 3, 40, 3, 40, 3, 40,
	3, 40, 5, 40, 1420, 10, 40, 3, 41, 3, 41, 7, 41, 1424, 10, 41, 12, 41,
	14, 41, 1427, 11, 41, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42,
	5, 42, 1436, 10, 42, 3, 42, 5, 42, 1439, 10, 42, 3, 42, 3, 42, 3, 42, 5,
	42, 1444, 10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42,
	3, 42, 3, 42, 3, 42, 5, 42, 1457, 10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3,
	42, 5, 42, 1464, 10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 1471,
	10, 42, 5, 42, 1473, 10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42,
	1480, 10, 42, 3, 43, 3, 43, 5, 43, 1484, 10, 43, 5, 43, 1486, 10, 43, 3,
	43, 3, 43, 3, 43, 5, 43, 1491, 10, 43, 3, 43, 5, 43, 1494, 10, 43, 3, 43,
	3, 43, 7, 43, 1498, 10, 43, 12, 43, 14, 43, 1501, 11, 43, 3, 43, 3, 43,
	5, 43, 1505, 10, 43, 5, 43, 1507, 10, 43, 3, 43, 3, 43, 5, 43, 1511, 10,
	43, 3, 43, 5, 43, 1514, 10, 43, 3, 43, 5, 43, 1517, 10, 43, 3, 43, 3, 43,
	7, 43, 1521, 10, 43, 12, 43, 14, 43, 1524, 11, 43, 3, 43, 3, 43, 5, 43,
	1528, 10, 43, 5, 43, 1530, 10, 43, 3, 43, 3, 43, 3, 43, 5, 43, 1535, 10,
	43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 5, 43, 1542, 10, 43, 5, 43, 1544,
	10, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 5, 43, 1551, 10, 43, 3, 44,
	3, 44, 3, 44, 5, 44, 1556, 10, 44, 3, 44, 3, 44, 5, 44, 1560, 10, 44, 3,
	44, 5, 44, 1563, 10, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 5, 45,
	1571, 10, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 1579, 10,
	45, 5, 45, 1581, 10, 45, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 5, 46,
	1589, 10, 46, 3, 47, 3, 47, 5, 47, 1593, 10, 47, 3, 47, 5, 47, 1596, 10,
	47, 3, 47, 3, 47, 7, 47, 1600, 10, 47, 12, 47, 14, 47, 1603, 11, 47, 3,
	47, 3, 47, 5, 47, 1607, 10, 47, 3, 47, 5, 47, 1610, 10, 47, 3, 47, 3, 47,
	7, 47, 1614, 10, 47, 12, 47, 14, 47, 1617, 11, 47, 5, 47, 1619, 10, 47,
	3, 48, 3, 48, 5, 48, 1623, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1628, 10,
	48, 3, 48, 3, 48, 3, 48, 5, 48, 1633, 10, 48, 3, 48, 3, 48, 5, 48, 1637,
	10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1642, 10, 48, 3, 48, 5, 48, 1645, 10,
	48, 3, 48, 3, 48, 5, 48, 1649, 10, 48, 3, 48, 3, 48, 5, 48, 1653, 10, 48,
	3, 48, 3, 48, 5, 48, 1657, 10, 48, 3, 48, 3, 48, 5, 48, 1661, 10, 48, 3,
	48, 3, 48, 3, 48, 5, 48, 1666, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1671,
	10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1676, 10, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 5, 48, 1682, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1687, 10, 48, 3,
	48, 3, 48, 3, 48, 5, 48, 1692, 10, 48, 3, 48, 3, 48, 3, 48, 3, 48, 5, 48,
	1698, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1703, 10, 48, 3, 48, 3, 48, 3,
	48, 5, 48, 1708, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1713, 10, 48, 3, 48,
	3, 48, 3, 48, 5, 48, 1718, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1723, 10,
	48, 3, 48, 3, 48, 3, 48, 5, 48, 1728, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48,
	1733, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1738, 10, 48, 3, 48, 3, 48, 3,
	48, 5, 48, 1743, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1748, 10, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 5, 48, 1754, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1759,
	10, 48, 3, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1765, 10, 48, 3, 49, 3, 49,
	3, 49, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 5, 50, 1775, 10, 50, 3, 50, 3,
	50, 3, 50, 3, 50, 3, 50, 5, 50, 1782, 10, 50, 5, 50, 1784, 10, 50, 3, 50,
	3, 50, 3, 50, 3, 50, 7, 50, 1790, 10, 50, 12, 50, 14, 50, 1793, 11, 50,
	3, 50, 3, 50, 5, 50, 1797, 10, 50, 3, 51, 5, 51, 1800, 10, 51, 3, 51, 3,
	51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 1808, 10, 51, 3, 51, 3, 51, 3, 51,
	3, 51, 5, 51, 1814, 10, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3,
	51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 1830, 10, 51,
	3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5,
	51, 1842, 10, 51, 5, 51, 1844, 10, 51, 3, 52, 5, 52, 1847, 10, 52, 3, 52,
	3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 5, 52, 1855, 10, 52, 3, 52, 3, 52, 3,
	52, 3, 52, 5, 52, 1861, 10, 52, 3, 52, 3, 52, 3, 52, 3, 52, 5, 52, 1867,
	10, 52, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53,
	7, 53, 1878, 10, 53, 12, 53, 14, 53, 1881, 11, 53, 3, 53, 3, 53, 7, 53,
	1885, 10, 53, 12, 53, 14, 53, 1888, 11, 53, 3, 53, 3, 53, 3, 53, 3, 53,
	7, 53, 1894, 10, 53, 12, 53, 14, 53, 1897, 11, 53, 3, 53, 3, 53, 5, 53,
	1901, 10, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 7, 53, 1910,
	10, 53, 12, 53, 14, 53, 1913, 11, 53, 3, 53, 3, 53, 3, 53, 3, 53, 7, 53,
	1919, 10, 53, 12, 53, 14, 53, 1922, 11, 53, 3, 53, 3, 53, 5, 53, 1926,
	10, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 7, 53,
	1936, 10, 53, 12, 53, 14, 53, 1939, 11, 53, 3, 53, 3, 53, 7, 53, 1943,
	10, 53, 12, 53, 14, 53, 1946, 11, 53, 3, 53, 3, 53, 3, 53, 3, 53, 7, 53,
	1952, 10, 53, 12, 53, 14, 53, 1955, 11, 53, 3, 53, 3, 53, 5, 53, 1959,
	10, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 7, 53,
	1969, 10, 53, 12, 53, 14, 53, 1972, 11, 53, 3, 53, 3, 53, 7, 53, 1976,
	10, 53, 12, 53, 14, 53, 1979, 11, 53, 3, 53, 3, 53, 3, 53, 3, 53, 7, 53,
	1985, 10, 53, 12, 53, 14, 53, 1988, 11, 53, 3, 53, 3, 53, 5, 53, 1992,
	10, 53, 3, 53, 3, 53, 3, 53, 7, 53, 1997, 10, 53, 12, 53, 14, 53, 2000,
	11, 53, 3, 53, 3, 53, 3, 53, 3, 53, 7, 53, 2006, 10, 53, 12, 53, 14, 53,
	2009, 11, 53, 3, 53, 3, 53, 5, 53, 2013, 10, 53, 5, 53, 2015, 10, 53, 3,
	54, 3, 54, 3, 54, 5, 54, 2020, 10, 54, 3, 55, 3, 55, 3, 55, 3, 55, 6, 55,
	2026, 10, 55, 13, 55, 14, 55, 2027, 3, 55, 3, 55, 3, 56, 3, 56, 3, 56,
	7, 56, 2035, 10, 56, 12, 56, 14, 56, 2038, 11, 56, 3, 57, 5, 57, 2041,
	10, 57, 3, 57, 3, 57, 5, 57, 2045, 10, 57, 3, 57, 3, 57, 3, 57, 5, 57,
	2050, 10, 57, 3, 57, 3, 57, 3, 57, 3, 57, 5, 57, 2056, 10, 57, 3, 57, 3,
	57, 3, 57, 3, 57, 5, 57, 2062, 10, 57, 3, 57, 3, 57, 3, 57, 5, 57, 2067,
	10, 57, 3, 57, 3, 57, 3, 57, 5, 57, 2072, 10, 57, 3, 57, 3, 57, 3, 57,
	5, 57, 2077, 10, 57, 3, 57, 3, 57, 3, 57, 5, 57, 2082, 10, 57, 3, 57, 5,
	57, 2085, 10, 57, 3, 58, 3, 58, 3, 58, 5, 58, 2090, 10, 58, 3, 58, 6, 58,
	2093, 10, 58, 13, 58, 14, 58, 2094, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58,
	3, 58, 3, 58, 3, 58, 5, 58, 2105, 10, 58, 3, 59, 3, 59, 5, 59, 2109, 10,
	59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 2116, 10, 59, 3, 59, 3, 59,
	3, 59, 5, 59, 2121, 10, 59, 3, 59, 5, 59, 2124, 10, 59, 3, 59, 3, 59, 3,
	59, 5, 59, 2129, 10, 59, 3, 59, 5, 59, 2132, 10, 59, 3, 59, 3, 59, 5, 59,
	2136, 10, 59, 3, 59, 3, 59, 5, 59, 2140, 10, 59, 3, 60, 3, 60, 3, 60, 3,
	60, 7, 60, 2146, 10, 60, 12, 60, 14, 60, 2149, 11, 60, 3, 61, 3, 61, 3,
	61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62,
	3, 62, 3, 62, 3, 62, 5, 62, 2167, 10, 62, 3, 62, 5, 62, 2170, 10, 62, 3,
	62, 5, 62, 2173, 10, 62, 3, 62, 3, 62, 5, 62, 2177, 10, 62, 3, 62, 3, 62,
	3, 63, 3, 63, 3, 63, 3, 63, 7, 63, 2185, 10, 63, 12, 63, 14, 63, 2188,
	11, 63, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 7, 64,
	2198, 10, 64, 12, 64, 14, 64, 2201, 11, 64, 3, 64, 3, 64, 3, 65, 3, 65,
	5, 65, 2207, 10, 65, 3, 65, 5, 65, 2210, 10, 65, 3, 65, 3, 65, 3, 65, 3,
	65, 3, 65, 7, 65, 2217, 10, 65, 12, 65, 14, 65, 2220, 11, 65, 5, 65, 2222,
	10, 65, 3, 65, 5, 65, 2225, 10, 65, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66,
	3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 2236, 10, 66, 3, 66, 5, 66, 2239, 10,
	66, 3, 66, 3, 66, 5, 66, 2243, 10, 66, 3, 66, 3, 66, 3, 67, 3, 67, 3, 67,
	3, 67, 5, 67, 2251, 10, 67, 3, 67, 5, 67, 2254, 10, 67, 3, 67, 3, 67, 3,
	67, 5, 67, 2259, 10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 5, 67,
	2267, 10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 5, 67, 2273, 10, 67, 3, 67, 3,
	67, 5, 67, 2277, 10, 67, 3, 68, 3, 68, 5, 68, 2281, 10, 68, 3, 68, 7, 68,
	2284, 10, 68, 12, 68, 14, 68, 2287, 11, 68, 3, 68, 3, 68, 5, 68, 2291,
	10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2298, 10, 68, 3, 68,
	3, 68, 5, 68, 2302, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3,
	68, 7, 68, 2311, 10, 68, 12, 68, 14, 68, 2314, 11, 68, 3, 68, 3, 68, 3,
	68, 3, 68, 3, 68, 5, 68, 2321, 10, 68, 3, 68, 5, 68, 2324, 10, 68, 3, 68,
	3, 68, 7, 68, 2328, 10, 68, 12, 68, 14, 68, 2331, 11, 68, 3, 68, 3, 68,
	3, 68, 5, 68, 2336, 10, 68, 5, 68, 2338, 10, 68, 3, 68, 3, 68, 3, 68, 5,
	68, 2343, 10, 68, 3, 68, 5, 68, 2346, 10, 68, 3, 68, 3, 68, 7, 68, 2350,
	10, 68, 12, 68, 14, 68, 2353, 11, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2358,
	10, 68, 5, 68, 2360, 10, 68, 3, 68, 3, 68, 5, 68, 2364, 10, 68, 3, 68,
	5, 68, 2367, 10, 68, 3, 68, 5, 68, 2370, 10, 68, 3, 68, 3, 68, 7, 68, 2374,
	10, 68, 12, 68, 14, 68, 2377, 11, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2382,
	10, 68, 3, 68, 5, 68, 2385, 10, 68, 3, 68, 3, 68, 7, 68, 2389, 10, 68,
	12, 68, 14, 68, 2392, 11, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2397, 10, 68,
	5, 68, 2399, 10, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2404, 10, 68, 3, 68, 3,
	68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2412, 10, 68, 5, 68, 2414, 10, 68,
	3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2423, 10, 68, 3,
	68, 3, 68, 3, 68, 5, 68, 2428, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68,
	3, 68, 5, 68, 2436, 10, 68, 3, 68, 3, 68, 5, 68, 2440, 10, 68, 3, 68, 3,
	68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2448, 10, 68, 3, 68, 3, 68, 3, 68,
	3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2458, 10, 68, 3, 68, 3, 68, 3,
	68, 5, 68, 2463, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2470,
	10, 68, 3, 68, 3, 68, 5, 68, 2474, 10, 68, 3, 68, 3, 68, 5, 68, 2478, 10,
	68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68,
	3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3,
	68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68,
	2510, 10, 68, 3, 68, 3, 68, 5, 68, 2514, 10, 68, 3, 68, 3, 68, 3, 68, 3,
	68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2526, 10, 68, 3, 68,
	5, 68, 2529, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5,
	68, 2538, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68,
	3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 7, 68, 2553, 10, 68, 12, 68, 14, 68,
	2556, 11, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3,
	68, 5, 68, 2567, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2574,
	10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2581, 10, 68, 3, 68,
	3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 7,
	68, 2594, 10, 68, 12, 68, 14, 68, 2597, 11, 68, 3, 68, 3, 68, 3, 68, 3,
	68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2609, 10, 68, 3, 68,
	3, 68, 3, 68, 3, 68, 5, 68, 2615, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5,
	68, 2621, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2627, 10, 68, 3, 68,
	3, 68, 3, 68, 3, 68, 5, 68, 2633, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5,
	68, 2639, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2645, 10, 68, 3, 69,
	3, 69, 3, 69, 5, 69, 2650, 10, 69, 3, 69, 3, 69, 3, 70, 3, 70, 3, 70, 5,
	70, 2657, 10, 70, 3, 70, 3, 70, 3, 71, 3, 71, 3, 71, 5, 71, 2664, 10, 71,
	3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 5, 71, 2671, 10, 71, 3, 71, 3, 71, 3,
	71, 5, 71, 2676, 10, 71, 3, 71, 7, 71, 2679, 10, 71, 12, 71, 14, 71, 2682,
	11, 71, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 73,
	3, 73, 3, 73, 5, 73, 2695, 10, 73, 3, 73, 3, 73, 3, 74, 3, 74, 3, 74, 5,
	74, 2702, 10, 74, 3, 74, 3, 74, 3, 75, 3, 75, 3, 75, 5, 75, 2709, 10, 75,
	3, 75, 3, 75, 3, 76, 3, 76, 5, 76, 2715, 10, 76, 3, 76, 3, 76, 5, 76, 2719,
	10, 76, 3, 76, 3, 76, 5, 76, 2723, 10, 76, 3, 77, 3, 77, 3, 77, 3, 77,
	3, 77, 5, 77, 2730, 10, 77, 3, 77, 5, 77, 2733, 10, 77, 3, 78, 3, 78, 3,
	78, 5, 78, 2738, 10, 78, 3, 78, 3, 78, 3, 79, 3, 79, 3, 79, 5, 79, 2745,
	10, 79, 3, 79, 3, 79, 3, 79, 7, 79, 2750, 10, 79, 12, 79, 14, 79, 2753,
	11, 79, 3, 79, 5, 79, 2756, 10, 79, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80,
	7, 80, 2763, 10, 80, 12, 80, 14, 80, 2766, 11, 80, 3, 81, 3, 81, 3, 81,
	3, 81, 3, 82, 3, 82, 5, 82, 2774, 10, 82, 3, 82, 3, 82, 3, 83, 3, 83, 3,
	83, 3, 83, 3, 83, 5, 83, 2783, 10, 83, 3, 83, 5, 83, 2786, 10, 83, 3, 84,
	3, 84, 5, 84, 2790, 10, 84, 3, 85, 3, 85, 3, 85, 3, 86, 3, 86, 3, 86, 3,
	86, 5, 86, 2799, 10, 86, 3, 87, 3, 87, 5, 87, 2803, 10, 87, 3, 87, 5, 87,
	2806, 10, 87, 3, 87, 5, 87, 2809, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 5,
	87, 2815, 10, 87, 3, 87, 5, 87, 2818, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87,
	5, 87, 2824, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 7, 87, 2831, 10,
	87, 12, 87, 14, 87, 2834, 11, 87, 5, 87, 2836, 10, 87, 3, 87, 3, 87, 3,
	87, 3, 87, 3, 87, 3, 87, 3, 87, 7, 87, 2845, 10, 87, 12, 87, 14, 87, 2848,
	11, 87, 5, 87, 2850, 10, 87, 3, 88, 3, 88, 3, 88, 5, 88, 2855, 10, 88,
	3, 88, 5, 88, 2858, 10, 88, 3, 88, 3, 88, 3, 88, 5, 88, 2863, 10, 88, 3,
	88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 5, 88, 2873, 10, 88,
	3, 88, 3, 88, 3, 88, 5, 88, 2878, 10, 88, 3, 88, 3, 88, 6, 88, 2882, 10,
	88, 13, 88, 14, 88, 2883, 5, 88, 2886, 10, 88, 3, 88, 3, 88, 6, 88, 2890,
	10, 88, 13, 88, 14, 88, 2891, 5, 88, 2894, 10, 88, 3, 88, 3, 88, 3, 88,
	3, 88, 5, 88, 2900, 10, 88, 3, 88, 3, 88, 3, 88, 3, 88, 7, 88, 2906, 10,
	88, 12, 88, 14, 88, 2909, 11, 88, 3, 88, 3, 88, 5, 88, 2913, 10, 88, 3,
	88, 3, 88, 3, 88, 3, 88, 7, 88, 2919, 10, 88, 12, 88, 14, 88, 2922, 11,
	88, 5, 88, 2924, 10, 88, 3, 89, 3, 89, 3, 89, 5, 89, 2929, 10, 89, 3, 89,
	5, 89, 2932, 10, 89, 3, 89, 3, 89, 3, 89, 5, 89, 2937, 10, 89, 3, 89, 3,
	89, 3, 89, 3, 89, 3, 89, 3, 89, 5, 89, 2945, 10, 89, 3, 89, 3, 89, 3, 89,
	3, 89, 3, 89, 3, 89, 5, 89, 2953, 10, 89, 3, 89, 3, 89, 3, 89, 3, 89, 5,
	89, 2959, 10, 89, 3, 89, 3, 89, 3, 89, 3, 89, 7, 89, 2965, 10, 89, 12,
	89, 14, 89, 2968, 11, 89, 3, 89, 3, 89, 5, 89, 2972, 10, 89, 3, 89, 3,
	89, 3, 89, 3, 89, 7, 89, 2978, 10, 89, 12, 89, 14, 89, 2981, 11, 89, 5,
	89, 2983, 10, 89, 3, 90, 3, 90, 5, 90, 2987, 10, 90, 3, 90, 5, 90, 2990,
	10, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 5, 90, 2998, 10, 90,
	3, 90, 3, 90, 3, 90, 3, 90, 5, 90, 3004, 10, 90, 3, 90, 3, 90, 3, 90, 3,
	90, 3, 90, 7, 90, 3011, 10, 90, 12, 90, 14, 90, 3014, 11, 90, 5, 90, 3016,
	10, 90, 3, 91, 3, 91, 5, 91, 3020, 10, 91, 3, 91, 3, 91, 5, 91, 3024, 10,
	91, 3, 91, 3, 91, 6, 91, 3028, 10, 91, 13, 91, 14, 91, 3029, 3, 91, 3,
	91, 5, 91, 3034, 10, 91, 3, 91, 3, 91, 5, 91, 3038, 10, 91, 5, 91, 3040,
	10, 91, 3, 91, 5, 91, 3043, 10, 91, 3, 91, 5, 91, 3046, 10, 91, 3, 91,
	5, 91, 3049, 10, 91, 3, 91, 3, 91, 6, 91, 3053, 10, 91, 13, 91, 14, 91,
	3054, 3, 91, 3, 91, 5, 91, 3059, 10, 91, 3, 91, 5, 91, 3062, 10, 91, 3,
	91, 5, 91, 3065, 10, 91, 3, 91, 5, 91, 3068, 10, 91, 3, 91, 5, 91, 3071,
	10, 91, 5, 91, 3073, 10, 91, 3, 92, 3, 92, 5, 92, 3077, 10, 92, 3, 93,
	3, 93, 3, 93, 3, 93, 5, 93, 3083, 10, 93, 3, 93, 3, 93, 3, 93, 3, 93, 5,
	93, 3089, 10, 93, 3, 93, 7, 93, 3092, 10, 93, 12, 93, 14, 93, 3095, 11,
	93, 5, 93, 3097, 10, 93, 3, 94, 3, 94, 3, 94, 3, 94, 5, 94, 3103, 10, 94,
	3, 95, 3, 95, 5, 95, 3107, 10, 95, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3,
	96, 5, 96, 3115, 10, 96, 3, 97, 3, 97, 5, 97, 3119, 10, 97, 3, 97, 5, 97,
	3122, 10, 97, 3, 97, 5, 97, 3125, 10, 97, 3, 97, 3, 97, 3, 97, 3, 97, 3,
	97, 3, 97, 3, 97, 5, 97, 3134, 10, 97, 3, 97, 3, 97, 5, 97, 3138, 10, 97,
	3, 97, 5, 97, 3141, 10, 97, 3, 97, 3, 97, 5, 97, 3145, 10, 97, 3, 98, 3,
	98, 5, 98, 3149, 10, 98, 3, 98, 5, 98, 3152, 10, 98, 3, 98, 5, 98, 3155,
	10, 98, 3, 98, 3, 98, 3, 98, 5, 98, 3160, 10, 98, 3, 98, 3, 98, 3, 98,
	3, 98, 5, 98, 3166, 10, 98, 7, 98, 3168, 10, 98, 12, 98, 14, 98, 3171,
	11, 98, 3, 98, 3, 98, 3, 98, 3, 98, 3, 98, 3, 98, 3, 98, 5, 98, 3180, 10,
	98, 3, 98, 3, 98, 3, 98, 3, 98, 5, 98, 3186, 10, 98, 7, 98, 3188, 10, 98,
	12, 98, 14, 98, 3191, 11, 98, 3, 98, 3, 98, 3, 98, 5, 98, 3196, 10, 98,
	3, 98, 3, 98, 5, 98, 3200, 10, 98, 3, 99, 3, 99, 3, 99, 3, 99, 5, 99, 3206,
	10, 99, 3, 99, 5, 99, 3209, 10, 99, 3, 100, 3, 100, 3, 100, 3, 100, 3,
	100, 3, 100, 3, 100, 3, 100, 3, 100, 3, 100, 5, 100, 3221, 10, 100, 3,
	100, 3, 100, 5, 100, 3225, 10, 100, 3, 100, 3, 100, 5, 100, 3229, 10, 100,
	3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 5, 101, 3237, 10, 101,
	3, 101, 3, 101, 5, 101, 3241, 10, 101, 3, 102, 3, 102, 3, 102, 3, 102,
	3, 103, 3, 103, 5, 103, 3249, 10, 103, 3, 103, 5, 103, 3252, 10, 103, 3,
	103, 3, 103, 5, 103, 3256, 10, 103, 3, 103, 5, 103, 3259, 10, 103, 3, 103,
	3, 103, 3, 103, 3, 103, 7, 103, 3265, 10, 103, 12, 103, 14, 103, 3268,
	11, 103, 3, 103, 3, 103, 5, 103, 3272, 10, 103, 3, 103, 5, 103, 3275, 10,
	103, 3, 103, 5, 103, 3278, 10, 103, 3, 104, 3, 104, 5, 104, 3282, 10, 104,
	3, 104, 5, 104, 3285, 10, 104, 3, 104, 3, 104, 3, 104, 3, 104, 3, 104,
	7, 104, 3292, 10, 104, 12, 104, 14, 104, 3295, 11, 104, 3, 104, 3, 104,
	5, 104, 3299, 10, 104, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 7, 105,
	3306, 10, 105, 12, 105, 14, 105, 3309, 11, 105, 3, 106, 3, 106, 5, 106,
	3313, 10, 106, 3, 107, 3, 107, 3, 107, 7, 107, 3318, 10, 107, 12, 107,
	14, 107, 3321, 11, 107, 3, 108, 3, 108, 7, 108, 3325, 10, 108, 12, 108,
	14, 108, 3328, 11, 108, 3, 108, 3, 108, 3, 108, 7, 108, 3333, 10, 108,
	12, 108, 14, 108, 3336, 11, 108, 3, 108, 3, 108, 5, 108, 3340, 10, 108,
	3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 5, 109, 3348, 10, 109,
	3, 109, 5, 109, 3351, 10, 109, 3, 109, 5, 109, 3354, 10, 109, 3, 109, 3,
	109, 3, 109, 7, 109, 3359, 10, 109, 12, 109, 14, 109, 3362, 11, 109, 5,
	109, 3364, 10, 109, 3, 109, 3, 109, 3, 109, 3, 109, 3, 109, 5, 109, 3371,
	10, 109, 3, 109, 5, 109, 3374, 10, 109, 3, 109, 3, 109, 3, 109, 3, 109,
	3, 109, 3, 109, 5, 109, 3382, 10, 109, 3, 110, 3, 110, 3, 110, 3, 110,
	5, 110, 3388, 10, 110, 3, 110, 3, 110, 3, 110, 3, 110, 3, 111, 3, 111,
	3, 111, 3, 111, 3, 111, 5, 111, 3399, 10, 111, 3, 112, 5, 112, 3402, 10,
	112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3,
	112, 5, 112, 3413, 10, 112, 3, 112, 3, 112, 3, 112, 3, 112, 5, 112, 3419,
	10, 112, 3, 112, 3, 112, 5, 112, 3423, 10, 112, 3, 112, 3, 112, 3, 112,
	3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 5, 112, 3434, 10, 112,
	3, 112, 3, 112, 3, 112, 5, 112, 3439, 10, 112, 5, 112, 3441, 10, 112, 3,
	112, 3, 112, 5, 112, 3445, 10, 112, 3, 113, 3, 113, 3, 113, 3, 113, 3,
	113, 3, 113, 3, 113, 3, 113, 5, 113, 3455, 10, 113, 3, 114, 3, 114, 3,
	114, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114, 5, 114, 3465, 10, 114, 3,
	115, 3, 115, 7, 115, 3469, 10, 115, 12, 115, 14, 115, 3472, 11, 115, 3,
	115, 3, 115, 5, 115, 3476, 10, 115, 3, 115, 5, 115, 3479, 10, 115, 3, 115,
	5, 115, 3482, 10, 115, 3, 115, 5, 115, 3485, 10, 115, 3, 115, 5, 115, 3488,
	10, 115, 3, 115, 5, 115, 3491, 10, 115, 3, 115, 3, 115, 7, 115, 3495, 10,
	115, 12, 115, 14, 115, 3498, 11, 115, 3, 115, 3, 115, 5, 115, 3502, 10,
	115, 3, 115, 5, 115, 3505, 10, 115, 3, 115, 5, 115, 3508, 10, 115, 3, 115,
	5, 115, 3511, 10, 115, 3, 115, 5, 115, 3514, 10, 115, 3, 115, 5, 115, 3517,
	10, 115, 5, 115, 3519, 10, 115, 3, 116, 3, 116, 7, 116, 3523, 10, 116,
	12, 116, 14, 116, 3526, 11, 116, 3, 116, 3, 116, 5, 116, 3530, 10, 116,
	3, 116, 5, 116, 3533, 10, 116, 3, 116, 5, 116, 3536, 10, 116, 3, 116, 5,
	116, 3539, 10, 116, 3, 116, 5, 116, 3542, 10, 116, 3, 117, 3, 117, 5, 117,
	3546, 10, 117, 3, 117, 3, 117, 3, 118, 3, 118, 5, 118, 3552, 10, 118, 3,
	118, 3, 118, 5, 118, 3556, 10, 118, 3, 119, 3, 119, 3, 119, 3, 119, 3,
	119, 3, 119, 3, 119, 3, 119, 5, 119, 3566, 10, 119, 3, 120, 3, 120, 5,
	120, 3570, 10, 120, 3, 120, 3, 120, 7, 120, 3574, 10, 120, 12, 120, 14,
	120, 3577, 11, 120, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 5,
	121, 3585, 10, 121, 3, 121, 5, 121, 3588, 10, 121, 3, 121, 3, 121, 5, 121,
	3592, 10, 121, 3, 121, 5, 121, 3595, 10, 121, 3, 121, 3, 121, 5, 121, 3599,
	10, 121, 3, 121, 3, 121, 5, 121, 3603, 10, 121, 3, 121, 5, 121, 3606, 10,
	121, 5, 121, 3608, 10, 121, 3, 122, 3, 122, 3, 122, 3, 122, 7, 122, 3614,
	10, 122, 12, 122, 14, 122, 3617, 11, 122, 3, 122, 3, 122, 3, 122, 3, 122,
	3, 122, 3, 122, 3, 122, 3, 122, 3, 122, 5, 122, 3628, 10, 122, 3, 122,
	3, 122, 6, 122, 3632, 10, 122, 13, 122, 14, 122, 3633, 5, 122, 3636, 10,
	122, 3, 122, 3, 122, 6, 122, 3640, 10, 122, 13, 122, 14, 122, 3641, 5,
	122, 3644, 10, 122, 5, 122, 3646, 10, 122, 3, 123, 3, 123, 3, 123, 3, 123,
	5, 123, 3652, 10, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123,
	5, 123, 3660, 10, 123, 3, 124, 3, 124, 3, 124, 3, 124, 3, 124, 3, 124,
	5, 124, 3668, 10, 124, 3, 125, 3, 125, 3, 125, 3, 125, 5, 125, 3674, 10,
	125, 3, 126, 3, 126, 3, 126, 3, 126, 3, 126, 7, 126, 3681, 10, 126, 12,
	126, 14, 126, 3684, 11, 126, 3, 126, 3, 126, 5, 126, 3688, 10, 126, 3,
	127, 3, 127, 3, 127, 3, 128, 3, 128, 5, 128, 3695, 10, 128, 3, 129, 3,
	129, 3, 129, 3, 129, 5, 129, 3701, 10, 129, 3, 129, 3, 129, 3, 129, 3,
	129, 3, 129, 5, 129, 3708, 10, 129, 3, 130, 3, 130, 3, 130, 5, 130, 3713,
	10, 130, 3, 131, 3, 131, 3, 131, 3, 131, 3, 131, 7, 131, 3720, 10, 131,
	12, 131, 14, 131, 3723, 11, 131, 5, 131, 3725, 10, 131, 3, 132, 3, 132,
	5, 132, 3729, 10, 132, 3, 133, 3, 133, 5, 133, 3733, 10, 133, 3, 133, 3,
	133, 5, 133, 3737, 10, 133, 3, 133, 5, 133, 3740, 10, 133, 3, 133, 5, 133,
	3743, 10, 133, 3, 133, 5, 133, 3746, 10, 133, 3, 134, 3, 134, 5, 134, 3750,
	10, 134, 3, 134, 3, 134, 5, 134, 3754, 10, 134, 3, 134, 5, 134, 3757, 10,
	134, 3, 134, 5, 134, 3760, 10, 134, 3, 134, 5, 134, 3763, 10, 134, 3, 135,
	3, 135, 3, 135, 3, 136, 3, 136, 5, 136, 3770, 10, 136, 3, 136, 3, 136,
	5, 136, 3774, 10, 136, 3, 136, 3, 136, 3, 137, 3, 137, 3, 137, 3, 137,
	3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 7, 138, 3787, 10, 138, 12, 138,
	14, 138, 3790, 11, 138, 3, 139, 3, 139, 3, 139, 3, 140, 3, 140, 3, 140,
	3, 140, 3, 140, 3, 141, 3, 141, 5, 141, 3802, 10, 141, 3, 141, 3, 141,
	3, 141, 3, 141, 7, 141, 3808, 10, 141, 12, 141, 14, 141, 3811, 11, 141,
	3, 142, 3, 142, 3, 142, 3, 142, 3, 142, 3, 142, 3, 142, 5, 142, 3820, 10,
	142, 3, 143, 3, 143, 5, 143, 3824, 10, 143, 3, 143, 5, 143, 3827, 10, 143,
	3, 143, 3, 143, 3, 144, 3, 144, 5, 144, 3833, 10, 144, 3, 144, 5, 144,
	3836, 10, 144, 3, 144, 5, 144, 3839, 10, 144, 3, 145, 3, 145, 3, 145, 3,
	145, 3, 145, 3, 145, 3, 145, 5, 145, 3848, 10, 145, 3, 146, 3, 146, 3,
	146, 3, 146, 3, 146, 3, 146, 3, 146, 5, 146, 3857, 10, 146, 3, 147, 3,
	147, 3, 147, 3, 147, 3, 147, 3, 147, 7, 147, 3865, 10, 147, 12, 147, 14,
	147, 3868, 11, 147, 3, 147, 5, 147, 3871, 10, 147, 3, 148, 3, 148, 3, 148,
	3, 148, 3, 148, 3, 148, 7, 148, 3879, 10, 148, 12, 148, 14, 148, 3882,
	11, 148, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 5, 149,
	3891, 10, 149, 3, 150, 3, 150, 3, 150, 3, 151, 3, 151, 3, 151, 5, 151,
	3899, 10, 151, 3, 151, 5, 151, 3902, 10, 151, 3, 152, 3, 152, 3, 152, 3,
	152, 3, 152, 7, 152, 3909, 10, 152, 12, 152, 14, 152, 3912, 11, 152, 5,
	152, 3914, 10, 152, 3, 152, 3, 152, 5, 152, 3918, 10, 152, 3, 152, 7, 152,
	3921, 10, 152, 12, 152, 14, 152, 3924, 11, 152, 3, 152, 5, 152, 3927, 10,
	152, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 7, 153, 3934, 10, 153, 12,
	153, 14, 153, 3937, 11, 153, 5, 153, 3939, 10, 153, 3, 154, 3, 154, 3,
	154, 3, 155, 3, 155, 3, 155, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 3,
	156, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 3,
	156, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 7, 156, 3968, 10,
	156, 12, 156, 14, 156, 3971, 11, 156, 5, 156, 3973, 10, 156, 3, 156, 5,
	156, 3976, 10, 156, 3, 157, 3, 157, 3, 158, 3, 158, 3, 159, 3, 159, 3,
	160, 3, 160, 3, 160, 3, 160, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3,
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3,
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3,
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3,
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3,
	161, 7, 161, 4030, 10, 161, 12, 161, 14, 161, 4033, 11, 161, 3, 161, 3,
	161, 5, 161, 4037, 10, 161, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 3,
	162, 3, 163, 3, 163, 3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 3,
	164, 3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 3,
	164, 3, 164, 3, 164, 5, 164, 4065, 10, 164, 3, 165, 3, 165, 3, 165, 3,
	165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 5,
	165, 4079, 10, 165, 3, 166, 3, 166, 3, 166, 7, 166, 4084, 10, 166, 12,
	166, 14, 166, 4087, 11, 166, 3, 166, 5, 166, 4090, 10, 166, 3, 167, 3,
	167, 3, 167, 3, 167, 5, 167, 4096, 10, 167, 3, 168, 3, 168, 3, 168, 3,
	168, 3, 168, 3, 168, 5, 168, 4104, 10, 168, 5, 168, 4106, 10, 168, 3, 169,
	3, 169, 3, 169, 3, 169, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 5, 170,
	4117, 10, 170, 3, 171, 3, 171, 3, 171, 3, 171, 3, 172, 3, 172, 3, 172,
	3, 172, 5, 172, 4127, 10, 172, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173,
	5, 173, 4134, 10, 173, 3, 174, 3, 174, 3, 174, 3, 174, 5, 174, 4140, 10,
	174, 3, 175, 3, 175, 3, 175, 3, 175, 3, 176, 3, 176, 5, 176, 4148, 10,
	176, 3, 177, 3, 177, 3, 177, 5, 177, 4153, 10, 177, 3, 177, 3, 177, 3,
	177, 3, 177, 7, 177, 4159, 10, 177, 12, 177, 14, 177, 4162, 11, 177, 3,
	177, 3, 177, 3, 177, 7, 177, 4167, 10, 177, 12, 177, 14, 177, 4170, 11,
	177, 3, 177, 3, 177, 3, 177, 7, 177, 4175, 10, 177, 12, 177, 14, 177, 4178,
	11, 177, 3, 177, 3, 177, 3, 177, 7, 177, 4183, 10, 177, 12, 177, 14, 177,
	4186, 11, 177, 3, 177, 7, 177, 4189, 10, 177, 12, 177, 14, 177, 4192, 11,
	177, 5, 177, 4194, 10, 177, 3, 177, 3, 177, 5, 177, 4198, 10, 177, 3, 178,
	3, 178, 3, 178, 5, 178, 4203, 10, 178, 3, 178, 6, 178, 4206, 10, 178, 13,
	178, 14, 178, 4207, 3, 178, 3, 178, 6, 178, 4212, 10, 178, 13, 178, 14,
	178, 4213, 5, 178, 4216, 10, 178, 3, 178, 3, 178, 3, 178, 3, 179, 3, 179,
	3, 179, 3, 179, 6, 179, 4225, 10, 179, 13, 179, 14, 179, 4226, 3, 179,
	7, 179, 4230, 10, 179, 12, 179, 14, 179, 4233, 11, 179, 3, 179, 3, 179,
	6, 179, 4237, 10, 179, 13, 179, 14, 179, 4238, 5, 179, 4241, 10, 179, 3,
	179, 3, 179, 3, 179, 3, 180, 3, 180, 3, 180, 3, 181, 3, 181, 3, 181, 3,
	182, 3, 182, 3, 182, 5, 182, 4255, 10, 182, 3, 182, 3, 182, 6, 182, 4259,
	10, 182, 13, 182, 14, 182, 4260, 3, 182, 3, 182, 3, 182, 5, 182, 4266,
	10, 182, 3, 183, 3, 183, 3, 183, 5, 183, 4271, 10, 183, 3, 183, 3, 183,
	6, 183, 4275, 10, 183, 13, 183, 14, 183, 4276, 3, 183, 3, 183, 3, 183,
	3, 183, 3, 183, 5, 183, 4284, 10, 183, 3, 184, 3, 184, 3, 184, 3, 185,
	3, 185, 3, 185, 5, 185, 4292, 10, 185, 3, 185, 3, 185, 3, 185, 3, 185,
	6, 185, 4298, 10, 185, 13, 185, 14, 185, 4299, 3, 185, 3, 185, 3, 185,
	5, 185, 4305, 10, 185, 3, 186, 3, 186, 3, 186, 3, 186, 5, 186, 4311, 10,
	186, 3, 186, 5, 186, 4314, 10, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3,
	186, 3, 186, 5, 186, 4322, 10, 186, 3, 187, 3, 187, 3, 187, 3, 187, 3,
	187, 5, 187, 4329, 10, 187, 3, 188, 3, 188, 3, 188, 3, 188, 3, 188, 3,
	188, 3, 188, 5, 188, 4338, 10, 188, 3, 188, 5, 188, 4341, 10, 188, 3, 189,
	3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 3, 190, 3, 190, 3, 190, 3, 190,
	3, 190, 3, 190, 3, 190, 7, 190, 4356, 10, 190, 12, 190, 14, 190, 4359,
	11, 190, 3, 190, 3, 190, 3, 191, 3, 191, 3, 191, 5, 191, 4366, 10, 191,
	3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 5, 191, 4374, 10, 191,
	3, 192, 3, 192, 5, 192, 4378, 10, 192, 3, 192, 3, 192, 3, 193, 3, 193,
	3, 193, 5, 193, 4385, 10, 193, 3, 193, 3, 193, 6, 193, 4389, 10, 193, 13,
	193, 14, 193, 4390, 3, 194, 3, 194, 3, 194, 3, 194, 6, 194, 4397, 10, 194,
	13, 194, 14, 194, 4398, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 7, 195,
	4406, 10, 195, 12, 195, 14, 195, 4409, 11, 195, 3, 195, 3, 195, 3, 195,
	5, 195, 4414, 10, 195, 3, 195, 3, 195, 3, 195, 7, 195, 4419, 10, 195, 12,
	195, 14, 195, 4422, 11, 195, 3, 195, 3, 195, 3, 195, 3, 195, 5, 195, 4428,
	10, 195, 3, 195, 7, 195, 4431, 10, 195, 12, 195, 14, 195, 4434, 11, 195,
	5, 195, 4436, 10, 195, 5, 195, 4438, 10, 195, 3, 195, 3, 195, 6, 195, 4442,
	10, 195, 13, 195, 14, 195, 4443, 5, 195, 4446, 10, 195, 3, 195, 3, 195,
	7, 195, 4450, 10, 195, 12, 195, 14, 195, 4453, 11, 195, 5, 195, 4455, 10,
	195, 3, 196, 3, 196, 3, 196, 3, 196, 3, 196, 7, 196, 4462, 10, 196, 12,
	196, 14, 196, 4465, 11, 196, 3, 196, 3, 196, 3, 196, 5, 196, 4470, 10,
	196, 3, 196, 3, 196, 3, 196, 7, 196, 4475, 10, 196, 12, 196, 14, 196, 4478,
	11, 196, 3, 196, 3, 196, 3, 196, 3, 196, 5, 196, 4484, 10, 196, 3, 196,
	7, 196, 4487, 10, 196, 12, 196, 14, 196, 4490, 11, 196, 5, 196, 4492, 10,
	196, 5, 196, 4494, 10, 196, 3, 196, 3, 196, 6, 196, 4498, 10, 196, 13,
	196, 14, 196, 4499, 5, 196, 4502, 10, 196, 3, 196, 3, 196, 7, 196, 4506,
	10, 196, 12, 196, 14, 196, 4509, 11, 196, 5, 196, 4511, 10, 196, 3, 197,
	3, 197, 3, 197, 5, 197, 4516, 10, 197, 3, 197, 3, 197, 3, 197, 7, 197,
	4521, 10, 197, 12, 197, 14, 197, 4524, 11, 197, 3, 198, 3, 198, 3, 198,
	3, 198, 7, 198, 4530, 10, 198, 12, 198, 14, 198, 4533, 11, 198, 3, 198,
	3, 198, 5, 198, 4537, 10, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198,
	7, 198, 4544, 10, 198, 12, 198, 14, 198, 4547, 11, 198, 3, 198, 3, 198,
	3, 198, 3, 198, 5, 198, 4553, 10, 198, 3, 198, 7, 198, 4556, 10, 198, 12,
	198, 14, 198, 4559, 11, 198, 5, 198, 4561, 10, 198, 5, 198, 4563, 10, 198,
	3, 198, 3, 198, 3, 198, 3, 198, 7, 198, 4569, 10, 198, 12, 198, 14, 198,
	4572, 11, 198, 5, 198, 4574, 10, 198, 3, 199, 3, 199, 3, 199, 3, 199, 3,
	199, 3, 199, 3, 199, 3, 199, 7, 199, 4584, 10, 199, 12, 199, 14, 199, 4587,
	11, 199, 3, 199, 3, 199, 3, 199, 5, 199, 4592, 10, 199, 3, 200, 3, 200,
	3, 200, 3, 200, 3, 200, 7, 200, 4599, 10, 200, 12, 200, 14, 200, 4602,
	11, 200, 3, 201, 3, 201, 3, 201, 3, 201, 7, 201, 4608, 10, 201, 12, 201,
	14, 201, 4611, 11, 201, 3, 201, 3, 201, 5, 201, 4615, 10, 201, 3, 201,
	3, 201, 3, 201, 3, 201, 3, 201, 7, 201, 4622, 10, 201, 12, 201, 14, 201,
	4625, 11, 201, 3, 201, 3, 201, 3, 201, 5, 201, 4630, 10, 201, 3, 201, 3,
	201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 7, 201, 4639, 10, 201, 12,
	201, 14, 201, 4642, 11, 201, 5, 201, 4644, 10, 201, 3, 202, 3, 202, 3,
	202, 3, 202, 3, 202, 3, 202, 3, 202, 3, 202, 7, 202, 4654, 10, 202, 12,
	202, 14, 202, 4657, 11, 202, 3, 203, 3, 203, 3, 203, 3, 203, 5, 203, 4663,
	10, 203, 3, 203, 3, 203, 3, 203, 5, 203, 4668, 10, 203, 3, 204, 3, 204,
	3, 204, 3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 3, 205,
	3, 205, 3, 205, 5, 205, 4683, 10, 205, 3, 205, 3, 205, 3, 205, 3, 205,
	3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 5, 205, 4694, 10, 205, 3, 205,
	5, 205, 4697, 10, 205, 3, 206, 3, 206, 3, 206, 3, 206, 3, 206, 3, 206,
	3, 206, 3, 206, 5, 206, 4707, 10, 206, 3, 207, 3, 207, 3, 207, 3, 207,
	3, 207, 3, 207, 3, 207, 3, 207, 5, 207, 4717, 10, 207, 3, 208, 3, 208,
	3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 5, 208, 4727, 10, 208,
	3, 209, 3, 209, 3, 209, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 5, 210,
	4737, 10, 210, 3, 211, 3, 211, 5, 211, 4741, 10, 211, 3, 211, 3, 211, 5,
	211, 4745, 10, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3,
	211, 3, 211, 5, 211, 4755, 10, 211, 3, 211, 3, 211, 3, 211, 5, 211, 4760,
	10, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211,
	3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211,
	3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211,
	3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211,
	3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211,
	3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211,
	3, 211, 3, 211, 3, 211, 5, 211, 4818, 10, 211, 3, 212, 3, 212, 3, 212,
	3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212,
	3, 212, 3, 212, 3, 212, 3, 212, 5, 212, 4836, 10, 212, 3, 213, 3, 213,
	3, 213, 3, 213, 3, 214, 3, 214, 5, 214, 4844, 10, 214, 3, 214, 3, 214,
	3, 214, 3, 215, 3, 215, 3, 215, 3, 215, 7, 215, 4853, 10, 215, 12, 215,
	14, 215, 4856, 11, 215, 3, 216, 3, 216, 3, 216, 3, 216, 5, 216, 4862, 10,
	216, 3, 217, 3, 217, 5, 217, 4866, 10, 217, 3, 217, 3, 217, 3, 217, 3,
	218, 3, 218, 5, 218, 4873, 10, 218, 3, 218, 3, 218, 3, 218, 5, 218, 4878,
	10, 218, 3, 218, 5, 218, 4881, 10, 218, 3, 218, 5, 218, 4884, 10, 218,
	3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 3, 219, 5, 219, 4893, 10,
	219, 3, 220, 3, 220, 5, 220, 4897, 10, 220, 3, 220, 3, 220, 3, 220, 3,
	220, 3, 220, 3, 220, 3, 220, 3, 221, 3, 221, 3, 221, 3, 221, 3, 221, 3,
	221, 3, 222, 3, 222, 3, 222, 3, 222, 3, 223, 3, 223, 3, 223, 3, 223, 3,
	223, 3, 223, 3, 223, 3, 223, 3, 223, 7, 223, 4925, 10, 223, 12, 223, 14,
	223, 4928, 11, 223, 3, 223, 3, 223, 3, 223, 3, 223, 5, 223, 4934, 10, 223,
	3, 223, 3, 223, 5, 223, 4938, 10, 223, 3, 223, 3, 223, 3, 223, 3, 223,
	3, 223, 5, 223, 4945, 10, 223, 3, 223, 5, 223, 4948, 10, 223, 3, 223, 3,
	223, 3, 223, 3, 223, 3, 223, 3, 223, 3, 223, 3, 223, 3, 223, 3, 223, 3,
	223, 3, 223, 7, 223, 4962, 10, 223, 12, 223, 14, 223, 4965, 11, 223, 5,
	223, 4967, 10, 223, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3,
	224, 3, 224, 5, 224, 4977, 10, 224, 3, 224, 3, 224, 5, 224, 4981, 10, 224,
	3, 224, 3, 224, 3, 224, 3, 224, 5, 224, 4987, 10, 224, 3, 224, 5, 224,
	4990, 10, 224, 3, 224, 3, 224, 3, 224, 5, 224, 4995, 10, 224, 3, 224, 3,
	224, 5, 224, 4999, 10, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 5,
	224, 5006, 10, 224, 3, 224, 5, 224, 5009, 10, 224, 3, 224, 3, 224, 3, 224,
	3, 224, 5, 224, 5015, 10, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224,
	3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224,
	3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 5, 224,
	5039, 10, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224,
	3, 224, 3, 224, 3, 224, 3, 224, 5, 224, 5052, 10, 224, 3, 224, 5, 224,
	5055, 10, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224,
	3, 224, 5, 224, 5065, 10, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224,
	3, 224, 5, 224, 5073, 10, 224, 3, 224, 3, 224, 5, 224, 5077, 10, 224, 3,
	224, 3, 224, 3, 224, 3, 224, 3, 224, 5, 224, 5084, 10, 224, 3, 224, 5,
	224, 5087, 10, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 7, 224, 5094,
	10, 224, 12, 224, 14, 224, 5097, 11, 224, 3, 224, 3, 224, 3, 224, 5, 224,
	5102, 10, 224, 3, 224, 3, 224, 3, 224, 3, 224, 5, 224, 5108, 10, 224, 3,
	224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 5, 224, 5118,
	10, 224, 5, 224, 5120, 10, 224, 3, 225, 3, 225, 3, 225, 3, 225, 5, 225,
	5126, 10, 225, 3, 225, 5, 225, 5129, 10, 225, 3, 225, 5, 225, 5132, 10,
	225, 3, 226, 3, 226, 3, 226, 3, 226, 3, 226, 3, 226, 3, 226, 3, 226, 3,
	226, 3, 226, 5, 226, 5144, 10, 226, 3, 226, 5, 226, 5147, 10, 226, 3, 227,
	3, 227, 3, 227, 3, 227, 5, 227, 5153, 10, 227, 3, 228, 5, 228, 5156, 10,
	228, 3, 228, 3, 228, 3, 228, 3, 228, 3, 228, 3, 228, 5, 228, 5164, 10,
	228, 3, 228, 3, 228, 3, 228, 3, 228, 3, 228, 3, 228, 5, 228, 5172, 10,
	228, 3, 229, 3, 229, 3, 229, 3, 229, 5, 229, 5178, 10, 229, 3, 229, 3,
	229, 5, 229, 5182, 10, 229, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3,
	230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 5, 230, 5196, 10,
	230, 3, 231, 3, 231, 3, 231, 3, 232, 3, 232, 3, 232, 3, 232, 3, 232, 7,
	232, 5206, 10, 232, 12, 232, 14, 232, 5209, 11, 232, 3, 232, 3, 232, 3,
	232, 3, 232, 5, 232, 5215, 10, 232, 3, 232, 5, 232, 5218, 10, 232, 3, 232,
	3, 232, 3, 232, 3, 233, 3, 233, 5, 233, 5225, 10, 233, 3, 233, 3, 233,
	3, 233, 7, 233, 5230, 10, 233, 12, 233, 14, 233, 5233, 11, 233, 3, 234,
	3, 234, 5, 234, 5237, 10, 234, 3, 234, 6, 234, 5240, 10, 234, 13, 234,
	14, 234, 5241, 3, 235, 3, 235, 3, 235, 3, 235, 3, 235, 3, 235, 3, 235,
	7, 235, 5251, 10, 235, 12, 235, 14, 235, 5254, 11, 235, 3, 236, 3, 236,
	3, 236, 3, 236, 3, 237, 3, 237, 3, 238, 3, 238, 5, 238, 5264, 10, 238,
	3, 238, 3, 238, 3, 238, 3, 238, 5, 238, 5270, 10, 238, 3, 239, 3, 239,
	3, 239, 5, 239, 5275, 10, 239, 3, 239, 3, 239, 3, 239, 3, 239, 3, 239,
	3, 239, 3, 239, 3, 239, 3, 239, 3, 239, 3, 239, 5, 239, 5288, 10, 239,
	5, 239, 5290, 10, 239, 3, 239, 3, 239, 3, 239, 5, 239, 5295, 10, 239, 3,
	239, 3, 239, 3, 239, 5, 239, 5300, 10, 239, 5, 239, 5302, 10, 239, 3, 240,
	3, 240, 3, 240, 3, 240, 3, 240, 5, 240, 5309, 10, 240, 3, 241, 3, 241,
	3, 241, 3, 241, 3, 241, 5, 241, 5316, 10, 241, 3, 241, 5, 241, 5319, 10,
	241, 3, 241, 5, 241, 5322, 10, 241, 3, 241, 3, 241, 3, 241, 3, 241, 5,
	241, 5328, 10, 241, 3, 241, 3, 241, 5, 241, 5332, 10, 241, 3, 242, 3, 242,
	3, 242, 3, 242, 5, 242, 5338, 10, 242, 3, 243, 3, 243, 3, 243, 3, 243,
	5, 243, 5344, 10, 243, 3, 243, 3, 243, 3, 244, 3, 244, 3, 244, 3, 245,
	3, 245, 3, 245, 3, 246, 3, 246, 3, 246, 5, 246, 5357, 10, 246, 3, 246,
	3, 246, 3, 246, 5, 246, 5362, 10, 246, 3, 246, 3, 246, 3, 246, 3, 246,
	7, 246, 5368, 10, 246, 12, 246, 14, 246, 5371, 11, 246, 5, 246, 5373, 10,
	246, 3, 247, 3, 247, 3, 247, 5, 247, 5378, 10, 247, 3, 247, 3, 247, 3,
	247, 5, 247, 5383, 10, 247, 3, 247, 3, 247, 3, 247, 3, 247, 7, 247, 5389,
	10, 247, 12, 247, 14, 247, 5392, 11, 247, 5, 247, 5394, 10, 247, 3, 248,
	3, 248, 3, 248, 3, 248, 3, 248, 3, 248, 5, 248, 5402, 10, 248, 3, 249,
	3, 249, 5, 249, 5406, 10, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249,
	3, 249, 3, 249, 3, 249, 3, 249, 7, 249, 5417, 10, 249, 12, 249, 14, 249,
	5420, 11, 249, 3, 249, 3, 249, 3, 249, 5, 249, 5425, 10, 249, 3, 249, 3,
	249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 7, 249, 5435, 10,
	249, 12, 249, 14, 249, 5438, 11, 249, 5, 249, 5440, 10, 249, 3, 250, 3,
	250, 3, 251, 3, 251, 3, 251, 3, 251, 3, 251, 5, 251, 5449, 10, 251, 3,
	251, 3, 251, 3, 251, 5, 251, 5454, 10, 251, 3, 252, 3, 252, 3, 252, 3,
	252, 5, 252, 5460, 10, 252, 3, 253, 3, 253, 3, 254, 3, 254, 3, 254, 5,
	254, 5467, 10, 254, 5, 254, 5469, 10, 254, 3, 254, 3, 254, 3, 254, 5, 254,
	5474, 10, 254, 5, 254, 5476, 10, 254, 3, 255, 3, 255, 5, 255, 5480, 10,
	255, 3, 255, 3, 255, 3, 255, 3, 255, 5, 255, 5486, 10, 255, 3, 255, 5,
	255, 5489, 10, 255, 3, 256, 3, 256, 3, 257, 3, 257, 3, 258, 3, 258, 3,
	258, 3, 258, 5, 258, 5499, 10, 258, 3, 259, 3, 259, 5, 259, 5503, 10, 259,
	3, 260, 3, 260, 3, 261, 3, 261, 3, 261, 3, 261, 3, 261, 3, 261, 3, 261,
	3, 261, 3, 261, 3, 261, 3, 261, 3, 261, 3, 261, 3, 261, 6, 261, 5521, 10,
	261, 13, 261, 14, 261, 5522, 3, 262, 3, 262, 3, 262, 3, 262, 3, 262, 5,
	262, 5530, 10, 262, 5, 262, 5532, 10, 262, 3, 263, 3, 263, 3, 263, 6, 263,
	5537, 10, 263, 13, 263, 14, 263, 5538, 5, 263, 5541, 10, 263, 3, 264, 3,
	264, 5, 264, 5545, 10, 264, 3, 265, 3, 265, 3, 265, 5, 265, 5550, 10, 265,
	3, 266, 3, 266, 3, 266, 3, 266, 3, 266, 3, 266, 3, 266, 3, 266, 3, 266,
	5, 266, 5561, 10, 266, 3, 267, 3, 267, 3, 267, 5, 267, 5566, 10, 267, 3,
	268, 3, 268, 3, 269, 3, 269, 5, 269, 5572, 10, 269, 3, 270, 5, 270, 5575,
	10, 270, 3, 270, 3, 270, 5, 270, 5579, 10, 270, 3, 270, 6, 270, 5582, 10,
	270, 13, 270, 14, 270, 5583, 3, 270, 5, 270, 5587, 10, 270, 3, 270, 3,
	270, 5, 270, 5591, 10, 270, 3, 270, 3, 270, 5, 270, 5595, 10, 270, 5, 270,
	5597, 10, 270, 3, 271, 3, 271, 3, 272, 5, 272, 5602, 10, 272, 3, 272, 3,
	272, 3, 273, 5, 273, 5607, 10, 273, 3, 273, 3, 273, 3, 274, 3, 274, 3,
	274, 3, 274, 3, 274, 3, 274, 3, 274, 3, 274, 3, 274, 5, 274, 5620, 10,
	274, 3, 274, 5, 274, 5623, 10, 274, 3, 275, 3, 275, 5, 275, 5627, 10, 275,
	3, 275, 5, 275, 5630, 10, 275, 3, 275, 5, 275, 5633, 10, 275, 3, 275, 3,
	275, 3, 275, 5, 275, 5638, 10, 275, 3, 275, 5, 275, 5641, 10, 275, 3, 275,
	3, 275, 3, 275, 5, 275, 5646, 10, 275, 3, 275, 3, 275, 3, 275, 5, 275,
	5651, 10, 275, 3, 275, 5, 275, 5654, 10, 275, 3, 275, 3, 275, 3, 275, 5,
	275, 5659, 10, 275, 3, 275, 5, 275, 5662, 10, 275, 3, 275, 3, 275, 3, 275,
	3, 275, 5, 275, 5668, 10, 275, 3, 275, 5, 275, 5671, 10, 275, 3, 275, 3,
	275, 5, 275, 5675, 10, 275, 3, 275, 5, 275, 5678, 10, 275, 3, 275, 5, 275,
	5681, 10, 275, 3, 275, 3, 275, 5, 275, 5685, 10, 275, 3, 275, 5, 275, 5688,
	10, 275, 3, 275, 5, 275, 5691, 10, 275, 3, 275, 3, 275, 5, 275, 5695, 10,
	275, 3, 275, 5, 275, 5698, 10, 275, 3, 275, 5, 275, 5701, 10, 275, 3, 275,
	5, 275, 5704, 10, 275, 3, 275, 3, 275, 5, 275, 5708, 10, 275, 3, 275, 5,
	275, 5711, 10, 275, 3, 275, 5, 275, 5714, 10, 275, 3, 275, 3, 275, 3, 275,
	5, 275, 5719, 10, 275, 3, 275, 3, 275, 3, 275, 5, 275, 5724, 10, 275, 3,
	275, 3, 275, 3, 275, 5, 275, 5729, 10, 275, 3, 275, 5, 275, 5732, 10, 275,
	3, 275, 3, 275, 3, 275, 5, 275, 5737, 10, 275, 3, 275, 5, 275, 5740, 10,
	275, 3, 275, 3, 275, 3, 275, 5, 275, 5745, 10, 275, 3, 275, 5, 275, 5748,
	10, 275, 3, 275, 3, 275, 5, 275, 5752, 10, 275, 3, 275, 3, 275, 5, 275,
	5756, 10, 275, 3, 276, 3, 276, 3, 276, 3, 276, 7, 276, 5762, 10, 276, 12,
	276, 14, 276, 5765, 11, 276, 3, 276, 3, 276, 3, 277, 3, 277, 5, 277, 5771,
	10, 277, 3, 277, 3, 277, 5, 277, 5775, 10, 277, 3, 277, 3, 277, 3, 277,
	5, 277, 5780, 10, 277, 3, 277, 5, 277, 5783, 10, 277, 3, 277, 3, 277, 3,
	277, 5, 277, 5788, 10, 277, 3, 277, 3, 277, 5, 277, 5792, 10, 277, 5, 277,
	5794, 10, 277, 3, 278, 3, 278, 3, 278, 3, 278, 3, 279, 3, 279, 3, 279,
	3, 279, 3, 279, 3, 279, 3, 280, 3, 280, 3, 280, 3, 280, 5, 280, 5810, 10,
	280, 3, 280, 3, 280, 3, 281, 3, 281, 3, 281, 7, 281, 5817, 10, 281, 12,
	281, 14, 281, 5820, 11, 281, 3, 282, 3, 282, 3, 282, 7, 282, 5825, 10,
	282, 12, 282, 14, 282, 5828, 11, 282, 3, 283, 3, 283, 3, 283, 3, 283, 7,
	283, 5834, 10, 283, 12, 283, 14, 283, 5837, 11, 283, 3, 283, 3, 283, 3,
	284, 3, 284, 3, 284, 7, 284, 5844, 10, 284, 12, 284, 14, 284, 5847, 11,
	284, 3, 285, 3, 285, 3, 285, 7, 285, 5852, 10, 285, 12, 285, 14, 285, 5855,
	11, 285, 3, 286, 3, 286, 3, 286, 7, 286, 5860, 10, 286, 12, 286, 14, 286,
	5863, 11, 286, 3, 287, 3, 287, 3, 287, 7, 287, 5868, 10, 287, 12, 287,
	14, 287, 5871, 11, 287, 3, 288, 3, 288, 3, 288, 7, 288, 5876, 10, 288,
	12, 288, 14, 288, 5879, 11, 288, 3, 289, 3, 289, 5, 289, 5883, 10, 289,
	3, 289, 3, 289, 3, 289, 3, 289, 3, 289, 3, 289, 5, 289, 5891, 10, 289,
	3, 289, 3, 289, 3, 289, 5, 289, 5896, 10, 289, 3, 290, 3, 290, 3, 290,
	5, 290, 5901, 10, 290, 3, 290, 5, 290, 5904, 10, 290, 3, 290, 3, 290, 3,
	290, 5, 290, 5909, 10, 290, 3, 290, 5, 290, 5912, 10, 290, 3, 291, 3, 291,
	5, 291, 5916, 10, 291, 3, 292, 3, 292, 3, 292, 3, 293, 3, 293, 3, 293,
	3, 293, 3, 294, 3, 294, 3, 294, 3, 294, 3, 294, 5, 294, 5930, 10, 294,
	3, 294, 3, 294, 3, 294, 3, 294, 3, 294, 5, 294, 5937, 10, 294, 3, 294,
	3, 294, 3, 294, 5, 294, 5942, 10, 294, 3, 295, 3, 295, 3, 295, 5, 295,
	5947, 10, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295,
	3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295,
	3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295,
	3, 295, 3, 295, 3, 295, 3, 295, 6, 295, 5978, 10, 295, 13, 295, 14, 295,
	5979, 3, 295, 3, 295, 5, 295, 5984, 10, 295, 3, 295, 3, 295, 3, 295, 3,
	295, 6, 295, 5990, 10, 295, 13, 295, 14, 295, 5991, 3, 295, 3, 295, 5,
	295, 5996, 10, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3,
	295, 5, 295, 6005, 10, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3,
	295, 5, 295, 6013, 10, 295, 3, 295, 3, 295, 3, 295, 5, 295, 6018, 10, 295,
	3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 5, 295, 6026, 10, 295,
	3, 295, 3, 295, 3, 295, 5, 295, 6031, 10, 295, 3, 295, 3, 295, 3, 295,
	5, 295, 6036, 10, 295, 5, 295, 6038, 10, 295, 3, 295, 3, 295, 3, 295, 3,
	295, 3, 295, 3, 295, 3, 295, 5, 295, 6047, 10, 295, 3, 295, 3, 295, 3,
	295, 5, 295, 6052, 10, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3,
	295, 5, 295, 6060, 10, 295, 3, 295, 3, 295, 3, 295, 5, 295, 6065, 10, 295,
	3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 5, 295, 6073, 10, 295,
	3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 5, 295, 6081, 10, 295,
	3, 295, 5, 295, 6084, 10, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295,
	3, 295, 3, 295, 3, 295, 5, 295, 6094, 10, 295, 3, 295, 3, 295, 3, 295,
	3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295,
	3, 295, 3, 295, 3, 295, 3, 295, 5, 295, 6112, 10, 295, 3, 295, 3, 295,
	3, 295, 3, 295, 5, 295, 6118, 10, 295, 3, 295, 3, 295, 5, 295, 6122, 10,
	295, 3, 295, 3, 295, 3, 295, 3, 295, 5, 295, 6128, 10, 295, 3, 295, 3,
	295, 5, 295, 6132, 10, 295, 3, 295, 3, 295, 5, 295, 6136, 10, 295, 3, 296,
	3, 296, 3, 296, 3, 296, 3, 296, 3, 297, 3, 297, 3, 297, 3, 297, 7, 297,
	6147, 10, 297, 12, 297, 14, 297, 6150, 11, 297, 3, 297, 3, 297, 3, 297,
	3, 297, 3, 297, 5, 297, 6157, 10, 297, 3, 298, 3, 298, 5, 298, 6161, 10,
	298, 3, 299, 3, 299, 3, 299, 5, 299, 6166, 10, 299, 3, 299, 3, 299, 3,
	299, 3, 299, 3, 299, 3, 299, 3, 299, 5, 299, 6175, 10, 299, 3, 299, 5,
	299, 6178, 10, 299, 3, 299, 3, 299, 3, 299, 3, 299, 3, 299, 3, 299, 3,
	299, 3, 299, 3, 299, 3, 299, 5, 299, 6190, 10, 299, 3, 299, 3, 299, 3,
	299, 3, 299, 3, 299, 3, 299, 5, 299, 6198, 10, 299, 3, 299, 3, 299, 3,
	299, 3, 299, 3, 299, 3, 299, 7, 299, 6206, 10, 299, 12, 299, 14, 299, 6209,
	11, 299, 5, 299, 6211, 10, 299, 3, 299, 3, 299, 5, 299, 6215, 10, 299,
	3, 299, 3, 299, 5, 299, 6219, 10, 299, 3, 300, 3, 300, 3, 300, 3, 300,
	3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300,
	3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300,
	3, 300, 5, 300, 6244, 10, 300, 3, 301, 3, 301, 3, 301, 3, 301, 3, 301,
	3, 302, 3, 302, 3, 302, 3, 302, 5, 302, 6255, 10, 302, 3, 302, 3, 302,
	3, 302, 3, 302, 3, 302, 5, 302, 6262, 10, 302, 7, 302, 6264, 10, 302, 12,
	302, 14, 302, 6267, 11, 302, 3, 303, 3, 303, 3, 303, 3, 303, 5, 303, 6273,
	10, 303, 3, 304, 3, 304, 3, 304, 3, 304, 3, 304, 3, 304, 5, 304, 6281,
	10, 304, 3, 304, 3, 304, 3, 304, 5, 304, 6286, 10, 304, 3, 304, 3, 304,
	3, 304, 3, 304, 7, 304, 6292, 10, 304, 12, 304, 14, 304, 6295, 11, 304,
	3, 305, 3, 305, 3, 305, 5, 305, 6300, 10, 305, 3, 305, 3, 305, 3, 305,
	3, 305, 3, 305, 3, 305, 3, 305, 3, 305, 5, 305, 6310, 10, 305, 3, 305,
	3, 305, 3, 305, 3, 305, 3, 305, 3, 305, 3, 305, 3, 305, 3, 305, 3, 305,
	3, 305, 5, 305, 6323, 10, 305, 3, 305, 3, 305, 3, 305, 3, 305, 5, 305,
	6329, 10, 305, 3, 305, 3, 305, 3, 305, 3, 305, 5, 305, 6335, 10, 305, 3,
	305, 3, 305, 3, 305, 3, 305, 3, 305, 3, 305, 3, 305, 3, 305, 3, 305, 3,
	305, 3, 305, 3, 305, 3, 305, 3, 305, 5, 305, 6351, 10, 305, 3, 305, 3,
	305, 3, 305, 3, 305, 5, 305, 6357, 10, 305, 3, 305, 3, 305, 3, 305, 3,
	305, 3, 305, 3, 305, 3, 305, 7, 305, 6366, 10, 305, 12, 305, 14, 305, 6369,
	11, 305, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306,
	3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 7, 306, 6385, 10, 306,
	12, 306, 14, 306, 6388, 11, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306,
	3, 306, 3, 306, 6, 306, 6397, 10, 306, 13, 306, 14, 306, 6398, 3, 306,
	3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306,
	3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 5, 306, 6416, 10, 306, 3, 306,
	3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306,
	3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 7, 306, 6433, 10, 306, 12, 306,
	14, 306, 6436, 11, 306, 3, 307, 3, 307, 3, 308, 3, 308, 3, 308, 3, 308,
	3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308,
	3, 308, 5, 308, 6454, 10, 308, 3, 309, 3, 309, 3, 309, 3, 309, 3, 309,
	3, 309, 3, 309, 5, 309, 6463, 10, 309, 3, 310, 3, 310, 3, 310, 3, 310,
	3, 310, 3, 310, 3, 310, 5, 310, 6472, 10, 310, 3, 311, 3, 311, 3, 312,
	3, 312, 3, 312, 3, 312, 3, 312, 5, 312, 6481, 10, 312, 3, 313, 3, 313,
	3, 314, 3, 314, 3, 315, 3, 315, 3, 316, 3, 316, 3, 317, 3, 317, 3, 318,
	3, 318, 3, 319, 3, 319, 3, 319, 2, 5, 606, 608, 610, 320, 2, 4, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46,
	48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82,
	84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114,
	116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144,
	146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174,
	176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204,
	206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234,
	236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264,
	266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294,
	296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324,
	326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354,
	356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384,
	386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414,
	416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444,
	446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474,
	476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504,
	506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534,
	536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564,
	566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594,
	596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624,
	626, 628, 630, 632, 634, 636, 2, 130, 4, 2, 37, 37, 139, 139, 4, 2, 486,
	486, 492, 492, 5, 2, 65, 65, 146, 146, 167, 167, 5, 2, 40, 40, 354, 354,
	417, 417, 6, 2, 40, 40, 386, 386, 485, 485, 557, 557, 4, 2, 476, 476, 1078,
	1078, 4, 2, 73, 73, 131, 131, 4, 2, 15, 15, 306, 306, 5, 2, 42, 42, 79,
	79, 170, 170, 4, 2, 399, 399, 510, 510, 5, 2, 468, 468, 595, 595, 602,
	602, 4, 2, 361, 361, 422, 422, 4, 2, 324, 324, 436, 436, 4, 2, 322, 322,
	408, 408, 5, 2, 74, 74, 78, 78, 116, 116, 5, 2, 40, 40, 371, 371, 397,
	397, 5, 2, 40, 40, 367, 367, 725, 725, 4, 2, 583, 583, 616, 616, 4, 2,
	75, 75, 85, 85, 5, 2, 401, 401, 501, 501, 559, 559, 4, 2, 65, 65, 146,
	146, 3, 2, 328, 329, 3, 2, 1068, 1069, 4, 2, 1078, 1078, 1086, 1086, 5,
	2, 396, 396, 431, 431, 483, 483, 4, 2, 40, 40, 1068, 1069, 9, 2, 40, 40,
	341, 341, 343, 343, 371, 371, 397, 397, 523, 523, 1086, 1086, 3, 2, 1069,
	1070, 4, 2, 7, 7, 49, 49, 4, 2, 25, 25, 29, 29, 4, 2, 421, 421, 617, 617,
	4, 2, 13, 13, 161, 161, 4, 2, 178, 178, 620, 620, 4, 2, 20, 20, 134, 134,
	5, 2, 41, 41, 71, 71, 98, 98, 4, 2, 98, 98, 345, 345, 4, 2, 336, 336, 393,
	393, 4, 2, 94, 94, 549, 549, 4, 2, 41, 41, 98, 98, 4, 2, 8, 8, 47, 47,
	4, 2, 174, 174, 613, 613, 6, 2, 396, 396, 431, 431, 482, 482, 513, 513,
	4, 2, 396, 396, 482, 482, 4, 2, 14, 14, 43, 43, 5, 2, 62, 62, 73, 73, 172,
	172, 4, 2, 33, 33, 77, 77, 4, 2, 90, 90, 137, 137, 4, 2, 8, 8, 47, 48,
	3, 2, 572, 573, 4, 2, 404, 404, 555, 555, 4, 2, 212, 212, 439, 439, 7,
	2, 99, 99, 444, 445, 447, 447, 451, 459, 525, 525, 6, 2, 441, 442, 446,
	446, 448, 449, 526, 526, 5, 2, 100, 100, 440, 440, 450, 450, 4, 2, 424,
	424, 574, 574, 4, 2, 568, 568, 570, 570, 4, 2, 316, 316, 575, 575, 4, 2,
	84, 84, 540, 540, 4, 2, 49, 49, 359, 359, 5, 2, 30, 30, 57, 57, 165, 165,
	5, 2, 121, 121, 158, 158, 402, 402, 4, 2, 96, 96, 168, 168, 4, 2, 332,
	332, 560, 560, 4, 2, 38, 38, 615, 615, 4, 2, 106, 106, 436, 436, 4, 2,
	389, 389, 519, 519, 4, 2, 158, 158, 639, 639, 6, 2, 192, 192, 194, 194,
	200, 200, 584, 584, 4, 2, 1037, 1037, 1054, 1054, 4, 2, 317, 317, 527,
	527, 4, 2, 64, 64, 74, 74, 8, 2, 121, 121, 158, 158, 163, 163, 382, 382,
	402, 402, 615, 615, 4, 2, 475, 475, 580, 580, 4, 2, 379, 379, 619, 619,
	4, 2, 121, 121, 402, 402, 5, 2, 75, 75, 86, 86, 415, 415, 5, 2, 404, 404,
	436, 436, 555, 555, 4, 2, 580, 580, 614, 614, 4, 2, 346, 346, 518, 518,
	8, 2, 212, 212, 376, 376, 378, 378, 403, 403, 524, 524, 561, 561, 4, 2,
	43, 44, 58, 58, 5, 2, 389, 389, 503, 503, 817, 817, 4, 2, 428, 428, 597,
	597, 12, 2, 331, 331, 338, 338, 348, 350, 356, 356, 469, 469, 477, 477,
	585, 585, 592, 592, 769, 769, 935, 935, 4, 2, 34, 34, 155, 155, 4, 2, 109,
	109, 927, 927, 13, 2, 331, 331, 338, 338, 348, 350, 356, 356, 469, 469,
	477, 477, 541, 541, 585, 585, 592, 592, 769, 769, 935, 935, 5, 2, 1078,
	1078, 1086, 1086, 1088, 1088, 3, 2, 1090, 1091, 5, 2, 720, 731, 1078, 1078,
	1086, 1087, 4, 2, 1068, 1070, 1079, 1079, 4, 2, 59, 59, 164, 164, 4, 2,
	107, 107, 1082, 1082, 7, 2, 24, 24, 208, 210, 217, 217, 219, 222, 480,
	480, 4, 2, 24, 24, 209, 209, 4, 2, 24, 24, 208, 208, 3, 2, 182, 193, 4,
	2, 169, 169, 558, 558, 4, 2, 197, 202, 397, 397, 8, 2, 203, 203, 214, 214,
	216, 216, 218, 218, 225, 225, 320, 321, 6, 2, 204, 207, 212, 213, 215,
	215, 318, 318, 4, 2, 142, 142, 223, 223, 4, 2, 428, 428, 736, 744, 4, 2,
	212, 212, 480, 480, 5, 2, 203, 204, 206, 206, 428, 428, 4, 2, 287, 288,
	294, 294, 4, 2, 35, 35, 285, 288, 3, 2, 297, 298, 5, 2, 17, 17, 88, 88,
	162, 162, 4, 2, 208, 208, 212, 212, 4, 2, 203, 204, 206, 206, 5, 2, 14,
	14, 43, 43, 925, 925, 5, 2, 269, 269, 275, 276, 281, 281, 5, 2, 270, 272,
	277, 280, 282, 284, 4, 2, 490, 490, 504, 504, 4, 2, 105, 105, 1057, 1057,
	5, 2, 59, 59, 164, 164, 606, 606, 4, 2, 127, 127, 138, 138, 5, 2, 8, 8,
	309, 309, 564, 564, 6, 2, 105, 105, 1049, 1049, 1051, 1051, 1057, 1058,
	3, 2, 1046, 1053, 3, 2, 680, 719, 3, 2, 732, 735, 3, 2, 639, 647, 3, 2,
	631, 638, 5, 2, 203, 207, 220, 220, 223, 223, 23, 2, 34, 34, 46, 46, 69,
	69, 109, 109, 115, 115, 155, 155, 225, 225, 269, 284, 304, 420, 422, 541,
	543, 582, 584, 615, 618, 625, 630, 630, 649, 657, 662, 663, 665, 671, 673,
	679, 725, 725, 769, 769, 935, 935, 20, 2, 37, 37, 90, 90, 137, 137, 139,
	139, 203, 205, 207, 207, 237, 268, 273, 273, 296, 296, 421, 421, 617, 617,
	631, 638, 673, 673, 736, 736, 739, 768, 770, 934, 936, 1036, 1053, 1053,
	2, 7649, 2, 639, 3, 2, 2, 2, 4, 656, 3, 2, 2, 2, 6, 676, 3, 2, 2, 2, 8,
	678, 3, 2, 2, 2, 10, 715, 3, 2, 2, 2, 12, 727, 3, 2, 2, 2, 14, 738, 3,
	2, 2, 2, 16, 755, 3, 2, 2, 2, 18, 760, 3, 2, 2, 2, 20, 772, 3, 2, 2, 2,
	22, 799, 3, 2, 2, 2, 24, 808, 3, 2, 2, 2, 26, 810, 3, 2, 2, 2, 28, 822,
	3, 2, 2, 2, 30, 852, 3, 2, 2, 2, 32, 888, 3, 2, 2, 2, 34, 939, 3, 2, 2,
	2, 36, 965, 3, 2, 2, 2, 38, 995, 3, 2, 2, 2, 40, 1092, 3, 2, 2, 2, 42,
	1094, 3, 2, 2, 2, 44, 1112, 3, 2, 2, 2, 46, 1173, 3, 2, 2, 2, 48, 1192,
	3, 2, 2, 2, 50, 1251, 3, 2, 2, 2, 52, 1253, 3, 2, 2, 2, 54, 1297, 3, 2,
	2, 2, 56, 1303, 3, 2, 2, 2, 58, 1305, 3, 2, 2, 2, 60, 1326, 3, 2, 2, 2,
	62, 1333, 3, 2, 2, 2, 64, 1335, 3, 2, 2, 2, 66, 1351, 3, 2, 2, 2, 68, 1354,
	3, 2, 2, 2, 70, 1359, 3, 2, 2, 2, 72, 1385, 3, 2, 2, 2, 74, 1401, 3, 2,
	2, 2, 76, 1403, 3, 2, 2, 2, 78, 1419, 3, 2, 2, 2, 80, 1421, 3, 2, 2, 2,
	82, 1479, 3, 2, 2, 2, 84, 1550, 3, 2, 2, 2, 86, 1552, 3, 2, 2, 2, 88, 1580,
	3, 2, 2, 2, 90, 1588, 3, 2, 2, 2, 92, 1618, 3, 2, 2, 2, 94, 1764, 3, 2,
	2, 2, 96, 1766, 3, 2, 2, 2, 98, 1769, 3, 2, 2, 2, 100, 1843, 3, 2, 2, 2,
	102, 1866, 3, 2, 2, 2, 104, 2014, 3, 2, 2, 2, 106, 2019, 3, 2, 2, 2, 108,
	2021, 3, 2, 2, 2, 110, 2031, 3, 2, 2, 2, 112, 2084, 3, 2, 2, 2, 114, 2104,
	3, 2, 2, 2, 116, 2106, 3, 2, 2, 2, 118, 2141, 3, 2, 2, 2, 120, 2150, 3,
	2, 2, 2, 122, 2157, 3, 2, 2, 2, 124, 2180, 3, 2, 2, 2, 126, 2189, 3, 2,
	2, 2, 128, 2204, 3, 2, 2, 2, 130, 2226, 3, 2, 2, 2, 132, 2246, 3, 2, 2,
	2, 134, 2644, 3, 2, 2, 2, 136, 2646, 3, 2, 2, 2, 138, 2653, 3, 2, 2, 2,
	140, 2660, 3, 2, 2, 2, 142, 2683, 3, 2, 2, 2, 144, 2691, 3, 2, 2, 2, 146,
	2698, 3, 2, 2, 2, 148, 2705, 3, 2, 2, 2, 150, 2712, 3, 2, 2, 2, 152, 2724,
	3, 2, 2, 2, 154, 2734, 3, 2, 2, 2, 156, 2741, 3, 2, 2, 2, 158, 2757, 3,
	2, 2, 2, 160, 2767, 3, 2, 2, 2, 162, 2771, 3, 2, 2, 2, 164, 2777, 3, 2,
	2, 2, 166, 2789, 3, 2, 2, 2, 168, 2791, 3, 2, 2, 2, 170, 2798, 3, 2, 2,
	2, 172, 2800, 3, 2, 2, 2, 174, 2851, 3, 2, 2, 2, 176, 2925, 3, 2, 2, 2,
	178, 2984, 3, 2, 2, 2, 180, 3072, 3, 2, 2, 2, 182, 3076, 3, 2, 2, 2, 184,
	3096, 3, 2, 2, 2, 186, 3098, 3, 2, 2, 2, 188, 3106, 3, 2, 2, 2, 190, 3114,
	3, 2, 2, 2, 192, 3116, 3, 2, 2, 2, 194, 3146, 3, 2, 2, 2, 196, 3201, 3,
	2, 2, 2, 198, 3210, 3, 2, 2, 2, 200, 3230, 3, 2, 2, 2, 202, 3242, 3, 2,
	2, 2, 204, 3246, 3, 2, 2, 2, 206, 3279, 3, 2, 2, 2, 208, 3300, 3, 2, 2,
	2, 210, 3310, 3, 2, 2, 2, 212, 3314, 3, 2, 2, 2, 214, 3339, 3, 2, 2, 2,
	216, 3381, 3, 2, 2, 2, 218, 3383, 3, 2, 2, 2, 220, 3398, 3, 2, 2, 2, 222,
	3444, 3, 2, 2, 2, 224, 3454, 3, 2, 2, 2, 226, 3464, 3, 2, 2, 2, 228, 3518,
	3, 2, 2, 2, 230, 3520, 3, 2, 2, 2, 232, 3543, 3, 2, 2, 2, 234, 3549, 3,
	2, 2, 2, 236, 3565, 3, 2, 2, 2, 238, 3569, 3, 2, 2, 2, 240, 3607, 3, 2,
	2, 2, 242, 3645, 3, 2, 2, 2, 244, 3659, 3, 2, 2, 2, 246, 3667, 3, 2, 2,
	2, 248, 3669, 3, 2, 2, 2, 250, 3675, 3, 2, 2, 2, 252, 3689, 3, 2, 2, 2,
	254, 3692, 3, 2, 2, 2, 256, 3696, 3, 2, 2, 2, 258, 3712, 3, 2, 2, 2, 260,
	3714, 3, 2, 2, 2, 262, 3726, 3, 2, 2, 2, 264, 3730, 3, 2, 2, 2, 266, 3747,
	3, 2, 2, 2, 268, 3764, 3, 2, 2, 2, 270, 3767, 3, 2, 2, 2, 272, 3777, 3,
	2, 2, 2, 274, 3781, 3, 2, 2, 2, 276, 3791, 3, 2, 2, 2, 278, 3794, 3, 2,
	2, 2, 280, 3799, 3, 2, 2, 2, 282, 3819, 3, 2, 2, 2, 284, 3821, 3, 2, 2,
	2, 286, 3838, 3, 2, 2, 2, 288, 3847, 3, 2, 2, 2, 290, 3856, 3, 2, 2, 2,
	292, 3858, 3, 2, 2, 2, 294, 3872, 3, 2, 2, 2, 296, 3883, 3, 2, 2, 2, 298,
	3892, 3, 2, 2, 2, 300, 3895, 3, 2, 2, 2, 302, 3903, 3, 2, 2, 2, 304, 3928,
	3, 2, 2, 2, 306, 3940, 3, 2, 2, 2, 308, 3943, 3, 2, 2, 2, 310, 3975, 3,
	2, 2, 2, 312, 3977, 3, 2, 2, 2, 314, 3979, 3, 2, 2, 2, 316, 3981, 3, 2,
	2, 2, 318, 3983, 3, 2, 2, 2, 320, 4036, 3, 2, 2, 2, 322, 4038, 3, 2, 2,
	2, 324, 4044, 3, 2, 2, 2, 326, 4064, 3, 2, 2, 2, 328, 4078, 3, 2, 2, 2,
	330, 4089, 3, 2, 2, 2, 332, 4091, 3, 2, 2, 2, 334, 4097, 3, 2, 2, 2, 336,
	4107, 3, 2, 2, 2, 338, 4111, 3, 2, 2, 2, 340, 4118, 3, 2, 2, 2, 342, 4122,
	3, 2, 2, 2, 344, 4128, 3, 2, 2, 2, 346, 4135, 3, 2, 2, 2, 348, 4141, 3,
	2, 2, 2, 350, 4147, 3, 2, 2, 2, 352, 4152, 3, 2, 2, 2, 354, 4199, 3, 2,
	2, 2, 356, 4220, 3, 2, 2, 2, 358, 4245, 3, 2, 2, 2, 360, 4248, 3, 2, 2,
	2, 362, 4254, 3, 2, 2, 2, 364, 4270, 3, 2, 2, 2, 366, 4285, 3, 2, 2, 2,
	368, 4291, 3, 2, 2, 2, 370, 4321, 3, 2, 2, 2, 372, 4323, 3, 2, 2, 2, 374,
	4330, 3, 2, 2, 2, 376, 4342, 3, 2, 2, 2, 378, 4348, 3, 2, 2, 2, 380, 4373,
	3, 2, 2, 2, 382, 4377, 3, 2, 2, 2, 384, 4381, 3, 2, 2, 2, 386, 4392, 3,
	2, 2, 2, 388, 4454, 3, 2, 2, 2, 390, 4510, 3, 2, 2, 2, 392, 4512, 3, 2,
	2, 2, 394, 4525, 3, 2, 2, 2, 396, 4575, 3, 2, 2, 2, 398, 4593, 3, 2, 2,
	2, 400, 4643, 3, 2, 2, 2, 402, 4645, 3, 2, 2, 2, 404, 4658, 3, 2, 2, 2,
	406, 4669, 3, 2, 2, 2, 408, 4696, 3, 2, 2, 2, 410, 4706, 3, 2, 2, 2, 412,
	4716, 3, 2, 2, 2, 414, 4718, 3, 2, 2, 2, 416, 4728, 3, 2, 2, 2, 418, 4731,
	3, 2, 2, 2, 420, 4817, 3, 2, 2, 2, 422, 4835, 3, 2, 2, 2, 424, 4837, 3,
	2, 2, 2, 426, 4841, 3, 2, 2, 2, 428, 4848, 3, 2, 2, 2, 430, 4857, 3, 2,
	2, 2, 432, 4863, 3, 2, 2, 2, 434, 4870, 3, 2, 2, 2, 436, 4892, 3, 2, 2,
	2, 438, 4894, 3, 2, 2, 2, 440, 4905, 3, 2, 2, 2, 442, 4911, 3, 2, 2, 2,
	444, 4966, 3, 2, 2, 2, 446, 5119, 3, 2, 2, 2, 448, 5131, 3, 2, 2, 2, 450,
	5146, 3, 2, 2, 2, 452, 5152, 3, 2, 2, 2, 454, 5171, 3, 2, 2, 2, 456, 5181,
	3, 2, 2, 2, 458, 5195, 3, 2, 2, 2, 460, 5197, 3, 2, 2, 2, 462, 5200, 3,
	2, 2, 2, 464, 5222, 3, 2, 2, 2, 466, 5234, 3, 2, 2, 2, 468, 5243, 3, 2,
	2, 2, 470, 5255, 3, 2, 2, 2, 472, 5259, 3, 2, 2, 2, 474, 5261, 3, 2, 2,
	2, 476, 5301, 3, 2, 2, 2, 478, 5308, 3, 2, 2, 2, 480, 5310, 3, 2, 2, 2,
	482, 5333, 3, 2, 2, 2, 484, 5339, 3, 2, 2, 2, 486, 5347, 3, 2, 2, 2, 488,
	5350, 3, 2, 2, 2, 490, 5353, 3, 2, 2, 2, 492, 5374, 3, 2, 2, 2, 494, 5395,
	3, 2, 2, 2, 496, 5403, 3, 2, 2, 2, 498, 5441, 3, 2, 2, 2, 500, 5453, 3,
	2, 2, 2, 502, 5455, 3, 2, 2, 2, 504, 5461, 3, 2, 2, 2, 506, 5475, 3, 2,
	2, 2, 508, 5479, 3, 2, 2, 2, 510, 5490, 3, 2, 2, 2, 512, 5492, 3, 2, 2,
	2, 514, 5498, 3, 2, 2, 2, 516, 5502, 3, 2, 2, 2, 518, 5504, 3, 2, 2, 2,
	520, 5506, 3, 2, 2, 2, 522, 5524, 3, 2, 2, 2, 524, 5540, 3, 2, 2, 2, 526,
	5544, 3, 2, 2, 2, 528, 5549, 3, 2, 2, 2, 530, 5560, 3, 2, 2, 2, 532, 5565,
	3, 2, 2, 2, 534, 5567, 3, 2, 2, 2, 536, 5571, 3, 2, 2, 2, 538, 5596, 3,
	2, 2, 2, 540, 5598, 3, 2, 2, 2, 542, 5601, 3, 2, 2, 2, 544, 5606, 3, 2,
	2, 2, 546, 5622, 3, 2, 2, 2, 548, 5755, 3, 2, 2, 2, 550, 5757, 3, 2, 2,
	2, 552, 5793, 3, 2, 2, 2, 554, 5795, 3, 2, 2, 2, 556, 5799, 3, 2, 2, 2,
	558, 5805, 3, 2, 2, 2, 560, 5813, 3, 2, 2, 2, 562, 5821, 3, 2, 2, 2, 564,
	5829, 3, 2, 2, 2, 566, 5840, 3, 2, 2, 2, 568, 5848, 3, 2, 2, 2, 570, 5856,
	3, 2, 2, 2, 572, 5864, 3, 2, 2, 2, 574, 5872, 3, 2, 2, 2, 576, 5890, 3,
	2, 2, 2, 578, 5911, 3, 2, 2, 2, 580, 5915, 3, 2, 2, 2, 582, 5917, 3, 2,
	2, 2, 584, 5920, 3, 2, 2, 2, 586, 5941, 3, 2, 2, 2, 588, 6135, 3, 2, 2,
	2, 590, 6137, 3, 2, 2, 2, 592, 6156, 3, 2, 2, 2, 594, 6158, 3, 2, 2, 2,
	596, 6218, 3, 2, 2, 2, 598, 6243, 3, 2, 2, 2, 600, 6245, 3, 2, 2, 2, 602,
	6254, 3, 2, 2, 2, 604, 6272, 3, 2, 2, 2, 606, 6285, 3, 2, 2, 2, 608, 6296,
	3, 2, 2, 2, 610, 6415, 3, 2, 2, 2, 612, 6437, 3, 2, 2, 2, 614, 6453, 3,
	2, 2, 2, 616, 6462, 3, 2, 2, 2, 618, 6471, 3, 2, 2, 2, 620, 6473, 3, 2,
	2, 2, 622, 6480, 3, 2, 2, 2, 624, 6482, 3, 2, 2, 2, 626, 6484, 3, 2, 2,
	2, 628, 6486, 3, 2, 2, 2, 630, 6488, 3, 2, 2, 2, 632, 6490, 3, 2, 2, 2,
	634, 6492, 3, 2, 2, 2, 636, 6494, 3, 2, 2, 2, 638, 640, 5, 4, 3, 2, 639,
	638, 3, 2, 2, 2, 639, 640, 3, 2, 2, 2, 640, 642, 3, 2, 2, 2, 641, 643,
	7, 1050, 2, 2, 642, 641, 3, 2, 2, 2, 642, 643, 3, 2, 2, 2, 643, 644, 3,
	2, 2, 2, 644, 645, 7, 2, 2, 3, 645, 3, 3, 2, 2, 2, 646, 648, 5, 6, 4, 2,
	647, 649, 7, 1050, 2, 2, 648, 647, 3, 2, 2, 2, 648, 649, 3, 2, 2, 2, 649,
	651, 3, 2, 2, 2, 650, 652, 7, 1066, 2, 2, 651, 650, 3, 2, 2, 2, 651, 652,
	3, 2, 2, 2, 652, 655, 3, 2, 2, 2, 653, 655, 5, 8, 5, 2, 654, 646, 3, 2,
	2, 2, 654, 653, 3, 2, 2, 2, 655, 658, 3, 2, 2, 2, 656, 654, 3, 2, 2, 2,
	656, 657, 3, 2, 2, 2, 657, 667, 3, 2, 2, 2, 658, 656, 3, 2, 2, 2, 659,
	664, 5, 6, 4, 2, 660, 662, 7, 1050, 2, 2, 661, 660, 3, 2, 2, 2, 661, 662,
	3, 2, 2, 2, 662, 663, 3, 2, 2, 2, 663, 665, 7, 1066, 2, 2, 664, 661, 3,
	2, 2, 2, 664, 665, 3, 2, 2, 2, 665, 668, 3, 2, 2, 2, 666, 668, 5, 8, 5,
	2, 667, 659, 3, 2, 2, 2, 667, 666, 3, 2, 2, 2, 668, 5, 3, 2, 2, 2, 669,
	677, 5, 10, 6, 2, 670, 677, 5, 12, 7, 2, 671, 677, 5, 14, 8, 2, 672, 677,
	5, 16, 9, 2, 673, 677, 5, 18, 10, 2, 674, 677, 5, 22, 12, 2, 675, 677,
	5, 24, 13, 2, 676, 669, 3, 2, 2, 2, 676, 670, 3, 2, 2, 2, 676, 671, 3,
	2, 2, 2, 676, 672, 3, 2, 2, 2, 676, 673, 3, 2, 2, 2, 676, 674, 3, 2, 2,
	2, 676, 675, 3, 2, 2, 2, 677, 7, 3, 2, 2, 2, 678, 679, 7, 1066, 2, 2, 679,
	9, 3, 2, 2, 2, 680, 716, 5, 26, 14, 2, 681, 716, 5, 28, 15, 2, 682, 716,
	5, 30, 16, 2, 683, 716, 5, 32, 17, 2, 684, 716, 5, 34, 18, 2, 685, 716,
	5, 36, 19, 2, 686, 716, 5, 38, 20, 2, 687, 716, 5, 40, 21, 2, 688, 716,
	5, 42, 22, 2, 689, 716, 5, 44, 23, 2, 690, 716, 5, 46, 24, 2, 691, 716,
	5, 48, 25, 2, 692, 716, 5, 114, 58, 2, 693, 716, 5, 116, 59, 2, 694, 716,
	5, 118, 60, 2, 695, 716, 5, 120, 61, 2, 696, 716, 5, 122, 62, 2, 697, 716,
	5, 124, 63, 2, 698, 716, 5, 126, 64, 2, 699, 716, 5, 128, 65, 2, 700, 716,
	5, 130, 66, 2, 701, 716, 5, 132, 67, 2, 702, 716, 5, 136, 69, 2, 703, 716,
	5, 138, 70, 2, 704, 716, 5, 140, 71, 2, 705, 716, 5, 142, 72, 2, 706, 716,
	5, 144, 73, 2, 707, 716, 5, 146, 74, 2, 708, 716, 5, 148, 75, 2, 709, 716,
	5, 150, 76, 2, 710, 716, 5, 152, 77, 2, 711, 716, 5, 154, 78, 2, 712, 716,
	5, 156, 79, 2, 713, 716, 5, 158, 80, 2, 714, 716, 5, 162, 82, 2, 715, 680,
	3, 2, 2, 2, 715, 681, 3, 2, 2, 2, 715, 682, 3, 2, 2, 2, 715, 683, 3, 2,
	2, 2, 715, 684, 3, 2, 2, 2, 715, 685, 3, 2, 2, 2, 715, 686, 3, 2, 2, 2,
	715, 687, 3, 2, 2, 2, 715, 688, 3, 2, 2, 2, 715, 689, 3, 2, 2, 2, 715,
	690, 3, 2, 2, 2, 715, 691, 3, 2, 2, 2, 715, 692, 3, 2, 2, 2, 715, 693,
	3, 2, 2, 2, 715, 694, 3, 2, 2, 2, 715, 695, 3, 2, 2, 2, 715, 696, 3, 2,
	2, 2, 715, 697, 3, 2, 2, 2, 715, 698, 3, 2, 2, 2, 715, 699, 3, 2, 2, 2,
	715, 700, 3, 2, 2, 2, 715, 701, 3, 2, 2, 2, 715, 702, 3, 2, 2, 2, 715,
	703, 3, 2, 2, 2, 715, 704, 3, 2, 2, 2, 715, 705, 3, 2, 2, 2, 715, 706,
	3, 2, 2, 2, 715, 707, 3, 2, 2, 2, 715, 708, 3, 2, 2, 2, 715, 709, 3, 2,
	2, 2, 715, 710, 3, 2, 2, 2, 715, 711, 3, 2, 2, 2, 715, 712, 3, 2, 2, 2,
	715, 713, 3, 2, 2, 2, 715, 714, 3, 2, 2, 2, 716, 11, 3, 2, 2, 2, 717, 728,
	5, 180, 91, 2, 718, 728, 5, 172, 87, 2, 719, 728, 5, 182, 92, 2, 720, 728,
	5, 166, 84, 2, 721, 728, 5, 178, 90, 2, 722, 728, 5, 164, 83, 2, 723, 728,
	5, 174, 88, 2, 724, 728, 5, 176, 89, 2, 725, 728, 5, 168, 85, 2, 726, 728,
	5, 170, 86, 2, 727, 717, 3, 2, 2, 2, 727, 718, 3, 2, 2, 2, 727, 719, 3,
	2, 2, 2, 727, 720, 3, 2, 2, 2, 727, 721, 3, 2, 2, 2, 727, 722, 3, 2, 2,
	2, 727, 723, 3, 2, 2, 2, 727, 724, 3, 2, 2, 2, 727, 725, 3, 2, 2, 2, 727,
	726, 3, 2, 2, 2, 728, 13, 3, 2, 2, 2, 729, 739, 5, 260, 131, 2, 730, 739,
	5, 262, 132, 2, 731, 739, 5, 264, 133, 2, 732, 739, 5, 266, 134, 2, 733,
	739, 5, 268, 135, 2, 734, 739, 5, 270, 136, 2, 735, 739, 5, 272, 137, 2,
	736, 739, 5, 274, 138, 2, 737, 739, 5, 276, 139, 2, 738, 729, 3, 2, 2,
	2, 738, 730, 3, 2, 2, 2, 738, 731, 3, 2, 2, 2, 738, 732, 3, 2, 2, 2, 738,
	733, 3, 2, 2, 2, 738, 734, 3, 2, 2, 2, 738, 735, 3, 2, 2, 2, 738, 736,
	3, 2, 2, 2, 738, 737, 3, 2, 2, 2, 739, 15, 3, 2, 2, 2, 740, 756, 5, 292,
	147, 2, 741, 756, 5, 294, 148, 2, 742, 756, 5, 296, 149, 2, 743, 756, 5,
	298, 150, 2, 744, 756, 5, 300, 151, 2, 745, 756, 5, 302, 152, 2, 746, 756,
	5, 304, 153, 2, 747, 756, 5, 306, 154, 2, 748, 756, 5, 308, 155, 2, 749,
	756, 5, 332, 167, 2, 750, 756, 5, 334, 168, 2, 751, 756, 5, 336, 169, 2,
	752, 756, 5, 338, 170, 2, 753, 756, 5, 340, 171, 2, 754, 756, 5, 342, 172,
	2, 755, 740, 3, 2, 2, 2, 755, 741, 3, 2, 2, 2, 755, 742, 3, 2, 2, 2, 755,
	743, 3, 2, 2, 2, 755, 744, 3, 2, 2, 2, 755, 745, 3, 2, 2, 2, 755, 746,
	3, 2, 2, 2, 755, 747, 3, 2, 2, 2, 755, 748, 3, 2, 2, 2, 755, 749, 3, 2,
	2, 2, 755, 750, 3, 2, 2, 2, 755, 751, 3, 2, 2, 2, 755, 752, 3, 2, 2, 2,
	755, 753, 3, 2, 2, 2, 755, 754, 3, 2, 2, 2, 756, 17, 3, 2, 2, 2, 757, 761,
	5, 344, 173, 2, 758, 761, 5, 346, 174, 2, 759, 761, 5, 348, 175, 2, 760,
	757, 3, 2, 2, 2, 760, 758, 3, 2, 2, 2, 760, 759, 3, 2, 2, 2, 761, 19, 3,
	2, 2, 2, 762, 773, 5, 352, 177, 2, 763, 773, 5, 354, 178, 2, 764, 773,
	5, 356, 179, 2, 765, 773, 5, 360, 181, 2, 766, 773, 5, 362, 182, 2, 767,
	773, 5, 364, 183, 2, 768, 773, 5, 368, 185, 2, 769, 773, 5, 358, 180, 2,
	770, 773, 5, 366, 184, 2, 771, 773, 5, 370, 186, 2, 772, 762, 3, 2, 2,
	2, 772, 763, 3, 2, 2, 2, 772, 764, 3, 2, 2, 2, 772, 765, 3, 2, 2, 2, 772,
	766, 3, 2, 2, 2, 772, 767, 3, 2, 2, 2, 772, 768, 3, 2, 2, 2, 772, 769,
	3, 2, 2, 2, 772, 770, 3, 2, 2, 2, 772, 771, 3, 2, 2, 2, 773, 21, 3, 2,
	2, 2, 774, 800, 5, 388, 195, 2, 775, 800, 5, 390, 196, 2, 776, 800, 5,
	392, 197, 2, 777, 800, 5, 394, 198, 2, 778, 800, 5, 396, 199, 2, 779, 800,
	5, 398, 200, 2, 780, 800, 5, 400, 201, 2, 781, 800, 5, 402, 202, 2, 782,
	800, 5, 426, 214, 2, 783, 800, 5, 428, 215, 2, 784, 800, 5, 430, 216, 2,
	785, 800, 5, 432, 217, 2, 786, 800, 5, 434, 218, 2, 787, 800, 5, 438, 220,
	2, 788, 800, 5, 440, 221, 2, 789, 800, 5, 442, 222, 2, 790, 800, 5, 444,
	223, 2, 791, 800, 5, 446, 224, 2, 792, 800, 5, 460, 231, 2, 793, 800, 5,
	462, 232, 2, 794, 800, 5, 464, 233, 2, 795, 800, 5, 466, 234, 2, 796, 800,
	5, 468, 235, 2, 797, 800, 5, 470, 236, 2, 798, 800, 5, 472, 237, 2, 799,
	774, 3, 2, 2, 2, 799, 775, 3, 2, 2, 2, 799, 776, 3, 2, 2, 2, 799, 777,
	3, 2, 2, 2, 799, 778, 3, 2, 2, 2, 799, 779, 3, 2, 2, 2, 799, 780, 3, 2,
	2, 2, 799, 781, 3, 2, 2, 2, 799, 782, 3, 2, 2, 2, 799, 783, 3, 2, 2, 2,
	799, 784, 3, 2, 2, 2, 799, 785, 3, 2, 2, 2, 799, 786, 3, 2, 2, 2, 799,
	787, 3, 2, 2, 2, 799, 788, 3, 2, 2, 2, 799, 789, 3, 2, 2, 2, 799, 790,
	3, 2, 2, 2, 799, 791, 3, 2, 2, 2, 799, 792, 3, 2, 2, 2, 799, 793, 3, 2,
	2, 2, 799, 794, 3, 2, 2, 2, 799, 795, 3, 2, 2, 2, 799, 796, 3, 2, 2, 2,
	799, 797, 3, 2, 2, 2, 799, 798, 3, 2, 2, 2, 800, 23, 3, 2, 2, 2, 801, 809,
	5, 482, 242, 2, 802, 809, 5, 484, 243, 2, 803, 809, 5, 486, 244, 2, 804,
	809, 5, 488, 245, 2, 805, 809, 5, 490, 246, 2, 806, 809, 5, 492, 247, 2,
	807, 809, 5, 496, 249, 2, 808, 801, 3, 2, 2, 2, 808, 802, 3, 2, 2, 2, 808,
	803, 3, 2, 2, 2, 808, 804, 3, 2, 2, 2, 808, 805, 3, 2, 2, 2, 808, 806,
	3, 2, 2, 2, 808, 807, 3, 2, 2, 2, 809, 25, 3, 2, 2, 2, 810, 811, 7, 32,
	2, 2, 811, 813, 9, 2, 2, 2, 812, 814, 5, 584, 293, 2, 813, 812, 3, 2, 2,
	2, 813, 814, 3, 2, 2, 2, 814, 815, 3, 2, 2, 2, 815, 819, 5, 528, 265, 2,
	816, 818, 5, 50, 26, 2, 817, 816, 3, 2, 2, 2, 818, 821, 3, 2, 2, 2, 819,
	817, 3, 2, 2, 2, 819, 820, 3, 2, 2, 2, 820, 27, 3, 2, 2, 2, 821, 819, 3,
	2, 2, 2, 822, 824, 7, 32, 2, 2, 823, 825, 5, 52, 27, 2, 824, 823, 3, 2,
	2, 2, 824, 825, 3, 2, 2, 2, 825, 826, 3, 2, 2, 2, 826, 828, 7, 382, 2,
	2, 827, 829, 5, 584, 293, 2, 828, 827, 3, 2, 2, 2, 828, 829, 3, 2, 2, 2,
	829, 830, 3, 2, 2, 2, 830, 831, 5, 502, 252, 2, 831, 832, 7, 110, 2, 2,
	832, 833, 7, 552, 2, 2, 833, 840, 5, 54, 28, 2, 834, 835, 7, 110, 2, 2,
	835, 837, 7, 342, 2, 2, 836, 838, 7, 105, 2, 2, 837, 836, 3, 2, 2, 2, 837,
	838, 3, 2, 2, 2, 838, 839, 3, 2, 2, 2, 839, 841, 7, 512, 2, 2, 840, 834,
	3, 2, 2, 2, 840, 841, 3, 2, 2, 2, 841, 843, 3, 2, 2, 2, 842, 844, 5, 62,
	32, 2, 843, 842, 3, 2, 2, 2, 843, 844, 3, 2, 2, 2, 844, 847, 3, 2, 2, 2,
	845, 846, 7, 339, 2, 2, 846, 848, 7, 1078, 2, 2, 847, 845, 3, 2, 2, 2,
	847, 848, 3, 2, 2, 2, 848, 849, 3, 2, 2, 2, 849, 850, 7, 368, 2, 2, 850,
	851, 5, 350, 176, 2, 851, 29, 3, 2, 2, 2, 852, 854, 7, 32, 2, 2, 853, 855,
	9, 3, 2, 2, 854, 853, 3, 2, 2, 2, 854, 855, 3, 2, 2, 2, 855, 857, 3, 2,
	2, 2, 856, 858, 9, 4, 2, 2, 857, 856, 3, 2, 2, 2, 857, 858, 3, 2, 2, 2,
	858, 859, 3, 2, 2, 2, 859, 860, 7, 75, 2, 2, 860, 862, 5, 528, 265, 2,
	861, 863, 5, 64, 33, 2, 862, 861, 3, 2, 2, 2, 862, 863, 3, 2, 2, 2, 863,
	864, 3, 2, 2, 2, 864, 865, 7, 110, 2, 2, 865, 866, 5, 504, 253, 2, 866,
	870, 5, 564, 283, 2, 867, 869, 5, 66, 34, 2, 868, 867, 3, 2, 2, 2, 869,
	872, 3, 2, 2, 2, 870, 868, 3, 2, 2, 2, 870, 871, 3, 2, 2, 2, 871, 885,
	3, 2, 2, 2, 872, 870, 3, 2, 2, 2, 873, 875, 7, 308, 2, 2, 874, 876, 7,
	1054, 2, 2, 875, 874, 3, 2, 2, 2, 875, 876, 3, 2, 2, 2, 876, 877, 3, 2,
	2, 2, 877, 884, 9, 5, 2, 2, 878, 880, 7, 96, 2, 2, 879, 881, 7, 1054, 2,
	2, 880, 879, 3, 2, 2, 2, 880, 881, 3, 2, 2, 2, 881, 882, 3, 2, 2, 2, 882,
	884, 9, 6, 2, 2, 883, 873, 3, 2, 2, 2, 883, 878, 3, 2, 2, 2, 884, 887,
	3, 2, 2, 2, 885, 883, 3, 2, 2, 2, 885, 886, 3, 2, 2, 2, 886, 31, 3, 2,
	2, 2, 887, 885, 3, 2, 2, 2, 888, 889, 7, 32, 2, 2, 889, 890, 7, 437, 2,
	2, 890, 891, 7, 69, 2, 2, 891, 892, 5, 528, 265, 2, 892, 893, 7, 7, 2,
	2, 893, 894, 7, 603, 2, 2, 894, 900, 7, 1078, 2, 2, 895, 897, 7, 416, 2,
	2, 896, 898, 7, 1054, 2, 2, 897, 896, 3, 2, 2, 2, 897, 898, 3, 2, 2, 2,
	898, 899, 3, 2, 2, 2, 899, 901, 5, 536, 269, 2, 900, 895, 3, 2, 2, 2, 900,
	901, 3, 2, 2, 2, 901, 907, 3, 2, 2, 2, 902, 904, 7, 604, 2, 2, 903, 905,
	7, 1054, 2, 2, 904, 903, 3, 2, 2, 2, 904, 905, 3, 2, 2, 2, 905, 906, 3,
	2, 2, 2, 906, 908, 5, 536, 269, 2, 907, 902, 3, 2, 2, 2, 907, 908, 3, 2,
	2, 2, 908, 914, 3, 2, 2, 2, 909, 911, 7, 522, 2, 2, 910, 912, 7, 1054,
	2, 2, 911, 910, 3, 2, 2, 2, 911, 912, 3, 2, 2, 2, 912, 913, 3, 2, 2, 2,
	913, 915, 5, 536, 269, 2, 914, 909, 3, 2, 2, 2, 914, 915, 3, 2, 2, 2, 915,
	921, 3, 2, 2, 2, 916, 918, 7, 484, 2, 2, 917, 919, 7, 1054, 2, 2, 918,
	917, 3, 2, 2, 2, 918, 919, 3, 2, 2, 2, 919, 920, 3, 2, 2, 2, 920, 922,
	5, 528, 265, 2, 921, 916, 3, 2, 2, 2, 921, 922, 3, 2, 2, 2, 922, 924, 3,
	2, 2, 2, 923, 925, 7, 618, 2, 2, 924, 923, 3, 2, 2, 2, 924, 925, 3, 2,
	2, 2, 925, 931, 3, 2, 2, 2, 926, 928, 7, 339, 2, 2, 927, 929, 7, 1054,
	2, 2, 928, 927, 3, 2, 2, 2, 928, 929, 3, 2, 2, 2, 929, 930, 3, 2, 2, 2,
	930, 932, 7, 1078, 2, 2, 931, 926, 3, 2, 2, 2, 931, 932, 3, 2, 2, 2, 932,
	933, 3, 2, 2, 2, 933, 935, 7, 376, 2, 2, 934, 936, 7, 1054, 2, 2, 935,
	934, 3, 2, 2, 2, 935, 936, 3, 2, 2, 2, 936, 937, 3, 2, 2, 2, 937, 938,
	5, 518, 260, 2, 938, 33, 3, 2, 2, 2, 939, 941, 7, 32, 2, 2, 940, 942, 5,
	52, 27, 2, 941, 940, 3, 2, 2, 2, 941, 942, 3, 2, 2, 2, 942, 943, 3, 2,
	2, 2, 943, 944, 7, 121, 2, 2, 944, 945, 5, 502, 252, 2, 945, 947, 7, 1063,
	2, 2, 946, 948, 5, 68, 35, 2, 947, 946, 3, 2, 2, 2, 947, 948, 3, 2, 2,
	2, 948, 953, 3, 2, 2, 2, 949, 950, 7, 1065, 2, 2, 950, 952, 5, 68, 35,
	2, 951, 949, 3, 2, 2, 2, 952, 955, 3, 2, 2, 2, 953, 951, 3, 2, 2, 2, 953,
	954, 3, 2, 2, 2, 954, 956, 3, 2, 2, 2, 955, 953, 3, 2, 2, 2, 956, 960,
	7, 1064, 2, 2, 957, 959, 5, 72, 37, 2, 958, 957, 3, 2, 2, 2, 959, 962,
	3, 2, 2, 2, 960, 958, 3, 2, 2, 2, 960, 961, 3, 2, 2, 2, 961, 963, 3, 2,
	2, 2, 962, 960, 3, 2, 2, 2, 963, 964, 5, 350, 176, 2, 964, 35, 3, 2, 2,
	2, 965, 967, 7, 32, 2, 2, 966, 968, 5, 52, 27, 2, 967, 966, 3, 2, 2, 2,
	967, 968, 3, 2, 2, 2, 968, 969, 3, 2, 2, 2, 969, 970, 7, 402, 2, 2, 970,
	971, 5, 502, 252, 2, 971, 973, 7, 1063, 2, 2, 972, 974, 5, 70, 36, 2, 973,
	972, 3, 2, 2, 2, 973, 974, 3, 2, 2, 2, 974, 979, 3, 2, 2, 2, 975, 976,
	7, 1065, 2, 2, 976, 978, 5, 70, 36, 2, 977, 975, 3, 2, 2, 2, 978, 981,
	3, 2, 2, 2, 979, 977, 3, 2, 2, 2, 979, 980, 3, 2, 2, 2, 980, 982, 3, 2,
	2, 2, 981, 979, 3, 2, 2, 2, 982, 983, 7, 1064, 2, 2, 983, 984, 7, 543,
	2, 2, 984, 988, 5, 548, 275, 2, 985, 987, 5, 72, 37, 2, 986, 985, 3, 2,
	2, 2, 987, 990, 3, 2, 2, 2, 988, 986, 3, 2, 2, 2, 988, 989, 3, 2, 2, 2,
	989, 993, 3, 2, 2, 2, 990, 988, 3, 2, 2, 2, 991, 994, 5, 350, 176, 2, 992,
	994, 5, 366, 184, 2, 993, 991, 3, 2, 2, 2, 993, 992, 3, 2, 2, 2, 994, 37,
	3, 2, 2, 2, 995, 996, 7, 32, 2, 2, 996, 997, 7, 554, 2, 2, 997, 998, 5,
	528, 265, 2, 998, 999, 7, 63, 2, 2, 999, 1000, 7, 357, 2, 2, 1000, 1001,
	7, 622, 2, 2, 1001, 1002, 9, 7, 2, 2, 1002, 1003, 7, 496, 2, 2, 1003, 1004,
	7, 1063, 2, 2, 1004, 1009, 5, 74, 38, 2, 1005, 1006, 7, 1065, 2, 2, 1006,
	1008, 5, 74, 38, 2, 1007, 1005, 3, 2, 2, 2, 1008, 1011, 3, 2, 2, 2, 1009,
	1007, 3, 2, 2, 2, 1009, 1010, 3, 2, 2, 2, 1010, 1012, 3, 2, 2, 2, 1011,
	1009, 3, 2, 2, 2, 1012, 1013, 7, 1064, 2, 2, 1013, 39, 3, 2, 2, 2, 1014,
	1016, 7, 32, 2, 2, 1015, 1017, 7, 594, 2, 2, 1016, 1015, 3, 2, 2, 2, 1016,
	1017, 3, 2, 2, 2, 1017, 1018, 3, 2, 2, 2, 1018, 1020, 7, 158, 2, 2, 1019,
	1021, 5, 584, 293, 2, 1020, 1019, 3, 2, 2, 2, 1020, 1021, 3, 2, 2, 2, 1021,
	1022, 3, 2, 2, 2, 1022, 1030, 5, 504, 253, 2, 1023, 1024, 7, 91, 2, 2,
	1024, 1031, 5, 504, 253, 2, 1025, 1026, 7, 1063, 2, 2, 1026, 1027, 7, 91,
	2, 2, 1027, 1028, 5, 504, 253, 2, 1028, 1029, 7, 1064, 2, 2, 1029, 1031,
	3, 2, 2, 2, 1030, 1023, 3, 2, 2, 2, 1030, 1025, 3, 2, 2, 2, 1031, 1093,
	3, 2, 2, 2, 1032, 1034, 7, 32, 2, 2, 1033, 1035, 7, 594, 2, 2, 1034, 1033,
	3, 2, 2, 2, 1034, 1035, 3, 2, 2, 2, 1035, 1036, 3, 2, 2, 2, 1036, 1038,
	7, 158, 2, 2, 1037, 1039, 5, 584, 293, 2, 1038, 1037, 3, 2, 2, 2, 1038,
	1039, 3, 2, 2, 2, 1039, 1040, 3, 2, 2, 2, 1040, 1042, 5, 504, 253, 2, 1041,
	1043, 5, 76, 39, 2, 1042, 1041, 3, 2, 2, 2, 1042, 1043, 3, 2, 2, 2, 1043,
	1054, 3, 2, 2, 2, 1044, 1051, 5, 94, 48, 2, 1045, 1047, 7, 1065, 2, 2,
	1046, 1045, 3, 2, 2, 2, 1046, 1047, 3, 2, 2, 2, 1047, 1048, 3, 2, 2, 2,
	1048, 1050, 5, 94, 48, 2, 1049, 1046, 3, 2, 2, 2, 1050, 1053, 3, 2, 2,
	2, 1051, 1049, 3, 2, 2, 2, 1051, 1052, 3, 2, 2, 2, 1052, 1055, 3, 2, 2,
	2, 1053, 1051, 3, 2, 2, 2, 1054, 1044, 3, 2, 2, 2, 1054, 1055, 3, 2, 2,
	2, 1055, 1057, 3, 2, 2, 2, 1056, 1058, 5, 98, 50, 2, 1057, 1056, 3, 2,
	2, 2, 1057, 1058, 3, 2, 2, 2, 1058, 1060, 3, 2, 2, 2, 1059, 1061, 9, 8,
	2, 2, 1060, 1059, 3, 2, 2, 2, 1060, 1061, 3, 2, 2, 2, 1061, 1063, 3, 2,
	2, 2, 1062, 1064, 7, 13, 2, 2, 1063, 1062, 3, 2, 2, 2, 1063, 1064, 3, 2,
	2, 2, 1064, 1065, 3, 2, 2, 2, 1065, 1066, 5, 180, 91, 2, 1066, 1093, 3,
	2, 2, 2, 1067, 1069, 7, 32, 2, 2, 1068, 1070, 7, 594, 2, 2, 1069, 1068,
	3, 2, 2, 2, 1069, 1070, 3, 2, 2, 2, 1070, 1071, 3, 2, 2, 2, 1071, 1073,
	7, 158, 2, 2, 1072, 1074, 5, 584, 293, 2, 1073, 1072, 3, 2, 2, 2, 1073,
	1074, 3, 2, 2, 2, 1074, 1075, 3, 2, 2, 2, 1075, 1076, 5, 504, 253, 2, 1076,
	1087, 5, 76, 39, 2, 1077, 1084, 5, 94, 48, 2, 1078, 1080, 7, 1065, 2, 2,
	1079, 1078, 3, 2, 2, 2, 1079, 1080, 3, 2, 2, 2, 1080, 1081, 3, 2, 2, 2,
	1081, 1083, 5, 94, 48, 2, 1082, 1079, 3, 2, 2, 2, 1083, 1086, 3, 2, 2,
	2, 1084, 1082, 3, 2, 2, 2, 1084, 1085, 3, 2, 2, 2, 1085, 1088, 3, 2, 2,
	2, 1086, 1084, 3, 2, 2, 2, 1087, 1077, 3, 2, 2, 2, 1087, 1088, 3, 2, 2,
	2, 1088, 1090, 3, 2, 2, 2, 1089, 1091, 5, 98, 50, 2, 1090, 1089, 3, 2,
	2, 2, 1090, 1091, 3, 2, 2, 2, 1091, 1093, 3, 2, 2, 2, 1092, 1014, 3, 2,
	2, 2, 1092, 1032, 3, 2, 2, 2, 1092, 1067, 3, 2, 2, 2, 1093, 41, 3, 2, 2,
	2, 1094, 1095, 7, 32, 2, 2, 1095, 1096, 7, 593, 2, 2, 1096, 1097, 5, 528,
	265, 2, 1097, 1098, 7, 7, 2, 2, 1098, 1099, 7, 358, 2, 2, 1099, 1103, 7,
	1078, 2, 2, 1100, 1101, 7, 394, 2, 2, 1101, 1102, 7, 1054, 2, 2, 1102,
	1104, 5, 536, 269, 2, 1103, 1100, 3, 2, 2, 2, 1103, 1104, 3, 2, 2, 2, 1104,
	1110, 3, 2, 2, 2, 1105, 1107, 7, 376, 2, 2, 1106, 1108, 7, 1054, 2, 2,
	1107, 1106, 3, 2, 2, 2, 1107, 1108, 3, 2, 2, 2, 1108, 1109, 3, 2, 2, 2,
	1109, 1111, 5, 518, 260, 2, 1110, 1105, 3, 2, 2, 2, 1110, 1111, 3, 2, 2,
	2, 1111, 43, 3, 2, 2, 2, 1112, 1113, 7, 32, 2, 2, 1113, 1114, 7, 593, 2,
	2, 1114, 1115, 5, 528, 265, 2, 1115, 1116, 7, 7, 2, 2, 1116, 1117, 7, 358,
	2, 2, 1117, 1118, 7, 1078, 2, 2, 1118, 1119, 7, 172, 2, 2, 1119, 1120,
	7, 437, 2, 2, 1120, 1121, 7, 69, 2, 2, 1121, 1127, 5, 528, 265, 2, 1122,
	1124, 7, 390, 2, 2, 1123, 1125, 7, 1054, 2, 2, 1124, 1123, 3, 2, 2, 2,
	1124, 1125, 3, 2, 2, 2, 1125, 1126, 3, 2, 2, 2, 1126, 1128, 5, 536, 269,
	2, 1127, 1122, 3, 2, 2, 2, 1127, 1128, 3, 2, 2, 2, 1128, 1134, 3, 2, 2,
	2, 1129, 1131, 7, 416, 2, 2, 1130, 1132, 7, 1054, 2, 2, 1131, 1130, 3,
	2, 2, 2, 1131, 1132, 3, 2, 2, 2, 1132, 1133, 3, 2, 2, 2, 1133, 1135, 5,
	536, 269, 2, 1134, 1129, 3, 2, 2, 2, 1134, 1135, 3, 2, 2, 2, 1135, 1141,
	3, 2, 2, 2, 1136, 1138, 7, 313, 2, 2, 1137, 1139, 7, 1054, 2, 2, 1138,
	1137, 3, 2, 2, 2, 1138, 1139, 3, 2, 2, 2, 1139, 1140, 3, 2, 2, 2, 1140,
	1142, 5, 536, 269, 2, 1141, 1136, 3, 2, 2, 2, 1141, 1142, 3, 2, 2, 2, 1142,
	1148, 3, 2, 2, 2, 1143, 1145, 7, 463, 2, 2, 1144, 1146, 7, 1054, 2, 2,
	1145, 1144, 3, 2, 2, 2, 1145, 1146, 3, 2, 2, 2, 1146, 1147, 3, 2, 2, 2,
	1147, 1149, 5, 536, 269, 2, 1148, 1143, 3, 2, 2, 2, 1148, 1149, 3, 2, 2,
	2, 1149, 1155, 3, 2, 2, 2, 1150, 1152, 7, 484, 2, 2, 1151, 1153, 7, 1054,
	2, 2, 1152, 1151, 3, 2, 2, 2, 1152, 1153, 3, 2, 2, 2, 1153, 1154, 3, 2,
	2, 2, 1154, 1156, 5, 528, 265, 2, 1155, 1150, 3, 2, 2, 2, 1155, 1156, 3,
	2, 2, 2, 1156, 1158, 3, 2, 2, 2, 1157, 1159, 7, 618, 2, 2, 1158, 1157,
	3, 2, 2, 2, 1158, 1159, 3, 2, 2, 2, 1159, 1165, 3, 2, 2, 2, 1160, 1162,
	7, 339, 2, 2, 1161, 1163, 7, 1054, 2, 2, 1162, 1161, 3, 2, 2, 2, 1162,
	1163, 3, 2, 2, 2, 1163, 1164, 3, 2, 2, 2, 1164, 1166, 7, 1078, 2, 2, 1165,
	1160, 3, 2, 2, 2, 1165, 1166, 3, 2, 2, 2, 1166, 1167, 3, 2, 2, 2, 1167,
	1169, 7, 376, 2, 2, 1168, 1170, 7, 1054, 2, 2, 1169, 1168, 3, 2, 2, 2,
	1169, 1170, 3, 2, 2, 2, 1170, 1171, 3, 2, 2, 2, 1171, 1172, 5, 518, 260,
	2, 1172, 45, 3, 2, 2, 2, 1173, 1175, 7, 32, 2, 2, 1174, 1176, 5, 52, 27,
	2, 1175, 1174, 3, 2, 2, 2, 1175, 1176, 3, 2, 2, 2, 1176, 1177, 3, 2, 2,
	2, 1177, 1178, 7, 163, 2, 2, 1178, 1179, 5, 502, 252, 2, 1179, 1180, 9,
	9, 2, 2, 1180, 1181, 9, 10, 2, 2, 1181, 1182, 7, 110, 2, 2, 1182, 1183,
	5, 504, 253, 2, 1183, 1184, 7, 61, 2, 2, 1184, 1185, 7, 50, 2, 2, 1185,
	1188, 7, 548, 2, 2, 1186, 1187, 9, 11, 2, 2, 1187, 1189, 5, 502, 252, 2,
	1188, 1186, 3, 2, 2, 2, 1188, 1189, 3, 2, 2, 2, 1189, 1190, 3, 2, 2, 2,
	1190, 1191, 5, 350, 176, 2, 1191, 47, 3, 2, 2, 2, 1192, 1195, 7, 32, 2,
	2, 1193, 1194, 7, 114, 2, 2, 1194, 1196, 7, 131, 2, 2, 1195, 1193, 3, 2,
	2, 2, 1195, 1196, 3, 2, 2, 2, 1196, 1200, 3, 2, 2, 2, 1197, 1198, 7, 308,
	2, 2, 1198, 1199, 7, 1054, 2, 2, 1199, 1201, 9, 12, 2, 2, 1200, 1197, 3,
	2, 2, 2, 1200, 1201, 3, 2, 2, 2, 1201, 1203, 3, 2, 2, 2, 1202, 1204, 5,
	52, 27, 2, 1203, 1202, 3, 2, 2, 2, 1203, 1204, 3, 2, 2, 2, 1204, 1208,
	3, 2, 2, 2, 1205, 1206, 7, 147, 2, 2, 1206, 1207, 7, 553, 2, 2, 1207, 1209,
	9, 13, 2, 2, 1208, 1205, 3, 2, 2, 2, 1208, 1209, 3, 2, 2, 2, 1209, 1210,
	3, 2, 2, 2, 1210, 1211, 7, 615, 2, 2, 1211, 1216, 5, 502, 252, 2, 1212,
	1213, 7, 1063, 2, 2, 1213, 1214, 5, 560, 281, 2, 1214, 1215, 7, 1064, 2,
	2, 1215, 1217, 3, 2, 2, 2, 1216, 1212, 3, 2, 2, 2, 1216, 1217, 3, 2, 2,
	2, 1217, 1218, 3, 2, 2, 2, 1218, 1219, 7, 13, 2, 2, 1219, 1226, 5, 180,
	91, 2, 1220, 1222, 7, 178, 2, 2, 1221, 1223, 9, 14, 2, 2, 1222, 1221, 3,
	2, 2, 2, 1222, 1223, 3, 2, 2, 2, 1223, 1224, 3, 2, 2, 2, 1224, 1225, 7,
	25, 2, 2, 1225, 1227, 7, 112, 2, 2, 1226, 1220, 3, 2, 2, 2, 1226, 1227,
	3, 2, 2, 2, 1227, 49, 3, 2, 2, 2, 1228, 1230, 7, 40, 2, 2, 1229, 1228,
	3, 2, 2, 2, 1229, 1230, 3, 2, 2, 2, 1230, 1234, 3, 2, 2, 2, 1231, 1232,
	7, 24, 2, 2, 1232, 1235, 7, 142, 2, 2, 1233, 1235, 7, 774, 2, 2, 1234,
	1231, 3, 2, 2, 2, 1234, 1233, 3, 2, 2, 2, 1235, 1237, 3, 2, 2, 2, 1236,
	1238, 7, 1054, 2, 2, 1237, 1236, 3, 2, 2, 2, 1237, 1238, 3, 2, 2, 2, 1238,
	1241, 3, 2, 2, 2, 1239, 1242, 5, 514, 258, 2, 1240, 1242, 7, 40, 2, 2,
	1241, 1239, 3, 2, 2, 2, 1241, 1240, 3, 2, 2, 2, 1242, 1252, 3, 2, 2, 2,
	1243, 1245, 7, 40, 2, 2, 1244, 1243, 3, 2, 2, 2, 1244, 1245, 3, 2, 2, 2,
	1245, 1246, 3, 2, 2, 2, 1246, 1248, 7, 26, 2, 2, 1247, 1249, 7, 1054, 2,
	2, 1248, 1247, 3, 2, 2, 2, 1248, 1249, 3, 2, 2, 2, 1249, 1250, 3, 2, 2,
	2, 1250, 1252, 5, 516, 259, 2, 1251, 1229, 3, 2, 2, 2, 1251, 1244, 3, 2,
	2, 2, 1252, 51, 3, 2, 2, 2, 1253, 1254, 7, 361, 2, 2, 1254, 1261, 7, 1054,
	2, 2, 1255, 1262, 5, 510, 256, 2, 1256, 1259, 7, 35, 2, 2, 1257, 1258,
	7, 1063, 2, 2, 1258, 1260, 7, 1064, 2, 2, 1259, 1257, 3, 2, 2, 2, 1259,
	1260, 3, 2, 2, 2, 1260, 1262, 3, 2, 2, 2, 1261, 1255, 3, 2, 2, 2, 1261,
	1256, 3, 2, 2, 2, 1262, 53, 3, 2, 2, 2, 1263, 1264, 7, 310, 2, 2, 1264,
	1268, 5, 56, 29, 2, 1265, 1267, 5, 58, 30, 2, 1266, 1265, 3, 2, 2, 2, 1267,
	1270, 3, 2, 2, 2, 1268, 1266, 3, 2, 2, 2, 1268, 1269, 3, 2, 2, 2, 1269,
	1298, 3, 2, 2, 2, 1270, 1268, 3, 2, 2, 2, 1271, 1274, 7, 384, 2, 2, 1272,
	1275, 5, 534, 268, 2, 1273, 1275, 5, 606, 304, 2, 1274, 1272, 3, 2, 2,
	2, 1274, 1273, 3, 2, 2, 2, 1275, 1276, 3, 2, 2, 2, 1276, 1285, 5, 60, 31,
	2, 1277, 1278, 7, 576, 2, 2, 1278, 1282, 5, 56, 29, 2, 1279, 1281, 5, 58,
	30, 2, 1280, 1279, 3, 2, 2, 2, 1281, 1284, 3, 2, 2, 2, 1282, 1280, 3, 2,
	2, 2, 1282, 1283, 3, 2, 2, 2, 1283, 1286, 3, 2, 2, 2, 1284, 1282, 3, 2,
	2, 2, 1285, 1277, 3, 2, 2, 2, 1285, 1286, 3, 2, 2, 2, 1286, 1295, 3, 2,
	2, 2, 1287, 1288, 7, 375, 2, 2, 1288, 1292, 5, 56, 29, 2, 1289, 1291, 5,
	58, 30, 2, 1290, 1289, 3, 2, 2, 2, 1291, 1294, 3, 2, 2, 2, 1292, 1290,
	3, 2, 2, 2, 1292, 1293, 3, 2, 2, 2, 1293, 1296, 3, 2, 2, 2, 1294, 1292,
	3, 2, 2, 2, 1295, 1287, 3, 2, 2, 2, 1295, 1296, 3, 2, 2, 2, 1296, 1298,
	3, 2, 2, 2, 1297, 1263, 3, 2, 2, 2, 1297, 1271, 3, 2, 2, 2, 1298, 55, 3,
	2, 2, 2, 1299, 1304, 7, 287, 2, 2, 1300, 1304, 5, 538, 270, 2, 1301, 1304,
	5, 534, 268, 2, 1302, 1304, 5, 606, 304, 2, 1303, 1299, 3, 2, 2, 2, 1303,
	1300, 3, 2, 2, 2, 1303, 1301, 3, 2, 2, 2, 1303, 1302, 3, 2, 2, 2, 1304,
	57, 3, 2, 2, 2, 1305, 1306, 7, 1049, 2, 2, 1306, 1309, 7, 80, 2, 2, 1307,
	1310, 5, 534, 268, 2, 1308, 1310, 5, 606, 304, 2, 1309, 1307, 3, 2, 2,
	2, 1309, 1308, 3, 2, 2, 2, 1310, 1311, 3, 2, 2, 2, 1311, 1312, 5, 60, 31,
	2, 1312, 59, 3, 2, 2, 2, 1313, 1327, 5, 630, 316, 2, 1314, 1327, 7, 207,
	2, 2, 1315, 1327, 7, 226, 2, 2, 1316, 1327, 7, 227, 2, 2, 1317, 1327, 7,
	228, 2, 2, 1318, 1327, 7, 229, 2, 2, 1319, 1327, 7, 230, 2, 2, 1320, 1327,
	7, 231, 2, 2, 1321, 1327, 7, 232, 2, 2, 1322, 1327, 7, 233, 2, 2, 1323,
	1327, 7, 234, 2, 2, 1324, 1327, 7, 235, 2, 2, 1325, 1327, 7, 236, 2, 2,
	1326, 1313, 3, 2, 2, 2, 1326, 1314, 3, 2, 2, 2, 1326, 1315, 3, 2, 2, 2,
	1326, 1316, 3, 2, 2, 2, 1326, 1317, 3, 2, 2, 2, 1326, 1318, 3, 2, 2, 2,
	1326, 1319, 3, 2, 2, 2, 1326, 1320, 3, 2, 2, 2, 1326, 1321, 3, 2, 2, 2,
	1326, 1322, 3, 2, 2, 2, 1326, 1323, 3, 2, 2, 2, 1326, 1324, 3, 2, 2, 2,
	1326, 1325, 3, 2, 2, 2, 1327, 61, 3, 2, 2, 2, 1328, 1334, 7, 372, 2, 2,
	1329, 1334, 7, 365, 2, 2, 1330, 1331, 7, 365, 2, 2, 1331, 1332, 7, 110,
	2, 2, 1332, 1334, 7, 560, 2, 2, 1333, 1328, 3, 2, 2, 2, 1333, 1329, 3,
	2, 2, 2, 1333, 1330, 3, 2, 2, 2, 1334, 63, 3, 2, 2, 2, 1335, 1336, 7, 173,
	2, 2, 1336, 1337, 9, 15, 2, 2, 1337, 65, 3, 2, 2, 2, 1338, 1340, 7, 429,
	2, 2, 1339, 1341, 7, 1054, 2, 2, 1340, 1339, 3, 2, 2, 2, 1340, 1341, 3,
	2, 2, 2, 1341, 1342, 3, 2, 2, 2, 1342, 1352, 5, 536, 269, 2, 1343, 1352,
	5, 64, 33, 2, 1344, 1345, 7, 178, 2, 2, 1345, 1346, 7, 500, 2, 2, 1346,
	1352, 5, 528, 265, 2, 1347, 1348, 7, 339, 2, 2, 1348, 1352, 7, 1078, 2,
	2, 1349, 1352, 7, 421, 2, 2, 1350, 1352, 7, 617, 2, 2, 1351, 1338, 3, 2,
	2, 2, 1351, 1343, 3, 2, 2, 2, 1351, 1344, 3, 2, 2, 2, 1351, 1347, 3, 2,
	2, 2, 1351, 1349, 3, 2, 2, 2, 1351, 1350, 3, 2, 2, 2, 1352, 67, 3, 2, 2,
	2, 1353, 1355, 9, 16, 2, 2, 1354, 1353, 3, 2, 2, 2, 1354, 1355, 3, 2, 2,
	2, 1355, 1356, 3, 2, 2, 2, 1356, 1357, 5, 528, 265, 2, 1357, 1358, 5, 548,
	275, 2, 1358, 69, 3, 2, 2, 2, 1359, 1360, 5, 528, 265, 2, 1360, 1361, 5,
	548, 275, 2, 1361, 71, 3, 2, 2, 2, 1362, 1363, 7, 339, 2, 2, 1363, 1386,
	7, 1078, 2, 2, 1364, 1365, 7, 430, 2, 2, 1365, 1386, 7, 147, 2, 2, 1366,
	1368, 7, 105, 2, 2, 1367, 1366, 3, 2, 2, 2, 1367, 1368, 3, 2, 2, 2, 1368,
	1369, 3, 2, 2, 2, 1369, 1386, 7, 45, 2, 2, 1370, 1371, 7, 351, 2, 2, 1371,
	1381, 7, 147, 2, 2, 1372, 1373, 7, 483, 2, 2, 1373, 1381, 7, 147, 2, 2,
	1374, 1375, 7, 125, 2, 2, 1375, 1376, 7, 147, 2, 2, 1376, 1381, 7, 357,
	2, 2, 1377, 1378, 7, 103, 2, 2, 1378, 1379, 7, 147, 2, 2, 1379, 1381, 7,
	357, 2, 2, 1380, 1370, 3, 2, 2, 2, 1380, 1372, 3, 2, 2, 2, 1380, 1374,
	3, 2, 2, 2, 1380, 1377, 3, 2, 2, 2, 1381, 1386, 3, 2, 2, 2, 1382, 1383,
	7, 147, 2, 2, 1383, 1384, 7, 553, 2, 2, 1384, 1386, 9, 13, 2, 2, 1385,
	1362, 3, 2, 2, 2, 1385, 1364, 3, 2, 2, 2, 1385, 1367, 3, 2, 2, 2, 1385,
	1380, 3, 2, 2, 2, 1385, 1382, 3, 2, 2, 2, 1386, 73, 3, 2, 2, 2, 1387, 1388,
	7, 410, 2, 2, 1388, 1402, 7, 1078, 2, 2, 1389, 1390, 7, 37, 2, 2, 1390,
	1402, 7, 1078, 2, 2, 1391, 1392, 7, 609, 2, 2, 1392, 1402, 7, 1078, 2,
	2, 1393, 1394, 7, 504, 2, 2, 1394, 1402, 7, 1078, 2, 2, 1395, 1396, 7,
	563, 2, 2, 1396, 1402, 7, 1078, 2, 2, 1397, 1398, 7, 497, 2, 2, 1398, 1402,
	7, 1078, 2, 2, 1399, 1400, 7, 509, 2, 2, 1400, 1402, 5, 534, 268, 2, 1401,
	1387, 3, 2, 2, 2, 1401, 1389, 3, 2, 2, 2, 1401, 1391, 3, 2, 2, 2, 1401,
	1393, 3, 2, 2, 2, 1401, 1395, 3, 2, 2, 2, 1401, 1397, 3, 2, 2, 2, 1401,
	1399, 3, 2, 2, 2, 1402, 75, 3, 2, 2, 2, 1403, 1404, 7, 1063, 2, 2, 1404,
	1409, 5, 78, 40, 2, 1405, 1406, 7, 1065, 2, 2, 1406, 1408, 5, 78, 40, 2,
	1407, 1405, 3, 2, 2, 2, 1408, 1411, 3, 2, 2, 2, 1409, 1407, 3, 2, 2, 2,
	1409, 1410, 3, 2, 2, 2, 1410, 1412, 3, 2, 2, 2, 1411, 1409, 3, 2, 2, 2,
	1412, 1413, 7, 1064, 2, 2, 1413, 77, 3, 2, 2, 2, 1414, 1415, 5, 528, 265,
	2, 1415, 1416, 5, 80, 41, 2, 1416, 1420, 3, 2, 2, 2, 1417, 1420, 5, 84,
	43, 2, 1418, 1420, 5, 92, 47, 2, 1419, 1414, 3, 2, 2, 2, 1419, 1417, 3,
	2, 2, 2, 1419, 1418, 3, 2, 2, 2, 1420, 79, 3, 2, 2, 2, 1421, 1425, 5, 548,
	275, 2, 1422, 1424, 5, 82, 42, 2, 1423, 1422, 3, 2, 2, 2, 1424, 1427, 3,
	2, 2, 2, 1425, 1423, 3, 2, 2, 2, 1425, 1426, 3, 2, 2, 2, 1426, 81, 3, 2,
	2, 2, 1427, 1425, 3, 2, 2, 2, 1428, 1480, 5, 544, 273, 2, 1429, 1430, 7,
	40, 2, 2, 1430, 1480, 5, 576, 289, 2, 1431, 1436, 7, 314, 2, 2, 1432, 1433,
	7, 110, 2, 2, 1433, 1434, 7, 170, 2, 2, 1434, 1436, 5, 578, 290, 2, 1435,
	1431, 3, 2, 2, 2, 1435, 1432, 3, 2, 2, 2, 1436, 1480, 3, 2, 2, 2, 1437,
	1439, 7, 120, 2, 2, 1438, 1437, 3, 2, 2, 2, 1438, 1439, 3, 2, 2, 2, 1439,
	1440, 3, 2, 2, 2, 1440, 1480, 7, 85, 2, 2, 1441, 1443, 7, 167, 2, 2, 1442,
	1444, 7, 85, 2, 2, 1443, 1442, 3, 2, 2, 2, 1443, 1444, 3, 2, 2, 2, 1444,
	1480, 3, 2, 2, 2, 1445, 1446, 7, 339, 2, 2, 1446, 1480, 7, 1078, 2, 2,
	1447, 1448, 7, 337, 2, 2, 1448, 1480, 9, 17, 2, 2, 1449, 1450, 7, 582,
	2, 2, 1450, 1480, 9, 18, 2, 2, 1451, 1480, 5, 86, 44, 2, 1452, 1453, 7,
	26, 2, 2, 1453, 1480, 5, 516, 259, 2, 1454, 1455, 7, 66, 2, 2, 1455, 1457,
	7, 10, 2, 2, 1456, 1454, 3, 2, 2, 2, 1456, 1457, 3, 2, 2, 2, 1457, 1458,
	3, 2, 2, 2, 1458, 1459, 7, 13, 2, 2, 1459, 1460, 7, 1063, 2, 2, 1460, 1461,
	5, 606, 304, 2, 1461, 1463, 7, 1064, 2, 2, 1462, 1464, 9, 19, 2, 2, 1463,
	1462, 3, 2, 2, 2, 1463, 1464, 3, 2, 2, 2, 1464, 1480, 3, 2, 2, 2, 1465,
	1466, 7, 225, 2, 2, 1466, 1467, 7, 40, 2, 2, 1467, 1480, 7, 613, 2, 2,
	1468, 1470, 7, 29, 2, 2, 1469, 1471, 5, 528, 265, 2, 1470, 1469, 3, 2,
	2, 2, 1470, 1471, 3, 2, 2, 2, 1471, 1473, 3, 2, 2, 2, 1472, 1468, 3, 2,
	2, 2, 1472, 1473, 3, 2, 2, 2, 1473, 1474, 3, 2, 2, 2, 1474, 1475, 7, 25,
	2, 2, 1475, 1476, 7, 1063, 2, 2, 1476, 1477, 5, 606, 304, 2, 1477, 1478,
	7, 1064, 2, 2, 1478, 1480, 3, 2, 2, 2, 1479, 1428, 3, 2, 2, 2, 1479, 1429,
	3, 2, 2, 2, 1479, 1435, 3, 2, 2, 2, 1479, 1438, 3, 2, 2, 2, 1479, 1441,
	3, 2, 2, 2, 1479, 1445, 3, 2, 2, 2, 1479, 1447, 3, 2, 2, 2, 1479, 1449,
	3, 2, 2, 2, 1479, 1451, 3, 2, 2, 2, 1479, 1452, 3, 2, 2, 2, 1479, 1456,
	3, 2, 2, 2, 1479, 1465, 3, 2, 2, 2, 1479, 1472, 3, 2, 2, 2, 1480, 83, 3,
	2, 2, 2, 1481, 1483, 7, 29, 2, 2, 1482, 1484, 5, 528, 265, 2, 1483, 1482,
	3, 2, 2, 2, 1483, 1484, 3, 2, 2, 2, 1484, 1486, 3, 2, 2, 2, 1485, 1481,
	3, 2, 2, 2, 1485, 1486, 3, 2, 2, 2, 1486, 1487, 3, 2, 2, 2, 1487, 1488,
	7, 120, 2, 2, 1488, 1490, 7, 85, 2, 2, 1489, 1491, 5, 528, 265, 2, 1490,
	1489, 3, 2, 2, 2, 1490, 1491, 3, 2, 2, 2, 1491, 1493, 3, 2, 2, 2, 1492,
	1494, 5, 64, 33, 2, 1493, 1492, 3, 2, 2, 2, 1493, 1494, 3, 2, 2, 2, 1494,
	1495, 3, 2, 2, 2, 1495, 1499, 5, 564, 283, 2, 1496, 1498, 5, 66, 34, 2,
	1497, 1496, 3, 2, 2, 2, 1498, 1501, 3, 2, 2, 2, 1499, 1497, 3, 2, 2, 2,
	1499, 1500, 3, 2, 2, 2, 1500, 1551, 3, 2, 2, 2, 1501, 1499, 3, 2, 2, 2,
	1502, 1504, 7, 29, 2, 2, 1503, 1505, 5, 528, 265, 2, 1504, 1503, 3, 2,
	2, 2, 1504, 1505, 3, 2, 2, 2, 1505, 1507, 3, 2, 2, 2, 1506, 1502, 3, 2,
	2, 2, 1506, 1507, 3, 2, 2, 2, 1507, 1508, 3, 2, 2, 2, 1508, 1510, 7, 167,
	2, 2, 1509, 1511, 9, 20, 2, 2, 1510, 1509, 3, 2, 2, 2, 1510, 1511, 3, 2,
	2, 2, 1511, 1513, 3, 2, 2, 2, 1512, 1514, 5, 528, 265, 2, 1513, 1512, 3,
	2, 2, 2, 1513, 1514, 3, 2, 2, 2, 1514, 1516, 3, 2, 2, 2, 1515, 1517, 5,
	64, 33, 2, 1516, 1515, 3, 2, 2, 2, 1516, 1517, 3, 2, 2, 2, 1517, 1518,
	3, 2, 2, 2, 1518, 1522, 5, 564, 283, 2, 1519, 1521, 5, 66, 34, 2, 1520,
	1519, 3, 2, 2, 2, 1521, 1524, 3, 2, 2, 2, 1522, 1520, 3, 2, 2, 2, 1522,
	1523, 3, 2, 2, 2, 1523, 1551, 3, 2, 2, 2, 1524, 1522, 3, 2, 2, 2, 1525,
	1527, 7, 29, 2, 2, 1526, 1528, 5, 528, 265, 2, 1527, 1526, 3, 2, 2, 2,
	1527, 1528, 3, 2, 2, 2, 1528, 1530, 3, 2, 2, 2, 1529, 1525, 3, 2, 2, 2,
	1529, 1530, 3, 2, 2, 2, 1530, 1531, 3, 2, 2, 2, 1531, 1532, 7, 63, 2, 2,
	1532, 1534, 7, 85, 2, 2, 1533, 1535, 5, 528, 265, 2, 1534, 1533, 3, 2,
	2, 2, 1534, 1535, 3, 2, 2, 2, 1535, 1536, 3, 2, 2, 2, 1536, 1537, 5, 564,
	283, 2, 1537, 1538, 5, 86, 44, 2, 1538, 1551, 3, 2, 2, 2, 1539, 1541, 7,
	29, 2, 2, 1540, 1542, 5, 528, 265, 2, 1541, 1540, 3, 2, 2, 2, 1541, 1542,
	3, 2, 2, 2, 1542, 1544, 3, 2, 2, 2, 1543, 1539, 3, 2, 2, 2, 1543, 1544,
	3, 2, 2, 2, 1544, 1545, 3, 2, 2, 2, 1545, 1546, 7, 25, 2, 2, 1546, 1547,
	7, 1063, 2, 2, 1547, 1548, 5, 606, 304, 2, 1548, 1549, 7, 1064, 2, 2, 1549,
	1551, 3, 2, 2, 2, 1550, 1485, 3, 2, 2, 2, 1550, 1506, 3, 2, 2, 2, 1550,
	1529, 3, 2, 2, 2, 1550, 1543, 3, 2, 2, 2, 1551, 85, 3, 2, 2, 2, 1552, 1553,
	7, 126, 2, 2, 1553, 1555, 5, 504, 253, 2, 1554, 1556, 5, 564, 283, 2, 1555,
	1554, 3, 2, 2, 2, 1555, 1556, 3, 2, 2, 2, 1556, 1559, 3, 2, 2, 2, 1557,
	1558, 7, 101, 2, 2, 1558, 1560, 9, 21, 2, 2, 1559, 1557, 3, 2, 2, 2, 1559,
	1560, 3, 2, 2, 2, 1560, 1562, 3, 2, 2, 2, 1561, 1563, 5, 88, 45, 2, 1562,
	1561, 3, 2, 2, 2, 1562, 1563, 3, 2, 2, 2, 1563, 87, 3, 2, 2, 2, 1564, 1565,
	7, 110, 2, 2, 1565, 1566, 7, 42, 2, 2, 1566, 1570, 5, 90, 46, 2, 1567,
	1568, 7, 110, 2, 2, 1568, 1569, 7, 170, 2, 2, 1569, 1571, 5, 90, 46, 2,
	1570, 1567, 3, 2, 2, 2, 1570, 1571, 3, 2, 2, 2, 1571, 1581, 3, 2, 2, 2,
	1572, 1573, 7, 110, 2, 2, 1573, 1574, 7, 170, 2, 2, 1574, 1578, 5, 90,
	46, 2, 1575, 1576, 7, 110, 2, 2, 1576, 1577, 7, 42, 2, 2, 1577, 1579, 5,
	90, 46, 2, 1578, 1575, 3, 2, 2, 2, 1578, 1579, 3, 2, 2, 2, 1579, 1581,
	3, 2, 2, 2, 1580, 1564, 3, 2, 2, 2, 1580, 1572, 3, 2, 2, 2, 1581, 89, 3,
	2, 2, 2, 1582, 1589, 7, 134, 2, 2, 1583, 1589, 7, 20, 2, 2, 1584, 1585,
	7, 142, 2, 2, 1585, 1589, 7, 107, 2, 2, 1586, 1587, 7, 483, 2, 2, 1587,
	1589, 7, 305, 2, 2, 1588, 1582, 3, 2, 2, 2, 1588, 1583, 3, 2, 2, 2, 1588,
	1584, 3, 2, 2, 2, 1588, 1586, 3, 2, 2, 2, 1589, 91, 3, 2, 2, 2, 1590, 1592,
	9, 20, 2, 2, 1591, 1593, 5, 528, 265, 2, 1592, 1591, 3, 2, 2, 2, 1592,
	1593, 3, 2, 2, 2, 1593, 1595, 3, 2, 2, 2, 1594, 1596, 5, 64, 33, 2, 1595,
	1594, 3, 2, 2, 2, 1595, 1596, 3, 2, 2, 2, 1596, 1597, 3, 2, 2, 2, 1597,
	1601, 5, 564, 283, 2, 1598, 1600, 5, 66, 34, 2, 1599, 1598, 3, 2, 2, 2,
	1600, 1603, 3, 2, 2, 2, 1601, 1599, 3, 2, 2, 2, 1601, 1602, 3, 2, 2, 2,
	1602, 1619, 3, 2, 2, 2, 1603, 1601, 3, 2, 2, 2, 1604, 1606, 9, 22, 2, 2,
	1605, 1607, 9, 20, 2, 2, 1606, 1605, 3, 2, 2, 2, 1606, 1607, 3, 2, 2, 2,
	1607, 1609, 3, 2, 2, 2, 1608, 1610, 5, 528, 265, 2, 1609, 1608, 3, 2, 2,
	2, 1609, 1610, 3, 2, 2, 2, 1610, 1611, 3, 2, 2, 2, 1611, 1615, 5, 564,
	283, 2, 1612, 1614, 5, 66, 34, 2, 1613, 1612, 3, 2, 2, 2, 1614, 1617, 3,
	2, 2, 2, 1615, 1613, 3, 2, 2, 2, 1615, 1616, 3, 2, 2, 2, 1616, 1619, 3,
	2, 2, 2, 1617, 1615, 3, 2, 2, 2, 1618, 1590, 3, 2, 2, 2, 1618, 1604, 3,
	2, 2, 2, 1619, 93, 3, 2, 2, 2, 1620, 1622, 7, 376, 2, 2, 1621, 1623, 7,
	1054, 2, 2, 1622, 1621, 3, 2, 2, 2, 1622, 1623, 3, 2, 2, 2, 1623, 1624,
	3, 2, 2, 2, 1624, 1765, 5, 518, 260, 2, 1625, 1627, 7, 314, 2, 2, 1626,
	1628, 7, 1054, 2, 2, 1627, 1626, 3, 2, 2, 2, 1627, 1628, 3, 2, 2, 2, 1628,
	1629, 3, 2, 2, 2, 1629, 1765, 5, 534, 268, 2, 1630, 1632, 7, 315, 2, 2,
	1631, 1633, 7, 1054, 2, 2, 1632, 1631, 3, 2, 2, 2, 1632, 1633, 3, 2, 2,
	2, 1633, 1634, 3, 2, 2, 2, 1634, 1765, 5, 534, 268, 2, 1635, 1637, 7, 40,
	2, 2, 1636, 1635, 3, 2, 2, 2, 1636, 1637, 3, 2, 2, 2, 1637, 1641, 3, 2,
	2, 2, 1638, 1639, 7, 24, 2, 2, 1639, 1642, 7, 142, 2, 2, 1640, 1642, 7,
	774, 2, 2, 1641, 1638, 3, 2, 2, 2, 1641, 1640, 3, 2, 2, 2, 1642, 1644,
	3, 2, 2, 2, 1643, 1645, 7, 1054, 2, 2, 1644, 1643, 3, 2, 2, 2, 1644, 1645,
	3, 2, 2, 2, 1645, 1648, 3, 2, 2, 2, 1646, 1649, 5, 514, 258, 2, 1647, 1649,
	7, 40, 2, 2, 1648, 1646, 3, 2, 2, 2, 1648, 1647, 3, 2, 2, 2, 1649, 1765,
	3, 2, 2, 2, 1650, 1652, 9, 23, 2, 2, 1651, 1653, 7, 1054, 2, 2, 1652, 1651,
	3, 2, 2, 2, 1652, 1653, 3, 2, 2, 2, 1653, 1654, 3, 2, 2, 2, 1654, 1765,
	9, 24, 2, 2, 1655, 1657, 7, 40, 2, 2, 1656, 1655, 3, 2, 2, 2, 1656, 1657,
	3, 2, 2, 2, 1657, 1658, 3, 2, 2, 2, 1658, 1660, 7, 26, 2, 2, 1659, 1661,
	7, 1054, 2, 2, 1660, 1659, 3, 2, 2, 2, 1660, 1661, 3, 2, 2, 2, 1661, 1662,
	3, 2, 2, 2, 1662, 1765, 5, 516, 259, 2, 1663, 1665, 7, 339, 2, 2, 1664,
	1666, 7, 1054, 2, 2, 1665, 1664, 3, 2, 2, 2, 1665, 1666, 3, 2, 2, 2, 1666,
	1667, 3, 2, 2, 2, 1667, 1765, 7, 1078, 2, 2, 1668, 1670, 7, 344, 2, 2,
	1669, 1671, 7, 1054, 2, 2, 1670, 1669, 3, 2, 2, 2, 1670, 1671, 3, 2, 2,
	2, 1671, 1672, 3, 2, 2, 2, 1672, 1765, 9, 25, 2, 2, 1673, 1675, 7, 346,
	2, 2, 1674, 1676, 7, 1054, 2, 2, 1675, 1674, 3, 2, 2, 2, 1675, 1676, 3,
	2, 2, 2, 1676, 1677, 3, 2, 2, 2, 1677, 1765, 7, 1078, 2, 2, 1678, 1679,
	7, 357, 2, 2, 1679, 1681, 7, 364, 2, 2, 1680, 1682, 7, 1054, 2, 2, 1681,
	1680, 3, 2, 2, 2, 1681, 1682, 3, 2, 2, 2, 1682, 1683, 3, 2, 2, 2, 1683,
	1765, 7, 1078, 2, 2, 1684, 1686, 7, 362, 2, 2, 1685, 1687, 7, 1054, 2,
	2, 1686, 1685, 3, 2, 2, 2, 1686, 1687, 3, 2, 2, 2, 1687, 1688, 3, 2, 2,
	2, 1688, 1765, 9, 24, 2, 2, 1689, 1691, 7, 373, 2, 2, 1690, 1692, 7, 1054,
	2, 2, 1691, 1690, 3, 2, 2, 2, 1691, 1692, 3, 2, 2, 2, 1692, 1693, 3, 2,
	2, 2, 1693, 1765, 7, 1078, 2, 2, 1694, 1695, 7, 75, 2, 2, 1695, 1697, 7,
	364, 2, 2, 1696, 1698, 7, 1054, 2, 2, 1697, 1696, 3, 2, 2, 2, 1697, 1698,
	3, 2, 2, 2, 1698, 1699, 3, 2, 2, 2, 1699, 1765, 7, 1078, 2, 2, 1700, 1702,
	7, 418, 2, 2, 1701, 1703, 7, 1054, 2, 2, 1702, 1701, 3, 2, 2, 2, 1702,
	1703, 3, 2, 2, 2, 1703, 1704, 3, 2, 2, 2, 1704, 1765, 9, 26, 2, 2, 1705,
	1707, 7, 429, 2, 2, 1706, 1708, 7, 1054, 2, 2, 1707, 1706, 3, 2, 2, 2,
	1707, 1708, 3, 2, 2, 2, 1708, 1709, 3, 2, 2, 2, 1709, 1765, 5, 536, 269,
	2, 1710, 1712, 7, 462, 2, 2, 1711, 1713, 7, 1054, 2, 2, 1712, 1711, 3,
	2, 2, 2, 1712, 1713, 3, 2, 2, 2, 1713, 1714, 3, 2, 2, 2, 1714, 1765, 5,
	534, 268, 2, 1715, 1717, 7, 472, 2, 2, 1716, 1718, 7, 1054, 2, 2, 1717,
	1716, 3, 2, 2, 2, 1717, 1718, 3, 2, 2, 2, 1718, 1719, 3, 2, 2, 2, 1719,
	1765, 5, 534, 268, 2, 1720, 1722, 7, 498, 2, 2, 1721, 1723, 7, 1054, 2,
	2, 1722, 1721, 3, 2, 2, 2, 1722, 1723, 3, 2, 2, 2, 1723, 1724, 3, 2, 2,
	2, 1724, 1765, 9, 27, 2, 2, 1725, 1727, 7, 504, 2, 2, 1726, 1728, 7, 1054,
	2, 2, 1727, 1726, 3, 2, 2, 2, 1727, 1728, 3, 2, 2, 2, 1728, 1729, 3, 2,
	2, 2, 1729, 1765, 7, 1078, 2, 2, 1730, 1732, 7, 550, 2, 2, 1731, 1733,
	7, 1054, 2, 2, 1732, 1731, 3, 2, 2, 2, 1732, 1733, 3, 2, 2, 2, 1733, 1734,
	3, 2, 2, 2, 1734, 1765, 9, 28, 2, 2, 1735, 1737, 7, 577, 2, 2, 1736, 1738,
	7, 1054, 2, 2, 1737, 1736, 3, 2, 2, 2, 1737, 1738, 3, 2, 2, 2, 1738, 1739,
	3, 2, 2, 2, 1739, 1765, 9, 27, 2, 2, 1740, 1742, 7, 578, 2, 2, 1741, 1743,
	7, 1054, 2, 2, 1742, 1741, 3, 2, 2, 2, 1742, 1743, 3, 2, 2, 2, 1743, 1744,
	3, 2, 2, 2, 1744, 1765, 9, 27, 2, 2, 1745, 1747, 7, 579, 2, 2, 1746, 1748,
	7, 1054, 2, 2, 1747, 1746, 3, 2, 2, 2, 1747, 1748, 3, 2, 2, 2, 1748, 1749,
	3, 2, 2, 2, 1749, 1765, 5, 534, 268, 2, 1750, 1751, 7, 593, 2, 2, 1751,
	1753, 5, 528, 265, 2, 1752, 1754, 5, 96, 49, 2, 1753, 1752, 3, 2, 2, 2,
	1753, 1754, 3, 2, 2, 2, 1754, 1765, 3, 2, 2, 2, 1755, 1765, 5, 96, 49,
	2, 1756, 1758, 7, 166, 2, 2, 1757, 1759, 7, 1054, 2, 2, 1758, 1757, 3,
	2, 2, 2, 1758, 1759, 3, 2, 2, 2, 1759, 1760, 3, 2, 2, 2, 1760, 1761, 7,
	1063, 2, 2, 1761, 1762, 5, 562, 282, 2, 1762, 1763, 7, 1064, 2, 2, 1763,
	1765, 3, 2, 2, 2, 1764, 1620, 3, 2, 2, 2, 1764, 1625, 3, 2, 2, 2, 1764,
	1630, 3, 2, 2, 2, 1764, 1636, 3, 2, 2, 2, 1764, 1650, 3, 2, 2, 2, 1764,
	1656, 3, 2, 2, 2, 1764, 1663, 3, 2, 2, 2, 1764, 1668, 3, 2, 2, 2, 1764,
	1673, 3, 2, 2, 2, 1764, 1678, 3, 2, 2, 2, 1764, 1684, 3, 2, 2, 2, 1764,
	1689, 3, 2, 2, 2, 1764, 1694, 3, 2, 2, 2, 1764, 1700, 3, 2, 2, 2, 1764,
	1705, 3, 2, 2, 2, 1764, 1710, 3, 2, 2, 2, 1764, 1715, 3, 2, 2, 2, 1764,
	1720, 3, 2, 2, 2, 1764, 1725, 3, 2, 2, 2, 1764, 1730, 3, 2, 2, 2, 1764,
	1735, 3, 2, 2, 2, 1764, 1740, 3, 2, 2, 2, 1764, 1745, 3, 2, 2, 2, 1764,
	1750, 3, 2, 2, 2, 1764, 1755, 3, 2, 2, 2, 1764, 1756, 3, 2, 2, 2, 1765,
	95, 3, 2, 2, 2, 1766, 1767, 7, 582, 2, 2, 1767, 1768, 9, 18, 2, 2, 1768,
	97, 3, 2, 2, 2, 1769, 1770, 7, 119, 2, 2, 1770, 1771, 7, 18, 2, 2, 1771,
	1774, 5, 100, 51, 2, 1772, 1773, 7, 503, 2, 2, 1773, 1775, 5, 534, 268,
	2, 1774, 1772, 3, 2, 2, 2, 1774, 1775, 3, 2, 2, 2, 1775, 1783, 3, 2, 2,
	2, 1776, 1777, 7, 587, 2, 2, 1777, 1778, 7, 18, 2, 2, 1778, 1781, 5, 102,
	52, 2, 1779, 1780, 7, 588, 2, 2, 1780, 1782, 5, 534, 268, 2, 1781, 1779,
	3, 2, 2, 2, 1781, 1782, 3, 2, 2, 2, 1782, 1784, 3, 2, 2, 2, 1783, 1776,
	3, 2, 2, 2, 1783, 1784, 3, 2, 2, 2, 1784, 1796, 3, 2, 2, 2, 1785, 1786,
	7, 1063, 2, 2, 1786, 1791, 5, 104, 53, 2, 1787, 1788, 7, 1065, 2, 2, 1788,
	1790, 5, 104, 53, 2, 1789, 1787, 3, 2, 2, 2, 1790, 1793, 3, 2, 2, 2, 1791,
	1789, 3, 2, 2, 2, 1791, 1792, 3, 2, 2, 2, 1792, 1794, 3, 2, 2, 2, 1793,
	1791, 3, 2, 2, 2, 1794, 1795, 7, 1064, 2, 2, 1795, 1797, 3, 2, 2, 2, 1796,
	1785, 3, 2, 2, 2, 1796, 1797, 3, 2, 2, 2, 1797, 99, 3, 2, 2, 2, 1798, 1800,
	7, 93, 2, 2, 1799, 1798, 3, 2, 2, 2, 1799, 1800, 3, 2, 2, 2, 1800, 1801,
	3, 2, 2, 2, 1801, 1802, 7, 408, 2, 2, 1802, 1803, 7, 1063, 2, 2, 1803,
	1804, 5, 606, 304, 2, 1804, 1805, 7, 1064, 2, 2, 1805, 1844, 3, 2, 2, 2,
	1806, 1808, 7, 93, 2, 2, 1807, 1806, 3, 2, 2, 2, 1807, 1808, 3, 2, 2, 2,
	1808, 1809, 3, 2, 2, 2, 1809, 1813, 7, 85, 2, 2, 1810, 1811, 7, 308, 2,
	2, 1811, 1812, 7, 1054, 2, 2, 1812, 1814, 9, 29, 2, 2, 1813, 1810, 3, 2,
	2, 2, 1813, 1814, 3, 2, 2, 2, 1814, 1815, 3, 2, 2, 2, 1815, 1816, 7, 1063,
	2, 2, 1816, 1817, 5, 560, 281, 2, 1817, 1818, 7, 1064, 2, 2, 1818, 1844,
	3, 2, 2, 2, 1819, 1829, 7, 123, 2, 2, 1820, 1821, 7, 1063, 2, 2, 1821,
	1822, 5, 606, 304, 2, 1822, 1823, 7, 1064, 2, 2, 1823, 1830, 3, 2, 2, 2,
	1824, 1825, 7, 336, 2, 2, 1825, 1826, 7, 1063, 2, 2, 1826, 1827, 5, 560,
	281, 2, 1827, 1828, 7, 1064, 2, 2, 1828, 1830, 3, 2, 2, 2, 1829, 1820,
	3, 2, 2, 2, 1829, 1824, 3, 2, 2, 2, 1830, 1844, 3, 2, 2, 2, 1831, 1841,
	7, 435, 2, 2, 1832, 1833, 7, 1063, 2, 2, 1833, 1834, 5, 606, 304, 2, 1834,
	1835, 7, 1064, 2, 2, 1835, 1842, 3, 2, 2, 2, 1836, 1837, 7, 336, 2, 2,
	1837, 1838, 7, 1063, 2, 2, 1838, 1839, 5, 560, 281, 2, 1839, 1840, 7, 1064,
	2, 2, 1840, 1842, 3, 2, 2, 2, 1841, 1832, 3, 2, 2, 2, 1841, 1836, 3, 2,
	2, 2, 1842, 1844, 3, 2, 2, 2, 1843, 1799, 3, 2, 2, 2, 1843, 1807, 3, 2,
	2, 2, 1843, 1819, 3, 2, 2, 2, 1843, 1831, 3, 2, 2, 2, 1844, 101, 3, 2,
	2, 2, 1845, 1847, 7, 93, 2, 2, 1846, 1845, 3, 2, 2, 2, 1846, 1847, 3, 2,
	2, 2, 1847, 1848, 3, 2, 2, 2, 1848, 1849, 7, 408, 2, 2, 1849, 1850, 7,
	1063, 2, 2, 1850, 1851, 5, 606, 304, 2, 1851, 1852, 7, 1064, 2, 2, 1852,
	1867, 3, 2, 2, 2, 1853, 1855, 7, 93, 2, 2, 1854, 1853, 3, 2, 2, 2, 1854,
	1855, 3, 2, 2, 2, 1855, 1856, 3, 2, 2, 2, 1856, 1860, 7, 85, 2, 2, 1857,
	1858, 7, 308, 2, 2, 1858, 1859, 7, 1054, 2, 2, 1859, 1861, 9, 29, 2, 2,
	1860, 1857, 3, 2, 2, 2, 1860, 1861, 3, 2, 2, 2, 1861, 1862, 3, 2, 2, 2,
	1862, 1863, 7, 1063, 2, 2, 1863, 1864, 5, 560, 281, 2, 1864, 1865, 7, 1064,
	2, 2, 1865, 1867, 3, 2, 2, 2, 1866, 1846, 3, 2, 2, 2, 1866, 1854, 3, 2,
	2, 2, 1867, 103, 3, 2, 2, 2, 1868, 1869, 7, 119, 2, 2, 1869, 1870, 5, 528,
	265, 2, 1870, 1871, 7, 174, 2, 2, 1871, 1872, 7, 433, 2, 2, 1872, 1873,
	7, 596, 2, 2, 1873, 1874, 7, 1063, 2, 2, 1874, 1879, 5, 106, 54, 2, 1875,
	1876, 7, 1065, 2, 2, 1876, 1878, 5, 106, 54, 2, 1877, 1875, 3, 2, 2, 2,
	1878, 1881, 3, 2, 2, 2, 1879, 1877, 3, 2, 2, 2, 1879, 1880, 3, 2, 2, 2,
	1880, 1882, 3, 2, 2, 2, 1881, 1879, 3, 2, 2, 2, 1882, 1886, 7, 1064, 2,
	2, 1883, 1885, 5, 112, 57, 2, 1884, 1883, 3, 2, 2, 2, 1885, 1888, 3, 2,
	2, 2, 1886, 1884, 3, 2, 2, 2, 1886, 1887, 3, 2, 2, 2, 1887, 1900, 3, 2,
	2, 2, 1888, 1886, 3, 2, 2, 2, 1889, 1890, 7, 1063, 2, 2, 1890, 1895, 5,
	110, 56, 2, 1891, 1892, 7, 1065, 2, 2, 1892, 1894, 5, 110, 56, 2, 1893,
	1891, 3, 2, 2, 2, 1894, 1897, 3, 2, 2, 2, 1895, 1893, 3, 2, 2, 2, 1895,
	1896, 3, 2, 2, 2, 1896, 1898, 3, 2, 2, 2, 1897, 1895, 3, 2, 2, 2, 1898,
	1899, 7, 1064, 2, 2, 1899, 1901, 3, 2, 2, 2, 1900, 1889, 3, 2, 2, 2, 1900,
	1901, 3, 2, 2, 2, 1901, 2015, 3, 2, 2, 2, 1902, 1903, 7, 119, 2, 2, 1903,
	1904, 5, 528, 265, 2, 1904, 1905, 7, 174, 2, 2, 1905, 1906, 7, 433, 2,
	2, 1906, 1907, 7, 596, 2, 2, 1907, 1911, 5, 106, 54, 2, 1908, 1910, 5,
	112, 57, 2, 1909, 1908, 3, 2, 2, 2, 1910, 1913, 3, 2, 2, 2, 1911, 1909,
	3, 2, 2, 2, 1911, 1912, 3, 2, 2, 2, 1912, 1925, 3, 2, 2, 2, 1913, 1911,
	3, 2, 2, 2, 1914, 1915, 7, 1063, 2, 2, 1915, 1920, 5, 110, 56, 2, 1916,
	1917, 7, 1065, 2, 2, 1917, 1919, 5, 110, 56, 2, 1918, 1916, 3, 2, 2, 2,
	1919, 1922, 3, 2, 2, 2, 1920, 1918, 3, 2, 2, 2, 1920, 1921, 3, 2, 2, 2,
	1921, 1923, 3, 2, 2, 2, 1922, 1920, 3, 2, 2, 2, 1923, 1924, 7, 1064, 2,
	2, 1924, 1926, 3, 2, 2, 2, 1925, 1914, 3, 2, 2, 2, 1925, 1926, 3, 2, 2,
	2, 1926, 2015, 3, 2, 2, 2, 1927, 1928, 7, 119, 2, 2, 1928, 1929, 5, 528,
	265, 2, 1929, 1930, 7, 174, 2, 2, 1930, 1931, 7, 74, 2, 2, 1931, 1932,
	7, 1063, 2, 2, 1932, 1937, 5, 106, 54, 2, 1933, 1934, 7, 1065, 2, 2, 1934,
	1936, 5, 106, 54, 2, 1935, 1933, 3, 2, 2, 2, 1936, 1939, 3, 2, 2, 2, 1937,
	1935, 3, 2, 2, 2, 1937, 1938, 3, 2, 2, 2, 1938, 1940, 3, 2, 2, 2, 1939,
	1937, 3, 2, 2, 2, 1940, 1944, 7, 1064, 2, 2, 1941, 1943, 5, 112, 57, 2,
	1942, 1941, 3, 2, 2, 2, 1943, 1946, 3, 2, 2, 2, 1944, 1942, 3, 2, 2, 2,
	1944, 1945, 3, 2, 2, 2, 1945, 1958, 3, 2, 2, 2, 1946, 1944, 3, 2, 2, 2,
	1947, 1948, 7, 1063, 2, 2, 1948, 1953, 5, 110, 56, 2, 1949, 1950, 7, 1065,
	2, 2, 1950, 1952, 5, 110, 56, 2, 1951, 1949, 3, 2, 2, 2, 1952, 1955, 3,
	2, 2, 2, 1953, 1951, 3, 2, 2, 2, 1953, 1954, 3, 2, 2, 2, 1954, 1956, 3,
	2, 2, 2, 1955, 1953, 3, 2, 2, 2, 1956, 1957, 7, 1064, 2, 2, 1957, 1959,
	3, 2, 2, 2, 1958, 1947, 3, 2, 2, 2, 1958, 1959, 3, 2, 2, 2, 1959, 2015,
	3, 2, 2, 2, 1960, 1961, 7, 119, 2, 2, 1961, 1962, 5, 528, 265, 2, 1962,
	1963, 7, 174, 2, 2, 1963, 1964, 7, 74, 2, 2, 1964, 1965, 7, 1063, 2, 2,
	1965, 1970, 5, 108, 55, 2, 1966, 1967, 7, 1065, 2, 2, 1967, 1969, 5, 108,
	55, 2, 1968, 1966, 3, 2, 2, 2, 1969, 1972, 3, 2, 2, 2, 1970, 1968, 3, 2,
	2, 2, 1970, 1971, 3, 2, 2, 2, 1971, 1973, 3, 2, 2, 2, 1972, 1970, 3, 2,
	2, 2, 1973, 1977, 7, 1064, 2, 2, 1974, 1976, 5, 112, 57, 2, 1975, 1974,
	3, 2, 2, 2, 1976, 1979, 3, 2, 2, 2, 1977, 1975, 3, 2, 2, 2, 1977, 1978,
	3, 2, 2, 2, 1978, 1991, 3, 2, 2, 2, 1979, 1977, 3, 2, 2, 2, 1980, 1981,
	7, 1063, 2, 2, 1981, 1986, 5, 110, 56, 2, 1982, 1983, 7, 1065, 2, 2, 1983,
	1985, 5, 110, 56, 2, 1984, 1982, 3, 2, 2, 2, 1985, 1988, 3, 2, 2, 2, 1986,
	1984, 3, 2, 2, 2, 1986, 1987, 3, 2, 2, 2, 1987, 1989, 3, 2, 2, 2, 1988,
	1986, 3, 2, 2, 2, 1989, 1990, 7, 1064, 2, 2, 1990, 1992, 3, 2, 2, 2, 1991,
	1980, 3, 2, 2, 2, 1991, 1992, 3, 2, 2, 2, 1992, 2015, 3, 2, 2, 2, 1993,
	1994, 7, 119, 2, 2, 1994, 1998, 5, 528, 265, 2, 1995, 1997, 5, 112, 57,
	2, 1996, 1995, 3, 2, 2, 2, 1997, 2000, 3, 2, 2, 2, 1998, 1996, 3, 2, 2,
	2, 1998, 1999, 3, 2, 2, 2, 1999, 2012, 3, 2, 2, 2, 2000, 1998, 3, 2, 2,
	2, 2001, 2002, 7, 1063, 2, 2, 2002, 2007, 5, 110, 56, 2, 2003, 2004, 7,
	1065, 2, 2, 2004, 2006, 5, 110, 56, 2, 2005, 2003, 3, 2, 2, 2, 2006, 2009,
	3, 2, 2, 2, 2007, 2005, 3, 2, 2, 2, 2007, 2008, 3, 2, 2, 2, 2008, 2010,
	3, 2, 2, 2, 2009, 2007, 3, 2, 2, 2, 2010, 2011, 7, 1064, 2, 2, 2011, 2013,
	3, 2, 2, 2, 2012, 2001, 3, 2, 2, 2, 2012, 2013, 3, 2, 2, 2, 2013, 2015,
	3, 2, 2, 2, 2014, 1868, 3, 2, 2, 2, 2014, 1902, 3, 2, 2, 2, 2014, 1927,
	3, 2, 2, 2, 2014, 1960, 3, 2, 2, 2, 2014, 1993, 3, 2, 2, 2, 2015, 105,
	3, 2, 2, 2, 2016, 2020, 5, 546, 274, 2, 2017, 2020, 5, 606, 304, 2, 2018,
	2020, 7, 102, 2, 2, 2019, 2016, 3, 2, 2, 2, 2019, 2017, 3, 2, 2, 2, 2019,
	2018, 3, 2, 2, 2, 2020, 107, 3, 2, 2, 2, 2021, 2022, 7, 1063, 2, 2, 2022,
	2025, 5, 106, 54, 2, 2023, 2024, 7, 1065, 2, 2, 2024, 2026, 5, 106, 54,
	2, 2025, 2023, 3, 2, 2, 2, 2026, 2027, 3, 2, 2, 2, 2027, 2025, 3, 2, 2,
	2, 2027, 2028, 3, 2, 2, 2, 2028, 2029, 3, 2, 2, 2, 2029, 2030, 7, 1064,
	2, 2, 2030, 109, 3, 2, 2, 2, 2031, 2032, 7, 587, 2, 2, 2032, 2036, 5, 528,
	265, 2, 2033, 2035, 5, 112, 57, 2, 2034, 2033, 3, 2, 2, 2, 2035, 2038,
	3, 2, 2, 2, 2036, 2034, 3, 2, 2, 2, 2036, 2037, 3, 2, 2, 2, 2037, 111,
	3, 2, 2, 2, 2038, 2036, 3, 2, 2, 2, 2039, 2041, 7, 582, 2, 2, 2040, 2039,
	3, 2, 2, 2, 2040, 2041, 3, 2, 2, 2, 2041, 2042, 3, 2, 2, 2, 2042, 2044,
	7, 376, 2, 2, 2043, 2045, 7, 1054, 2, 2, 2044, 2043, 3, 2, 2, 2, 2044,
	2045, 3, 2, 2, 2, 2045, 2046, 3, 2, 2, 2, 2046, 2085, 5, 518, 260, 2, 2047,
	2049, 7, 339, 2, 2, 2048, 2050, 7, 1054, 2, 2, 2049, 2048, 3, 2, 2, 2,
	2049, 2050, 3, 2, 2, 2, 2050, 2051, 3, 2, 2, 2, 2051, 2085, 7, 1078, 2,
	2, 2052, 2053, 7, 357, 2, 2, 2053, 2055, 7, 364, 2, 2, 2054, 2056, 7, 1054,
	2, 2, 2055, 2054, 3, 2, 2, 2, 2055, 2056, 3, 2, 2, 2, 2056, 2057, 3, 2,
	2, 2, 2057, 2085, 7, 1078, 2, 2, 2058, 2059, 7, 75, 2, 2, 2059, 2061, 7,
	364, 2, 2, 2060, 2062, 7, 1054, 2, 2, 2061, 2060, 3, 2, 2, 2, 2061, 2062,
	3, 2, 2, 2, 2062, 2063, 3, 2, 2, 2, 2063, 2085, 7, 1078, 2, 2, 2064, 2066,
	7, 462, 2, 2, 2065, 2067, 7, 1054, 2, 2, 2066, 2065, 3, 2, 2, 2, 2066,
	2067, 3, 2, 2, 2, 2067, 2068, 3, 2, 2, 2, 2068, 2085, 5, 534, 268, 2, 2069,
	2071, 7, 472, 2, 2, 2070, 2072, 7, 1054, 2, 2, 2071, 2070, 3, 2, 2, 2,
	2071, 2072, 3, 2, 2, 2, 2072, 2073, 3, 2, 2, 2, 2073, 2085, 5, 534, 268,
	2, 2074, 2076, 7, 593, 2, 2, 2075, 2077, 7, 1054, 2, 2, 2076, 2075, 3,
	2, 2, 2, 2076, 2077, 3, 2, 2, 2, 2077, 2078, 3, 2, 2, 2, 2078, 2085, 5,
	528, 265, 2, 2079, 2081, 7, 484, 2, 2, 2080, 2082, 7, 1054, 2, 2, 2081,
	2080, 3, 2, 2, 2, 2081, 2082, 3, 2, 2, 2, 2082, 2083, 3, 2, 2, 2, 2083,
	2085, 5, 528, 265, 2, 2084, 2040, 3, 2, 2, 2, 2084, 2047, 3, 2, 2, 2, 2084,
	2052, 3, 2, 2, 2, 2084, 2058, 3, 2, 2, 2, 2084, 2064, 3, 2, 2, 2, 2084,
	2069, 3, 2, 2, 2, 2084, 2074, 3, 2, 2, 2, 2084, 2079, 3, 2, 2, 2, 2085,
	113, 3, 2, 2, 2, 2086, 2087, 7, 9, 2, 2, 2087, 2089, 9, 2, 2, 2, 2088,
	2090, 5, 528, 265, 2, 2089, 2088, 3, 2, 2, 2, 2089, 2090, 3, 2, 2, 2, 2090,
	2092, 3, 2, 2, 2, 2091, 2093, 5, 50, 26, 2, 2092, 2091, 3, 2, 2, 2, 2093,
	2094, 3, 2, 2, 2, 2094, 2092, 3, 2, 2, 2, 2094, 2095, 3, 2, 2, 2, 2095,
	2105, 3, 2, 2, 2, 2096, 2097, 7, 9, 2, 2, 2097, 2098, 9, 2, 2, 2, 2098,
	2099, 5, 528, 265, 2, 2099, 2100, 7, 608, 2, 2, 2100, 2101, 7, 357, 2,
	2, 2101, 2102, 7, 364, 2, 2, 2102, 2103, 7, 478, 2, 2, 2103, 2105, 3, 2,
	2, 2, 2104, 2086, 3, 2, 2, 2, 2104, 2096, 3, 2, 2, 2, 2105, 115, 3, 2,
	2, 2, 2106, 2108, 7, 9, 2, 2, 2107, 2109, 5, 52, 27, 2, 2108, 2107, 3,
	2, 2, 2, 2108, 2109, 3, 2, 2, 2, 2109, 2110, 3, 2, 2, 2, 2110, 2111, 7,
	382, 2, 2, 2111, 2115, 5, 502, 252, 2, 2112, 2113, 7, 110, 2, 2, 2113,
	2114, 7, 552, 2, 2, 2114, 2116, 5, 54, 28, 2, 2115, 2112, 3, 2, 2, 2, 2115,
	2116, 3, 2, 2, 2, 2116, 2123, 3, 2, 2, 2, 2117, 2118, 7, 110, 2, 2, 2118,
	2120, 7, 342, 2, 2, 2119, 2121, 7, 105, 2, 2, 2120, 2119, 3, 2, 2, 2, 2120,
	2121, 3, 2, 2, 2, 2121, 2122, 3, 2, 2, 2, 2122, 2124, 7, 512, 2, 2, 2123,
	2117, 3, 2, 2, 2, 2123, 2124, 3, 2, 2, 2, 2124, 2128, 3, 2, 2, 2, 2125,
	2126, 7, 129, 2, 2, 2126, 2127, 7, 161, 2, 2, 2127, 2129, 5, 502, 252,
	2, 2128, 2125, 3, 2, 2, 2, 2128, 2129, 3, 2, 2, 2, 2129, 2131, 3, 2, 2,
	2, 2130, 2132, 5, 62, 32, 2, 2131, 2130, 3, 2, 2, 2, 2131, 2132, 3, 2,
	2, 2, 2132, 2135, 3, 2, 2, 2, 2133, 2134, 7, 339, 2, 2, 2134, 2136, 7,
	1078, 2, 2, 2135, 2133, 3, 2, 2, 2, 2135, 2136, 3, 2, 2, 2, 2136, 2139,
	3, 2, 2, 2, 2137, 2138, 7, 368, 2, 2, 2138, 2140, 5, 350, 176, 2, 2139,
	2137, 3, 2, 2, 2, 2139, 2140, 3, 2, 2, 2, 2140, 117, 3, 2, 2, 2, 2141,
	2142, 7, 9, 2, 2, 2142, 2143, 7, 402, 2, 2, 2143, 2147, 5, 502, 252, 2,
	2144, 2146, 5, 72, 37, 2, 2145, 2144, 3, 2, 2, 2, 2146, 2149, 3, 2, 2,
	2, 2147, 2145, 3, 2, 2, 2, 2147, 2148, 3, 2, 2, 2, 2148, 119, 3, 2, 2,
	2, 2149, 2147, 3, 2, 2, 2, 2150, 2151, 7, 9, 2, 2, 2151, 2152, 7, 420,
	2, 2, 2152, 2153, 7, 547, 2, 2, 2153, 2154, 7, 724, 2, 2, 2154, 2155, 7,
	439, 2, 2, 2155, 2156, 7, 85, 2, 2, 2156, 121, 3, 2, 2, 2, 2157, 2158,
	7, 9, 2, 2, 2158, 2159, 7, 437, 2, 2, 2159, 2160, 7, 69, 2, 2, 2160, 2161,
	5, 528, 265, 2, 2161, 2162, 7, 7, 2, 2, 2162, 2163, 7, 603, 2, 2, 2163,
	2169, 7, 1078, 2, 2, 2164, 2166, 7, 416, 2, 2, 2165, 2167, 7, 1054, 2,
	2, 2166, 2165, 3, 2, 2, 2, 2166, 2167, 3, 2, 2, 2, 2167, 2168, 3, 2, 2,
	2, 2168, 2170, 5, 536, 269, 2, 2169, 2164, 3, 2, 2, 2, 2169, 2170, 3, 2,
	2, 2, 2170, 2172, 3, 2, 2, 2, 2171, 2173, 7, 618, 2, 2, 2172, 2171, 3,
	2, 2, 2, 2172, 2173, 3, 2, 2, 2, 2173, 2174, 3, 2, 2, 2, 2174, 2176, 7,
	376, 2, 2, 2175, 2177, 7, 1054, 2, 2, 2176, 2175, 3, 2, 2, 2, 2176, 2177,
	3, 2, 2, 2, 2177, 2178, 3, 2, 2, 2, 2178, 2179, 5, 518, 260, 2, 2179, 123,
	3, 2, 2, 2, 2180, 2181, 7, 9, 2, 2, 2181, 2182, 7, 121, 2, 2, 2182, 2186,
	5, 502, 252, 2, 2183, 2185, 5, 72, 37, 2, 2184, 2183, 3, 2, 2, 2, 2185,
	2188, 3, 2, 2, 2, 2186, 2184, 3, 2, 2, 2, 2186, 2187, 3, 2, 2, 2, 2187,
	125, 3, 2, 2, 2, 2188, 2186, 3, 2, 2, 2, 2189, 2190, 7, 9, 2, 2, 2190,
	2191, 7, 554, 2, 2, 2191, 2192, 5, 528, 265, 2, 2192, 2193, 7, 496, 2,
	2, 2193, 2194, 7, 1063, 2, 2, 2194, 2199, 5, 74, 38, 2, 2195, 2196, 7,
	1065, 2, 2, 2196, 2198, 5, 74, 38, 2, 2197, 2195, 3, 2, 2, 2, 2198, 2201,
	3, 2, 2, 2, 2199, 2197, 3, 2, 2, 2, 2199, 2200, 3, 2, 2, 2, 2200, 2202,
	3, 2, 2, 2, 2201, 2199, 3, 2, 2, 2, 2202, 2203, 7, 1064, 2, 2, 2203, 127,
	3, 2, 2, 2, 2204, 2206, 7, 9, 2, 2, 2205, 2207, 9, 3, 2, 2, 2206, 2205,
	3, 2, 2, 2, 2206, 2207, 3, 2, 2, 2, 2207, 2209, 3, 2, 2, 2, 2208, 2210,
	7, 73, 2, 2, 2209, 2208, 3, 2, 2, 2, 2209, 2210, 3, 2, 2, 2, 2210, 2211,
	3, 2, 2, 2, 2211, 2212, 7, 158, 2, 2, 2212, 2221, 5, 504, 253, 2, 2213,
	2218, 5, 134, 68, 2, 2214, 2215, 7, 1065, 2, 2, 2215, 2217, 5, 134, 68,
	2, 2216, 2214, 3, 2, 2, 2, 2217, 2220, 3, 2, 2, 2, 2218, 2216, 3, 2, 2,
	2, 2218, 2219, 3, 2, 2, 2, 2219, 2222, 3, 2, 2, 2, 2220, 2218, 3, 2, 2,
	2, 2221, 2213, 3, 2, 2, 2, 2221, 2222, 3, 2, 2, 2, 2222, 2224, 3, 2, 2,
	2, 2223, 2225, 5, 98, 50, 2, 2224, 2223, 3, 2, 2, 2, 2224, 2225, 3, 2,
	2, 2, 2225, 129, 3, 2, 2, 2, 2226, 2227, 7, 9, 2, 2, 2227, 2228, 7, 593,
	2, 2, 2228, 2229, 5, 528, 265, 2, 2229, 2230, 9, 30, 2, 2, 2230, 2231,
	7, 358, 2, 2, 2231, 2235, 7, 1078, 2, 2, 2232, 2233, 7, 416, 2, 2, 2233,
	2234, 7, 1054, 2, 2, 2234, 2236, 5, 536, 269, 2, 2235, 2232, 3, 2, 2, 2,
	2235, 2236, 3, 2, 2, 2, 2236, 2238, 3, 2, 2, 2, 2237, 2239, 7, 618, 2,
	2, 2238, 2237, 3, 2, 2, 2, 2238, 2239, 3, 2, 2, 2, 2239, 2240, 3, 2, 2,
	2, 2240, 2242, 7, 376, 2, 2, 2241, 2243, 7, 1054, 2, 2, 2242, 2241, 3,
	2, 2, 2, 2242, 2243, 3, 2, 2, 2, 2243, 2244, 3, 2, 2, 2, 2244, 2245, 5,
	518, 260, 2, 2245, 131, 3, 2, 2, 2, 2246, 2250, 7, 9, 2, 2, 2247, 2248,
	7, 308, 2, 2, 2248, 2249, 7, 1054, 2, 2, 2249, 2251, 9, 12, 2, 2, 2250,
	2247, 3, 2, 2, 2, 2250, 2251, 3, 2, 2, 2, 2251, 2253, 3, 2, 2, 2, 2252,
	2254, 5, 52, 27, 2, 2253, 2252, 3, 2, 2, 2, 2253, 2254, 3, 2, 2, 2, 2254,
	2258, 3, 2, 2, 2, 2255, 2256, 7, 147, 2, 2, 2256, 2257, 7, 553, 2, 2, 2257,
	2259, 9, 13, 2, 2, 2258, 2255, 3, 2, 2, 2, 2258, 2259, 3, 2, 2, 2, 2259,
	2260, 3, 2, 2, 2, 2260, 2261, 7, 615, 2, 2, 2261, 2266, 5, 502, 252, 2,
	2262, 2263, 7, 1063, 2, 2, 2263, 2264, 5, 560, 281, 2, 2264, 2265, 7, 1064,
	2, 2, 2265, 2267, 3, 2, 2, 2, 2266, 2262, 3, 2, 2, 2, 2266, 2267, 3, 2,
	2, 2, 2267, 2268, 3, 2, 2, 2, 2268, 2269, 7, 13, 2, 2, 2269, 2276, 5, 180,
	91, 2, 2270, 2272, 7, 178, 2, 2, 2271, 2273, 9, 14, 2, 2, 2272, 2271, 3,
	2, 2, 2, 2272, 2273, 3, 2, 2, 2, 2273, 2274, 3, 2, 2, 2, 2274, 2275, 7,
	25, 2, 2, 2275, 2277, 7, 112, 2, 2, 2276, 2270, 3, 2, 2, 2, 2276, 2277,
	3, 2, 2, 2, 2277, 133, 3, 2, 2, 2, 2278, 2285, 5, 94, 48, 2, 2279, 2281,
	7, 1065, 2, 2, 2280, 2279, 3, 2, 2, 2, 2280, 2281, 3, 2, 2, 2, 2281, 2282,
	3, 2, 2, 2, 2282, 2284, 5, 94, 48, 2, 2283, 2280, 3, 2, 2, 2, 2284, 2287,
	3, 2, 2, 2, 2285, 2283, 3, 2, 2, 2, 2285, 2286, 3, 2, 2, 2, 2286, 2645,
	3, 2, 2, 2, 2287, 2285, 3, 2, 2, 2, 2288, 2290, 7, 7, 2, 2, 2289, 2291,
	7, 27, 2, 2, 2290, 2289, 3, 2, 2, 2, 2290, 2291, 3, 2, 2, 2, 2291, 2292,
	3, 2, 2, 2, 2292, 2293, 5, 528, 265, 2, 2293, 2297, 5, 80, 41, 2, 2294,
	2298, 7, 396, 2, 2, 2295, 2296, 7, 306, 2, 2, 2296, 2298, 5, 528, 265,
	2, 2297, 2294, 3, 2, 2, 2, 2297, 2295, 3, 2, 2, 2, 2297, 2298, 3, 2, 2,
	2, 2298, 2645, 3, 2, 2, 2, 2299, 2301, 7, 7, 2, 2, 2300, 2302, 7, 27, 2,
	2, 2301, 2300, 3, 2, 2, 2, 2301, 2302, 3, 2, 2, 2, 2302, 2303, 3, 2, 2,
	2, 2303, 2304, 7, 1063, 2, 2, 2304, 2305, 5, 528, 265, 2, 2305, 2312, 5,
	80, 41, 2, 2306, 2307, 7, 1065, 2, 2, 2307, 2308, 5, 528, 265, 2, 2308,
	2309, 5, 80, 41, 2, 2309, 2311, 3, 2, 2, 2, 2310, 2306, 3, 2, 2, 2, 2311,
	2314, 3, 2, 2, 2, 2312, 2310, 3, 2, 2, 2, 2312, 2313, 3, 2, 2, 2, 2313,
	2315, 3, 2, 2, 2, 2314, 2312, 3, 2, 2, 2, 2315, 2316, 7, 1064, 2, 2, 2316,
	2645, 3, 2, 2, 2, 2317, 2318, 7, 7, 2, 2, 2318, 2320, 9, 20, 2, 2, 2319,
	2321, 5, 528, 265, 2, 2320, 2319, 3, 2, 2, 2, 2320, 2321, 3, 2, 2, 2, 2321,
	2323, 3, 2, 2, 2, 2322, 2324, 5, 64, 33, 2, 2323, 2322, 3, 2, 2, 2, 2323,
	2324, 3, 2, 2, 2, 2324, 2325, 3, 2, 2, 2, 2325, 2329, 5, 564, 283, 2, 2326,
	2328, 5, 66, 34, 2, 2327, 2326, 3, 2, 2, 2, 2328, 2331, 3, 2, 2, 2, 2329,
	2327, 3, 2, 2, 2, 2329, 2330, 3, 2, 2, 2, 2330, 2645, 3, 2, 2, 2, 2331,
	2329, 3, 2, 2, 2, 2332, 2337, 7, 7, 2, 2, 2333, 2335, 7, 29, 2, 2, 2334,
	2336, 5, 528, 265, 2, 2335, 2334, 3, 2, 2, 2, 2335, 2336, 3, 2, 2, 2, 2336,
	2338, 3, 2, 2, 2, 2337, 2333, 3, 2, 2, 2, 2337, 2338, 3, 2, 2, 2, 2338,
	2339, 3, 2, 2, 2, 2339, 2340, 7, 120, 2, 2, 2340, 2342, 7, 85, 2, 2, 2341,
	2343, 5, 528, 265, 2, 2342, 2341, 3, 2, 2, 2, 2342, 2343, 3, 2, 2, 2, 2343,
	2345, 3, 2, 2, 2, 2344, 2346, 5, 64, 33, 2, 2345, 2344, 3, 2, 2, 2, 2345,
	2346, 3, 2, 2, 2, 2346, 2347, 3, 2, 2, 2, 2347, 2351, 5, 564, 283, 2, 2348,
	2350, 5, 66, 34, 2, 2349, 2348, 3, 2, 2, 2, 2350, 2353, 3, 2, 2, 2, 2351,
	2349, 3, 2, 2, 2, 2351, 2352, 3, 2, 2, 2, 2352, 2645, 3, 2, 2, 2, 2353,
	2351, 3, 2, 2, 2, 2354, 2359, 7, 7, 2, 2, 2355, 2357, 7, 29, 2, 2, 2356,
	2358, 5, 528, 265, 2, 2357, 2356, 3, 2, 2, 2, 2357, 2358, 3, 2, 2, 2, 2358,
	2360, 3, 2, 2, 2, 2359, 2355, 3, 2, 2, 2, 2359, 2360, 3, 2, 2, 2, 2360,
	2361, 3, 2, 2, 2, 2361, 2363, 7, 167, 2, 2, 2362, 2364, 9, 20, 2, 2, 2363,
	2362, 3, 2, 2, 2, 2363, 2364, 3, 2, 2, 2, 2364, 2366, 3, 2, 2, 2, 2365,
	2367, 5, 528, 265, 2, 2366, 2365, 3, 2, 2, 2, 2366, 2367, 3, 2, 2, 2, 2367,
	2369, 3, 2, 2, 2, 2368, 2370, 5, 64, 33, 2, 2369, 2368, 3, 2, 2, 2, 2369,
	2370, 3, 2, 2, 2, 2370, 2371, 3, 2, 2, 2, 2371, 2375, 5, 564, 283, 2, 2372,
	2374, 5, 66, 34, 2, 2373, 2372, 3, 2, 2, 2, 2374, 2377, 3, 2, 2, 2, 2375,
	2373, 3, 2, 2, 2, 2375, 2376, 3, 2, 2, 2, 2376, 2645, 3, 2, 2, 2, 2377,
	2375, 3, 2, 2, 2, 2378, 2379, 7, 7, 2, 2, 2379, 2381, 9, 22, 2, 2, 2380,
	2382, 9, 20, 2, 2, 2381, 2380, 3, 2, 2, 2, 2381, 2382, 3, 2, 2, 2, 2382,
	2384, 3, 2, 2, 2, 2383, 2385, 5, 528, 265, 2, 2384, 2383, 3, 2, 2, 2, 2384,
	2385, 3, 2, 2, 2, 2385, 2386, 3, 2, 2, 2, 2386, 2390, 5, 564, 283, 2, 2387,
	2389, 5, 66, 34, 2, 2388, 2387, 3, 2, 2, 2, 2389, 2392, 3, 2, 2, 2, 2390,
	2388, 3, 2, 2, 2, 2390, 2391, 3, 2, 2, 2, 2391, 2645, 3, 2, 2, 2, 2392,
	2390, 3, 2, 2, 2, 2393, 2398, 7, 7, 2, 2, 2394, 2396, 7, 29, 2, 2, 2395,
	2397, 5, 528, 265, 2, 2396, 2395, 3, 2, 2, 2, 2396, 2397, 3, 2, 2, 2, 2397,
	2399, 3, 2, 2, 2, 2398, 2394, 3, 2, 2, 2, 2398, 2399, 3, 2, 2, 2, 2399,
	2400, 3, 2, 2, 2, 2400, 2401, 7, 63, 2, 2, 2401, 2403, 7, 85, 2, 2, 2402,
	2404, 5, 528, 265, 2, 2403, 2402, 3, 2, 2, 2, 2403, 2404, 3, 2, 2, 2, 2404,
	2405, 3, 2, 2, 2, 2405, 2406, 5, 564, 283, 2, 2406, 2407, 5, 86, 44, 2,
	2407, 2645, 3, 2, 2, 2, 2408, 2413, 7, 7, 2, 2, 2409, 2411, 7, 29, 2, 2,
	2410, 2412, 5, 528, 265, 2, 2411, 2410, 3, 2, 2, 2, 2411, 2412, 3, 2, 2,
	2, 2412, 2414, 3, 2, 2, 2, 2413, 2409, 3, 2, 2, 2, 2413, 2414, 3, 2, 2,
	2, 2414, 2415, 3, 2, 2, 2, 2415, 2416, 7, 25, 2, 2, 2416, 2417, 7, 1063,
	2, 2, 2417, 2418, 5, 606, 304, 2, 2418, 2419, 7, 1064, 2, 2, 2419, 2645,
	3, 2, 2, 2, 2420, 2422, 7, 308, 2, 2, 2421, 2423, 7, 1054, 2, 2, 2422,
	2421, 3, 2, 2, 2, 2422, 2423, 3, 2, 2, 2, 2423, 2424, 3, 2, 2, 2, 2424,
	2645, 9, 5, 2, 2, 2425, 2427, 7, 9, 2, 2, 2426, 2428, 7, 27, 2, 2, 2427,
	2426, 3, 2, 2, 2, 2427, 2428, 3, 2, 2, 2, 2428, 2429, 3, 2, 2, 2, 2429,
	2435, 5, 528, 265, 2, 2430, 2431, 7, 142, 2, 2, 2431, 2432, 7, 40, 2, 2,
	2432, 2436, 5, 576, 289, 2, 2433, 2434, 7, 49, 2, 2, 2434, 2436, 7, 40,
	2, 2, 2435, 2430, 3, 2, 2, 2, 2435, 2433, 3, 2, 2, 2, 2436, 2645, 3, 2,
	2, 2, 2437, 2439, 7, 23, 2, 2, 2438, 2440, 7, 27, 2, 2, 2439, 2438, 3,
	2, 2, 2, 2439, 2440, 3, 2, 2, 2, 2440, 2441, 3, 2, 2, 2, 2441, 2442, 5,
	528, 265, 2, 2442, 2443, 5, 528, 265, 2, 2443, 2447, 5, 80, 41, 2, 2444,
	2448, 7, 396, 2, 2, 2445, 2446, 7, 306, 2, 2, 2446, 2448, 5, 528, 265,
	2, 2447, 2444, 3, 2, 2, 2, 2447, 2445, 3, 2, 2, 2, 2447, 2448, 3, 2, 2,
	2, 2448, 2645, 3, 2, 2, 2, 2449, 2450, 7, 129, 2, 2, 2450, 2451, 7, 27,
	2, 2, 2451, 2452, 5, 528, 265, 2, 2452, 2453, 7, 161, 2, 2, 2453, 2454,
	5, 528, 265, 2, 2454, 2645, 3, 2, 2, 2, 2455, 2457, 7, 96, 2, 2, 2456,
	2458, 7, 1054, 2, 2, 2457, 2456, 3, 2, 2, 2, 2457, 2458, 3, 2, 2, 2, 2458,
	2459, 3, 2, 2, 2, 2459, 2645, 9, 6, 2, 2, 2460, 2462, 7, 474, 2, 2, 2461,
	2463, 7, 27, 2, 2, 2462, 2461, 3, 2, 2, 2, 2462, 2463, 3, 2, 2, 2, 2463,
	2464, 3, 2, 2, 2, 2464, 2465, 5, 528, 265, 2, 2465, 2469, 5, 80, 41, 2,
	2466, 2470, 7, 396, 2, 2, 2467, 2468, 7, 306, 2, 2, 2468, 2470, 5, 528,
	265, 2, 2469, 2466, 3, 2, 2, 2, 2469, 2467, 3, 2, 2, 2, 2469, 2470, 3,
	2, 2, 2, 2470, 2645, 3, 2, 2, 2, 2471, 2473, 7, 49, 2, 2, 2472, 2474, 7,
	27, 2, 2, 2473, 2472, 3, 2, 2, 2, 2473, 2474, 3, 2, 2, 2, 2474, 2475, 3,
	2, 2, 2, 2475, 2477, 5, 528, 265, 2, 2476, 2478, 7, 134, 2, 2, 2477, 2476,
	3, 2, 2, 2, 2477, 2478, 3, 2, 2, 2, 2478, 2645, 3, 2, 2, 2, 2479, 2480,
	7, 49, 2, 2, 2480, 2481, 9, 31, 2, 2, 2481, 2645, 5, 528, 265, 2, 2482,
	2483, 7, 49, 2, 2, 2483, 2484, 7, 120, 2, 2, 2484, 2645, 7, 85, 2, 2, 2485,
	2486, 7, 129, 2, 2, 2486, 2487, 9, 20, 2, 2, 2487, 2488, 5, 528, 265, 2,
	2488, 2489, 7, 161, 2, 2, 2489, 2490, 5, 528, 265, 2, 2490, 2645, 3, 2,
	2, 2, 2491, 2492, 7, 9, 2, 2, 2492, 2493, 7, 75, 2, 2, 2493, 2494, 5, 528,
	265, 2, 2494, 2495, 9, 32, 2, 2, 2495, 2645, 3, 2, 2, 2, 2496, 2497, 7,
	49, 2, 2, 2497, 2498, 9, 20, 2, 2, 2498, 2645, 5, 528, 265, 2, 2499, 2500,
	7, 49, 2, 2, 2500, 2501, 7, 63, 2, 2, 2501, 2502, 7, 85, 2, 2, 2502, 2645,
	5, 528, 265, 2, 2503, 2504, 7, 365, 2, 2, 2504, 2645, 7, 86, 2, 2, 2505,
	2506, 7, 372, 2, 2, 2506, 2645, 7, 86, 2, 2, 2507, 2509, 7, 129, 2, 2,
	2508, 2510, 9, 33, 2, 2, 2509, 2508, 3, 2, 2, 2, 2509, 2510, 3, 2, 2, 2,
	2510, 2513, 3, 2, 2, 2, 2511, 2514, 5, 528, 265, 2, 2512, 2514, 5, 502,
	252, 2, 2513, 2511, 3, 2, 2, 2, 2513, 2512, 3, 2, 2, 2, 2514, 2645, 3,
	2, 2, 2, 2515, 2516, 7, 115, 2, 2, 2516, 2517, 7, 18, 2, 2, 2517, 2645,
	5, 560, 281, 2, 2518, 2519, 7, 31, 2, 2, 2519, 2520, 7, 161, 2, 2, 2520,
	2521, 7, 24, 2, 2, 2521, 2522, 7, 142, 2, 2, 2522, 2525, 5, 514, 258, 2,
	2523, 2524, 7, 26, 2, 2, 2524, 2526, 5, 516, 259, 2, 2525, 2523, 3, 2,
	2, 2, 2525, 2526, 3, 2, 2, 2, 2526, 2645, 3, 2, 2, 2, 2527, 2529, 7, 40,
	2, 2, 2528, 2527, 3, 2, 2, 2, 2528, 2529, 3, 2, 2, 2, 2529, 2530, 3, 2,
	2, 2, 2530, 2531, 7, 24, 2, 2, 2531, 2532, 7, 142, 2, 2, 2532, 2533, 7,
	1054, 2, 2, 2533, 2537, 5, 514, 258, 2, 2534, 2535, 7, 26, 2, 2, 2535,
	2536, 7, 1054, 2, 2, 2536, 2538, 5, 516, 259, 2, 2537, 2534, 3, 2, 2, 2,
	2537, 2538, 3, 2, 2, 2, 2538, 2645, 3, 2, 2, 2, 2539, 2540, 7, 366, 2,
	2, 2540, 2645, 7, 593, 2, 2, 2541, 2542, 7, 414, 2, 2, 2542, 2645, 7, 593,
	2, 2, 2543, 2645, 7, 62, 2, 2, 2544, 2545, 9, 34, 2, 2, 2545, 2645, 7,
	612, 2, 2, 2546, 2547, 7, 7, 2, 2, 2547, 2548, 7, 119, 2, 2, 2548, 2549,
	7, 1063, 2, 2, 2549, 2554, 5, 104, 53, 2, 2550, 2551, 7, 1065, 2, 2, 2551,
	2553, 5, 104, 53, 2, 2552, 2550, 3, 2, 2, 2, 2553, 2556, 3, 2, 2, 2, 2554,
	2552, 3, 2, 2, 2, 2554, 2555, 3, 2, 2, 2, 2555, 2557, 3, 2, 2, 2, 2556,
	2554, 3, 2, 2, 2, 2557, 2558, 7, 1064, 2, 2, 2558, 2645, 3, 2, 2, 2, 2559,
	2560, 7, 49, 2, 2, 2560, 2561, 7, 119, 2, 2, 2561, 2645, 5, 560, 281, 2,
	2562, 2563, 7, 366, 2, 2, 2563, 2566, 7, 119, 2, 2, 2564, 2567, 5, 560,
	281, 2, 2565, 2567, 7, 8, 2, 2, 2566, 2564, 3, 2, 2, 2, 2566, 2565, 3,
	2, 2, 2, 2567, 2568, 3, 2, 2, 2, 2568, 2645, 7, 593, 2, 2, 2569, 2570,
	7, 414, 2, 2, 2570, 2573, 7, 119, 2, 2, 2571, 2574, 5, 560, 281, 2, 2572,
	2574, 7, 8, 2, 2, 2573, 2571, 3, 2, 2, 2, 2573, 2572, 3, 2, 2, 2, 2574,
	2575, 3, 2, 2, 2, 2575, 2645, 7, 593, 2, 2, 2576, 2577, 7, 601, 2, 2, 2577,
	2580, 7, 119, 2, 2, 2578, 2581, 5, 560, 281, 2, 2579, 2581, 7, 8, 2, 2,
	2580, 2578, 3, 2, 2, 2, 2580, 2579, 3, 2, 2, 2, 2581, 2645, 3, 2, 2, 2,
	2582, 2583, 7, 334, 2, 2, 2583, 2584, 7, 119, 2, 2, 2584, 2645, 5, 534,
	268, 2, 2585, 2586, 7, 529, 2, 2, 2586, 2587, 7, 119, 2, 2, 2587, 2588,
	5, 560, 281, 2, 2588, 2589, 7, 81, 2, 2, 2589, 2590, 7, 1063, 2, 2, 2590,
	2595, 5, 104, 53, 2, 2591, 2592, 7, 1065, 2, 2, 2592, 2594, 5, 104, 53,
	2, 2593, 2591, 3, 2, 2, 2, 2594, 2597, 3, 2, 2, 2, 2595, 2593, 3, 2, 2,
	2, 2595, 2596, 3, 2, 2, 2, 2596, 2598, 3, 2, 2, 2, 2597, 2595, 3, 2, 2,
	2, 2598, 2599, 7, 1064, 2, 2, 2599, 2645, 3, 2, 2, 2, 2600, 2601, 7, 385,
	2, 2, 2601, 2602, 7, 119, 2, 2, 2602, 2603, 5, 528, 265, 2, 2603, 2604,
	7, 178, 2, 2, 2604, 2605, 7, 158, 2, 2, 2605, 2608, 5, 504, 253, 2, 2606,
	2607, 9, 34, 2, 2, 2607, 2609, 7, 612, 2, 2, 2608, 2606, 3, 2, 2, 2, 2608,
	2609, 3, 2, 2, 2, 2609, 2645, 3, 2, 2, 2, 2610, 2611, 7, 11, 2, 2, 2611,
	2614, 7, 119, 2, 2, 2612, 2615, 5, 560, 281, 2, 2613, 2615, 7, 8, 2, 2,
	2614, 2612, 3, 2, 2, 2, 2614, 2613, 3, 2, 2, 2, 2615, 2645, 3, 2, 2, 2,
	2616, 2617, 7, 25, 2, 2, 2617, 2620, 7, 119, 2, 2, 2618, 2621, 5, 560,
	281, 2, 2619, 2621, 7, 8, 2, 2, 2620, 2618, 3, 2, 2, 2, 2620, 2619, 3,
	2, 2, 2, 2621, 2645, 3, 2, 2, 2, 2622, 2623, 7, 111, 2, 2, 2623, 2626,
	7, 119, 2, 2, 2624, 2627, 5, 560, 281, 2, 2625, 2627, 7, 8, 2, 2, 2626,
	2624, 3, 2, 2, 2, 2626, 2625, 3, 2, 2, 2, 2627, 2645, 3, 2, 2, 2, 2628,
	2629, 7, 520, 2, 2, 2629, 2632, 7, 119, 2, 2, 2630, 2633, 5, 560, 281,
	2, 2631, 2633, 7, 8, 2, 2, 2632, 2630, 3, 2, 2, 2, 2632, 2631, 3, 2, 2,
	2, 2633, 2645, 3, 2, 2, 2, 2634, 2635, 7, 530, 2, 2, 2635, 2638, 7, 119,
	2, 2, 2636, 2639, 5, 560, 281, 2, 2637, 2639, 7, 8, 2, 2, 2638, 2636, 3,
	2, 2, 2, 2638, 2637, 3, 2, 2, 2, 2639, 2645, 3, 2, 2, 2, 2640, 2641, 7,
	528, 2, 2, 2641, 2645, 7, 502, 2, 2, 2642, 2643, 7, 608, 2, 2, 2643, 2645,
	7, 502, 2, 2, 2644, 2278, 3, 2, 2, 2, 2644, 2288, 3, 2, 2, 2, 2644, 2299,
	3, 2, 2, 2, 2644, 2317, 3, 2, 2, 2, 2644, 2332, 3, 2, 2, 2, 2644, 2354,
	3, 2, 2, 2, 2644, 2378, 3, 2, 2, 2, 2644, 2393, 3, 2, 2, 2, 2644, 2408,
	3, 2, 2, 2, 2644, 2420, 3, 2, 2, 2, 2644, 2425, 3, 2, 2, 2, 2644, 2437,
	3, 2, 2, 2, 2644, 2449, 3, 2, 2, 2, 2644, 2455, 3, 2, 2, 2, 2644, 2460,
	3, 2, 2, 2, 2644, 2471, 3, 2, 2, 2, 2644, 2479, 3, 2, 2, 2, 2644, 2482,
	3, 2, 2, 2, 2644, 2485, 3, 2, 2, 2, 2644, 2491, 3, 2, 2, 2, 2644, 2496,
	3, 2, 2, 2, 2644, 2499, 3, 2, 2, 2, 2644, 2503, 3, 2, 2, 2, 2644, 2505,
	3, 2, 2, 2, 2644, 2507, 3, 2, 2, 2, 2644, 2515, 3, 2, 2, 2, 2644, 2518,
	3, 2, 2, 2, 2644, 2528, 3, 2, 2, 2, 2644, 2539, 3, 2, 2, 2, 2644, 2541,
	3, 2, 2, 2, 2644, 2543, 3, 2, 2, 2, 2644, 2544, 3, 2, 2, 2, 2644, 2546,
	3, 2, 2, 2, 2644, 2559, 3, 2, 2, 2, 2644, 2562, 3, 2, 2, 2, 2644, 2569,
	3, 2, 2, 2, 2644, 2576, 3, 2, 2, 2, 2644, 2582, 3, 2, 2, 2, 2644, 2585,
	3, 2, 2, 2, 2644, 2600, 3, 2, 2, 2, 2644, 2610, 3, 2, 2, 2, 2644, 2616,
	3, 2, 2, 2, 2644, 2622, 3, 2, 2, 2, 2644, 2628, 3, 2, 2, 2, 2644, 2634,
	3, 2, 2, 2, 2644, 2640, 3, 2, 2, 2, 2644, 2642, 3, 2, 2, 2, 2645, 135,
	3, 2, 2, 2, 2646, 2647, 7, 49, 2, 2, 2647, 2649, 9, 2, 2, 2, 2648, 2650,
	5, 582, 292, 2, 2649, 2648, 3, 2, 2, 2, 2649, 2650, 3, 2, 2, 2, 2650, 2651,
	3, 2, 2, 2, 2651, 2652, 5, 528, 265, 2, 2652, 137, 3, 2, 2, 2, 2653, 2654,
	7, 49, 2, 2, 2654, 2656, 7, 382, 2, 2, 2655, 2657, 5, 582, 292, 2, 2656,
	2655, 3, 2, 2, 2, 2656, 2657, 3, 2, 2, 2, 2657, 2658, 3, 2, 2, 2, 2658,
	2659, 5, 502, 252, 2, 2659, 139, 3, 2, 2, 2, 2660, 2661, 7, 49, 2, 2, 2661,
	2663, 7, 75, 2, 2, 2662, 2664, 9, 3, 2, 2, 2663, 2662, 3, 2, 2, 2, 2663,
	2664, 3, 2, 2, 2, 2664, 2665, 3, 2, 2, 2, 2665, 2666, 5, 528, 265, 2, 2666,
	2667, 7, 110, 2, 2, 2667, 2680, 5, 504, 253, 2, 2668, 2670, 7, 308, 2,
	2, 2669, 2671, 7, 1054, 2, 2, 2670, 2669, 3, 2, 2, 2, 2670, 2671, 3, 2,
	2, 2, 2671, 2672, 3, 2, 2, 2, 2672, 2679, 9, 5, 2, 2, 2673, 2675, 7, 96,
	2, 2, 2674, 2676, 7, 1054, 2, 2, 2675, 2674, 3, 2, 2, 2, 2675, 2676, 3,
	2, 2, 2, 2676, 2677, 3, 2, 2, 2, 2677, 2679, 9, 6, 2, 2, 2678, 2668, 3,
	2, 2, 2, 2678, 2673, 3, 2, 2, 2, 2679, 2682, 3, 2, 2, 2, 2680, 2678, 3,
	2, 2, 2, 2680, 2681, 3, 2, 2, 2, 2681, 141, 3, 2, 2, 2, 2682, 2680, 3,
	2, 2, 2, 2683, 2684, 7, 49, 2, 2, 2684, 2685, 7, 437, 2, 2, 2685, 2686,
	7, 69, 2, 2, 2686, 2687, 5, 528, 265, 2, 2687, 2688, 7, 376, 2, 2, 2688,
	2689, 7, 1054, 2, 2, 2689, 2690, 5, 518, 260, 2, 2690, 143, 3, 2, 2, 2,
	2691, 2692, 7, 49, 2, 2, 2692, 2694, 7, 121, 2, 2, 2693, 2695, 5, 582,
	292, 2, 2694, 2693, 3, 2, 2, 2, 2694, 2695, 3, 2, 2, 2, 2695, 2696, 3,
	2, 2, 2, 2696, 2697, 5, 502, 252, 2, 2697, 145, 3, 2, 2, 2, 2698, 2699,
	7, 49, 2, 2, 2699, 2701, 7, 402, 2, 2, 2700, 2702, 5, 582, 292, 2, 2701,
	2700, 3, 2, 2, 2, 2701, 2702, 3, 2, 2, 2, 2702, 2703, 3, 2, 2, 2, 2703,
	2704, 5, 502, 252, 2, 2704, 147, 3, 2, 2, 2, 2705, 2706, 7, 49, 2, 2, 2706,
	2708, 7, 554, 2, 2, 2707, 2709, 5, 582, 292, 2, 2708, 2707, 3, 2, 2, 2,
	2708, 2709, 3, 2, 2, 2, 2709, 2710, 3, 2, 2, 2, 2710, 2711, 5, 528, 265,
	2, 2711, 149, 3, 2, 2, 2, 2712, 2714, 7, 49, 2, 2, 2713, 2715, 7, 594,
	2, 2, 2714, 2713, 3, 2, 2, 2, 2714, 2715, 3, 2, 2, 2, 2715, 2716, 3, 2,
	2, 2, 2716, 2718, 7, 158, 2, 2, 2717, 2719, 5, 582, 292, 2, 2718, 2717,
	3, 2, 2, 2, 2718, 2719, 3, 2, 2, 2, 2719, 2720, 3, 2, 2, 2, 2720, 2722,
	5, 562, 282, 2, 2721, 2723, 9, 35, 2, 2, 2722, 2721, 3, 2, 2, 2, 2722,
	2723, 3, 2, 2, 2, 2723, 151, 3, 2, 2, 2, 2724, 2725, 7, 49, 2, 2, 2725,
	2726, 7, 593, 2, 2, 2726, 2732, 5, 528, 265, 2, 2727, 2729, 7, 376, 2,
	2, 2728, 2730, 7, 1054, 2, 2, 2729, 2728, 3, 2, 2, 2, 2729, 2730, 3, 2,
	2, 2, 2730, 2731, 3, 2, 2, 2, 2731, 2733, 5, 518, 260, 2, 2732, 2727, 3,
	2, 2, 2, 2732, 2733, 3, 2, 2, 2, 2733, 153, 3, 2, 2, 2, 2734, 2735, 7,
	49, 2, 2, 2735, 2737, 7, 163, 2, 2, 2736, 2738, 5, 582, 292, 2, 2737, 2736,
	3, 2, 2, 2, 2737, 2738, 3, 2, 2, 2, 2738, 2739, 3, 2, 2, 2, 2739, 2740,
	5, 502, 252, 2, 2740, 155, 3, 2, 2, 2, 2741, 2742, 7, 49, 2, 2, 2742, 2744,
	7, 615, 2, 2, 2743, 2745, 5, 582, 292, 2, 2744, 2743, 3, 2, 2, 2, 2744,
	2745, 3, 2, 2, 2, 2745, 2746, 3, 2, 2, 2, 2746, 2751, 5, 502, 252, 2, 2747,
	2748, 7, 1065, 2, 2, 2748, 2750, 5, 502, 252, 2, 2749, 2747, 3, 2, 2, 2,
	2750, 2753, 3, 2, 2, 2, 2751, 2749, 3, 2, 2, 2, 2751, 2752, 3, 2, 2, 2,
	2752, 2755, 3, 2, 2, 2, 2753, 2751, 3, 2, 2, 2, 2754, 2756, 9, 35, 2, 2,
	2755, 2754, 3, 2, 2, 2, 2755, 2756, 3, 2, 2, 2, 2756, 157, 3, 2, 2, 2,
	2757, 2758, 7, 129, 2, 2, 2758, 2759, 7, 158, 2, 2, 2759, 2764, 5, 160,
	81, 2, 2760, 2761, 7, 1065, 2, 2, 2761, 2763, 5, 160, 81, 2, 2762, 2760,
	3, 2, 2, 2, 2763, 2766, 3, 2, 2, 2, 2764, 2762, 3, 2, 2, 2, 2764, 2765,
	3, 2, 2, 2, 2765, 159, 3, 2, 2, 2, 2766, 2764, 3, 2, 2, 2, 2767, 2768,
	5, 504, 253, 2, 2768, 2769, 7, 161, 2, 2, 2769, 2770, 5, 504, 253, 2, 2770,
	161, 3, 2, 2, 2, 2771, 2773, 7, 601, 2, 2, 2772, 2774, 7, 158, 2, 2, 2773,
	2772, 3, 2, 2, 2, 2773, 2774, 3, 2, 2, 2, 2774, 2775, 3, 2, 2, 2, 2775,
	2776, 5, 504, 253, 2, 2776, 163, 3, 2, 2, 2, 2777, 2778, 7, 19, 2, 2, 2778,
	2785, 5, 502, 252, 2, 2779, 2782, 7, 1063, 2, 2, 2780, 2783, 5, 570, 286,
	2, 2781, 2783, 5, 566, 284, 2, 2782, 2780, 3, 2, 2, 2, 2782, 2781, 3, 2,
	2, 2, 2782, 2783, 3, 2, 2, 2, 2783, 2784, 3, 2, 2, 2, 2784, 2786, 7, 1064,
	2, 2, 2785, 2779, 3, 2, 2, 2, 2785, 2786, 3, 2, 2, 2, 2786, 165, 3, 2,
	2, 2, 2787, 2790, 5, 192, 97, 2, 2788, 2790, 5, 194, 98, 2, 2789, 2787,
	3, 2, 2, 2, 2789, 2788, 3, 2, 2, 2, 2790, 167, 3, 2, 2, 2, 2791, 2792,
	7, 368, 2, 2, 2792, 2793, 5, 566, 284, 2, 2793, 169, 3, 2, 2, 2, 2794,
	2799, 5, 196, 99, 2, 2795, 2799, 5, 198, 100, 2, 2796, 2799, 5, 200, 101,
	2, 2797, 2799, 5, 202, 102, 2, 2798, 2794, 3, 2, 2, 2, 2798, 2795, 3, 2,
	2, 2, 2798, 2796, 3, 2, 2, 2, 2798, 2797, 3, 2, 2, 2, 2799, 171, 3, 2,
	2, 2, 2800, 2802, 7, 79, 2, 2, 2801, 2803, 9, 36, 2, 2, 2802, 2801, 3,
	2, 2, 2, 2802, 2803, 3, 2, 2, 2, 2803, 2805, 3, 2, 2, 2, 2804, 2806, 7,
	73, 2, 2, 2805, 2804, 3, 2, 2, 2, 2805, 2806, 3, 2, 2, 2, 2806, 2808, 3,
	2, 2, 2, 2807, 2809, 7, 81, 2, 2, 2808, 2807, 3, 2, 2, 2, 2808, 2809, 3,
	2, 2, 2, 2809, 2810, 3, 2, 2, 2, 2810, 2817, 5, 504, 253, 2, 2811, 2812,
	7, 119, 2, 2, 2812, 2814, 7, 1063, 2, 2, 2813, 2815, 5, 560, 281, 2, 2814,
	2813, 3, 2, 2, 2, 2814, 2815, 3, 2, 2, 2, 2815, 2816, 3, 2, 2, 2, 2816,
	2818, 7, 1064, 2, 2, 2817, 2811, 3, 2, 2, 2, 2817, 2818, 3, 2, 2, 2, 2818,
	2835, 3, 2, 2, 2, 2819, 2820, 7, 1063, 2, 2, 2820, 2821, 5, 560, 281, 2,
	2821, 2822, 7, 1064, 2, 2, 2822, 2824, 3, 2, 2, 2, 2823, 2819, 3, 2, 2,
	2, 2823, 2824, 3, 2, 2, 2, 2824, 2825, 3, 2, 2, 2, 2825, 2836, 5, 184,
	93, 2, 2826, 2827, 7, 142, 2, 2, 2827, 2832, 5, 186, 94, 2, 2828, 2829,
	7, 1065, 2, 2, 2829, 2831, 5, 186, 94, 2, 2830, 2828, 3, 2, 2, 2, 2831,
	2834, 3, 2, 2, 2, 2832, 2830, 3, 2, 2, 2, 2832, 2833, 3, 2, 2, 2, 2833,
	2836, 3, 2, 2, 2, 2834, 2832, 3, 2, 2, 2, 2835, 2823, 3, 2, 2, 2, 2835,
	2826, 3, 2, 2, 2, 2836, 2849, 3, 2, 2, 2, 2837, 2838, 7, 110, 2, 2, 2838,
	2839, 7, 370, 2, 2, 2839, 2840, 7, 85, 2, 2, 2840, 2841, 7, 170, 2, 2,
	2841, 2846, 5, 186, 94, 2, 2842, 2843, 7, 1065, 2, 2, 2843, 2845, 5, 186,
	94, 2, 2844, 2842, 3, 2, 2, 2, 2845, 2848, 3, 2, 2, 2, 2846, 2844, 3, 2,
	2, 2, 2846, 2847, 3, 2, 2, 2, 2847, 2850, 3, 2, 2, 2, 2848, 2846, 3, 2,
	2, 2, 2849, 2837, 3, 2, 2, 2, 2849, 2850, 3, 2, 2, 2, 2850, 173, 3, 2,
	2, 2, 2851, 2852, 7, 95, 2, 2, 2852, 2854, 7, 357, 2, 2, 2853, 2855, 9,
	37, 2, 2, 2854, 2853, 3, 2, 2, 2, 2854, 2855, 3, 2, 2, 2, 2855, 2857, 3,
	2, 2, 2, 2856, 2858, 7, 436, 2, 2, 2857, 2856, 3, 2, 2, 2, 2857, 2858,
	3, 2, 2, 2, 2858, 2859, 3, 2, 2, 2, 2859, 2860, 7, 76, 2, 2, 2860, 2862,
	7, 1078, 2, 2, 2861, 2863, 9, 8, 2, 2, 2862, 2861, 3, 2, 2, 2, 2862, 2863,
	3, 2, 2, 2, 2863, 2864, 3, 2, 2, 2, 2864, 2865, 7, 81, 2, 2, 2865, 2866,
	7, 158, 2, 2, 2866, 2872, 5, 504, 253, 2, 2867, 2868, 7, 119, 2, 2, 2868,
	2869, 7, 1063, 2, 2, 2869, 2870, 5, 560, 281, 2, 2870, 2871, 7, 1064, 2,
	2, 2871, 2873, 3, 2, 2, 2, 2872, 2867, 3, 2, 2, 2, 2872, 2873, 3, 2, 2,
	2, 2873, 2877, 3, 2, 2, 2, 2874, 2875, 7, 24, 2, 2, 2875, 2876, 7, 142,
	2, 2, 2876, 2878, 5, 514, 258, 2, 2877, 2874, 3, 2, 2, 2, 2877, 2878, 3,
	2, 2, 2, 2878, 2885, 3, 2, 2, 2, 2879, 2881, 9, 38, 2, 2, 2880, 2882, 5,
	244, 123, 2, 2881, 2880, 3, 2, 2, 2, 2882, 2883, 3, 2, 2, 2, 2883, 2881,
	3, 2, 2, 2, 2883, 2884, 3, 2, 2, 2, 2884, 2886, 3, 2, 2, 2, 2885, 2879,
	3, 2, 2, 2, 2885, 2886, 3, 2, 2, 2, 2886, 2893, 3, 2, 2, 2, 2887, 2889,
	7, 94, 2, 2, 2888, 2890, 5, 246, 124, 2, 2889, 2888, 3, 2, 2, 2, 2890,
	2891, 3, 2, 2, 2, 2891, 2889, 3, 2, 2, 2, 2891, 2892, 3, 2, 2, 2, 2892,
	2894, 3, 2, 2, 2, 2893, 2887, 3, 2, 2, 2, 2893, 2894, 3, 2, 2, 2, 2894,
	2899, 3, 2, 2, 2, 2895, 2896, 7, 73, 2, 2, 2896, 2897, 5, 534, 268, 2,
	2897, 2898, 9, 39, 2, 2, 2898, 2900, 3, 2, 2, 2, 2899, 2895, 3, 2, 2, 2,
	2899, 2900, 3, 2, 2, 2, 2900, 2912, 3, 2, 2, 2, 2901, 2902, 7, 1063, 2,
	2, 2902, 2907, 5, 188, 95, 2, 2903, 2904, 7, 1065, 2, 2, 2904, 2906, 5,
	188, 95, 2, 2905, 2903, 3, 2, 2, 2, 2906, 2909, 3, 2, 2, 2, 2907, 2905,
	3, 2, 2, 2, 2907, 2908, 3, 2, 2, 2, 2908, 2910, 3, 2, 2, 2, 2909, 2907,
	3, 2, 2, 2, 2910, 2911, 7, 1064, 2, 2, 2911, 2913, 3, 2, 2, 2, 2912, 2901,
	3, 2, 2, 2, 2912, 2913, 3, 2, 2, 2, 2913, 2923, 3, 2, 2, 2, 2914, 2915,
	7, 142, 2, 2, 2915, 2920, 5, 186, 94, 2, 2916, 2917, 7, 1065, 2, 2, 2917,
	2919, 5, 186, 94, 2, 2918, 2916, 3, 2, 2, 2, 2919, 2922, 3, 2, 2, 2, 2920,
	2918, 3, 2, 2, 2, 2920, 2921, 3, 2, 2, 2, 2921, 2924, 3, 2, 2, 2, 2922,
	2920, 3, 2, 2, 2, 2923, 2914, 3, 2, 2, 2, 2923, 2924, 3, 2, 2, 2, 2924,
	175, 3, 2, 2, 2, 2925, 2926, 7, 95, 2, 2, 2926, 2928, 7, 625, 2, 2, 2927,
	2929, 9, 37, 2, 2, 2928, 2927, 3, 2, 2, 2, 2928, 2929, 3, 2, 2, 2, 2929,
	2931, 3, 2, 2, 2, 2930, 2932, 7, 436, 2, 2, 2931, 2930, 3, 2, 2, 2, 2931,
	2932, 3, 2, 2, 2, 2932, 2933, 3, 2, 2, 2, 2933, 2934, 7, 76, 2, 2, 2934,
	2936, 7, 1078, 2, 2, 2935, 2937, 9, 8, 2, 2, 2936, 2935, 3, 2, 2, 2, 2936,
	2937, 3, 2, 2, 2, 2937, 2938, 3, 2, 2, 2, 2938, 2939, 7, 81, 2, 2, 2939,
	2940, 7, 158, 2, 2, 2940, 2944, 5, 504, 253, 2, 2941, 2942, 7, 24, 2, 2,
	2942, 2943, 7, 142, 2, 2, 2943, 2945, 5, 514, 258, 2, 2944, 2941, 3, 2,
	2, 2, 2944, 2945, 3, 2, 2, 2, 2945, 2952, 3, 2, 2, 2, 2946, 2947, 7, 549,
	2, 2, 2947, 2948, 7, 412, 2, 2, 2948, 2949, 7, 18, 2, 2, 2949, 2950, 7,
	1056, 2, 2, 2950, 2951, 7, 1078, 2, 2, 2951, 2953, 7, 1055, 2, 2, 2952,
	2946, 3, 2, 2, 2, 2952, 2953, 3, 2, 2, 2, 2953, 2958, 3, 2, 2, 2, 2954,
	2955, 7, 73, 2, 2, 2955, 2956, 5, 534, 268, 2, 2956, 2957, 9, 39, 2, 2,
	2957, 2959, 3, 2, 2, 2, 2958, 2954, 3, 2, 2, 2, 2958, 2959, 3, 2, 2, 2,
	2959, 2971, 3, 2, 2, 2, 2960, 2961, 7, 1063, 2, 2, 2961, 2966, 5, 188,
	95, 2, 2962, 2963, 7, 1065, 2, 2, 2963, 2965, 5, 188, 95, 2, 2964, 2962,
	3, 2, 2, 2, 2965, 2968, 3, 2, 2, 2, 2966, 2964, 3, 2, 2, 2, 2966, 2967,
	3, 2, 2, 2, 2967, 2969, 3, 2, 2, 2, 2968, 2966, 3, 2, 2, 2, 2969, 2970,
	7, 1064, 2, 2, 2970, 2972, 3, 2, 2, 2, 2971, 2960, 3, 2, 2, 2, 2971, 2972,
	3, 2, 2, 2, 2972, 2982, 3, 2, 2, 2, 2973, 2974, 7, 142, 2, 2, 2974, 2979,
	5, 186, 94, 2, 2975, 2976, 7, 1065, 2, 2, 2976, 2978, 5, 186, 94, 2, 2977,
	2975, 3, 2, 2, 2, 2978, 2981, 3, 2, 2, 2, 2979, 2977, 3, 2, 2, 2, 2979,
	2980, 3, 2, 2, 2, 2980, 2983, 3, 2, 2, 2, 2981, 2979, 3, 2, 2, 2, 2982,
	2973, 3, 2, 2, 2, 2982, 2983, 3, 2, 2, 2, 2983, 177, 3, 2, 2, 2, 2984,
	2986, 7, 131, 2, 2, 2985, 2987, 9, 40, 2, 2, 2986, 2985, 3, 2, 2, 2, 2986,
	2987, 3, 2, 2, 2, 2987, 2989, 3, 2, 2, 2, 2988, 2990, 7, 81, 2, 2, 2989,
	2988, 3, 2, 2, 2, 2989, 2990, 3, 2, 2, 2, 2990, 2991, 3, 2, 2, 2, 2991,
	2997, 5, 504, 253, 2, 2992, 2993, 7, 119, 2, 2, 2993, 2994, 7, 1063, 2,
	2, 2994, 2995, 5, 560, 281, 2, 2995, 2996, 7, 1064, 2, 2, 2996, 2998, 3,
	2, 2, 2, 2997, 2992, 3, 2, 2, 2, 2997, 2998, 3, 2, 2, 2, 2998, 3015, 3,
	2, 2, 2, 2999, 3000, 7, 1063, 2, 2, 3000, 3001, 5, 560, 281, 2, 3001, 3002,
	7, 1064, 2, 2, 3002, 3004, 3, 2, 2, 2, 3003, 2999, 3, 2, 2, 2, 3003, 3004,
	3, 2, 2, 2, 3004, 3005, 3, 2, 2, 2, 3005, 3016, 5, 184, 93, 2, 3006, 3007,
	7, 142, 2, 2, 3007, 3012, 5, 186, 94, 2, 3008, 3009, 7, 1065, 2, 2, 3009,
	3011, 5, 186, 94, 2, 3010, 3008, 3, 2, 2, 2, 3011, 3014, 3, 2, 2, 2, 3012,
	3010, 3, 2, 2, 2, 3012, 3013, 3, 2, 2, 2, 3013, 3016, 3, 2, 2, 2, 3014,
	3012, 3, 2, 2, 2, 3015, 3003, 3, 2, 2, 2, 3015, 3006, 3, 2, 2, 2, 3016,
	179, 3, 2, 2, 2, 3017, 3019, 5, 228, 115, 2, 3018, 3020, 5, 190, 96, 2,
	3019, 3018, 3, 2, 2, 2, 3019, 3020, 3, 2, 2, 2, 3020, 3073, 3, 2, 2, 2,
	3021, 3023, 5, 224, 113, 2, 3022, 3024, 5, 190, 96, 2, 3023, 3022, 3, 2,
	2, 2, 3023, 3024, 3, 2, 2, 2, 3024, 3073, 3, 2, 2, 2, 3025, 3027, 5, 230,
	116, 2, 3026, 3028, 5, 234, 118, 2, 3027, 3026, 3, 2, 2, 2, 3028, 3029,
	3, 2, 2, 2, 3029, 3027, 3, 2, 2, 2, 3029, 3030, 3, 2, 2, 2, 3030, 3039,
	3, 2, 2, 2, 3031, 3033, 7, 166, 2, 2, 3032, 3034, 9, 41, 2, 2, 3033, 3032,
	3, 2, 2, 2, 3033, 3034, 3, 2, 2, 2, 3034, 3037, 3, 2, 2, 2, 3035, 3038,
	5, 228, 115, 2, 3036, 3038, 5, 224, 113, 2, 3037, 3035, 3, 2, 2, 2, 3037,
	3036, 3, 2, 2, 2, 3038, 3040, 3, 2, 2, 2, 3039, 3031, 3, 2, 2, 2, 3039,
	3040, 3, 2, 2, 2, 3040, 3042, 3, 2, 2, 2, 3041, 3043, 5, 208, 105, 2, 3042,
	3041, 3, 2, 2, 2, 3042, 3043, 3, 2, 2, 2, 3043, 3045, 3, 2, 2, 2, 3044,
	3046, 5, 256, 129, 2, 3045, 3044, 3, 2, 2, 2, 3045, 3046, 3, 2, 2, 2, 3046,
	3048, 3, 2, 2, 2, 3047, 3049, 5, 190, 96, 2, 3048, 3047, 3, 2, 2, 2, 3048,
	3049, 3, 2, 2, 2, 3049, 3073, 3, 2, 2, 2, 3050, 3052, 5, 226, 114, 2, 3051,
	3053, 5, 232, 117, 2, 3052, 3051, 3, 2, 2, 2, 3053, 3054, 3, 2, 2, 2, 3054,
	3052, 3, 2, 2, 2, 3054, 3055, 3, 2, 2, 2, 3055, 3061, 3, 2, 2, 2, 3056,
	3058, 7, 166, 2, 2, 3057, 3059, 9, 41, 2, 2, 3058, 3057, 3, 2, 2, 2, 3058,
	3059, 3, 2, 2, 2, 3059, 3060, 3, 2, 2, 2, 3060, 3062, 5, 224, 113, 2, 3061,
	3056, 3, 2, 2, 2, 3061, 3062, 3, 2, 2, 2, 3062, 3064, 3, 2, 2, 2, 3063,
	3065, 5, 208, 105, 2, 3064, 3063, 3, 2, 2, 2, 3064, 3065, 3, 2, 2, 2, 3065,
	3067, 3, 2, 2, 2, 3066, 3068, 5, 256, 129, 2, 3067, 3066, 3, 2, 2, 2, 3067,
	3068, 3, 2, 2, 2, 3068, 3070, 3, 2, 2, 2, 3069, 3071, 5, 190, 96, 2, 3070,
	3069, 3, 2, 2, 2, 3070, 3071, 3, 2, 2, 2, 3071, 3073, 3, 2, 2, 2, 3072,
	3017, 3, 2, 2, 2, 3072, 3021, 3, 2, 2, 2, 3072, 3025, 3, 2, 2, 2, 3072,
	3050, 3, 2, 2, 2, 3073, 181, 3, 2, 2, 2, 3074, 3077, 5, 204, 103, 2, 3075,
	3077, 5, 206, 104, 2, 3076, 3074, 3, 2, 2, 2, 3076, 3075, 3, 2, 2, 2, 3077,
	183, 3, 2, 2, 2, 3078, 3097, 5, 180, 91, 2, 3079, 3080, 9, 42, 2, 2, 3080,
	3082, 7, 1063, 2, 2, 3081, 3083, 5, 568, 285, 2, 3082, 3081, 3, 2, 2, 2,
	3082, 3083, 3, 2, 2, 2, 3083, 3084, 3, 2, 2, 2, 3084, 3093, 7, 1064, 2,
	2, 3085, 3086, 7, 1065, 2, 2, 3086, 3088, 7, 1063, 2, 2, 3087, 3089, 5,
	568, 285, 2, 3088, 3087, 3, 2, 2, 2, 3088, 3089, 3, 2, 2, 2, 3089, 3090,
	3, 2, 2, 2, 3090, 3092, 7, 1064, 2, 2, 3091, 3085, 3, 2, 2, 2, 3092, 3095,
	3, 2, 2, 2, 3093, 3091, 3, 2, 2, 2, 3093, 3094, 3, 2, 2, 2, 3094, 3097,
	3, 2, 2, 2, 3095, 3093, 3, 2, 2, 2, 3096, 3078, 3, 2, 2, 2, 3096, 3079,
	3, 2, 2, 2, 3097, 185, 3, 2, 2, 2, 3098, 3099, 5, 506, 254, 2, 3099, 3102,
	7, 1054, 2, 2, 3100, 3103, 5, 606, 304, 2, 3101, 3103, 7, 40, 2, 2, 3102,
	3100, 3, 2, 2, 2, 3102, 3101, 3, 2, 2, 2, 3103, 187, 3, 2, 2, 2, 3104,
	3107, 5, 528, 265, 2, 3105, 3107, 7, 1090, 2, 2, 3106, 3104, 3, 2, 2, 2,
	3106, 3105, 3, 2, 2, 2, 3107, 189, 3, 2, 2, 2, 3108, 3109, 7, 61, 2, 2,
	3109, 3115, 7, 170, 2, 2, 3110, 3111, 7, 96, 2, 2, 3111, 3112, 7, 74, 2,
	2, 3112, 3113, 7, 556, 2, 2, 3113, 3115, 7, 473, 2, 2, 3114, 3108, 3, 2,
	2, 2, 3114, 3110, 3, 2, 2, 2, 3115, 191, 3, 2, 2, 2, 3116, 3118, 7, 42,
	2, 2, 3117, 3119, 7, 98, 2, 2, 3118, 3117, 3, 2, 2, 2, 3118, 3119, 3, 2,
	2, 2, 3119, 3121, 3, 2, 2, 2, 3120, 3122, 7, 519, 2, 2, 3121, 3120, 3,
	2, 2, 2, 3121, 3122, 3, 2, 2, 2, 3122, 3124, 3, 2, 2, 2, 3123, 3125, 7,
	73, 2, 2, 3124, 3123, 3, 2, 2, 2, 3124, 3125, 3, 2, 2, 2, 3125, 3126, 3,
	2, 2, 2, 3126, 3127, 7, 64, 2, 2, 3127, 3133, 5, 504, 253, 2, 3128, 3129,
	7, 119, 2, 2, 3129, 3130, 7, 1063, 2, 2, 3130, 3131, 5, 560, 281, 2, 3131,
	3132, 7, 1064, 2, 2, 3132, 3134, 3, 2, 2, 2, 3133, 3128, 3, 2, 2, 2, 3133,
	3134, 3, 2, 2, 2, 3134, 3137, 3, 2, 2, 2, 3135, 3136, 7, 176, 2, 2, 3136,
	3138, 5, 606, 304, 2, 3137, 3135, 3, 2, 2, 2, 3137, 3138, 3, 2, 2, 2, 3138,
	3140, 3, 2, 2, 2, 3139, 3141, 5, 208, 105, 2, 3140, 3139, 3, 2, 2, 2, 3140,
	3141, 3, 2, 2, 2, 3141, 3144, 3, 2, 2, 2, 3142, 3143, 7, 92, 2, 2, 3143,
	3145, 5, 258, 130, 2, 3144, 3142, 3, 2, 2, 2, 3144, 3145, 3, 2, 2, 2, 3145,
	193, 3, 2, 2, 2, 3146, 3148, 7, 42, 2, 2, 3147, 3149, 7, 98, 2, 2, 3148,
	3147, 3, 2, 2, 2, 3148, 3149, 3, 2, 2, 2, 3149, 3151, 3, 2, 2, 2, 3150,
	3152, 7, 519, 2, 2, 3151, 3150, 3, 2, 2, 2, 3151, 3152, 3, 2, 2, 2, 3152,
	3154, 3, 2, 2, 2, 3153, 3155, 7, 73, 2, 2, 3154, 3153, 3, 2, 2, 2, 3154,
	3155, 3, 2, 2, 2, 3155, 3195, 3, 2, 2, 2, 3156, 3159, 5, 504, 253, 2, 3157,
	3158, 7, 1062, 2, 2, 3158, 3160, 7, 1046, 2, 2, 3159, 3157, 3, 2, 2, 2,
	3159, 3160, 3, 2, 2, 2, 3160, 3169, 3, 2, 2, 2, 3161, 3162, 7, 1065, 2,
	2, 3162, 3165, 5, 504, 253, 2, 3163, 3164, 7, 1062, 2, 2, 3164, 3166, 7,
	1046, 2, 2, 3165, 3163, 3, 2, 2, 2, 3165, 3166, 3, 2, 2, 2, 3166, 3168,
	3, 2, 2, 2, 3167, 3161, 3, 2, 2, 2, 3168, 3171, 3, 2, 2, 2, 3169, 3167,
	3, 2, 2, 2, 3169, 3170, 3, 2, 2, 2, 3170, 3172, 3, 2, 2, 2, 3171, 3169,
	3, 2, 2, 2, 3172, 3173, 7, 64, 2, 2, 3173, 3174, 5, 212, 107, 2, 3174,
	3196, 3, 2, 2, 2, 3175, 3176, 7, 64, 2, 2, 3176, 3179, 5, 504, 253, 2,
	3177, 3178, 7, 1062, 2, 2, 3178, 3180, 7, 1046, 2, 2, 3179, 3177, 3, 2,
	2, 2, 3179, 3180, 3, 2, 2, 2, 3180, 3189, 3, 2, 2, 2, 3181, 3182, 7, 1065,
	2, 2, 3182, 3185, 5, 504, 253, 2, 3183, 3184, 7, 1062, 2, 2, 3184, 3186,
	7, 1046, 2, 2, 3185, 3183, 3, 2, 2, 2, 3185, 3186, 3, 2, 2, 2, 3186, 3188,
	3, 2, 2, 2, 3187, 3181, 3, 2, 2, 2, 3188, 3191, 3, 2, 2, 2, 3189, 3187,
	3, 2, 2, 2, 3189, 3190, 3, 2, 2, 2, 3190, 3192, 3, 2, 2, 2, 3191, 3189,
	3, 2, 2, 2, 3192, 3193, 7, 173, 2, 2, 3193, 3194, 5, 212, 107, 2, 3194,
	3196, 3, 2, 2, 2, 3195, 3156, 3, 2, 2, 2, 3195, 3175, 3, 2, 2, 2, 3196,
	3199, 3, 2, 2, 2, 3197, 3198, 7, 176, 2, 2, 3198, 3200, 5, 606, 304, 2,
	3199, 3197, 3, 2, 2, 2, 3199, 3200, 3, 2, 2, 2, 3200, 195, 3, 2, 2, 2,
	3201, 3202, 7, 407, 2, 2, 3202, 3203, 5, 504, 253, 2, 3203, 3208, 7, 494,
	2, 2, 3204, 3206, 7, 13, 2, 2, 3205, 3204, 3, 2, 2, 2, 3205, 3206, 3, 2,
	2, 2, 3206, 3207, 3, 2, 2, 2, 3207, 3209, 5, 528, 265, 2, 3208, 3205, 3,
	2, 2, 2, 3208, 3209, 3, 2, 2, 2, 3209, 197, 3, 2, 2, 2, 3210, 3211, 7,
	407, 2, 2, 3211, 3212, 5, 504, 253, 2, 3212, 3213, 7, 124, 2, 2, 3213,
	3220, 5, 528, 265, 2, 3214, 3215, 5, 614, 308, 2, 3215, 3216, 7, 1063,
	2, 2, 3216, 3217, 5, 570, 286, 2, 3217, 3218, 7, 1064, 2, 2, 3218, 3221,
	3, 2, 2, 2, 3219, 3221, 9, 43, 2, 2, 3220, 3214, 3, 2, 2, 2, 3220, 3219,
	3, 2, 2, 2, 3221, 3224, 3, 2, 2, 2, 3222, 3223, 7, 176, 2, 2, 3223, 3225,
	5, 606, 304, 2, 3224, 3222, 3, 2, 2, 2, 3224, 3225, 3, 2, 2, 2, 3225, 3228,
	3, 2, 2, 2, 3226, 3227, 7, 92, 2, 2, 3227, 3229, 5, 258, 130, 2, 3228,
	3226, 3, 2, 2, 2, 3228, 3229, 3, 2, 2, 2, 3229, 199, 3, 2, 2, 2, 3230,
	3231, 7, 407, 2, 2, 3231, 3232, 5, 504, 253, 2, 3232, 3233, 7, 124, 2,
	2, 3233, 3236, 9, 44, 2, 2, 3234, 3235, 7, 176, 2, 2, 3235, 3237, 5, 606,
	304, 2, 3236, 3234, 3, 2, 2, 2, 3236, 3237, 3, 2, 2, 2, 3237, 3240, 3,
	2, 2, 2, 3238, 3239, 7, 92, 2, 2, 3239, 3241, 5, 258, 130, 2, 3240, 3238,
	3, 2, 2, 2, 3240, 3241, 3, 2, 2, 2, 3241, 201, 3, 2, 2, 2, 3242, 3243,
	7, 407, 2, 2, 3243, 3244, 5, 504, 253, 2, 3244, 3245, 7, 333, 2, 2, 3245,
	203, 3, 2, 2, 2, 3246, 3248, 7, 170, 2, 2, 3247, 3249, 7, 98, 2, 2, 3248,
	3247, 3, 2, 2, 2, 3248, 3249, 3, 2, 2, 2, 3249, 3251, 3, 2, 2, 2, 3250,
	3252, 7, 73, 2, 2, 3251, 3250, 3, 2, 2, 2, 3251, 3252, 3, 2, 2, 2, 3252,
	3253, 3, 2, 2, 2, 3253, 3258, 5, 504, 253, 2, 3254, 3256, 7, 13, 2, 2,
	3255, 3254, 3, 2, 2, 2, 3255, 3256, 3, 2, 2, 2, 3256, 3257, 3, 2, 2, 2,
	3257, 3259, 5, 528, 265, 2, 3258, 3255, 3, 2, 2, 2, 3258, 3259, 3, 2, 2,
	2, 3259, 3260, 3, 2, 2, 2, 3260, 3261, 7, 142, 2, 2, 3261, 3266, 5, 186,
	94, 2, 3262, 3263, 7, 1065, 2, 2, 3263, 3265, 5, 186, 94, 2, 3264, 3262,
	3, 2, 2, 2, 3265, 3268, 3, 2, 2, 2, 3266, 3264, 3, 2, 2, 2, 3266, 3267,
	3, 2, 2, 2, 3267, 3271, 3, 2, 2, 2, 3268, 3266, 3, 2, 2, 2, 3269, 3270,
	7, 176, 2, 2, 3270, 3272, 5, 606, 304, 2, 3271, 3269, 3, 2, 2, 2, 3271,
	3272, 3, 2, 2, 2, 3272, 3274, 3, 2, 2, 2, 3273, 3275, 5, 208, 105, 2, 3274,
	3273, 3, 2, 2, 2, 3274, 3275, 3, 2, 2, 2, 3275, 3277, 3, 2, 2, 2, 3276,
	3278, 5, 256, 129, 2, 3277, 3276, 3, 2, 2, 2, 3277, 3278, 3, 2, 2, 2, 3278,
	205, 3, 2, 2, 2, 3279, 3281, 7, 170, 2, 2, 3280, 3282, 7, 98, 2, 2, 3281,
	3280, 3, 2, 2, 2, 3281, 3282, 3, 2, 2, 2, 3282, 3284, 3, 2, 2, 2, 3283,
	3285, 7, 73, 2, 2, 3284, 3283, 3, 2, 2, 2, 3284, 3285, 3, 2, 2, 2, 3285,
	3286, 3, 2, 2, 2, 3286, 3287, 5, 212, 107, 2, 3287, 3288, 7, 142, 2, 2,
	3288, 3293, 5, 186, 94, 2, 3289, 3290, 7, 1065, 2, 2, 3290, 3292, 5, 186,
	94, 2, 3291, 3289, 3, 2, 2, 2, 3292, 3295, 3, 2, 2, 2, 3293, 3291, 3, 2,
	2, 2, 3293, 3294, 3, 2, 2, 2, 3294, 3298, 3, 2, 2, 2, 3295, 3293, 3, 2,
	2, 2, 3296, 3297, 7, 176, 2, 2, 3297, 3299, 5, 606, 304, 2, 3298, 3296,
	3, 2, 2, 2, 3298, 3299, 3, 2, 2, 2, 3299, 207, 3, 2, 2, 2, 3300, 3301,
	7, 115, 2, 2, 3301, 3302, 7, 18, 2, 2, 3302, 3307, 5, 210, 106, 2, 3303,
	3304, 7, 1065, 2, 2, 3304, 3306, 5, 210, 106, 2, 3305, 3303, 3, 2, 2, 2,
	3306, 3309, 3, 2, 2, 2, 3307, 3305, 3, 2, 2, 2, 3307, 3308, 3, 2, 2, 2,
	3308, 209, 3, 2, 2, 2, 3309, 3307, 3, 2, 2, 2, 3310, 3312, 5, 606, 304,
	2, 3311, 3313, 9, 45, 2, 2, 3312, 3311, 3, 2, 2, 2, 3312, 3313, 3, 2, 2,
	2, 3313, 211, 3, 2, 2, 2, 3314, 3319, 5, 214, 108, 2, 3315, 3316, 7, 1065,
	2, 2, 3316, 3318, 5, 214, 108, 2, 3317, 3315, 3, 2, 2, 2, 3318, 3321, 3,
	2, 2, 2, 3319, 3317, 3, 2, 2, 2, 3319, 3320, 3, 2, 2, 2, 3320, 213, 3,
	2, 2, 2, 3321, 3319, 3, 2, 2, 2, 3322, 3326, 5, 216, 109, 2, 3323, 3325,
	5, 222, 112, 2, 3324, 3323, 3, 2, 2, 2, 3325, 3328, 3, 2, 2, 2, 3326, 3324,
	3, 2, 2, 2, 3326, 3327, 3, 2, 2, 2, 3327, 3340, 3, 2, 2, 2, 3328, 3326,
	3, 2, 2, 2, 3329, 3330, 7, 1063, 2, 2, 3330, 3334, 5, 216, 109, 2, 3331,
	3333, 5, 222, 112, 2, 3332, 3331, 3, 2, 2, 2, 3333, 3336, 3, 2, 2, 2, 3334,
	3332, 3, 2, 2, 2, 3334, 3335, 3, 2, 2, 2, 3335, 3337, 3, 2, 2, 2, 3336,
	3334, 3, 2, 2, 2, 3337, 3338, 7, 1064, 2, 2, 3338, 3340, 3, 2, 2, 2, 3339,
	3322, 3, 2, 2, 2, 3339, 3329, 3, 2, 2, 2, 3340, 215, 3, 2, 2, 2, 3341,
	3347, 5, 504, 253, 2, 3342, 3343, 7, 119, 2, 2, 3343, 3344, 7, 1063, 2,
	2, 3344, 3345, 5, 560, 281, 2, 3345, 3346, 7, 1064, 2, 2, 3346, 3348, 3,
	2, 2, 2, 3347, 3342, 3, 2, 2, 2, 3347, 3348, 3, 2, 2, 2, 3348, 3353, 3,
	2, 2, 2, 3349, 3351, 7, 13, 2, 2, 3350, 3349, 3, 2, 2, 2, 3350, 3351, 3,
	2, 2, 2, 3351, 3352, 3, 2, 2, 2, 3352, 3354, 5, 528, 265, 2, 3353, 3350,
	3, 2, 2, 2, 3353, 3354, 3, 2, 2, 2, 3354, 3363, 3, 2, 2, 2, 3355, 3360,
	5, 218, 110, 2, 3356, 3357, 7, 1065, 2, 2, 3357, 3359, 5, 218, 110, 2,
	3358, 3356, 3, 2, 2, 2, 3359, 3362, 3, 2, 2, 2, 3360, 3358, 3, 2, 2, 2,
	3360, 3361, 3, 2, 2, 2, 3361, 3364, 3, 2, 2, 2, 3362, 3360, 3, 2, 2, 2,
	3363, 3355, 3, 2, 2, 2, 3363, 3364, 3, 2, 2, 2, 3364, 3382, 3, 2, 2, 2,
	3365, 3371, 5, 180, 91, 2, 3366, 3367, 7, 1063, 2, 2, 3367, 3368, 5, 180,
	91, 2, 3368, 3369, 7, 1064, 2, 2, 3369, 3371, 3, 2, 2, 2, 3370, 3365, 3,
	2, 2, 2, 3370, 3366, 3, 2, 2, 2, 3371, 3373, 3, 2, 2, 2, 3372, 3374, 7,
	13, 2, 2, 3373, 3372, 3, 2, 2, 2, 3373, 3374, 3, 2, 2, 2, 3374, 3375, 3,
	2, 2, 2, 3375, 3376, 5, 528, 265, 2, 3376, 3382, 3, 2, 2, 2, 3377, 3378,
	7, 1063, 2, 2, 3378, 3379, 5, 212, 107, 2, 3379, 3380, 7, 1064, 2, 2, 3380,
	3382, 3, 2, 2, 2, 3381, 3341, 3, 2, 2, 2, 3381, 3370, 3, 2, 2, 2, 3381,
	3377, 3, 2, 2, 2, 3382, 217, 3, 2, 2, 2, 3383, 3384, 9, 46, 2, 2, 3384,
	3387, 9, 20, 2, 2, 3385, 3386, 7, 61, 2, 2, 3386, 3388, 5, 220, 111, 2,
	3387, 3385, 3, 2, 2, 2, 3387, 3388, 3, 2, 2, 2, 3388, 3389, 3, 2, 2, 2,
	3389, 3390, 7, 1063, 2, 2, 3390, 3391, 5, 560, 281, 2, 3391, 3392, 7, 1064,
	2, 2, 3392, 219, 3, 2, 2, 2, 3393, 3399, 7, 84, 2, 2, 3394, 3395, 7, 115,
	2, 2, 3395, 3399, 7, 18, 2, 2, 3396, 3397, 7, 69, 2, 2, 3397, 3399, 7,
	18, 2, 2, 3398, 3393, 3, 2, 2, 2, 3398, 3394, 3, 2, 2, 2, 3398, 3396, 3,
	2, 2, 2, 3399, 221, 3, 2, 2, 2, 3400, 3402, 9, 47, 2, 2, 3401, 3400, 3,
	2, 2, 2, 3401, 3402, 3, 2, 2, 2, 3402, 3403, 3, 2, 2, 2, 3403, 3404, 7,
	84, 2, 2, 3404, 3412, 5, 216, 109, 2, 3405, 3406, 7, 110, 2, 2, 3406, 3413,
	5, 606, 304, 2, 3407, 3408, 7, 173, 2, 2, 3408, 3409, 7, 1063, 2, 2, 3409,
	3410, 5, 560, 281, 2, 3410, 3411, 7, 1064, 2, 2, 3411, 3413, 3, 2, 2, 2,
	3412, 3405, 3, 2, 2, 2, 3412, 3407, 3, 2, 2, 2, 3412, 3413, 3, 2, 2, 2,
	3413, 3445, 3, 2, 2, 2, 3414, 3415, 7, 157, 2, 2, 3415, 3418, 5, 216, 109,
	2, 3416, 3417, 7, 110, 2, 2, 3417, 3419, 5, 606, 304, 2, 3418, 3416, 3,
	2, 2, 2, 3418, 3419, 3, 2, 2, 2, 3419, 3445, 3, 2, 2, 2, 3420, 3422, 9,
	48, 2, 2, 3421, 3423, 7, 117, 2, 2, 3422, 3421, 3, 2, 2, 2, 3422, 3423,
	3, 2, 2, 2, 3423, 3424, 3, 2, 2, 2, 3424, 3425, 7, 84, 2, 2, 3425, 3433,
	5, 216, 109, 2, 3426, 3427, 7, 110, 2, 2, 3427, 3434, 5, 606, 304, 2, 3428,
	3429, 7, 173, 2, 2, 3429, 3430, 7, 1063, 2, 2, 3430, 3431, 5, 560, 281,
	2, 3431, 3432, 7, 1064, 2, 2, 3432, 3434, 3, 2, 2, 2, 3433, 3426, 3, 2,
	2, 2, 3433, 3428, 3, 2, 2, 2, 3434, 3445, 3, 2, 2, 2, 3435, 3440, 7, 104,
	2, 2, 3436, 3438, 9, 48, 2, 2, 3437, 3439, 7, 117, 2, 2, 3438, 3437, 3,
	2, 2, 2, 3438, 3439, 3, 2, 2, 2, 3439, 3441, 3, 2, 2, 2, 3440, 3436, 3,
	2, 2, 2, 3440, 3441, 3, 2, 2, 2, 3441, 3442, 3, 2, 2, 2, 3442, 3443, 7,
	84, 2, 2, 3443, 3445, 5, 216, 109, 2, 3444, 3401, 3, 2, 2, 2, 3444, 3414,
	3, 2, 2, 2, 3444, 3420, 3, 2, 2, 2, 3444, 3435, 3, 2, 2, 2, 3445, 223,
	3, 2, 2, 2, 3446, 3447, 7, 1063, 2, 2, 3447, 3448, 5, 228, 115, 2, 3448,
	3449, 7, 1064, 2, 2, 3449, 3455, 3, 2, 2, 2, 3450, 3451, 7, 1063, 2, 2,
	3451, 3452, 5, 224, 113, 2, 3452, 3453, 7, 1064, 2, 2, 3453, 3455, 3, 2,
	2, 2, 3454, 3446, 3, 2, 2, 2, 3454, 3450, 3, 2, 2, 2, 3455, 225, 3, 2,
	2, 2, 3456, 3457, 7, 1063, 2, 2, 3457, 3458, 5, 230, 116, 2, 3458, 3459,
	7, 1064, 2, 2, 3459, 3465, 3, 2, 2, 2, 3460, 3461, 7, 1063, 2, 2, 3461,
	3462, 5, 226, 114, 2, 3462, 3463, 7, 1064, 2, 2, 3463, 3465, 3, 2, 2, 2,
	3464, 3456, 3, 2, 2, 2, 3464, 3460, 3, 2, 2, 2, 3465, 227, 3, 2, 2, 2,
	3466, 3470, 7, 141, 2, 2, 3467, 3469, 5, 236, 119, 2, 3468, 3467, 3, 2,
	2, 2, 3469, 3472, 3, 2, 2, 2, 3470, 3468, 3, 2, 2, 2, 3470, 3471, 3, 2,
	2, 2, 3471, 3473, 3, 2, 2, 2, 3472, 3470, 3, 2, 2, 2, 3473, 3475, 5, 238,
	120, 2, 3474, 3476, 5, 242, 122, 2, 3475, 3474, 3, 2, 2, 2, 3475, 3476,
	3, 2, 2, 2, 3476, 3478, 3, 2, 2, 2, 3477, 3479, 5, 248, 125, 2, 3478, 3477,
	3, 2, 2, 2, 3478, 3479, 3, 2, 2, 2, 3479, 3481, 3, 2, 2, 2, 3480, 3482,
	5, 250, 126, 2, 3481, 3480, 3, 2, 2, 2, 3481, 3482, 3, 2, 2, 2, 3482, 3484,
	3, 2, 2, 2, 3483, 3485, 5, 252, 127, 2, 3484, 3483, 3, 2, 2, 2, 3484, 3485,
	3, 2, 2, 2, 3485, 3487, 3, 2, 2, 2, 3486, 3488, 5, 208, 105, 2, 3487, 3486,
	3, 2, 2, 2, 3487, 3488, 3, 2, 2, 2, 3488, 3490, 3, 2, 2, 2, 3489, 3491,
	5, 256, 129, 2, 3490, 3489, 3, 2, 2, 2, 3490, 3491, 3, 2, 2, 2, 3491, 3519,
	3, 2, 2, 2, 3492, 3496, 7, 141, 2, 2, 3493, 3495, 5, 236, 119, 2, 3494,
	3493, 3, 2, 2, 2, 3495, 3498, 3, 2, 2, 2, 3496, 3494, 3, 2, 2, 2, 3496,
	3497, 3, 2, 2, 2, 3497, 3499, 3, 2, 2, 2, 3498, 3496, 3, 2, 2, 2, 3499,
	3501, 5, 238, 120, 2, 3500, 3502, 5, 248, 125, 2, 3501, 3500, 3, 2, 2,
	2, 3501, 3502, 3, 2, 2, 2, 3502, 3504, 3, 2, 2, 2, 3503, 3505, 5, 250,
	126, 2, 3504, 3503, 3, 2, 2, 2, 3504, 3505, 3, 2, 2, 2, 3505, 3507, 3,
	2, 2, 2, 3506, 3508, 5, 252, 127, 2, 3507, 3506, 3, 2, 2, 2, 3507, 3508,
	3, 2, 2, 2, 3508, 3510, 3, 2, 2, 2, 3509, 3511, 5, 208, 105, 2, 3510, 3509,
	3, 2, 2, 2, 3510, 3511, 3, 2, 2, 2, 3511, 3513, 3, 2, 2, 2, 3512, 3514,
	5, 256, 129, 2, 3513, 3512, 3, 2, 2, 2, 3513, 3514, 3, 2, 2, 2, 3514, 3516,
	3, 2, 2, 2, 3515, 3517, 5, 242, 122, 2, 3516, 3515, 3, 2, 2, 2, 3516, 3517,
	3, 2, 2, 2, 3517, 3519, 3, 2, 2, 2, 3518, 3466, 3, 2, 2, 2, 3518, 3492,
	3, 2, 2, 2, 3519, 229, 3, 2, 2, 2, 3520, 3524, 7, 141, 2, 2, 3521, 3523,
	5, 236, 119, 2, 3522, 3521, 3, 2, 2, 2, 3523, 3526, 3, 2, 2, 2, 3524, 3522,
	3, 2, 2, 2, 3524, 3525, 3, 2, 2, 2, 3525, 3527, 3, 2, 2, 2, 3526, 3524,
	3, 2, 2, 2, 3527, 3529, 5, 238, 120, 2, 3528, 3530, 5, 248, 125, 2, 3529,
	3528, 3, 2, 2, 2, 3529, 3530, 3, 2, 2, 2, 3530, 3532, 3, 2, 2, 2, 3531,
	3533, 5, 250, 126, 2, 3532, 3531, 3, 2, 2, 2, 3532, 3533, 3, 2, 2, 2, 3533,
	3535, 3, 2, 2, 2, 3534, 3536, 5, 252, 127, 2, 3535, 3534, 3, 2, 2, 2, 3535,
	3536, 3, 2, 2, 2, 3536, 3538, 3, 2, 2, 2, 3537, 3539, 5, 208, 105, 2, 3538,
	3537, 3, 2, 2, 2, 3538, 3539, 3, 2, 2, 2, 3539, 3541, 3, 2, 2, 2, 3540,
	3542, 5, 256, 129, 2, 3541, 3540, 3, 2, 2, 2, 3541, 3542, 3, 2, 2, 2, 3542,
	231, 3, 2, 2, 2, 3543, 3545, 7, 166, 2, 2, 3544, 3546, 9, 41, 2, 2, 3545,
	3544, 3, 2, 2, 2, 3545, 3546, 3, 2, 2, 2, 3546, 3547, 3, 2, 2, 2, 3547,
	3548, 5, 226, 114, 2, 3548, 233, 3, 2, 2, 2, 3549, 3551, 7, 166, 2, 2,
	3550, 3552, 9, 41, 2, 2, 3551, 3550, 3, 2, 2, 2, 3551, 3552, 3, 2, 2, 2,
	3552, 3555, 3, 2, 2, 2, 3553, 3556, 5, 230, 116, 2, 3554, 3556, 5, 226,
	114, 2, 3555, 3553, 3, 2, 2, 2, 3555, 3554, 3, 2, 2, 2, 3556, 235, 3, 2,
	2, 2, 3557, 3566, 9, 49, 2, 2, 3558, 3566, 7, 71, 2, 2, 3559, 3566, 7,
	157, 2, 2, 3560, 3566, 7, 153, 2, 2, 3561, 3566, 7, 151, 2, 2, 3562, 3566,
	7, 571, 2, 2, 3563, 3566, 9, 50, 2, 2, 3564, 3566, 7, 152, 2, 2, 3565,
	3557, 3, 2, 2, 2, 3565, 3558, 3, 2, 2, 2, 3565, 3559, 3, 2, 2, 2, 3565,
	3560, 3, 2, 2, 2, 3565, 3561, 3, 2, 2, 2, 3565, 3562, 3, 2, 2, 2, 3565,
	3563, 3, 2, 2, 2, 3565, 3564, 3, 2, 2, 2, 3566, 237, 3, 2, 2, 2, 3567,
	3570, 7, 1046, 2, 2, 3568, 3570, 5, 240, 121, 2, 3569, 3567, 3, 2, 2, 2,
	3569, 3568, 3, 2, 2, 2, 3570, 3575, 3, 2, 2, 2, 3571, 3572, 7, 1065, 2,
	2, 3572, 3574, 5, 240, 121, 2, 3573, 3571, 3, 2, 2, 2, 3574, 3577, 3, 2,
	2, 2, 3575, 3573, 3, 2, 2, 2, 3575, 3576, 3, 2, 2, 2, 3576, 239, 3, 2,
	2, 2, 3577, 3575, 3, 2, 2, 2, 3578, 3579, 5, 502, 252, 2, 3579, 3580, 7,
	1062, 2, 2, 3580, 3581, 7, 1046, 2, 2, 3581, 3608, 3, 2, 2, 2, 3582, 3587,
	5, 506, 254, 2, 3583, 3585, 7, 13, 2, 2, 3584, 3583, 3, 2, 2, 2, 3584,
	3585, 3, 2, 2, 2, 3585, 3586, 3, 2, 2, 2, 3586, 3588, 5, 528, 265, 2, 3587,
	3584, 3, 2, 2, 2, 3587, 3588, 3, 2, 2, 2, 3588, 3608, 3, 2, 2, 2, 3589,
	3594, 5, 586, 294, 2, 3590, 3592, 7, 13, 2, 2, 3591, 3590, 3, 2, 2, 2,
	3591, 3592, 3, 2, 2, 2, 3592, 3593, 3, 2, 2, 2, 3593, 3595, 5, 528, 265,
	2, 3594, 3591, 3, 2, 2, 2, 3594, 3595, 3, 2, 2, 2, 3595, 3608, 3, 2, 2,
	2, 3596, 3597, 7, 1090, 2, 2, 3597, 3599, 7, 1037, 2, 2, 3598, 3596, 3,
	2, 2, 2, 3598, 3599, 3, 2, 2, 2, 3599, 3600, 3, 2, 2, 2, 3600, 3605, 5,
	606, 304, 2, 3601, 3603, 7, 13, 2, 2, 3602, 3601, 3, 2, 2, 2, 3602, 3603,
	3, 2, 2, 2, 3603, 3604, 3, 2, 2, 2, 3604, 3606, 5, 528, 265, 2, 3605, 3602,
	3, 2, 2, 2, 3605, 3606, 3, 2, 2, 2, 3606, 3608, 3, 2, 2, 2, 3607, 3578,
	3, 2, 2, 2, 3607, 3582, 3, 2, 2, 2, 3607, 3589, 3, 2, 2, 2, 3607, 3598,
	3, 2, 2, 2, 3608, 241, 3, 2, 2, 2, 3609, 3610, 7, 81, 2, 2, 3610, 3615,
	5, 188, 95, 2, 3611, 3612, 7, 1065, 2, 2, 3612, 3614, 5, 188, 95, 2, 3613,
	3611, 3, 2, 2, 2, 3614, 3617, 3, 2, 2, 2, 3615, 3613, 3, 2, 2, 2, 3615,
	3616, 3, 2, 2, 2, 3616, 3646, 3, 2, 2, 2, 3617, 3615, 3, 2, 2, 2, 3618,
	3619, 7, 81, 2, 2, 3619, 3620, 7, 369, 2, 2, 3620, 3646, 7, 1078, 2, 2,
	3621, 3622, 7, 81, 2, 2, 3622, 3623, 7, 118, 2, 2, 3623, 3627, 7, 1078,
	2, 2, 3624, 3625, 7, 24, 2, 2, 3625, 3626, 7, 142, 2, 2, 3626, 3628, 5,
	514, 258, 2, 3627, 3624, 3, 2, 2, 2, 3627, 3628, 3, 2, 2, 2, 3628, 3635,
	3, 2, 2, 2, 3629, 3631, 9, 38, 2, 2, 3630, 3632, 5, 244, 123, 2, 3631,
	3630, 3, 2, 2, 2, 3632, 3633, 3, 2, 2, 2, 3633, 3631, 3, 2, 2, 2, 3633,
	3634, 3, 2, 2, 2, 3634, 3636, 3, 2, 2, 2, 3635, 3629, 3, 2, 2, 2, 3635,
	3636, 3, 2, 2, 2, 3636, 3643, 3, 2, 2, 2, 3637, 3639, 7, 94, 2, 2, 3638,
	3640, 5, 246, 124, 2, 3639, 3638, 3, 2, 2, 2, 3640, 3641, 3, 2, 2, 2, 3641,
	3639, 3, 2, 2, 2, 3641, 3642, 3, 2, 2, 2, 3642, 3644, 3, 2, 2, 2, 3643,
	3637, 3, 2, 2, 2, 3643, 3644, 3, 2, 2, 2, 3644, 3646, 3, 2, 2, 2, 3645,
	3609, 3, 2, 2, 2, 3645, 3618, 3, 2, 2, 2, 3645, 3621, 3, 2, 2, 2, 3646,
	243, 3, 2, 2, 2, 3647, 3648, 7, 159, 2, 2, 3648, 3649, 7, 18, 2, 2, 3649,
	3660, 7, 1078, 2, 2, 3650, 3652, 7, 113, 2, 2, 3651, 3650, 3, 2, 2, 2,
	3651, 3652, 3, 2, 2, 2, 3652, 3653, 3, 2, 2, 2, 3653, 3654, 7, 54, 2, 2,
	3654, 3655, 7, 18, 2, 2, 3655, 3660, 7, 1078, 2, 2, 3656, 3657, 7, 55,
	2, 2, 3657, 3658, 7, 18, 2, 2, 3658, 3660, 7, 1078, 2, 2, 3659, 3647, 3,
	2, 2, 2, 3659, 3651, 3, 2, 2, 2, 3659, 3656, 3, 2, 2, 2, 3660, 245, 3,
	2, 2, 2, 3661, 3662, 7, 156, 2, 2, 3662, 3663, 7, 18, 2, 2, 3663, 3668,
	7, 1078, 2, 2, 3664, 3665, 7, 159, 2, 2, 3665, 3666, 7, 18, 2, 2, 3666,
	3668, 7, 1078, 2, 2, 3667, 3661, 3, 2, 2, 2, 3667, 3664, 3, 2, 2, 2, 3668,
	247, 3, 2, 2, 2, 3669, 3670, 7, 64, 2, 2, 3670, 3673, 5, 212, 107, 2, 3671,
	3672, 7, 176, 2, 2, 3672, 3674, 5, 606, 304, 2, 3673, 3671, 3, 2, 2, 2,
	3673, 3674, 3, 2, 2, 2, 3674, 249, 3, 2, 2, 2, 3675, 3676, 7, 69, 2, 2,
	3676, 3677, 7, 18, 2, 2, 3677, 3682, 5, 254, 128, 2, 3678, 3679, 7, 1065,
	2, 2, 3679, 3681, 5, 254, 128, 2, 3680, 3678, 3, 2, 2, 2, 3681, 3684, 3,
	2, 2, 2, 3682, 3680, 3, 2, 2, 2, 3682, 3683, 3, 2, 2, 2, 3683, 3687, 3,
	2, 2, 2, 3684, 3682, 3, 2, 2, 2, 3685, 3686, 7, 178, 2, 2, 3686, 3688,
	7, 546, 2, 2, 3687, 3685, 3, 2, 2, 2, 3687, 3688, 3, 2, 2, 2, 3688, 251,
	3, 2, 2, 2, 3689, 3690, 7, 70, 2, 2, 3690, 3691, 5, 606, 304, 2, 3691,
	253, 3, 2, 2, 2, 3692, 3694, 5, 606, 304, 2, 3693, 3695, 9, 45, 2, 2, 3694,
	3693, 3, 2, 2, 2, 3694, 3695, 3, 2, 2, 2, 3695, 255, 3, 2, 2, 2, 3696,
	3707, 7, 92, 2, 2, 3697, 3698, 5, 258, 130, 2, 3698, 3699, 7, 1065, 2,
	2, 3699, 3701, 3, 2, 2, 2, 3700, 3697, 3, 2, 2, 2, 3700, 3701, 3, 2, 2,
	2, 3701, 3702, 3, 2, 2, 2, 3702, 3708, 5, 258, 130, 2, 3703, 3704, 5, 258,
	130, 2, 3704, 3705, 7, 487, 2, 2, 3705, 3706, 5, 258, 130, 2, 3706, 3708,
	3, 2, 2, 2, 3707, 3700, 3, 2, 2, 2, 3707, 3703, 3, 2, 2, 2, 3708, 257,
	3, 2, 2, 2, 3709, 3713, 5, 534, 268, 2, 3710, 3713, 5, 512, 257, 2, 3711,
	3713, 5, 530, 266, 2, 3712, 3709, 3, 2, 2, 2, 3712, 3710, 3, 2, 2, 2, 3712,
	3711, 3, 2, 2, 2, 3713, 259, 3, 2, 2, 2, 3714, 3715, 7, 575, 2, 2, 3715,
	3724, 7, 598, 2, 2, 3716, 3721, 5, 282, 142, 2, 3717, 3718, 7, 1065, 2,
	2, 3718, 3720, 5, 282, 142, 2, 3719, 3717, 3, 2, 2, 2, 3720, 3723, 3, 2,
	2, 2, 3721, 3719, 3, 2, 2, 2, 3721, 3722, 3, 2, 2, 2, 3722, 3725, 3, 2,
	2, 2, 3723, 3721, 3, 2, 2, 2, 3724, 3716, 3, 2, 2, 2, 3724, 3725, 3, 2,
	2, 2, 3725, 261, 3, 2, 2, 2, 3726, 3728, 7, 316, 2, 2, 3727, 3729, 7, 621,
	2, 2, 3728, 3727, 3, 2, 2, 2, 3728, 3729, 3, 2, 2, 2, 3729, 263, 3, 2,
	2, 2, 3730, 3732, 7, 340, 2, 2, 3731, 3733, 7, 621, 2, 2, 3732, 3731, 3,
	2, 2, 2, 3732, 3733, 3, 2, 2, 2, 3733, 3739, 3, 2, 2, 2, 3734, 3736, 7,
	12, 2, 2, 3735, 3737, 7, 483, 2, 2, 3736, 3735, 3, 2, 2, 2, 3736, 3737,
	3, 2, 2, 2, 3737, 3738, 3, 2, 2, 2, 3738, 3740, 7, 325, 2, 2, 3739, 3734,
	3, 2, 2, 2, 3739, 3740, 3, 2, 2, 2, 3740, 3745, 3, 2, 2, 2, 3741, 3743,
	7, 483, 2, 2, 3742, 3741, 3, 2, 2, 2, 3742, 3743, 3, 2, 2, 2, 3743, 3744,
	3, 2, 2, 2, 3744, 3746, 7, 128, 2, 2, 3745, 3742, 3, 2, 2, 2, 3745, 3746,
	3, 2, 2, 2, 3746, 265, 3, 2, 2, 2, 3747, 3749, 7, 545, 2, 2, 3748, 3750,
	7, 621, 2, 2, 3749, 3748, 3, 2, 2, 2, 3749, 3750, 3, 2, 2, 2, 3750, 3756,
	3, 2, 2, 2, 3751, 3753, 7, 12, 2, 2, 3752, 3754, 7, 483, 2, 2, 3753, 3752,
	3, 2, 2, 2, 3753, 3754, 3, 2, 2, 2, 3754, 3755, 3, 2, 2, 2, 3755, 3757,
	7, 325, 2, 2, 3756, 3751, 3, 2, 2, 2, 3756, 3757, 3, 2, 2, 2, 3757, 3762,
	3, 2, 2, 2, 3758, 3760, 7, 483, 2, 2, 3759, 3758, 3, 2, 2, 2, 3759, 3760,
	3, 2, 2, 2, 3760, 3761, 3, 2, 2, 2, 3761, 3763, 7, 128, 2, 2, 3762, 3759,
	3, 2, 2, 2, 3762, 3763, 3, 2, 2, 2, 3763, 267, 3, 2, 2, 2, 3764, 3765,
	7, 551, 2, 2, 3765, 3766, 5, 528, 265, 2, 3766, 269, 3, 2, 2, 2, 3767,
	3769, 7, 545, 2, 2, 3768, 3770, 7, 621, 2, 2, 3769, 3768, 3, 2, 2, 2, 3769,
	3770, 3, 2, 2, 2, 3770, 3771, 3, 2, 2, 2, 3771, 3773, 7, 161, 2, 2, 3772,
	3774, 7, 551, 2, 2, 3773, 3772, 3, 2, 2, 2, 3773, 3774, 3, 2, 2, 2, 3774,
	3775, 3, 2, 2, 2, 3775, 3776, 5, 528, 265, 2, 3776, 271, 3, 2, 2, 2, 3777,
	3778, 7, 128, 2, 2, 3778, 3779, 7, 551, 2, 2, 3779, 3780, 5, 528, 265,
	2, 3780, 273, 3, 2, 2, 2, 3781, 3782, 7, 96, 2, 2, 3782, 3783, 7, 639,
	2, 2, 3783, 3788, 5, 284, 143, 2, 3784, 3785, 7, 1065, 2, 2, 3785, 3787,
	5, 284, 143, 2, 3786, 3784, 3, 2, 2, 2, 3787, 3790, 3, 2, 2, 2, 3788, 3786,
	3, 2, 2, 2, 3788, 3789, 3, 2, 2, 2, 3789, 275, 3, 2, 2, 2, 3790, 3788,
	3, 2, 2, 2, 3791, 3792, 7, 168, 2, 2, 3792, 3793, 7, 639, 2, 2, 3793, 277,
	3, 2, 2, 2, 3794, 3795, 7, 142, 2, 2, 3795, 3796, 7, 312, 2, 2, 3796, 3797,
	7, 1054, 2, 2, 3797, 3798, 9, 24, 2, 2, 3798, 279, 3, 2, 2, 2, 3799, 3801,
	7, 142, 2, 2, 3800, 3802, 9, 51, 2, 2, 3801, 3800, 3, 2, 2, 2, 3801, 3802,
	3, 2, 2, 2, 3802, 3803, 3, 2, 2, 2, 3803, 3804, 7, 598, 2, 2, 3804, 3809,
	5, 288, 145, 2, 3805, 3806, 7, 1065, 2, 2, 3806, 3808, 5, 288, 145, 2,
	3807, 3805, 3, 2, 2, 2, 3808, 3811, 3, 2, 2, 2, 3809, 3807, 3, 2, 2, 2,
	3809, 3810, 3, 2, 2, 2, 3810, 281, 3, 2, 2, 2, 3811, 3809, 3, 2, 2, 2,
	3812, 3813, 7, 178, 2, 2, 3813, 3814, 7, 347, 2, 2, 3814, 3820, 7, 562,
	2, 2, 3815, 3816, 7, 124, 2, 2, 3816, 3820, 7, 179, 2, 2, 3817, 3818, 7,
	124, 2, 2, 3818, 3820, 7, 493, 2, 2, 3819, 3812, 3, 2, 2, 2, 3819, 3815,
	3, 2, 2, 2, 3819, 3817, 3, 2, 2, 2, 3820, 283, 3, 2, 2, 2, 3821, 3826,
	5, 504, 253, 2, 3822, 3824, 7, 13, 2, 2, 3823, 3822, 3, 2, 2, 2, 3823,
	3824, 3, 2, 2, 2, 3824, 3825, 3, 2, 2, 2, 3825, 3827, 5, 528, 265, 2, 3826,
	3823, 3, 2, 2, 2, 3826, 3827, 3, 2, 2, 2, 3827, 3828, 3, 2, 2, 2, 3828,
	3829, 5, 286, 144, 2, 3829, 285, 3, 2, 2, 2, 3830, 3832, 7, 124, 2, 2,
	3831, 3833, 7, 436, 2, 2, 3832, 3831, 3, 2, 2, 2, 3832, 3833, 3, 2, 2,
	2, 3833, 3839, 3, 2, 2, 2, 3834, 3836, 7, 98, 2, 2, 3835, 3834, 3, 2, 2,
	2, 3835, 3836, 3, 2, 2, 2, 3836, 3837, 3, 2, 2, 2, 3837, 3839, 7, 179,
	2, 2, 3838, 3830, 3, 2, 2, 2, 3838, 3835, 3, 2, 2, 2, 3839, 287, 3, 2,
	2, 2, 3840, 3841, 7, 426, 2, 2, 3841, 3842, 7, 434, 2, 2, 3842, 3848, 5,
	290, 146, 2, 3843, 3844, 7, 124, 2, 2, 3844, 3848, 7, 179, 2, 2, 3845,
	3846, 7, 124, 2, 2, 3846, 3848, 7, 493, 2, 2, 3847, 3840, 3, 2, 2, 2, 3847,
	3843, 3, 2, 2, 2, 3847, 3845, 3, 2, 2, 2, 3848, 289, 3, 2, 2, 2, 3849,
	3850, 7, 732, 2, 2, 3850, 3857, 7, 124, 2, 2, 3851, 3852, 7, 124, 2, 2,
	3852, 3857, 7, 733, 2, 2, 3853, 3854, 7, 124, 2, 2, 3854, 3857, 7, 734,
	2, 2, 3855, 3857, 7, 735, 2, 2, 3856, 3849, 3, 2, 2, 2, 3856, 3851, 3,
	2, 2, 2, 3856, 3853, 3, 2, 2, 2, 3856, 3855, 3, 2, 2, 2, 3857, 291, 3,
	2, 2, 2, 3858, 3859, 7, 23, 2, 2, 3859, 3860, 7, 439, 2, 2, 3860, 3861,
	7, 161, 2, 2, 3861, 3866, 5, 310, 156, 2, 3862, 3863, 7, 1065, 2, 2, 3863,
	3865, 5, 310, 156, 2, 3864, 3862, 3, 2, 2, 2, 3865, 3868, 3, 2, 2, 2, 3866,
	3864, 3, 2, 2, 2, 3866, 3867, 3, 2, 2, 2, 3867, 3870, 3, 2, 2, 2, 3868,
	3866, 3, 2, 2, 2, 3869, 3871, 5, 318, 160, 2, 3870, 3869, 3, 2, 2, 2, 3870,
	3871, 3, 2, 2, 2, 3871, 293, 3, 2, 2, 2, 3872, 3873, 7, 23, 2, 2, 3873,
	3874, 7, 538, 2, 2, 3874, 3875, 7, 395, 2, 2, 3875, 3880, 5, 320, 161,
	2, 3876, 3877, 7, 1065, 2, 2, 3877, 3879, 5, 320, 161, 2, 3878, 3876, 3,
	2, 2, 2, 3879, 3882, 3, 2, 2, 2, 3880, 3878, 3, 2, 2, 2, 3880, 3881, 3,
	2, 2, 2, 3881, 295, 3, 2, 2, 2, 3882, 3880, 3, 2, 2, 2, 3883, 3884, 7,
	122, 2, 2, 3884, 3885, 9, 52, 2, 2, 3885, 3890, 7, 438, 2, 2, 3886, 3887,
	7, 161, 2, 2, 3887, 3891, 7, 1078, 2, 2, 3888, 3889, 7, 15, 2, 2, 3889,
	3891, 7, 1078, 2, 2, 3890, 3886, 3, 2, 2, 2, 3890, 3888, 3, 2, 2, 2, 3891,
	297, 3, 2, 2, 2, 3892, 3893, 7, 539, 2, 2, 3893, 3894, 7, 439, 2, 2, 3894,
	299, 3, 2, 2, 2, 3895, 3896, 7, 539, 2, 2, 3896, 3898, 7, 560, 2, 2, 3897,
	3899, 7, 8, 2, 2, 3898, 3897, 3, 2, 2, 2, 3898, 3899, 3, 2, 2, 2, 3899,
	3901, 3, 2, 2, 2, 3900, 3902, 5, 318, 160, 2, 3901, 3900, 3, 2, 2, 2, 3901,
	3902, 3, 2, 2, 2, 3902, 301, 3, 2, 2, 2, 3903, 3904, 7, 575, 2, 2, 3904,
	3913, 7, 560, 2, 2, 3905, 3910, 5, 324, 163, 2, 3906, 3907, 7, 1065, 2,
	2, 3907, 3909, 5, 324, 163, 2, 3908, 3906, 3, 2, 2, 2, 3909, 3912, 3, 2,
	2, 2, 3910, 3908, 3, 2, 2, 2, 3910, 3911, 3, 2, 2, 2, 3911, 3914, 3, 2,
	2, 2, 3912, 3910, 3, 2, 2, 2, 3913, 3905, 3, 2, 2, 2, 3913, 3914, 3, 2,
	2, 2, 3914, 3917, 3, 2, 2, 2, 3915, 3916, 7, 607, 2, 2, 3916, 3918, 5,
	326, 164, 2, 3917, 3915, 3, 2, 2, 2, 3917, 3918, 3, 2, 2, 2, 3918, 3922,
	3, 2, 2, 2, 3919, 3921, 5, 328, 165, 2, 3920, 3919, 3, 2, 2, 2, 3921, 3924,
	3, 2, 2, 2, 3922, 3920, 3, 2, 2, 2, 3922, 3923, 3, 2, 2, 2, 3923, 3926,
	3, 2, 2, 2, 3924, 3922, 3, 2, 2, 2, 3925, 3927, 5, 318, 160, 2, 3926, 3925,
	3, 2, 2, 2, 3926, 3927, 3, 2, 2, 2, 3927, 303, 3, 2, 2, 2, 3928, 3929,
	7, 581, 2, 2, 3929, 3938, 7, 560, 2, 2, 3930, 3935, 5, 324, 163, 2, 3931,
	3932, 7, 1065, 2, 2, 3932, 3934, 5, 324, 163, 2, 3933, 3931, 3, 2, 2, 2,
	3934, 3937, 3, 2, 2, 2, 3935, 3933, 3, 2, 2, 2, 3935, 3936, 3, 2, 2, 2,
	3936, 3939, 3, 2, 2, 2, 3937, 3935, 3, 2, 2, 2, 3938, 3930, 3, 2, 2, 2,
	3938, 3939, 3, 2, 2, 2, 3939, 305, 3, 2, 2, 2, 3940, 3941, 7, 575, 2, 2,
	3941, 3942, 7, 406, 2, 2, 3942, 307, 3, 2, 2, 2, 3943, 3944, 7, 581, 2,
	2, 3944, 3945, 7, 406, 2, 2, 3945, 309, 3, 2, 2, 2, 3946, 3947, 5, 312,
	157, 2, 3947, 3948, 7, 1054, 2, 2, 3948, 3949, 7, 1078, 2, 2, 3949, 3976,
	3, 2, 2, 2, 3950, 3951, 5, 314, 158, 2, 3951, 3952, 7, 1054, 2, 2, 3952,
	3953, 5, 534, 268, 2, 3953, 3976, 3, 2, 2, 2, 3954, 3955, 5, 316, 159,
	2, 3955, 3956, 7, 1054, 2, 2, 3956, 3957, 9, 24, 2, 2, 3957, 3976, 3, 2,
	2, 2, 3958, 3959, 7, 443, 2, 2, 3959, 3960, 7, 1054, 2, 2, 3960, 3976,
	7, 1081, 2, 2, 3961, 3962, 7, 413, 2, 2, 3962, 3963, 7, 1054, 2, 2, 3963,
	3972, 7, 1063, 2, 2, 3964, 3969, 5, 528, 265, 2, 3965, 3966, 7, 1065, 2,
	2, 3966, 3968, 5, 528, 265, 2, 3967, 3965, 3, 2, 2, 2, 3968, 3971, 3, 2,
	2, 2, 3969, 3967, 3, 2, 2, 2, 3969, 3970, 3, 2, 2, 2, 3970, 3973, 3, 2,
	2, 2, 3971, 3969, 3, 2, 2, 2, 3972, 3964, 3, 2, 2, 2, 3972, 3973, 3, 2,
	2, 2, 3973, 3974, 3, 2, 2, 2, 3974, 3976, 7, 1064, 2, 2, 3975, 3946, 3,
	2, 2, 2, 3975, 3950, 3, 2, 2, 2, 3975, 3954, 3, 2, 2, 2, 3975, 3958, 3,
	2, 2, 2, 3975, 3961, 3, 2, 2, 2, 3976, 311, 3, 2, 2, 2, 3977, 3978, 9,
	53, 2, 2, 3978, 313, 3, 2, 2, 2, 3979, 3980, 9, 54, 2, 2, 3980, 315, 3,
	2, 2, 2, 3981, 3982, 9, 55, 2, 2, 3982, 317, 3, 2, 2, 2, 3983, 3984, 7,
	61, 2, 2, 3984, 3985, 7, 327, 2, 2, 3985, 3986, 7, 1078, 2, 2, 3986, 319,
	3, 2, 2, 2, 3987, 3988, 7, 531, 2, 2, 3988, 3989, 7, 1054, 2, 2, 3989,
	3990, 7, 1063, 2, 2, 3990, 3991, 5, 560, 281, 2, 3991, 3992, 7, 1064, 2,
	2, 3992, 4037, 3, 2, 2, 2, 3993, 3994, 7, 533, 2, 2, 3994, 3995, 7, 1054,
	2, 2, 3995, 3996, 7, 1063, 2, 2, 3996, 3997, 5, 560, 281, 2, 3997, 3998,
	7, 1064, 2, 2, 3998, 4037, 3, 2, 2, 2, 3999, 4000, 7, 532, 2, 2, 4000,
	4001, 7, 1054, 2, 2, 4001, 4002, 7, 1063, 2, 2, 4002, 4003, 5, 562, 282,
	2, 4003, 4004, 7, 1064, 2, 2, 4004, 4037, 3, 2, 2, 2, 4005, 4006, 7, 534,
	2, 2, 4006, 4007, 7, 1054, 2, 2, 4007, 4008, 7, 1063, 2, 2, 4008, 4009,
	5, 562, 282, 2, 4009, 4010, 7, 1064, 2, 2, 4010, 4037, 3, 2, 2, 2, 4011,
	4012, 7, 536, 2, 2, 4012, 4013, 7, 1054, 2, 2, 4013, 4014, 7, 1063, 2,
	2, 4014, 4015, 5, 572, 287, 2, 4015, 4016, 7, 1064, 2, 2, 4016, 4037, 3,
	2, 2, 2, 4017, 4018, 7, 537, 2, 2, 4018, 4019, 7, 1054, 2, 2, 4019, 4020,
	7, 1063, 2, 2, 4020, 4021, 5, 572, 287, 2, 4021, 4022, 7, 1064, 2, 2, 4022,
	4037, 3, 2, 2, 2, 4023, 4024, 7, 535, 2, 2, 4024, 4025, 7, 1054, 2, 2,
	4025, 4026, 7, 1063, 2, 2, 4026, 4031, 5, 322, 162, 2, 4027, 4028, 7, 1065,
	2, 2, 4028, 4030, 5, 322, 162, 2, 4029, 4027, 3, 2, 2, 2, 4030, 4033, 3,
	2, 2, 2, 4031, 4029, 3, 2, 2, 2, 4031, 4032, 3, 2, 2, 2, 4032, 4034, 3,
	2, 2, 2, 4033, 4031, 3, 2, 2, 2, 4034, 4035, 7, 1064, 2, 2, 4035, 4037,
	3, 2, 2, 2, 4036, 3987, 3, 2, 2, 2, 4036, 3993, 3, 2, 2, 2, 4036, 3999,
	3, 2, 2, 2, 4036, 4005, 3, 2, 2, 2, 4036, 4011, 3, 2, 2, 2, 4036, 4017,
	3, 2, 2, 2, 4036, 4023, 3, 2, 2, 2, 4037, 321, 3, 2, 2, 2, 4038, 4039,
	7, 1063, 2, 2, 4039, 4040, 5, 504, 253, 2, 4040, 4041, 7, 1065, 2, 2, 4041,
	4042, 5, 504, 253, 2, 4042, 4043, 7, 1064, 2, 2, 4043, 323, 3, 2, 2, 2,
	4044, 4045, 9, 56, 2, 2, 4045, 325, 3, 2, 2, 2, 4046, 4047, 9, 57, 2, 2,
	4047, 4048, 7, 1054, 2, 2, 4048, 4065, 5, 330, 166, 2, 4049, 4050, 7, 445,
	2, 2, 4050, 4051, 7, 1054, 2, 2, 4051, 4052, 7, 1078, 2, 2, 4052, 4053,
	7, 1065, 2, 2, 4053, 4054, 7, 446, 2, 2, 4054, 4055, 7, 1054, 2, 2, 4055,
	4065, 5, 534, 268, 2, 4056, 4057, 7, 525, 2, 2, 4057, 4058, 7, 1054, 2,
	2, 4058, 4059, 7, 1078, 2, 2, 4059, 4060, 7, 1065, 2, 2, 4060, 4061, 7,
	526, 2, 2, 4061, 4062, 7, 1054, 2, 2, 4062, 4065, 5, 534, 268, 2, 4063,
	4065, 7, 569, 2, 2, 4064, 4046, 3, 2, 2, 2, 4064, 4049, 3, 2, 2, 2, 4064,
	4056, 3, 2, 2, 2, 4064, 4063, 3, 2, 2, 2, 4065, 327, 3, 2, 2, 2, 4066,
	4067, 7, 609, 2, 2, 4067, 4068, 7, 1054, 2, 2, 4068, 4079, 7, 1078, 2,
	2, 4069, 4070, 7, 504, 2, 2, 4070, 4071, 7, 1054, 2, 2, 4071, 4079, 7,
	1078, 2, 2, 4072, 4073, 7, 360, 2, 2, 4073, 4074, 7, 1054, 2, 2, 4074,
	4079, 7, 1078, 2, 2, 4075, 4076, 7, 507, 2, 2, 4076, 4077, 7, 1054, 2,
	2, 4077, 4079, 7, 1078, 2, 2, 4078, 4066, 3, 2, 2, 2, 4078, 4069, 3, 2,
	2, 2, 4078, 4072, 3, 2, 2, 2, 4078, 4075, 3, 2, 2, 2, 4079, 329, 3, 2,
	2, 2, 4080, 4085, 5, 520, 261, 2, 4081, 4082, 7, 1065, 2, 2, 4082, 4084,
	5, 520, 261, 2, 4083, 4081, 3, 2, 2, 2, 4084, 4087, 3, 2, 2, 2, 4085, 4083,
	3, 2, 2, 2, 4085, 4086, 3, 2, 2, 2, 4086, 4090, 3, 2, 2, 2, 4087, 4085,
	3, 2, 2, 2, 4088, 4090, 7, 1078, 2, 2, 4089, 4080, 3, 2, 2, 2, 4089, 4088,
	3, 2, 2, 2, 4090, 331, 3, 2, 2, 2, 4091, 4092, 7, 624, 2, 2, 4092, 4093,
	9, 58, 2, 2, 4093, 4095, 5, 522, 262, 2, 4094, 4096, 9, 59, 2, 2, 4095,
	4094, 3, 2, 2, 2, 4095, 4096, 3, 2, 2, 2, 4096, 333, 3, 2, 2, 2, 4097,
	4098, 7, 624, 2, 2, 4098, 4099, 7, 374, 2, 2, 4099, 4105, 5, 522, 262,
	2, 4100, 4103, 7, 589, 2, 2, 4101, 4102, 7, 61, 2, 2, 4102, 4104, 7, 471,
	2, 2, 4103, 4101, 3, 2, 2, 2, 4103, 4104, 3, 2, 2, 2, 4104, 4106, 3, 2,
	2, 2, 4105, 4100, 3, 2, 2, 2, 4105, 4106, 3, 2, 2, 2, 4106, 335, 3, 2,
	2, 2, 4107, 4108, 7, 624, 2, 2, 4108, 4109, 7, 511, 2, 2, 4109, 4110, 5,
	522, 262, 2, 4110, 337, 3, 2, 2, 2, 4111, 4112, 7, 624, 2, 2, 4112, 4113,
	7, 340, 2, 2, 4113, 4116, 5, 522, 262, 2, 4114, 4115, 7, 491, 2, 2, 4115,
	4117, 7, 505, 2, 2, 4116, 4114, 3, 2, 2, 2, 4116, 4117, 3, 2, 2, 2, 4117,
	339, 3, 2, 2, 2, 4118, 4119, 7, 624, 2, 2, 4119, 4120, 7, 545, 2, 2, 4120,
	4121, 5, 522, 262, 2, 4121, 341, 3, 2, 2, 2, 4122, 4123, 7, 624, 2, 2,
	4123, 4126, 7, 521, 2, 2, 4124, 4125, 7, 31, 2, 2, 4125, 4127, 5, 522,
	262, 2, 4126, 4124, 3, 2, 2, 2, 4126, 4127, 3, 2, 2, 2, 4127, 343, 3, 2,
	2, 2, 4128, 4129, 7, 511, 2, 2, 4129, 4130, 5, 528, 265, 2, 4130, 4133,
	7, 64, 2, 2, 4131, 4134, 7, 1078, 2, 2, 4132, 4134, 7, 1090, 2, 2, 4133,
	4131, 3, 2, 2, 2, 4133, 4132, 3, 2, 2, 2, 4134, 345, 3, 2, 2, 2, 4135,
	4136, 7, 641, 2, 2, 4136, 4139, 5, 528, 265, 2, 4137, 4138, 7, 173, 2,
	2, 4138, 4140, 5, 574, 288, 2, 4139, 4137, 3, 2, 2, 2, 4139, 4140, 3, 2,
	2, 2, 4140, 347, 3, 2, 2, 2, 4141, 4142, 9, 60, 2, 2, 4142, 4143, 7, 511,
	2, 2, 4143, 4144, 5, 528, 265, 2, 4144, 349, 3, 2, 2, 2, 4145, 4148, 5,
	352, 177, 2, 4146, 4148, 5, 6, 4, 2, 4147, 4145, 3, 2, 2, 2, 4147, 4146,
	3, 2, 2, 2, 4148, 351, 3, 2, 2, 2, 4149, 4150, 5, 528, 265, 2, 4150, 4151,
	7, 1074, 2, 2, 4151, 4153, 3, 2, 2, 2, 4152, 4149, 3, 2, 2, 2, 4152, 4153,
	3, 2, 2, 2, 4153, 4154, 3, 2, 2, 2, 4154, 4193, 7, 316, 2, 2, 4155, 4156,
	5, 372, 187, 2, 4156, 4157, 7, 1066, 2, 2, 4157, 4159, 3, 2, 2, 2, 4158,
	4155, 3, 2, 2, 2, 4159, 4162, 3, 2, 2, 2, 4160, 4158, 3, 2, 2, 2, 4160,
	4161, 3, 2, 2, 2, 4161, 4168, 3, 2, 2, 2, 4162, 4160, 3, 2, 2, 2, 4163,
	4164, 5, 374, 188, 2, 4164, 4165, 7, 1066, 2, 2, 4165, 4167, 3, 2, 2, 2,
	4166, 4163, 3, 2, 2, 2, 4167, 4170, 3, 2, 2, 2, 4168, 4166, 3, 2, 2, 2,
	4168, 4169, 3, 2, 2, 2, 4169, 4176, 3, 2, 2, 2, 4170, 4168, 3, 2, 2, 2,
	4171, 4172, 5, 376, 189, 2, 4172, 4173, 7, 1066, 2, 2, 4173, 4175, 3, 2,
	2, 2, 4174, 4171, 3, 2, 2, 2, 4175, 4178, 3, 2, 2, 2, 4176, 4174, 3, 2,
	2, 2, 4176, 4177, 3, 2, 2, 2, 4177, 4184, 3, 2, 2, 2, 4178, 4176, 3, 2,
	2, 2, 4179, 4180, 5, 378, 190, 2, 4180, 4181, 7, 1066, 2, 2, 4181, 4183,
	3, 2, 2, 2, 4182, 4179, 3, 2, 2, 2, 4183, 4186, 3, 2, 2, 2, 4184, 4182,
	3, 2, 2, 2, 4184, 4185, 3, 2, 2, 2, 4185, 4190, 3, 2, 2, 2, 4186, 4184,
	3, 2, 2, 2, 4187, 4189, 5, 382, 192, 2, 4188, 4187, 3, 2, 2, 2, 4189, 4192,
	3, 2, 2, 2, 4190, 4188, 3, 2, 2, 2, 4190, 4191, 3, 2, 2, 2, 4191, 4194,
	3, 2, 2, 2, 4192, 4190, 3, 2, 2, 2, 4193, 4160, 3, 2, 2, 2, 4193, 4194,
	3, 2, 2, 2, 4194, 4195, 3, 2, 2, 2, 4195, 4197, 7, 374, 2, 2, 4196, 4198,
	5, 528, 265, 2, 4197, 4196, 3, 2, 2, 2, 4197, 4198, 3, 2, 2, 2, 4198, 353,
	3, 2, 2, 2, 4199, 4202, 7, 21, 2, 2, 4200, 4203, 5, 528, 265, 2, 4201,
	4203, 5, 606, 304, 2, 4202, 4200, 3, 2, 2, 2, 4202, 4201, 3, 2, 2, 2, 4202,
	4203, 3, 2, 2, 2, 4203, 4205, 3, 2, 2, 2, 4204, 4206, 5, 384, 193, 2, 4205,
	4204, 3, 2, 2, 2, 4206, 4207, 3, 2, 2, 2, 4207, 4205, 3, 2, 2, 2, 4207,
	4208, 3, 2, 2, 2, 4208, 4215, 3, 2, 2, 2, 4209, 4211, 7, 51, 2, 2, 4210,
	4212, 5, 382, 192, 2, 4211, 4210, 3, 2, 2, 2, 4212, 4213, 3, 2, 2, 2, 4213,
	4211, 3, 2, 2, 2, 4213, 4214, 3, 2, 2, 2, 4214, 4216, 3, 2, 2, 2, 4215,
	4209, 3, 2, 2, 2, 4215, 4216, 3, 2, 2, 2, 4216, 4217, 3, 2, 2, 2, 4217,
	4218, 7, 374, 2, 2, 4218, 4219, 7, 21, 2, 2, 4219, 355, 3, 2, 2, 2, 4220,
	4221, 7, 72, 2, 2, 4221, 4222, 5, 606, 304, 2, 4222, 4224, 7, 160, 2, 2,
	4223, 4225, 5, 382, 192, 2, 4224, 4223, 3, 2, 2, 2, 4225, 4226, 3, 2, 2,
	2, 4226, 4224, 3, 2, 2, 2, 4226, 4227, 3, 2, 2, 2, 4227, 4231, 3, 2, 2,
	2, 4228, 4230, 5, 386, 194, 2, 4229, 4228, 3, 2, 2, 2, 4230, 4233, 3, 2,
	2, 2, 4231, 4229, 3, 2, 2, 2, 4231, 4232, 3, 2, 2, 2, 4232, 4240, 3, 2,
	2, 2, 4233, 4231, 3, 2, 2, 2, 4234, 4236, 7, 51, 2, 2, 4235, 4237, 5, 382,
	192, 2, 4236, 4235, 3, 2, 2, 2, 4237, 4238, 3, 2, 2, 2, 4238, 4236, 3,
	2, 2, 2, 4238, 4239, 3, 2, 2, 2, 4239, 4241, 3, 2, 2, 2, 4240, 4234, 3,
	2, 2, 2, 4240, 4241, 3, 2, 2, 2, 4241, 4242, 3, 2, 2, 2, 4242, 4243, 7,
	374, 2, 2, 4243, 4244, 7, 72, 2, 2, 4244, 357, 3, 2, 2, 2, 4245, 4246,
	7, 83, 2, 2, 4246, 4247, 5, 528, 265, 2, 4247, 359, 3, 2, 2, 2, 4248, 4249,
	7, 89, 2, 2, 4249, 4250, 5, 528, 265, 2, 4250, 361, 3, 2, 2, 2, 4251, 4252,
	5, 528, 265, 2, 4252, 4253, 7, 1074, 2, 2, 4253, 4255, 3, 2, 2, 2, 4254,
	4251, 3, 2, 2, 2, 4254, 4255, 3, 2, 2, 2, 4255, 4256, 3, 2, 2, 2, 4256,
	4258, 7, 97, 2, 2, 4257, 4259, 5, 382, 192, 2, 4258, 4257, 3, 2, 2, 2,
	4259, 4260, 3, 2, 2, 2, 4260, 4258, 3, 2, 2, 2, 4260, 4261, 3, 2, 2, 2,
	4261, 4262, 3, 2, 2, 2, 4262, 4263, 7, 374, 2, 2, 4263, 4265, 7, 97, 2,
	2, 4264, 4266, 5, 528, 265, 2, 4265, 4264, 3, 2, 2, 2, 4265, 4266, 3, 2,
	2, 2, 4266, 363, 3, 2, 2, 2, 4267, 4268, 5, 528, 265, 2, 4268, 4269, 7,
	1074, 2, 2, 4269, 4271, 3, 2, 2, 2, 4270, 4267, 3, 2, 2, 2, 4270, 4271,
	3, 2, 2, 2, 4271, 4272, 3, 2, 2, 2, 4272, 4274, 7, 130, 2, 2, 4273, 4275,
	5, 382, 192, 2, 4274, 4273, 3, 2, 2, 2, 4275, 4276, 3, 2, 2, 2, 4276, 4274,
	3, 2, 2, 2, 4276, 4277, 3, 2, 2, 2, 4277, 4278, 3, 2, 2, 2, 4278, 4279,
	7, 607, 2, 2, 4279, 4280, 5, 606, 304, 2, 4280, 4281, 7, 374, 2, 2, 4281,
	4283, 7, 130, 2, 2, 4282, 4284, 5, 528, 265, 2, 4283, 4282, 3, 2, 2, 2,
	4283, 4284, 3, 2, 2, 2, 4284, 365, 3, 2, 2, 2, 4285, 4286, 7, 135, 2, 2,
	4286, 4287, 5, 606, 304, 2, 4287, 367, 3, 2, 2, 2, 4288, 4289, 5, 528,
	265, 2, 4289, 4290, 7, 1074, 2, 2, 4290, 4292, 3, 2, 2, 2, 4291, 4288,
	3, 2, 2, 2, 4291, 4292, 3, 2, 2, 2, 4292, 4293, 3, 2, 2, 2, 4293, 4294,
	7, 177, 2, 2, 4294, 4295, 5, 606, 304, 2, 4295, 4297, 7, 368, 2, 2, 4296,
	4298, 5, 382, 192, 2, 4297, 4296, 3, 2, 2, 2, 4298, 4299, 3, 2, 2, 2, 4299,
	4297, 3, 2, 2, 2, 4299, 4300, 3, 2, 2, 2, 4300, 4301, 3, 2, 2, 2, 4301,
	4302, 7, 374, 2, 2, 4302, 4304, 7, 177, 2, 2, 4303, 4305, 5, 528, 265,
	2, 4304, 4303, 3, 2, 2, 2, 4304, 4305, 3, 2, 2, 2, 4305, 369, 3, 2, 2,
	2, 4306, 4307, 7, 333, 2, 2, 4307, 4322, 5, 528, 265, 2, 4308, 4313, 7,
	60, 2, 2, 4309, 4311, 7, 482, 2, 2, 4310, 4309, 3, 2, 2, 2, 4310, 4311,
	3, 2, 2, 2, 4311, 4312, 3, 2, 2, 2, 4312, 4314, 7, 64, 2, 2, 4313, 4310,
	3, 2, 2, 2, 4313, 4314, 3, 2, 2, 2, 4314, 4315, 3, 2, 2, 2, 4315, 4316,
	5, 528, 265, 2, 4316, 4317, 7, 81, 2, 2, 4317, 4318, 5, 560, 281, 2, 4318,
	4322, 3, 2, 2, 2, 4319, 4320, 7, 494, 2, 2, 4320, 4322, 5, 528, 265, 2,
	4321, 4306, 3, 2, 2, 2, 4321, 4308, 3, 2, 2, 2, 4321, 4319, 3, 2, 2, 2,
	4322, 371, 3, 2, 2, 2, 4323, 4324, 7, 39, 2, 2, 4324, 4325, 5, 560, 281,
	2, 4325, 4328, 5, 548, 275, 2, 4326, 4327, 7, 40, 2, 2, 4327, 4329, 5,
	606, 304, 2, 4328, 4326, 3, 2, 2, 2, 4328, 4329, 3, 2, 2, 2, 4329, 373,
	3, 2, 2, 2, 4330, 4331, 7, 39, 2, 2, 4331, 4332, 5, 528, 265, 2, 4332,
	4333, 7, 28, 2, 2, 4333, 4340, 7, 61, 2, 2, 4334, 4341, 5, 534, 268, 2,
	4335, 4337, 7, 149, 2, 2, 4336, 4338, 7, 613, 2, 2, 4337, 4336, 3, 2, 2,
	2, 4337, 4338, 3, 2, 2, 2, 4338, 4339, 3, 2, 2, 2, 4339, 4341, 7, 1078,
	2, 2, 4340, 4334, 3, 2, 2, 2, 4340, 4335, 3, 2, 2, 2, 4341, 375, 3, 2,
	2, 2, 4342, 4343, 7, 39, 2, 2, 4343, 4344, 5, 528, 265, 2, 4344, 4345,
	7, 36, 2, 2, 4345, 4346, 7, 61, 2, 2, 4346, 4347, 5, 180, 91, 2, 4347,
	377, 3, 2, 2, 2, 4348, 4349, 7, 39, 2, 2, 4349, 4350, 9, 61, 2, 2, 4350,
	4351, 7, 407, 2, 2, 4351, 4352, 7, 61, 2, 2, 4352, 4357, 5, 380, 191, 2,
	4353, 4354, 7, 1065, 2, 2, 4354, 4356, 5, 380, 191, 2, 4355, 4353, 3, 2,
	2, 2, 4356, 4359, 3, 2, 2, 2, 4357, 4355, 3, 2, 2, 2, 4357, 4358, 3, 2,
	2, 2, 4358, 4360, 3, 2, 2, 2, 4359, 4357, 3, 2, 2, 2, 4360, 4361, 5, 350,
	176, 2, 4361, 379, 3, 2, 2, 2, 4362, 4374, 5, 534, 268, 2, 4363, 4365,
	7, 149, 2, 2, 4364, 4366, 7, 613, 2, 2, 4365, 4364, 3, 2, 2, 2, 4365, 4366,
	3, 2, 2, 2, 4366, 4367, 3, 2, 2, 2, 4367, 4374, 7, 1078, 2, 2, 4368, 4374,
	5, 528, 265, 2, 4369, 4374, 7, 150, 2, 2, 4370, 4371, 7, 105, 2, 2, 4371,
	4374, 7, 400, 2, 2, 4372, 4374, 7, 148, 2, 2, 4373, 4362, 3, 2, 2, 2, 4373,
	4363, 3, 2, 2, 2, 4373, 4368, 3, 2, 2, 2, 4373, 4369, 3, 2, 2, 2, 4373,
	4370, 3, 2, 2, 2, 4373, 4372, 3, 2, 2, 2, 4374, 381, 3, 2, 2, 2, 4375,
	4378, 5, 20, 11, 2, 4376, 4378, 5, 6, 4, 2, 4377, 4375, 3, 2, 2, 2, 4377,
	4376, 3, 2, 2, 2, 4378, 4379, 3, 2, 2, 2, 4379, 4380, 7, 1066, 2, 2, 4380,
	383, 3, 2, 2, 2, 4381, 4384, 7, 175, 2, 2, 4382, 4385, 5, 546, 274, 2,
	4383, 4385, 5, 606, 304, 2, 4384, 4382, 3, 2, 2, 2, 4384, 4383, 3, 2, 2,
	2, 4385, 4386, 3, 2, 2, 2, 4386, 4388, 7, 160, 2, 2, 4387, 4389, 5, 382,
	192, 2, 4388, 4387, 3, 2, 2, 2, 4389, 4390, 3, 2, 2, 2, 4390, 4388, 3,
	2, 2, 2, 4390, 4391, 3, 2, 2, 2, 4391, 385, 3, 2, 2, 2, 4392, 4393, 7,
	52, 2, 2, 4393, 4394, 5, 606, 304, 2, 4394, 4396, 7, 160, 2, 2, 4395, 4397,
	5, 382, 192, 2, 4396, 4395, 3, 2, 2, 2, 4397, 4398, 3, 2, 2, 2, 4398, 4396,
	3, 2, 2, 2, 4398, 4399, 3, 2, 2, 2, 4399, 387, 3, 2, 2, 2, 4400, 4401,
	7, 9, 2, 2, 4401, 4402, 7, 609, 2, 2, 4402, 4407, 5, 406, 204, 2, 4403,
	4404, 7, 1065, 2, 2, 4404, 4406, 5, 406, 204, 2, 4405, 4403, 3, 2, 2, 2,
	4406, 4409, 3, 2, 2, 2, 4407, 4405, 3, 2, 2, 2, 4407, 4408, 3, 2, 2, 2,
	4408, 4455, 3, 2, 2, 2, 4409, 4407, 3, 2, 2, 2, 4410, 4411, 7, 9, 2, 2,
	4411, 4413, 7, 609, 2, 2, 4412, 4414, 5, 582, 292, 2, 4413, 4412, 3, 2,
	2, 2, 4413, 4414, 3, 2, 2, 2, 4414, 4415, 3, 2, 2, 2, 4415, 4420, 5, 408,
	205, 2, 4416, 4417, 7, 1065, 2, 2, 4417, 4419, 5, 408, 205, 2, 4418, 4416,
	3, 2, 2, 2, 4419, 4422, 3, 2, 2, 2, 4420, 4418, 3, 2, 2, 2, 4420, 4421,
	3, 2, 2, 2, 4421, 4437, 3, 2, 2, 2, 4422, 4420, 3, 2, 2, 2, 4423, 4435,
	7, 132, 2, 2, 4424, 4436, 7, 485, 2, 2, 4425, 4432, 5, 410, 206, 2, 4426,
	4428, 7, 12, 2, 2, 4427, 4426, 3, 2, 2, 2, 4427, 4428, 3, 2, 2, 2, 4428,
	4429, 3, 2, 2, 2, 4429, 4431, 5, 410, 206, 2, 4430, 4427, 3, 2, 2, 2, 4431,
	4434, 3, 2, 2, 2, 4432, 4430, 3, 2, 2, 2, 4432, 4433, 3, 2, 2, 2, 4433,
	4436, 3, 2, 2, 2, 4434, 4432, 3, 2, 2, 2, 4435, 4424, 3, 2, 2, 2, 4435,
	4425, 3, 2, 2, 2, 4436, 4438, 3, 2, 2, 2, 4437, 4423, 3, 2, 2, 2, 4437,
	4438, 3, 2, 2, 2, 4438, 4445, 3, 2, 2, 2, 4439, 4441, 7, 178, 2, 2, 4440,
	4442, 5, 412, 207, 2, 4441, 4440, 3, 2, 2, 2, 4442, 4443, 3, 2, 2, 2, 4443,
	4441, 3, 2, 2, 2, 4443, 4444, 3, 2, 2, 2, 4444, 4446, 3, 2, 2, 2, 4445,
	4439, 3, 2, 2, 2, 4445, 4446, 3, 2, 2, 2, 4446, 4451, 3, 2, 2, 2, 4447,
	4450, 5, 414, 208, 2, 4448, 4450, 5, 416, 209, 2, 4449, 4447, 3, 2, 2,
	2, 4449, 4448, 3, 2, 2, 2, 4450, 4453, 3, 2, 2, 2, 4451, 4449, 3, 2, 2,
	2, 4451, 4452, 3, 2, 2, 2, 4452, 4455, 3, 2, 2, 2, 4453, 4451, 3, 2, 2,
	2, 4454, 4400, 3, 2, 2, 2, 4454, 4410, 3, 2, 2, 2, 4455, 389, 3, 2, 2,
	2, 4456, 4457, 7, 32, 2, 2, 4457, 4458, 7, 609, 2, 2, 4458, 4463, 5, 408,
	205, 2, 4459, 4460, 7, 1065, 2, 2, 4460, 4462, 5, 408, 205, 2, 4461, 4459,
	3, 2, 2, 2, 4462, 4465, 3, 2, 2, 2, 4463, 4461, 3, 2, 2, 2, 4463, 4464,
	3, 2, 2, 2, 4464, 4511, 3, 2, 2, 2, 4465, 4463, 3, 2, 2, 2, 4466, 4467,
	7, 32, 2, 2, 4467, 4469, 7, 609, 2, 2, 4468, 4470, 5, 584, 293, 2, 4469,
	4468, 3, 2, 2, 2, 4469, 4470, 3, 2, 2, 2, 4470, 4471, 3, 2, 2, 2, 4471,
	4476, 5, 408, 205, 2, 4472, 4473, 7, 1065, 2, 2, 4473, 4475, 5, 408, 205,
	2, 4474, 4472, 3, 2, 2, 2, 4475, 4478, 3, 2, 2, 2, 4476, 4474, 3, 2, 2,
	2, 4476, 4477, 3, 2, 2, 2, 4477, 4493, 3, 2, 2, 2, 4478, 4476, 3, 2, 2,
	2, 4479, 4491, 7, 132, 2, 2, 4480, 4492, 7, 485, 2, 2, 4481, 4488, 5, 410,
	206, 2, 4482, 4484, 7, 12, 2, 2, 4483, 4482, 3, 2, 2, 2, 4483, 4484, 3,
	2, 2, 2, 4484, 4485, 3, 2, 2, 2, 4485, 4487, 5, 410, 206, 2, 4486, 4483,
	3, 2, 2, 2, 4487, 4490, 3, 2, 2, 2, 4488, 4486, 3, 2, 2, 2, 4488, 4489,
	3, 2, 2, 2, 4489, 4492, 3, 2, 2, 2, 4490, 4488, 3, 2, 2, 2, 4491, 4480,
	3, 2, 2, 2, 4491, 4481, 3, 2, 2, 2, 4492, 4494, 3, 2, 2, 2, 4493, 4479,
	3, 2, 2, 2, 4493, 4494, 3, 2, 2, 2, 4494, 4501, 3, 2, 2, 2, 4495, 4497,
	7, 178, 2, 2, 4496, 4498, 5, 412, 207, 2, 4497, 4496, 3, 2, 2, 2, 4498,
	4499, 3, 2, 2, 2, 4499, 4497, 3, 2, 2, 2, 4499, 4500, 3, 2, 2, 2, 4500,
	4502, 3, 2, 2, 2, 4501, 4495, 3, 2, 2, 2, 4501, 4502, 3, 2, 2, 2, 4502,
	4507, 3, 2, 2, 2, 4503, 4506, 5, 414, 208, 2, 4504, 4506, 5, 416, 209,
	2, 4505, 4503, 3, 2, 2, 2, 4505, 4504, 3, 2, 2, 2, 4506, 4509, 3, 2, 2,
	2, 4507, 4505, 3, 2, 2, 2, 4507, 4508, 3, 2, 2, 2, 4508, 4511, 3, 2, 2,
	2, 4509, 4507, 3, 2, 2, 2, 4510, 4456, 3, 2, 2, 2, 4510, 4466, 3, 2, 2,
	2, 4511, 391, 3, 2, 2, 2, 4512, 4513, 7, 49, 2, 2, 4513, 4515, 7, 609,
	2, 2, 4514, 4516, 5, 582, 292, 2, 4515, 4514, 3, 2, 2, 2, 4515, 4516, 3,
	2, 2, 2, 4516, 4517, 3, 2, 2, 2, 4517, 4522, 5, 510, 256, 2, 4518, 4519,
	7, 1065, 2, 2, 4519, 4521, 5, 510, 256, 2, 4520, 4518, 3, 2, 2, 2, 4521,
	4524, 3, 2, 2, 2, 4522, 4520, 3, 2, 2, 2, 4522, 4523, 3, 2, 2, 2, 4523,
	393, 3, 2, 2, 2, 4524, 4522, 3, 2, 2, 2, 4525, 4526, 7, 68, 2, 2, 4526,
	4531, 5, 418, 210, 2, 4527, 4528, 7, 1065, 2, 2, 4528, 4530, 5, 418, 210,
	2, 4529, 4527, 3, 2, 2, 2, 4530, 4533, 3, 2, 2, 2, 4531, 4529, 3, 2, 2,
	2, 4531, 4532, 3, 2, 2, 2, 4532, 4534, 3, 2, 2, 2, 4533, 4531, 3, 2, 2,
	2, 4534, 4536, 7, 110, 2, 2, 4535, 4537, 9, 62, 2, 2, 4536, 4535, 3, 2,
	2, 2, 4536, 4537, 3, 2, 2, 2, 4537, 4538, 3, 2, 2, 2, 4538, 4539, 5, 422,
	212, 2, 4539, 4540, 7, 161, 2, 2, 4540, 4545, 5, 408, 205, 2, 4541, 4542,
	7, 1065, 2, 2, 4542, 4544, 5, 408, 205, 2, 4543, 4541, 3, 2, 2, 2, 4544,
	4547, 3, 2, 2, 2, 4545, 4543, 3, 2, 2, 2, 4545, 4546, 3, 2, 2, 2, 4546,
	4562, 3, 2, 2, 2, 4547, 4545, 3, 2, 2, 2, 4548, 4560, 7, 132, 2, 2, 4549,
	4561, 7, 485, 2, 2, 4550, 4557, 5, 410, 206, 2, 4551, 4553, 7, 12, 2, 2,
	4552, 4551, 3, 2, 2, 2, 4552, 4553, 3, 2, 2, 2, 4553, 4554, 3, 2, 2, 2,
	4554, 4556, 5, 410, 206, 2, 4555, 4552, 3, 2, 2, 2, 4556, 4559, 3, 2, 2,
	2, 4557, 4555, 3, 2, 2, 2, 4557, 4558, 3, 2, 2, 2, 4558, 4561, 3, 2, 2,
	2, 4559, 4557, 3, 2, 2, 2, 4560, 4549, 3, 2, 2, 2, 4560, 4550, 3, 2, 2,
	2, 4561, 4563, 3, 2, 2, 2, 4562, 4548, 3, 2, 2, 2, 4562, 4563, 3, 2, 2,
	2, 4563, 4573, 3, 2, 2, 2, 4564, 4570, 7, 178, 2, 2, 4565, 4566, 7, 68,
	2, 2, 4566, 4569, 7, 112, 2, 2, 4567, 4569, 5, 412, 207, 2, 4568, 4565,
	3, 2, 2, 2, 4568, 4567, 3, 2, 2, 2, 4569, 4572, 3, 2, 2, 2, 4570, 4568,
	3, 2, 2, 2, 4570, 4571, 3, 2, 2, 2, 4571, 4574, 3, 2, 2, 2, 4572, 4570,
	3, 2, 2, 2, 4573, 4564, 3, 2, 2, 2, 4573, 4574, 3, 2, 2, 2, 4574, 395,
	3, 2, 2, 2, 4575, 4576, 7, 68, 2, 2, 4576, 4577, 7, 517, 2, 2, 4577, 4578,
	7, 110, 2, 2, 4578, 4579, 5, 510, 256, 2, 4579, 4580, 7, 161, 2, 2, 4580,
	4585, 5, 510, 256, 2, 4581, 4582, 7, 1065, 2, 2, 4582, 4584, 5, 510, 256,
	2, 4583, 4581, 3, 2, 2, 2, 4584, 4587, 3, 2, 2, 2, 4585, 4583, 3, 2, 2,
	2, 4585, 4586, 3, 2, 2, 2, 4586, 4591, 3, 2, 2, 2, 4587, 4585, 3, 2, 2,
	2, 4588, 4589, 7, 178, 2, 2, 4589, 4590, 7, 68, 2, 2, 4590, 4592, 7, 112,
	2, 2, 4591, 4588, 3, 2, 2, 2, 4591, 4592, 3, 2, 2, 2, 4592, 397, 3, 2,
	2, 2, 4593, 4594, 7, 129, 2, 2, 4594, 4595, 7, 609, 2, 2, 4595, 4600, 5,
	424, 213, 2, 4596, 4597, 7, 1065, 2, 2, 4597, 4599, 5, 424, 213, 2, 4598,
	4596, 3, 2, 2, 2, 4599, 4602, 3, 2, 2, 2, 4600, 4598, 3, 2, 2, 2, 4600,
	4601, 3, 2, 2, 2, 4601, 399, 3, 2, 2, 2, 4602, 4600, 3, 2, 2, 2, 4603,
	4604, 7, 136, 2, 2, 4604, 4609, 5, 418, 210, 2, 4605, 4606, 7, 1065, 2,
	2, 4606, 4608, 5, 418, 210, 2, 4607, 4605, 3, 2, 2, 2, 4608, 4611, 3, 2,
	2, 2, 4609, 4607, 3, 2, 2, 2, 4609, 4610, 3, 2, 2, 2, 4610, 4612, 3, 2,
	2, 2, 4611, 4609, 3, 2, 2, 2, 4612, 4614, 7, 110, 2, 2, 4613, 4615, 9,
	62, 2, 2, 4614, 4613, 3, 2, 2, 2, 4614, 4615, 3, 2, 2, 2, 4615, 4616, 3,
	2, 2, 2, 4616, 4617, 5, 422, 212, 2, 4617, 4618, 7, 64, 2, 2, 4618, 4623,
	5, 510, 256, 2, 4619, 4620, 7, 1065, 2, 2, 4620, 4622, 5, 510, 256, 2,
	4621, 4619, 3, 2, 2, 2, 4622, 4625, 3, 2, 2, 2, 4623, 4621, 3, 2, 2, 2,
	4623, 4624, 3, 2, 2, 2, 4624, 4644, 3, 2, 2, 2, 4625, 4623, 3, 2, 2, 2,
	4626, 4627, 7, 136, 2, 2, 4627, 4629, 7, 8, 2, 2, 4628, 4630, 7, 647, 2,
	2, 4629, 4628, 3, 2, 2, 2, 4629, 4630, 3, 2, 2, 2, 4630, 4631, 3, 2, 2,
	2, 4631, 4632, 7, 1065, 2, 2, 4632, 4633, 7, 68, 2, 2, 4633, 4634, 7, 112,
	2, 2, 4634, 4635, 7, 64, 2, 2, 4635, 4640, 5, 510, 256, 2, 4636, 4637,
	7, 1065, 2, 2, 4637, 4639, 5, 510, 256, 2, 4638, 4636, 3, 2, 2, 2, 4639,
	4642, 3, 2, 2, 2, 4640, 4638, 3, 2, 2, 2, 4640, 4641, 3, 2, 2, 2, 4641,
	4644, 3, 2, 2, 2, 4642, 4640, 3, 2, 2, 2, 4643, 4603, 3, 2, 2, 2, 4643,
	4626, 3, 2, 2, 2, 4644, 401, 3, 2, 2, 2, 4645, 4646, 7, 136, 2, 2, 4646,
	4647, 7, 517, 2, 2, 4647, 4648, 7, 110, 2, 2, 4648, 4649, 5, 510, 256,
	2, 4649, 4650, 7, 64, 2, 2, 4650, 4655, 5, 510, 256, 2, 4651, 4652, 7,
	1065, 2, 2, 4652, 4654, 5, 510, 256, 2, 4653, 4651, 3, 2, 2, 2, 4654, 4657,
	3, 2, 2, 2, 4655, 4653, 3, 2, 2, 2, 4655, 4656, 3, 2, 2, 2, 4656, 403,
	3, 2, 2, 2, 4657, 4655, 3, 2, 2, 2, 4658, 4659, 7, 142, 2, 2, 4659, 4662,
	7, 504, 2, 2, 4660, 4661, 7, 61, 2, 2, 4661, 4663, 5, 510, 256, 2, 4662,
	4660, 3, 2, 2, 2, 4662, 4663, 3, 2, 2, 2, 4663, 4664, 3, 2, 2, 2, 4664,
	4667, 7, 1054, 2, 2, 4665, 4668, 5, 600, 301, 2, 4666, 4668, 7, 1078, 2,
	2, 4667, 4665, 3, 2, 2, 2, 4667, 4666, 3, 2, 2, 2, 4668, 405, 3, 2, 2,
	2, 4669, 4670, 5, 510, 256, 2, 4670, 4671, 5, 414, 208, 2, 4671, 407, 3,
	2, 2, 2, 4672, 4673, 5, 510, 256, 2, 4673, 4674, 7, 412, 2, 2, 4674, 4675,
	7, 18, 2, 2, 4675, 4676, 7, 504, 2, 2, 4676, 4677, 7, 1078, 2, 2, 4677,
	4697, 3, 2, 2, 2, 4678, 4679, 5, 510, 256, 2, 4679, 4682, 7, 412, 2, 2,
	4680, 4681, 7, 178, 2, 2, 4681, 4683, 5, 526, 264, 2, 4682, 4680, 3, 2,
	2, 2, 4682, 4683, 3, 2, 2, 2, 4683, 4684, 3, 2, 2, 2, 4684, 4685, 7, 18,
	2, 2, 4685, 4686, 7, 1078, 2, 2, 4686, 4697, 3, 2, 2, 2, 4687, 4688, 5,
	510, 256, 2, 4688, 4689, 7, 412, 2, 2, 4689, 4690, 7, 178, 2, 2, 4690,
	4693, 5, 526, 264, 2, 4691, 4692, 7, 13, 2, 2, 4692, 4694, 7, 1078, 2,
	2, 4693, 4691, 3, 2, 2, 2, 4693, 4694, 3, 2, 2, 2, 4694, 4697, 3, 2, 2,
	2, 4695, 4697, 5, 510, 256, 2, 4696, 4672, 3, 2, 2, 2, 4696, 4678, 3, 2,
	2, 2, 4696, 4687, 3, 2, 2, 2, 4696, 4695, 3, 2, 2, 2, 4697, 409, 3, 2,
	2, 2, 4698, 4707, 7, 154, 2, 2, 4699, 4707, 7, 623, 2, 2, 4700, 4701, 7,
	330, 2, 2, 4701, 4707, 7, 1078, 2, 2, 4702, 4703, 7, 427, 2, 2, 4703, 4707,
	7, 1078, 2, 2, 4704, 4705, 7, 586, 2, 2, 4705, 4707, 7, 1078, 2, 2, 4706,
	4698, 3, 2, 2, 2, 4706, 4699, 3, 2, 2, 2, 4706, 4700, 3, 2, 2, 2, 4706,
	4702, 3, 2, 2, 2, 4706, 4704, 3, 2, 2, 2, 4707, 411, 3, 2, 2, 2, 4708,
	4709, 7, 461, 2, 2, 4709, 4717, 5, 534, 268, 2, 4710, 4711, 7, 464, 2,
	2, 4711, 4717, 5, 534, 268, 2, 4712, 4713, 7, 460, 2, 2, 4713, 4717, 5,
	534, 268, 2, 4714, 4715, 7, 465, 2, 2, 4715, 4717, 5, 534, 268, 2, 4716,
	4708, 3, 2, 2, 2, 4716, 4710, 3, 2, 2, 2, 4716, 4712, 3, 2, 2, 2, 4716,
	4714, 3, 2, 2, 2, 4717, 413, 3, 2, 2, 2, 4718, 4719, 7, 504, 2, 2, 4719,
	4726, 7, 387, 2, 2, 4720, 4727, 7, 40, 2, 2, 4721, 4727, 7, 481, 2, 2,
	4722, 4723, 7, 80, 2, 2, 4723, 4724, 5, 534, 268, 2, 4724, 4725, 7, 633,
	2, 2, 4725, 4727, 3, 2, 2, 2, 4726, 4720, 3, 2, 2, 2, 4726, 4721, 3, 2,
	2, 2, 4726, 4722, 3, 2, 2, 2, 4726, 4727, 3, 2, 2, 2, 4727, 415, 3, 2,
	2, 2, 4728, 4729, 7, 304, 2, 2, 4729, 4730, 9, 63, 2, 2, 4730, 417, 3,
	2, 2, 2, 4731, 4736, 5, 420, 211, 2, 4732, 4733, 7, 1063, 2, 2, 4733, 4734,
	5, 560, 281, 2, 4734, 4735, 7, 1064, 2, 2, 4735, 4737, 3, 2, 2, 2, 4736,
	4732, 3, 2, 2, 2, 4736, 4737, 3, 2, 2, 2, 4737, 419, 3, 2, 2, 2, 4738,
	4740, 7, 8, 2, 2, 4739, 4741, 7, 647, 2, 2, 4740, 4739, 3, 2, 2, 2, 4740,
	4741, 3, 2, 2, 2, 4741, 4818, 3, 2, 2, 2, 4742, 4744, 7, 9, 2, 2, 4743,
	4745, 7, 640, 2, 2, 4744, 4743, 3, 2, 2, 2, 4744, 4745, 3, 2, 2, 2, 4745,
	4818, 3, 2, 2, 2, 4746, 4754, 7, 32, 2, 2, 4747, 4748, 7, 594, 2, 2, 4748,
	4755, 7, 639, 2, 2, 4749, 4755, 7, 640, 2, 2, 4750, 4755, 7, 615, 2, 2,
	4751, 4755, 7, 609, 2, 2, 4752, 4755, 7, 593, 2, 2, 4753, 4755, 7, 544,
	2, 2, 4754, 4747, 3, 2, 2, 2, 4754, 4749, 3, 2, 2, 2, 4754, 4750, 3, 2,
	2, 2, 4754, 4751, 3, 2, 2, 2, 4754, 4752, 3, 2, 2, 2, 4754, 4753, 3, 2,
	2, 2, 4754, 4755, 3, 2, 2, 2, 4755, 4818, 3, 2, 2, 2, 4756, 4818, 7, 42,
	2, 2, 4757, 4759, 7, 49, 2, 2, 4758, 4760, 7, 544, 2, 2, 4759, 4758, 3,
	2, 2, 2, 4759, 4760, 3, 2, 2, 2, 4760, 4818, 3, 2, 2, 2, 4761, 4818, 7,
	382, 2, 2, 4762, 4818, 7, 641, 2, 2, 4763, 4818, 7, 642, 2, 2, 4764, 4765,
	7, 68, 2, 2, 4765, 4818, 7, 112, 2, 2, 4766, 4818, 7, 75, 2, 2, 4767, 4818,
	7, 79, 2, 2, 4768, 4769, 7, 96, 2, 2, 4769, 4818, 7, 639, 2, 2, 4770, 4818,
	7, 643, 2, 2, 4771, 4818, 7, 517, 2, 2, 4772, 4818, 7, 126, 2, 2, 4773,
	4818, 7, 644, 2, 2, 4774, 4775, 7, 538, 2, 2, 4775, 4818, 9, 64, 2, 2,
	4776, 4818, 7, 141, 2, 2, 4777, 4778, 7, 144, 2, 2, 4778, 4818, 9, 65,
	2, 2, 4779, 4818, 7, 645, 2, 2, 4780, 4818, 7, 646, 2, 2, 4781, 4818, 7,
	163, 2, 2, 4782, 4818, 7, 170, 2, 2, 4783, 4818, 7, 171, 2, 2, 4784, 4818,
	7, 648, 2, 2, 4785, 4818, 7, 649, 2, 2, 4786, 4818, 7, 650, 2, 2, 4787,
	4818, 7, 651, 2, 2, 4788, 4818, 7, 652, 2, 2, 4789, 4818, 7, 653, 2, 2,
	4790, 4818, 7, 654, 2, 2, 4791, 4818, 7, 655, 2, 2, 4792, 4818, 7, 656,
	2, 2, 4793, 4818, 7, 657, 2, 2, 4794, 4818, 7, 658, 2, 2, 4795, 4818, 7,
	659, 2, 2, 4796, 4818, 7, 660, 2, 2, 4797, 4818, 7, 661, 2, 2, 4798, 4818,
	7, 662, 2, 2, 4799, 4818, 7, 663, 2, 2, 4800, 4818, 7, 664, 2, 2, 4801,
	4818, 7, 665, 2, 2, 4802, 4818, 7, 666, 2, 2, 4803, 4818, 7, 667, 2, 2,
	4804, 4818, 7, 668, 2, 2, 4805, 4818, 7, 669, 2, 2, 4806, 4818, 7, 670,
	2, 2, 4807, 4818, 7, 671, 2, 2, 4808, 4818, 7, 672, 2, 2, 4809, 4818, 7,
	673, 2, 2, 4810, 4818, 7, 674, 2, 2, 4811, 4818, 7, 675, 2, 2, 4812, 4818,
	7, 1007, 2, 2, 4813, 4818, 7, 676, 2, 2, 4814, 4818, 7, 677, 2, 2, 4815,
	4818, 7, 678, 2, 2, 4816, 4818, 7, 679, 2, 2, 4817, 4738, 3, 2, 2, 2, 4817,
	4742, 3, 2, 2, 2, 4817, 4746, 3, 2, 2, 2, 4817, 4756, 3, 2, 2, 2, 4817,
	4757, 3, 2, 2, 2, 4817, 4761, 3, 2, 2, 2, 4817, 4762, 3, 2, 2, 2, 4817,
	4763, 3, 2, 2, 2, 4817, 4764, 3, 2, 2, 2, 4817, 4766, 3, 2, 2, 2, 4817,
	4767, 3, 2, 2, 2, 4817, 4768, 3, 2, 2, 2, 4817, 4770, 3, 2, 2, 2, 4817,
	4771, 3, 2, 2, 2, 4817, 4772, 3, 2, 2, 2, 4817, 4773, 3, 2, 2, 2, 4817,
	4774, 3, 2, 2, 2, 4817, 4776, 3, 2, 2, 2, 4817, 4777, 3, 2, 2, 2, 4817,
	4779, 3, 2, 2, 2, 4817, 4780, 3, 2, 2, 2, 4817, 4781, 3, 2, 2, 2, 4817,
	4782, 3, 2, 2, 2, 4817, 4783, 3, 2, 2, 2, 4817, 4784, 3, 2, 2, 2, 4817,
	4785, 3, 2, 2, 2, 4817, 4786, 3, 2, 2, 2, 4817, 4787, 3, 2, 2, 2, 4817,
	4788, 3, 2, 2, 2, 4817, 4789, 3, 2, 2, 2, 4817, 4790, 3, 2, 2, 2, 4817,
	4791, 3, 2, 2, 2, 4817, 4792, 3, 2, 2, 2, 4817, 4793, 3, 2, 2, 2, 4817,
	4794, 3, 2, 2, 2, 4817, 4795, 3, 2, 2, 2, 4817, 4796, 3, 2, 2, 2, 4817,
	4797, 3, 2, 2, 2, 4817, 4798, 3, 2, 2, 2, 4817, 4799, 3, 2, 2, 2, 4817,
	4800, 3, 2, 2, 2, 4817, 4801, 3, 2, 2, 2, 4817, 4802, 3, 2, 2, 2, 4817,
	4803, 3, 2, 2, 2, 4817, 4804, 3, 2, 2, 2, 4817, 4805, 3, 2, 2, 2, 4817,
	4806, 3, 2, 2, 2, 4817, 4807, 3, 2, 2, 2, 4817, 4808, 3, 2, 2, 2, 4817,
	4809, 3, 2, 2, 2, 4817, 4810, 3, 2, 2, 2, 4817, 4811, 3, 2, 2, 2, 4817,
	4812, 3, 2, 2, 2, 4817, 4813, 3, 2, 2, 2, 4817, 4814, 3, 2, 2, 2, 4817,
	4815, 3, 2, 2, 2, 4817, 4816, 3, 2, 2, 2, 4818, 421, 3, 2, 2, 2, 4819,
	4836, 7, 1046, 2, 2, 4820, 4821, 7, 1046, 2, 2, 4821, 4822, 7, 1062, 2,
	2, 4822, 4836, 7, 1046, 2, 2, 4823, 4824, 5, 528, 265, 2, 4824, 4825, 7,
	1062, 2, 2, 4825, 4826, 7, 1046, 2, 2, 4826, 4836, 3, 2, 2, 2, 4827, 4828,
	5, 528, 265, 2, 4828, 4829, 7, 1062, 2, 2, 4829, 4830, 5, 528, 265, 2,
	4830, 4836, 3, 2, 2, 2, 4831, 4832, 5, 528, 265, 2, 4832, 4833, 5, 532,
	267, 2, 4833, 4836, 3, 2, 2, 2, 4834, 4836, 5, 528, 265, 2, 4835, 4819,
	3, 2, 2, 2, 4835, 4820, 3, 2, 2, 2, 4835, 4823, 3, 2, 2, 2, 4835, 4827,
	3, 2, 2, 2, 4835, 4831, 3, 2, 2, 2, 4835, 4834, 3, 2, 2, 2, 4836, 423,
	3, 2, 2, 2, 4837, 4838, 5, 510, 256, 2, 4838, 4839, 7, 161, 2, 2, 4839,
	4840, 5, 510, 256, 2, 4840, 425, 3, 2, 2, 2, 4841, 4843, 7, 11, 2, 2, 4842,
	4844, 9, 66, 2, 2, 4843, 4842, 3, 2, 2, 2, 4843, 4844, 3, 2, 2, 2, 4844,
	4845, 3, 2, 2, 2, 4845, 4846, 7, 158, 2, 2, 4846, 4847, 5, 562, 282, 2,
	4847, 427, 3, 2, 2, 2, 4848, 4849, 7, 25, 2, 2, 4849, 4850, 7, 158, 2,
	2, 4850, 4854, 5, 562, 282, 2, 4851, 4853, 5, 436, 219, 2, 4852, 4851,
	3, 2, 2, 2, 4853, 4856, 3, 2, 2, 2, 4854, 4852, 3, 2, 2, 2, 4854, 4855,
	3, 2, 2, 2, 4855, 429, 3, 2, 2, 2, 4856, 4854, 3, 2, 2, 2, 4857, 4858,
	7, 328, 2, 2, 4858, 4859, 7, 158, 2, 2, 4859, 4861, 5, 562, 282, 2, 4860,
	4862, 9, 67, 2, 2, 4861, 4860, 3, 2, 2, 2, 4861, 4862, 3, 2, 2, 2, 4862,
	431, 3, 2, 2, 2, 4863, 4865, 7, 111, 2, 2, 4864, 4866, 9, 66, 2, 2, 4865,
	4864, 3, 2, 2, 2, 4865, 4866, 3, 2, 2, 2, 4866, 4867, 3, 2, 2, 2, 4867,
	4868, 9, 68, 2, 2, 4868, 4869, 5, 562, 282, 2, 4869, 433, 3, 2, 2, 2, 4870,
	4872, 7, 530, 2, 2, 4871, 4873, 9, 66, 2, 2, 4872, 4871, 3, 2, 2, 2, 4872,
	4873, 3, 2, 2, 2, 4873, 4874, 3, 2, 2, 2, 4874, 4875, 7, 158, 2, 2, 4875,
	4877, 5, 562, 282, 2, 4876, 4878, 7, 519, 2, 2, 4877, 4876, 3, 2, 2, 2,
	4877, 4878, 3, 2, 2, 2, 4878, 4880, 3, 2, 2, 2, 4879, 4881, 7, 389, 2,
	2, 4880, 4879, 3, 2, 2, 2, 4880, 4881, 3, 2, 2, 2, 4881, 4883, 3, 2, 2,
	2, 4882, 4884, 7, 610, 2, 2, 4883, 4882, 3, 2, 2, 2, 4883, 4884, 3, 2,
	2, 2, 4884, 435, 3, 2, 2, 2, 4885, 4886, 7, 61, 2, 2, 4886, 4893, 7, 608,
	2, 2, 4887, 4893, 7, 519, 2, 2, 4888, 4893, 7, 391, 2, 2, 4889, 4893, 7,
	466, 2, 2, 4890, 4893, 7, 389, 2, 2, 4891, 4893, 7, 326, 2, 2, 4892, 4885,
	3, 2, 2, 2, 4892, 4887, 3, 2, 2, 2, 4892, 4888, 3, 2, 2, 2, 4892, 4889,
	3, 2, 2, 2, 4892, 4890, 3, 2, 2, 2, 4892, 4891, 3, 2, 2, 2, 4893, 437,
	3, 2, 2, 2, 4894, 4896, 7, 32, 2, 2, 4895, 4897, 7, 307, 2, 2, 4896, 4895,
	3, 2, 2, 2, 4896, 4897, 3, 2, 2, 2, 4897, 4898, 3, 2, 2, 2, 4898, 4899,
	7, 402, 2, 2, 4899, 4900, 5, 528, 265, 2, 4900, 4901, 7, 543, 2, 2, 4901,
	4902, 9, 69, 2, 2, 4902, 4903, 7, 565, 2, 2, 4903, 4904, 7, 1078, 2, 2,
	4904, 439, 3, 2, 2, 2, 4905, 4906, 7, 419, 2, 2, 4906, 4907, 7, 506, 2,
	2, 4907, 4908, 5, 528, 265, 2, 4908, 4909, 7, 565, 2, 2, 4909, 4910, 7,
	1078, 2, 2, 4910, 441, 3, 2, 2, 2, 4911, 4912, 7, 605, 2, 2, 4912, 4913,
	7, 506, 2, 2, 4913, 4914, 5, 528, 265, 2, 4914, 443, 3, 2, 2, 2, 4915,
	4916, 7, 142, 2, 2, 4916, 4917, 5, 448, 225, 2, 4917, 4918, 9, 70, 2, 2,
	4918, 4926, 5, 606, 304, 2, 4919, 4920, 7, 1065, 2, 2, 4920, 4921, 5, 448,
	225, 2, 4921, 4922, 9, 70, 2, 2, 4922, 4923, 5, 606, 304, 2, 4923, 4925,
	3, 2, 2, 2, 4924, 4919, 3, 2, 2, 2, 4925, 4928, 3, 2, 2, 2, 4926, 4924,
	3, 2, 2, 2, 4926, 4927, 3, 2, 2, 2, 4927, 4967, 3, 2, 2, 2, 4928, 4926,
	3, 2, 2, 2, 4929, 4933, 7, 142, 2, 2, 4930, 4931, 7, 24, 2, 2, 4931, 4934,
	7, 142, 2, 2, 4932, 4934, 7, 774, 2, 2, 4933, 4930, 3, 2, 2, 2, 4933, 4932,
	3, 2, 2, 2, 4934, 4937, 3, 2, 2, 2, 4935, 4938, 5, 514, 258, 2, 4936, 4938,
	7, 40, 2, 2, 4937, 4935, 3, 2, 2, 2, 4937, 4936, 3, 2, 2, 2, 4938, 4967,
	3, 2, 2, 2, 4939, 4940, 7, 142, 2, 2, 4940, 4947, 7, 479, 2, 2, 4941, 4944,
	5, 514, 258, 2, 4942, 4943, 7, 26, 2, 2, 4943, 4945, 5, 516, 259, 2, 4944,
	4942, 3, 2, 2, 2, 4944, 4945, 3, 2, 2, 2, 4945, 4948, 3, 2, 2, 2, 4946,
	4948, 7, 40, 2, 2, 4947, 4941, 3, 2, 2, 2, 4947, 4946, 3, 2, 2, 2, 4948,
	4967, 3, 2, 2, 2, 4949, 4967, 5, 404, 203, 2, 4950, 4967, 5, 280, 141,
	2, 4951, 4967, 5, 278, 140, 2, 4952, 4953, 7, 142, 2, 2, 4953, 4954, 5,
	502, 252, 2, 4954, 4955, 9, 70, 2, 2, 4955, 4963, 5, 606, 304, 2, 4956,
	4957, 7, 1065, 2, 2, 4957, 4958, 5, 502, 252, 2, 4958, 4959, 9, 70, 2,
	2, 4959, 4960, 5, 606, 304, 2, 4960, 4962, 3, 2, 2, 2, 4961, 4956, 3, 2,
	2, 2, 4962, 4965, 3, 2, 2, 2, 4963, 4961, 3, 2, 2, 2, 4963, 4964, 3, 2,
	2, 2, 4964, 4967, 3, 2, 2, 2, 4965, 4963, 3, 2, 2, 2, 4966, 4915, 3, 2,
	2, 2, 4966, 4929, 3, 2, 2, 2, 4966, 4939, 3, 2, 2, 2, 4966, 4949, 3, 2,
	2, 2, 4966, 4950, 3, 2, 2, 2, 4966, 4951, 3, 2, 2, 2, 4966, 4952, 3, 2,
	2, 2, 4967, 445, 3, 2, 2, 2, 4968, 4969, 7, 144, 2, 2, 4969, 4970, 9, 52,
	2, 2, 4970, 5120, 7, 438, 2, 2, 4971, 4972, 7, 144, 2, 2, 4972, 4973, 9,
	71, 2, 2, 4973, 4976, 7, 383, 2, 2, 4974, 4975, 7, 74, 2, 2, 4975, 4977,
	7, 1078, 2, 2, 4976, 4974, 3, 2, 2, 2, 4976, 4977, 3, 2, 2, 2, 4977, 4980,
	3, 2, 2, 2, 4978, 4979, 7, 64, 2, 2, 4979, 4981, 5, 534, 268, 2, 4980,
	4978, 3, 2, 2, 2, 4980, 4981, 3, 2, 2, 2, 4981, 4989, 3, 2, 2, 2, 4982,
	4986, 7, 92, 2, 2, 4983, 4984, 5, 534, 268, 2, 4984, 4985, 7, 1065, 2,
	2, 4985, 4987, 3, 2, 2, 2, 4986, 4983, 3, 2, 2, 2, 4986, 4987, 3, 2, 2,
	2, 4987, 4988, 3, 2, 2, 2, 4988, 4990, 5, 534, 268, 2, 4989, 4982, 3, 2,
	2, 2, 4989, 4990, 3, 2, 2, 2, 4990, 5120, 3, 2, 2, 2, 4991, 4992, 7, 144,
	2, 2, 4992, 4994, 5, 450, 226, 2, 4993, 4995, 5, 452, 227, 2, 4994, 4993,
	3, 2, 2, 2, 4994, 4995, 3, 2, 2, 2, 4995, 5120, 3, 2, 2, 2, 4996, 4998,
	7, 144, 2, 2, 4997, 4999, 7, 401, 2, 2, 4998, 4997, 3, 2, 2, 2, 4998, 4999,
	3, 2, 2, 2, 4999, 5000, 3, 2, 2, 2, 5000, 5001, 9, 38, 2, 2, 5001, 5002,
	9, 72, 2, 2, 5002, 5005, 5, 504, 253, 2, 5003, 5004, 9, 72, 2, 2, 5004,
	5006, 5, 528, 265, 2, 5005, 5003, 3, 2, 2, 2, 5005, 5006, 3, 2, 2, 2, 5006,
	5008, 3, 2, 2, 2, 5007, 5009, 5, 452, 227, 2, 5008, 5007, 3, 2, 2, 2, 5008,
	5009, 3, 2, 2, 2, 5009, 5120, 3, 2, 2, 2, 5010, 5011, 7, 144, 2, 2, 5011,
	5012, 7, 32, 2, 2, 5012, 5014, 9, 2, 2, 2, 5013, 5015, 5, 584, 293, 2,
	5014, 5013, 3, 2, 2, 2, 5014, 5015, 3, 2, 2, 2, 5015, 5016, 3, 2, 2, 2,
	5016, 5120, 5, 528, 265, 2, 5017, 5018, 7, 144, 2, 2, 5018, 5019, 7, 32,
	2, 2, 5019, 5020, 9, 73, 2, 2, 5020, 5120, 5, 502, 252, 2, 5021, 5022,
	7, 144, 2, 2, 5022, 5023, 7, 32, 2, 2, 5023, 5024, 7, 609, 2, 2, 5024,
	5120, 5, 510, 256, 2, 5025, 5026, 7, 144, 2, 2, 5026, 5027, 7, 376, 2,
	2, 5027, 5028, 5, 518, 260, 2, 5028, 5029, 9, 74, 2, 2, 5029, 5120, 3,
	2, 2, 2, 5030, 5031, 7, 144, 2, 2, 5031, 5120, 5, 454, 228, 2, 5032, 5033,
	7, 144, 2, 2, 5033, 5034, 9, 75, 2, 2, 5034, 5038, 7, 92, 2, 2, 5035, 5036,
	5, 534, 268, 2, 5036, 5037, 7, 1065, 2, 2, 5037, 5039, 3, 2, 2, 2, 5038,
	5035, 3, 2, 2, 2, 5038, 5039, 3, 2, 2, 2, 5039, 5040, 3, 2, 2, 2, 5040,
	5120, 5, 534, 268, 2, 5041, 5042, 7, 144, 2, 2, 5042, 5043, 7, 273, 2,
	2, 5043, 5044, 7, 1063, 2, 2, 5044, 5045, 7, 1046, 2, 2, 5045, 5046, 7,
	1064, 2, 2, 5046, 5120, 9, 75, 2, 2, 5047, 5048, 7, 144, 2, 2, 5048, 5051,
	5, 456, 229, 2, 5049, 5050, 9, 72, 2, 2, 5050, 5052, 5, 528, 265, 2, 5051,
	5049, 3, 2, 2, 2, 5051, 5052, 3, 2, 2, 2, 5052, 5054, 3, 2, 2, 2, 5053,
	5055, 5, 452, 227, 2, 5054, 5053, 3, 2, 2, 2, 5054, 5055, 3, 2, 2, 2, 5055,
	5120, 3, 2, 2, 2, 5056, 5057, 7, 144, 2, 2, 5057, 5058, 9, 76, 2, 2, 5058,
	5059, 7, 335, 2, 2, 5059, 5120, 5, 502, 252, 2, 5060, 5061, 7, 144, 2,
	2, 5061, 5064, 7, 405, 2, 2, 5062, 5063, 7, 61, 2, 2, 5063, 5065, 5, 510,
	256, 2, 5064, 5062, 3, 2, 2, 2, 5064, 5065, 3, 2, 2, 2, 5065, 5120, 3,
	2, 2, 2, 5066, 5067, 7, 144, 2, 2, 5067, 5068, 9, 77, 2, 2, 5068, 5069,
	9, 72, 2, 2, 5069, 5072, 5, 504, 253, 2, 5070, 5071, 9, 72, 2, 2, 5071,
	5073, 5, 528, 265, 2, 5072, 5070, 3, 2, 2, 2, 5072, 5073, 3, 2, 2, 2, 5073,
	5076, 3, 2, 2, 2, 5074, 5075, 7, 176, 2, 2, 5075, 5077, 5, 606, 304, 2,
	5076, 5074, 3, 2, 2, 2, 5076, 5077, 3, 2, 2, 2, 5077, 5120, 3, 2, 2, 2,
	5078, 5079, 7, 144, 2, 2, 5079, 5080, 7, 494, 2, 2, 5080, 5083, 7, 639,
	2, 2, 5081, 5082, 9, 72, 2, 2, 5082, 5084, 5, 528, 265, 2, 5083, 5081,
	3, 2, 2, 2, 5083, 5084, 3, 2, 2, 2, 5084, 5086, 3, 2, 2, 2, 5085, 5087,
	5, 452, 227, 2, 5086, 5085, 3, 2, 2, 2, 5086, 5087, 3, 2, 2, 2, 5087, 5120,
	3, 2, 2, 2, 5088, 5089, 7, 144, 2, 2, 5089, 5090, 7, 515, 2, 2, 5090, 5095,
	5, 458, 230, 2, 5091, 5092, 7, 1065, 2, 2, 5092, 5094, 5, 458, 230, 2,
	5093, 5091, 3, 2, 2, 2, 5094, 5097, 3, 2, 2, 2, 5095, 5093, 3, 2, 2, 2,
	5095, 5096, 3, 2, 2, 2, 5096, 5101, 3, 2, 2, 2, 5097, 5095, 3, 2, 2, 2,
	5098, 5099, 7, 61, 2, 2, 5099, 5100, 7, 518, 2, 2, 5100, 5102, 5, 534,
	268, 2, 5101, 5098, 3, 2, 2, 2, 5101, 5102, 3, 2, 2, 2, 5102, 5103, 3,
	2, 2, 2, 5103, 5107, 7, 92, 2, 2, 5104, 5105, 5, 534, 268, 2, 5105, 5106,
	7, 1065, 2, 2, 5106, 5108, 3, 2, 2, 2, 5107, 5104, 3, 2, 2, 2, 5107, 5108,
	3, 2, 2, 2, 5108, 5109, 3, 2, 2, 2, 5109, 5110, 5, 534, 268, 2, 5110, 5120,
	3, 2, 2, 2, 5111, 5112, 7, 144, 2, 2, 5112, 5113, 7, 560, 2, 2, 5113, 5117,
	7, 580, 2, 2, 5114, 5115, 7, 61, 2, 2, 5115, 5116, 7, 327, 2, 2, 5116,
	5118, 7, 1078, 2, 2, 5117, 5114, 3, 2, 2, 2, 5117, 5118, 3, 2, 2, 2, 5118,
	5120, 3, 2, 2, 2, 5119, 4968, 3, 2, 2, 2, 5119, 4971, 3, 2, 2, 2, 5119,
	4991, 3, 2, 2, 2, 5119, 4996, 3, 2, 2, 2, 5119, 5010, 3, 2, 2, 2, 5119,
	5017, 3, 2, 2, 2, 5119, 5021, 3, 2, 2, 2, 5119, 5025, 3, 2, 2, 2, 5119,
	5030, 3, 2, 2, 2, 5119, 5032, 3, 2, 2, 2, 5119, 5041, 3, 2, 2, 2, 5119,
	5047, 3, 2, 2, 2, 5119, 5056, 3, 2, 2, 2, 5119, 5060, 3, 2, 2, 2, 5119,
	5066, 3, 2, 2, 2, 5119, 5078, 3, 2, 2, 2, 5119, 5088, 3, 2, 2, 2, 5119,
	5111, 3, 2, 2, 2, 5120, 447, 3, 2, 2, 2, 5121, 5132, 7, 1090, 2, 2, 5122,
	5132, 7, 1091, 2, 2, 5123, 5124, 7, 1067, 2, 2, 5124, 5126, 7, 1067, 2,
	2, 5125, 5123, 3, 2, 2, 2, 5125, 5126, 3, 2, 2, 2, 5126, 5127, 3, 2, 2,
	2, 5127, 5129, 9, 78, 2, 2, 5128, 5125, 3, 2, 2, 2, 5128, 5129, 3, 2, 2,
	2, 5129, 5130, 3, 2, 2, 2, 5130, 5132, 5, 528, 265, 2, 5131, 5121, 3, 2,
	2, 2, 5131, 5122, 3, 2, 2, 2, 5131, 5128, 3, 2, 2, 2, 5132, 449, 3, 2,
	2, 2, 5133, 5134, 7, 24, 2, 2, 5134, 5147, 7, 142, 2, 2, 5135, 5147, 7,
	777, 2, 2, 5136, 5147, 7, 38, 2, 2, 5137, 5147, 7, 140, 2, 2, 5138, 5139,
	7, 402, 2, 2, 5139, 5147, 7, 580, 2, 2, 5140, 5141, 7, 121, 2, 2, 5141,
	5147, 7, 580, 2, 2, 5142, 5144, 9, 51, 2, 2, 5143, 5142, 3, 2, 2, 2, 5143,
	5144, 3, 2, 2, 2, 5144, 5145, 3, 2, 2, 2, 5145, 5147, 9, 79, 2, 2, 5146,
	5133, 3, 2, 2, 2, 5146, 5135, 3, 2, 2, 2, 5146, 5136, 3, 2, 2, 2, 5146,
	5137, 3, 2, 2, 2, 5146, 5138, 3, 2, 2, 2, 5146, 5140, 3, 2, 2, 2, 5146,
	5143, 3, 2, 2, 2, 5147, 451, 3, 2, 2, 2, 5148, 5149, 7, 91, 2, 2, 5149,
	5153, 7, 1078, 2, 2, 5150, 5151, 7, 176, 2, 2, 5151, 5153, 5, 606, 304,
	2, 5152, 5148, 3, 2, 2, 2, 5152, 5150, 3, 2, 2, 2, 5153, 453, 3, 2, 2,
	2, 5154, 5156, 7, 582, 2, 2, 5155, 5154, 3, 2, 2, 2, 5155, 5156, 3, 2,
	2, 2, 5156, 5157, 3, 2, 2, 2, 5157, 5172, 7, 377, 2, 2, 5158, 5159, 7,
	439, 2, 2, 5159, 5172, 7, 580, 2, 2, 5160, 5172, 7, 508, 2, 2, 5161, 5172,
	7, 647, 2, 2, 5162, 5164, 7, 401, 2, 2, 5163, 5162, 3, 2, 2, 2, 5163, 5164,
	3, 2, 2, 2, 5164, 5165, 3, 2, 2, 2, 5165, 5172, 7, 514, 2, 2, 5166, 5172,
	7, 516, 2, 2, 5167, 5168, 7, 560, 2, 2, 5168, 5172, 7, 411, 2, 2, 5169,
	5172, 7, 311, 2, 2, 5170, 5172, 7, 353, 2, 2, 5171, 5155, 3, 2, 2, 2, 5171,
	5158, 3, 2, 2, 2, 5171, 5160, 3, 2, 2, 2, 5171, 5161, 3, 2, 2, 2, 5171,
	5163, 3, 2, 2, 2, 5171, 5166, 3, 2, 2, 2, 5171, 5167, 3, 2, 2, 2, 5171,
	5169, 3, 2, 2, 2, 5171, 5170, 3, 2, 2, 2, 5172, 455, 3, 2, 2, 2, 5173,
	5182, 7, 383, 2, 2, 5174, 5175, 7, 158, 2, 2, 5175, 5182, 7, 580, 2, 2,
	5176, 5178, 7, 401, 2, 2, 5177, 5176, 3, 2, 2, 2, 5177, 5178, 3, 2, 2,
	2, 5178, 5179, 3, 2, 2, 2, 5179, 5182, 7, 639, 2, 2, 5180, 5182, 7, 600,
	2, 2, 5181, 5173, 3, 2, 2, 2, 5181, 5174, 3, 2, 2, 2, 5181, 5177, 3, 2,
	2, 2, 5181, 5180, 3, 2, 2, 2, 5182, 457, 3, 2, 2, 2, 5183, 5196, 7, 8,
	2, 2, 5184, 5185, 7, 319, 2, 2, 5185, 5196, 7, 423, 2, 2, 5186, 5187, 7,
	352, 2, 2, 5187, 5196, 7, 591, 2, 2, 5188, 5196, 7, 355, 2, 2, 5189, 5196,
	7, 425, 2, 2, 5190, 5196, 7, 725, 2, 2, 5191, 5192, 7, 499, 2, 2, 5192,
	5196, 7, 392, 2, 2, 5193, 5196, 7, 567, 2, 2, 5194, 5196, 7, 590, 2, 2,
	5195, 5183, 3, 2, 2, 2, 5195, 5184, 3, 2, 2, 2, 5195, 5186, 3, 2, 2, 2,
	5195, 5188, 3, 2, 2, 2, 5195, 5189, 3, 2, 2, 2, 5195, 5190, 3, 2, 2, 2,
	5195, 5191, 3, 2, 2, 2, 5195, 5193, 3, 2, 2, 2, 5195, 5194, 3, 2, 2, 2,
	5196, 459, 3, 2, 2, 2, 5197, 5198, 7, 317, 2, 2, 5198, 5199, 7, 1078, 2,
	2, 5199, 461, 3, 2, 2, 2, 5200, 5201, 7, 323, 2, 2, 5201, 5202, 7, 75,
	2, 2, 5202, 5207, 5, 474, 238, 2, 5203, 5204, 7, 1065, 2, 2, 5204, 5206,
	5, 474, 238, 2, 5205, 5203, 3, 2, 2, 2, 5206, 5209, 3, 2, 2, 2, 5207, 5205,
	3, 2, 2, 2, 5207, 5208, 3, 2, 2, 2, 5208, 5217, 3, 2, 2, 2, 5209, 5207,
	3, 2, 2, 2, 5210, 5211, 7, 119, 2, 2, 5211, 5214, 7, 1063, 2, 2, 5212,
	5215, 5, 560, 281, 2, 5213, 5215, 7, 8, 2, 2, 5214, 5212, 3, 2, 2, 2, 5214,
	5213, 3, 2, 2, 2, 5215, 5216, 3, 2, 2, 2, 5216, 5218, 7, 1064, 2, 2, 5217,
	5210, 3, 2, 2, 2, 5217, 5218, 3, 2, 2, 2, 5218, 5219, 3, 2, 2, 2, 5219,
	5220, 7, 74, 2, 2, 5220, 5221, 5, 528, 265, 2, 5221, 463, 3, 2, 2, 2, 5222,
	5224, 7, 398, 2, 2, 5223, 5225, 9, 66, 2, 2, 5224, 5223, 3, 2, 2, 2, 5224,
	5225, 3, 2, 2, 2, 5225, 5226, 3, 2, 2, 2, 5226, 5231, 5, 476, 239, 2, 5227,
	5228, 7, 1065, 2, 2, 5228, 5230, 5, 476, 239, 2, 5229, 5227, 3, 2, 2, 2,
	5230, 5233, 3, 2, 2, 2, 5231, 5229, 3, 2, 2, 2, 5231, 5232, 3, 2, 2, 2,
	5232, 465, 3, 2, 2, 2, 5233, 5231, 3, 2, 2, 2, 5234, 5236, 7, 87, 2, 2,
	5235, 5237, 9, 80, 2, 2, 5236, 5235, 3, 2, 2, 2, 5236, 5237, 3, 2, 2, 2,
	5237, 5239, 3, 2, 2, 2, 5238, 5240, 5, 534, 268, 2, 5239, 5238, 3, 2, 2,
	2, 5240, 5241, 3, 2, 2, 2, 5241, 5239, 3, 2, 2, 2, 5241, 5242, 3, 2, 2,
	2, 5242, 467, 3, 2, 2, 2, 5243, 5244, 7, 95, 2, 2, 5244, 5245, 7, 75, 2,
	2, 5245, 5246, 7, 81, 2, 2, 5246, 5247, 7, 323, 2, 2, 5247, 5252, 5, 480,
	241, 2, 5248, 5249, 7, 1065, 2, 2, 5249, 5251, 5, 480, 241, 2, 5250, 5248,
	3, 2, 2, 2, 5251, 5254, 3, 2, 2, 2, 5252, 5250, 3, 2, 2, 2, 5252, 5253,
	3, 2, 2, 2, 5253, 469, 3, 2, 2, 2, 5254, 5252, 3, 2, 2, 2, 5255, 5256,
	7, 539, 2, 2, 5256, 5257, 7, 518, 2, 2, 5257, 5258, 7, 323, 2, 2, 5258,
	471, 3, 2, 2, 2, 5259, 5260, 7, 645, 2, 2, 5260, 473, 3, 2, 2, 2, 5261,
	5269, 5, 504, 253, 2, 5262, 5264, 9, 20, 2, 2, 5263, 5262, 3, 2, 2, 2,
	5263, 5264, 3, 2, 2, 2, 5264, 5265, 3, 2, 2, 2, 5265, 5266, 7, 1063, 2,
	2, 5266, 5267, 5, 560, 281, 2, 5267, 5268, 7, 1064, 2, 2, 5268, 5270, 3,
	2, 2, 2, 5269, 5263, 3, 2, 2, 2, 5269, 5270, 3, 2, 2, 2, 5270, 475, 3,
	2, 2, 2, 5271, 5290, 7, 363, 2, 2, 5272, 5290, 7, 411, 2, 2, 5273, 5275,
	9, 81, 2, 2, 5274, 5273, 3, 2, 2, 2, 5274, 5275, 3, 2, 2, 2, 5275, 5276,
	3, 2, 2, 2, 5276, 5290, 7, 438, 2, 2, 5277, 5290, 7, 495, 2, 2, 5278, 5290,
	7, 647, 2, 2, 5279, 5280, 7, 518, 2, 2, 5280, 5290, 7, 323, 2, 2, 5281,
	5290, 7, 580, 2, 2, 5282, 5290, 7, 611, 2, 2, 5283, 5287, 7, 639, 2, 2,
	5284, 5285, 7, 178, 2, 2, 5285, 5286, 7, 124, 2, 2, 5286, 5288, 7, 96,
	2, 2, 5287, 5284, 3, 2, 2, 2, 5287, 5288, 3, 2, 2, 2, 5288, 5290, 3, 2,
	2, 2, 5289, 5271, 3, 2, 2, 2, 5289, 5272, 3, 2, 2, 2, 5289, 5274, 3, 2,
	2, 2, 5289, 5277, 3, 2, 2, 2, 5289, 5278, 3, 2, 2, 2, 5289, 5279, 3, 2,
	2, 2, 5289, 5281, 3, 2, 2, 2, 5289, 5282, 3, 2, 2, 2, 5289, 5283, 3, 2,
	2, 2, 5290, 5302, 3, 2, 2, 2, 5291, 5292, 7, 524, 2, 2, 5292, 5294, 7,
	438, 2, 2, 5293, 5295, 5, 318, 160, 2, 5294, 5293, 3, 2, 2, 2, 5294, 5295,
	3, 2, 2, 2, 5295, 5302, 3, 2, 2, 2, 5296, 5297, 7, 639, 2, 2, 5297, 5299,
	5, 562, 282, 2, 5298, 5300, 5, 478, 240, 2, 5299, 5298, 3, 2, 2, 2, 5299,
	5300, 3, 2, 2, 2, 5300, 5302, 3, 2, 2, 2, 5301, 5289, 3, 2, 2, 2, 5301,
	5291, 3, 2, 2, 2, 5301, 5296, 3, 2, 2, 2, 5302, 477, 3, 2, 2, 2, 5303,
	5304, 7, 178, 2, 2, 5304, 5305, 7, 124, 2, 2, 5305, 5309, 7, 96, 2, 2,
	5306, 5307, 7, 61, 2, 2, 5307, 5309, 7, 388, 2, 2, 5308, 5303, 3, 2, 2,
	2, 5308, 5306, 3, 2, 2, 2, 5309, 479, 3, 2, 2, 2, 5310, 5318, 5, 504, 253,
	2, 5311, 5312, 7, 119, 2, 2, 5312, 5315, 7, 1063, 2, 2, 5313, 5316, 5,
	560, 281, 2, 5314, 5316, 7, 8, 2, 2, 5315, 5313, 3, 2, 2, 2, 5315, 5314,
	3, 2, 2, 2, 5316, 5317, 3, 2, 2, 2, 5317, 5319, 7, 1064, 2, 2, 5318, 5311,
	3, 2, 2, 2, 5318, 5319, 3, 2, 2, 2, 5319, 5327, 3, 2, 2, 2, 5320, 5322,
	9, 20, 2, 2, 5321, 5320, 3, 2, 2, 2, 5321, 5322, 3, 2, 2, 2, 5322, 5323,
	3, 2, 2, 2, 5323, 5324, 7, 1063, 2, 2, 5324, 5325, 5, 560, 281, 2, 5325,
	5326, 7, 1064, 2, 2, 5326, 5328, 3, 2, 2, 2, 5327, 5321, 3, 2, 2, 2, 5327,
	5328, 3, 2, 2, 2, 5328, 5331, 3, 2, 2, 2, 5329, 5330, 7, 73, 2, 2, 5330,
	5332, 7, 432, 2, 2, 5331, 5329, 3, 2, 2, 2, 5331, 5332, 3, 2, 2, 2, 5332,
	481, 3, 2, 2, 2, 5333, 5334, 9, 82, 2, 2, 5334, 5337, 5, 504, 253, 2, 5335,
	5338, 5, 528, 265, 2, 5336, 5338, 7, 1078, 2, 2, 5337, 5335, 3, 2, 2, 2,
	5337, 5336, 3, 2, 2, 2, 5337, 5338, 3, 2, 2, 2, 5338, 483, 3, 2, 2, 2,
	5339, 5343, 9, 82, 2, 2, 5340, 5341, 9, 83, 2, 2, 5341, 5342, 7, 1054,
	2, 2, 5342, 5344, 9, 84, 2, 2, 5343, 5340, 3, 2, 2, 2, 5343, 5344, 3, 2,
	2, 2, 5344, 5345, 3, 2, 2, 2, 5345, 5346, 5, 500, 251, 2, 5346, 485, 3,
	2, 2, 2, 5347, 5348, 7, 409, 2, 2, 5348, 5349, 7, 1078, 2, 2, 5349, 487,
	3, 2, 2, 2, 5350, 5351, 7, 172, 2, 2, 5351, 5352, 5, 528, 265, 2, 5352,
	489, 3, 2, 2, 2, 5353, 5361, 7, 145, 2, 2, 5354, 5356, 7, 149, 2, 2, 5355,
	5357, 7, 613, 2, 2, 5356, 5355, 3, 2, 2, 2, 5356, 5357, 3, 2, 2, 2, 5357,
	5358, 3, 2, 2, 2, 5358, 5362, 5, 538, 270, 2, 5359, 5362, 7, 1086, 2, 2,
	5360, 5362, 7, 1087, 2, 2, 5361, 5354, 3, 2, 2, 2, 5361, 5359, 3, 2, 2,
	2, 5361, 5360, 3, 2, 2, 2, 5362, 5372, 3, 2, 2, 2, 5363, 5364, 7, 142,
	2, 2, 5364, 5369, 5, 494, 248, 2, 5365, 5366, 7, 1065, 2, 2, 5366, 5368,
	5, 494, 248, 2, 5367, 5365, 3, 2, 2, 2, 5368, 5371, 3, 2, 2, 2, 5369, 5367,
	3, 2, 2, 2, 5369, 5370, 3, 2, 2, 2, 5370, 5373, 3, 2, 2, 2, 5371, 5369,
	3, 2, 2, 2, 5372, 5363, 3, 2, 2, 2, 5372, 5373, 3, 2, 2, 2, 5373, 491,
	3, 2, 2, 2, 5374, 5382, 7, 133, 2, 2, 5375, 5377, 7, 149, 2, 2, 5376, 5378,
	7, 613, 2, 2, 5377, 5376, 3, 2, 2, 2, 5377, 5378, 3, 2, 2, 2, 5378, 5379,
	3, 2, 2, 2, 5379, 5383, 5, 538, 270, 2, 5380, 5383, 7, 1086, 2, 2, 5381,
	5383, 7, 1087, 2, 2, 5382, 5375, 3, 2, 2, 2, 5382, 5380, 3, 2, 2, 2, 5382,
	5381, 3, 2, 2, 2, 5382, 5383, 3, 2, 2, 2, 5383, 5393, 3, 2, 2, 2, 5384,
	5385, 7, 142, 2, 2, 5385, 5390, 5, 494, 248, 2, 5386, 5387, 7, 1065, 2,
	2, 5387, 5389, 5, 494, 248, 2, 5388, 5386, 3, 2, 2, 2, 5389, 5392, 3, 2,
	2, 2, 5390, 5388, 3, 2, 2, 2, 5390, 5391, 3, 2, 2, 2, 5391, 5394, 3, 2,
	2, 2, 5392, 5390, 3, 2, 2, 2, 5393, 5384, 3, 2, 2, 2, 5393, 5394, 3, 2,
	2, 2, 5394, 493, 3, 2, 2, 2, 5395, 5396, 9, 85, 2, 2, 5396, 5401, 7, 1054,
	2, 2, 5397, 5402, 5, 538, 270, 2, 5398, 5402, 7, 1079, 2, 2, 5399, 5402,
	5, 512, 257, 2, 5400, 5402, 5, 530, 266, 2, 5401, 5397, 3, 2, 2, 2, 5401,
	5398, 3, 2, 2, 2, 5401, 5399, 3, 2, 2, 2, 5401, 5400, 3, 2, 2, 2, 5402,
	495, 3, 2, 2, 2, 5403, 5405, 7, 67, 2, 2, 5404, 5406, 9, 86, 2, 2, 5405,
	5404, 3, 2, 2, 2, 5405, 5406, 3, 2, 2, 2, 5406, 5407, 3, 2, 2, 2, 5407,
	5439, 7, 46, 2, 2, 5408, 5409, 5, 448, 225, 2, 5409, 5410, 7, 1054, 2,
	2, 5410, 5418, 9, 87, 2, 2, 5411, 5412, 7, 1065, 2, 2, 5412, 5413, 5, 448,
	225, 2, 5413, 5414, 7, 1054, 2, 2, 5414, 5415, 9, 87, 2, 2, 5415, 5417,
	3, 2, 2, 2, 5416, 5411, 3, 2, 2, 2, 5417, 5420, 3, 2, 2, 2, 5418, 5416,
	3, 2, 2, 2, 5418, 5419, 3, 2, 2, 2, 5419, 5440, 3, 2, 2, 2, 5420, 5418,
	3, 2, 2, 2, 5421, 5424, 7, 28, 2, 2, 5422, 5425, 5, 534, 268, 2, 5423,
	5425, 5, 448, 225, 2, 5424, 5422, 3, 2, 2, 2, 5424, 5423, 3, 2, 2, 2, 5425,
	5426, 3, 2, 2, 2, 5426, 5427, 5, 448, 225, 2, 5427, 5428, 7, 1054, 2, 2,
	5428, 5436, 5, 498, 250, 2, 5429, 5430, 7, 1065, 2, 2, 5430, 5431, 5, 448,
	225, 2, 5431, 5432, 7, 1054, 2, 2, 5432, 5433, 5, 498, 250, 2, 5433, 5435,
	3, 2, 2, 2, 5434, 5429, 3, 2, 2, 2, 5435, 5438, 3, 2, 2, 2, 5436, 5434,
	3, 2, 2, 2, 5436, 5437, 3, 2, 2, 2, 5437, 5440, 3, 2, 2, 2, 5438, 5436,
	3, 2, 2, 2, 5439, 5408, 3, 2, 2, 2, 5439, 5421, 3, 2, 2, 2, 5440, 497,
	3, 2, 2, 2, 5441, 5442, 9, 88, 2, 2, 5442, 499, 3, 2, 2, 2, 5443, 5449,
	5, 180, 91, 2, 5444, 5449, 5, 166, 84, 2, 5445, 5449, 5, 172, 87, 2, 5446,
	5449, 5, 178, 90, 2, 5447, 5449, 5, 182, 92, 2, 5448, 5443, 3, 2, 2, 2,
	5448, 5444, 3, 2, 2, 2, 5448, 5445, 3, 2, 2, 2, 5448, 5446, 3, 2, 2, 2,
	5448, 5447, 3, 2, 2, 2, 5449, 5454, 3, 2, 2, 2, 5450, 5451, 7, 61, 2, 2,
	5451, 5452, 7, 346, 2, 2, 5452, 5454, 5, 528, 265, 2, 5453, 5448, 3, 2,
	2, 2, 5453, 5450, 3, 2, 2, 2, 5454, 501, 3, 2, 2, 2, 5455, 5459, 5, 528,
	265, 2, 5456, 5460, 7, 1085, 2, 2, 5457, 5458, 7, 1062, 2, 2, 5458, 5460,
	5, 528, 265, 2, 5459, 5456, 3, 2, 2, 2, 5459, 5457, 3, 2, 2, 2, 5459, 5460,
	3, 2, 2, 2, 5460, 503, 3, 2, 2, 2, 5461, 5462, 5, 502, 252, 2, 5462, 505,
	3, 2, 2, 2, 5463, 5468, 5, 528, 265, 2, 5464, 5466, 5, 532, 267, 2, 5465,
	5467, 5, 532, 267, 2, 5466, 5465, 3, 2, 2, 2, 5466, 5467, 3, 2, 2, 2, 5467,
	5469, 3, 2, 2, 2, 5468, 5464, 3, 2, 2, 2, 5468, 5469, 3, 2, 2, 2, 5469,
	5476, 3, 2, 2, 2, 5470, 5471, 11, 2, 2, 2, 5471, 5473, 5, 532, 267, 2,
	5472, 5474, 5, 532, 267, 2, 5473, 5472, 3, 2, 2, 2, 5473, 5474, 3, 2, 2,
	2, 5474, 5476, 3, 2, 2, 2, 5475, 5463, 3, 2, 2, 2, 5475, 5470, 3, 2, 2,
	2, 5476, 507, 3, 2, 2, 2, 5477, 5480, 5, 528, 265, 2, 5478, 5480, 7, 1078,
	2, 2, 5479, 5477, 3, 2, 2, 2, 5479, 5478, 3, 2, 2, 2, 5480, 5485, 3, 2,
	2, 2, 5481, 5482, 7, 1063, 2, 2, 5482, 5483, 5, 534, 268, 2, 5483, 5484,
	7, 1064, 2, 2, 5484, 5486, 3, 2, 2, 2, 5485, 5481, 3, 2, 2, 2, 5485, 5486,
	3, 2, 2, 2, 5486, 5488, 3, 2, 2, 2, 5487, 5489, 9, 45, 2, 2, 5488, 5487,
	3, 2, 2, 2, 5488, 5489, 3, 2, 2, 2, 5489, 509, 3, 2, 2, 2, 5490, 5491,
	9, 89, 2, 2, 5491, 511, 3, 2, 2, 2, 5492, 5493, 9, 90, 2, 2, 5493, 513,
	3, 2, 2, 2, 5494, 5499, 7, 212, 2, 2, 5495, 5499, 5, 624, 313, 2, 5496,
	5499, 7, 1078, 2, 2, 5497, 5499, 7, 1075, 2, 2, 5498, 5494, 3, 2, 2, 2,
	5498, 5495, 3, 2, 2, 2, 5498, 5496, 3, 2, 2, 2, 5498, 5497, 3, 2, 2, 2,
	5499, 515, 3, 2, 2, 2, 5500, 5503, 5, 528, 265, 2, 5501, 5503, 7, 1078,
	2, 2, 5502, 5500, 3, 2, 2, 2, 5502, 5501, 3, 2, 2, 2, 5503, 517, 3, 2,
	2, 2, 5504, 5505, 9, 91, 2, 2, 5505, 519, 3, 2, 2, 2, 5506, 5507, 5, 534,
	268, 2, 5507, 5508, 7, 1051, 2, 2, 5508, 5509, 5, 534, 268, 2, 5509, 5510,
	7, 1051, 2, 2, 5510, 5511, 5, 534, 268, 2, 5511, 5512, 7, 1051, 2, 2, 5512,
	5513, 5, 534, 268, 2, 5513, 5514, 7, 1051, 2, 2, 5514, 5520, 5, 534, 268,
	2, 5515, 5516, 7, 1074, 2, 2, 5516, 5517, 5, 534, 268, 2, 5517, 5518, 7,
	1051, 2, 2, 5518, 5519, 5, 534, 268, 2, 5519, 5521, 3, 2, 2, 2, 5520, 5515,
	3, 2, 2, 2, 5521, 5522, 3, 2, 2, 2, 5522, 5520, 3, 2, 2, 2, 5522, 5523,
	3, 2, 2, 2, 5523, 521, 3, 2, 2, 2, 5524, 5531, 5, 524, 263, 2, 5525, 5526,
	7, 1065, 2, 2, 5526, 5529, 5, 524, 263, 2, 5527, 5528, 7, 1065, 2, 2, 5528,
	5530, 5, 534, 268, 2, 5529, 5527, 3, 2, 2, 2, 5529, 5530, 3, 2, 2, 2, 5530,
	5532, 3, 2, 2, 2, 5531, 5525, 3, 2, 2, 2, 5531, 5532, 3, 2, 2, 2, 5532,
	523, 3, 2, 2, 2, 5533, 5541, 7, 1078, 2, 2, 5534, 5541, 7, 1083, 2, 2,
	5535, 5537, 7, 1080, 2, 2, 5536, 5535, 3, 2, 2, 2, 5537, 5538, 3, 2, 2,
	2, 5538, 5536, 3, 2, 2, 2, 5538, 5539, 3, 2, 2, 2, 5539, 5541, 3, 2, 2,
	2, 5540, 5533, 3, 2, 2, 2, 5540, 5534, 3, 2, 2, 2, 5540, 5536, 3, 2, 2,
	2, 5541, 525, 3, 2, 2, 2, 5542, 5545, 5, 528, 265, 2, 5543, 5545, 7, 1078,
	2, 2, 5544, 5542, 3, 2, 2, 2, 5544, 5543, 3, 2, 2, 2, 5545, 527, 3, 2,
	2, 2, 5546, 5550, 5, 530, 266, 2, 5547, 5550, 7, 1087, 2, 2, 5548, 5550,
	7, 1075, 2, 2, 5549, 5546, 3, 2, 2, 2, 5549, 5547, 3, 2, 2, 2, 5549, 5548,
	3, 2, 2, 2, 5550, 529, 3, 2, 2, 2, 5551, 5561, 7, 1086, 2, 2, 5552, 5561,
	5, 624, 313, 2, 5553, 5561, 5, 626, 314, 2, 5554, 5561, 5, 518, 260, 2,
	5555, 5561, 5, 628, 315, 2, 5556, 5561, 5, 630, 316, 2, 5557, 5561, 5,
	632, 317, 2, 5558, 5561, 5, 634, 318, 2, 5559, 5561, 5, 636, 319, 2, 5560,
	5551, 3, 2, 2, 2, 5560, 5552, 3, 2, 2, 2, 5560, 5553, 3, 2, 2, 2, 5560,
	5554, 3, 2, 2, 2, 5560, 5555, 3, 2, 2, 2, 5560, 5556, 3, 2, 2, 2, 5560,
	5557, 3, 2, 2, 2, 5560, 5558, 3, 2, 2, 2, 5560, 5559, 3, 2, 2, 2, 5561,
	531, 3, 2, 2, 2, 5562, 5566, 7, 1085, 2, 2, 5563, 5564, 7, 1062, 2, 2,
	5564, 5566, 5, 528, 265, 2, 5565, 5562, 3, 2, 2, 2, 5565, 5563, 3, 2, 2,
	2, 5566, 533, 3, 2, 2, 2, 5567, 5568, 9, 92, 2, 2, 5568, 535, 3, 2, 2,
	2, 5569, 5572, 7, 1076, 2, 2, 5570, 5572, 5, 534, 268, 2, 5571, 5569, 3,
	2, 2, 2, 5571, 5570, 3, 2, 2, 2, 5572, 537, 3, 2, 2, 2, 5573, 5575, 7,
	1084, 2, 2, 5574, 5573, 3, 2, 2, 2, 5574, 5575, 3, 2, 2, 2, 5575, 5576,
	3, 2, 2, 2, 5576, 5579, 7, 1078, 2, 2, 5577, 5579, 7, 1077, 2, 2, 5578,
	5574, 3, 2, 2, 2, 5578, 5577, 3, 2, 2, 2, 5579, 5581, 3, 2, 2, 2, 5580,
	5582, 7, 1078, 2, 2, 5581, 5580, 3, 2, 2, 2, 5582, 5583, 3, 2, 2, 2, 5583,
	5581, 3, 2, 2, 2, 5583, 5584, 3, 2, 2, 2, 5584, 5597, 3, 2, 2, 2, 5585,
	5587, 7, 1084, 2, 2, 5586, 5585, 3, 2, 2, 2, 5586, 5587, 3, 2, 2, 2, 5587,
	5588, 3, 2, 2, 2, 5588, 5591, 7, 1078, 2, 2, 5589, 5591, 7, 1077, 2, 2,
	5590, 5586, 3, 2, 2, 2, 5590, 5589, 3, 2, 2, 2, 5591, 5594, 3, 2, 2, 2,
	5592, 5593, 7, 26, 2, 2, 5593, 5595, 5, 516, 259, 2, 5594, 5592, 3, 2,
	2, 2, 5594, 5595, 3, 2, 2, 2, 5595, 5597, 3, 2, 2, 2, 5596, 5578, 3, 2,
	2, 2, 5596, 5590, 3, 2, 2, 2, 5597, 539, 3, 2, 2, 2, 5598, 5599, 9, 93,
	2, 2, 5599, 541, 3, 2, 2, 2, 5600, 5602, 7, 1084, 2, 2, 5601, 5600, 3,
	2, 2, 2, 5601, 5602, 3, 2, 2, 2, 5602, 5603, 3, 2, 2, 2, 5603, 5604, 7,
	1080, 2, 2, 5604, 543, 3, 2, 2, 2, 5605, 5607, 7, 105, 2, 2, 5606, 5605,
	3, 2, 2, 2, 5606, 5607, 3, 2, 2, 2, 5607, 5608, 3, 2, 2, 2, 5608, 5609,
	9, 94, 2, 2, 5609, 545, 3, 2, 2, 2, 5610, 5623, 5, 538, 270, 2, 5611, 5623,
	5, 534, 268, 2, 5612, 5613, 7, 1051, 2, 2, 5613, 5623, 5, 534, 268, 2,
	5614, 5623, 5, 542, 272, 2, 5615, 5623, 5, 540, 271, 2, 5616, 5623, 7,
	1081, 2, 2, 5617, 5623, 7, 1083, 2, 2, 5618, 5620, 7, 105, 2, 2, 5619,
	5618, 3, 2, 2, 2, 5619, 5620, 3, 2, 2, 2, 5620, 5621, 3, 2, 2, 2, 5621,
	5623, 9, 94, 2, 2, 5622, 5610, 3, 2, 2, 2, 5622, 5611, 3, 2, 2, 2, 5622,
	5612, 3, 2, 2, 2, 5622, 5614, 3, 2, 2, 2, 5622, 5615, 3, 2, 2, 2, 5622,
	5616, 3, 2, 2, 2, 5622, 5617, 3, 2, 2, 2, 5622, 5619, 3, 2, 2, 2, 5623,
	547, 3, 2, 2, 2, 5624, 5626, 9, 95, 2, 2, 5625, 5627, 7, 224, 2, 2, 5626,
	5625, 3, 2, 2, 2, 5626, 5627, 3, 2, 2, 2, 5627, 5629, 3, 2, 2, 2, 5628,
	5630, 5, 554, 278, 2, 5629, 5628, 3, 2, 2, 2, 5629, 5630, 3, 2, 2, 2, 5630,
	5632, 3, 2, 2, 2, 5631, 5633, 7, 212, 2, 2, 5632, 5631, 3, 2, 2, 2, 5632,
	5633, 3, 2, 2, 2, 5633, 5640, 3, 2, 2, 2, 5634, 5635, 7, 24, 2, 2, 5635,
	5638, 7, 142, 2, 2, 5636, 5638, 7, 774, 2, 2, 5637, 5634, 3, 2, 2, 2, 5637,
	5636, 3, 2, 2, 2, 5638, 5639, 3, 2, 2, 2, 5639, 5641, 5, 514, 258, 2, 5640,
	5637, 3, 2, 2, 2, 5640, 5641, 3, 2, 2, 2, 5641, 5645, 3, 2, 2, 2, 5642,
	5643, 7, 26, 2, 2, 5643, 5646, 5, 516, 259, 2, 5644, 5646, 7, 212, 2, 2,
	5645, 5642, 3, 2, 2, 2, 5645, 5644, 3, 2, 2, 2, 5645, 5646, 3, 2, 2, 2,
	5646, 5756, 3, 2, 2, 2, 5647, 5648, 7, 211, 2, 2, 5648, 5650, 9, 96, 2,
	2, 5649, 5651, 5, 554, 278, 2, 5650, 5649, 3, 2, 2, 2, 5650, 5651, 3, 2,
	2, 2, 5651, 5653, 3, 2, 2, 2, 5652, 5654, 7, 212, 2, 2, 5653, 5652, 3,
	2, 2, 2, 5653, 5654, 3, 2, 2, 2, 5654, 5756, 3, 2, 2, 2, 5655, 5656, 7,
	480, 2, 2, 5656, 5658, 7, 209, 2, 2, 5657, 5659, 5, 554, 278, 2, 5658,
	5657, 3, 2, 2, 2, 5658, 5659, 3, 2, 2, 2, 5659, 5661, 3, 2, 2, 2, 5660,
	5662, 7, 212, 2, 2, 5661, 5660, 3, 2, 2, 2, 5661, 5662, 3, 2, 2, 2, 5662,
	5756, 3, 2, 2, 2, 5663, 5664, 7, 211, 2, 2, 5664, 5665, 9, 97, 2, 2, 5665,
	5667, 7, 224, 2, 2, 5666, 5668, 5, 554, 278, 2, 5667, 5666, 3, 2, 2, 2,
	5667, 5668, 3, 2, 2, 2, 5668, 5670, 3, 2, 2, 2, 5669, 5671, 7, 212, 2,
	2, 5670, 5669, 3, 2, 2, 2, 5670, 5671, 3, 2, 2, 2, 5671, 5756, 3, 2, 2,
	2, 5672, 5674, 9, 98, 2, 2, 5673, 5675, 5, 554, 278, 2, 5674, 5673, 3,
	2, 2, 2, 5674, 5675, 3, 2, 2, 2, 5675, 5677, 3, 2, 2, 2, 5676, 5678, 9,
	99, 2, 2, 5677, 5676, 3, 2, 2, 2, 5677, 5678, 3, 2, 2, 2, 5678, 5680, 3,
	2, 2, 2, 5679, 5681, 7, 181, 2, 2, 5680, 5679, 3, 2, 2, 2, 5680, 5681,
	3, 2, 2, 2, 5681, 5756, 3, 2, 2, 2, 5682, 5684, 7, 194, 2, 2, 5683, 5685,
	5, 556, 279, 2, 5684, 5683, 3, 2, 2, 2, 5684, 5685, 3, 2, 2, 2, 5685, 5687,
	3, 2, 2, 2, 5686, 5688, 9, 99, 2, 2, 5687, 5686, 3, 2, 2, 2, 5687, 5688,
	3, 2, 2, 2, 5688, 5690, 3, 2, 2, 2, 5689, 5691, 7, 181, 2, 2, 5690, 5689,
	3, 2, 2, 2, 5690, 5691, 3, 2, 2, 2, 5691, 5756, 3, 2, 2, 2, 5692, 5694,
	7, 195, 2, 2, 5693, 5695, 7, 196, 2, 2, 5694, 5693, 3, 2, 2, 2, 5694, 5695,
	3, 2, 2, 2, 5695, 5697, 3, 2, 2, 2, 5696, 5698, 5, 556, 279, 2, 5697, 5696,
	3, 2, 2, 2, 5697, 5698, 3, 2, 2, 2, 5698, 5700, 3, 2, 2, 2, 5699, 5701,
	9, 99, 2, 2, 5700, 5699, 3, 2, 2, 2, 5700, 5701, 3, 2, 2, 2, 5701, 5703,
	3, 2, 2, 2, 5702, 5704, 7, 181, 2, 2, 5703, 5702, 3, 2, 2, 2, 5703, 5704,
	3, 2, 2, 2, 5704, 5756, 3, 2, 2, 2, 5705, 5707, 9, 100, 2, 2, 5706, 5708,
	5, 558, 280, 2, 5707, 5706, 3, 2, 2, 2, 5707, 5708, 3, 2, 2, 2, 5708, 5710,
	3, 2, 2, 2, 5709, 5711, 9, 99, 2, 2, 5710, 5709, 3, 2, 2, 2, 5710, 5711,
	3, 2, 2, 2, 5711, 5713, 3, 2, 2, 2, 5712, 5714, 7, 181, 2, 2, 5713, 5712,
	3, 2, 2, 2, 5713, 5714, 3, 2, 2, 2, 5714, 5756, 3, 2, 2, 2, 5715, 5756,
	9, 101, 2, 2, 5716, 5718, 9, 102, 2, 2, 5717, 5719, 5, 554, 278, 2, 5718,
	5717, 3, 2, 2, 2, 5718, 5719, 3, 2, 2, 2, 5719, 5756, 3, 2, 2, 2, 5720,
	5721, 9, 103, 2, 2, 5721, 5723, 5, 550, 276, 2, 5722, 5724, 7, 212, 2,
	2, 5723, 5722, 3, 2, 2, 2, 5723, 5724, 3, 2, 2, 2, 5724, 5731, 3, 2, 2,
	2, 5725, 5726, 7, 24, 2, 2, 5726, 5729, 7, 142, 2, 2, 5727, 5729, 7, 774,
	2, 2, 5728, 5725, 3, 2, 2, 2, 5728, 5727, 3, 2, 2, 2, 5729, 5730, 3, 2,
	2, 2, 5730, 5732, 5, 514, 258, 2, 5731, 5728, 3, 2, 2, 2, 5731, 5732, 3,
	2, 2, 2, 5732, 5756, 3, 2, 2, 2, 5733, 5756, 9, 104, 2, 2, 5734, 5736,
	7, 217, 2, 2, 5735, 5737, 7, 209, 2, 2, 5736, 5735, 3, 2, 2, 2, 5736, 5737,
	3, 2, 2, 2, 5737, 5739, 3, 2, 2, 2, 5738, 5740, 7, 212, 2, 2, 5739, 5738,
	3, 2, 2, 2, 5739, 5740, 3, 2, 2, 2, 5740, 5747, 3, 2, 2, 2, 5741, 5742,
	7, 24, 2, 2, 5742, 5745, 7, 142, 2, 2, 5743, 5745, 7, 774, 2, 2, 5744,
	5741, 3, 2, 2, 2, 5744, 5743, 3, 2, 2, 2, 5745, 5746, 3, 2, 2, 2, 5746,
	5748, 5, 514, 258, 2, 5747, 5744, 3, 2, 2, 2, 5747, 5748, 3, 2, 2, 2, 5748,
	5751, 3, 2, 2, 2, 5749, 5750, 7, 26, 2, 2, 5750, 5752, 5, 516, 259, 2,
	5751, 5749, 3, 2, 2, 2, 5751, 5752, 3, 2, 2, 2, 5752, 5756, 3, 2, 2, 2,
	5753, 5754, 7, 217, 2, 2, 5754, 5756, 7, 213, 2, 2, 5755, 5624, 3, 2, 2,
	2, 5755, 5647, 3, 2, 2, 2, 5755, 5655, 3, 2, 2, 2, 5755, 5663, 3, 2, 2,
	2, 5755, 5672, 3, 2, 2, 2, 5755, 5682, 3, 2, 2, 2, 5755, 5692, 3, 2, 2,
	2, 5755, 5705, 3, 2, 2, 2, 5755, 5715, 3, 2, 2, 2, 5755, 5716, 3, 2, 2,
	2, 5755, 5720, 3, 2, 2, 2, 5755, 5733, 3, 2, 2, 2, 5755, 5734, 3, 2, 2,
	2, 5755, 5753, 3, 2, 2, 2, 5756, 549, 3, 2, 2, 2, 5757, 5758, 7, 1063,
	2, 2, 5758, 5763, 7, 1078, 2, 2, 5759, 5760, 7, 1065, 2, 2, 5760, 5762,
	7, 1078, 2, 2, 5761, 5759, 3, 2, 2, 2, 5762, 5765, 3, 2, 2, 2, 5763, 5761,
	3, 2, 2, 2, 5763, 5764, 3, 2, 2, 2, 5764, 5766, 3, 2, 2, 2, 5765, 5763,
	3, 2, 2, 2, 5766, 5767, 7, 1064, 2, 2, 5767, 551, 3, 2, 2, 2, 5768, 5770,
	9, 105, 2, 2, 5769, 5771, 5, 554, 278, 2, 5770, 5769, 3, 2, 2, 2, 5770,
	5771, 3, 2, 2, 2, 5771, 5794, 3, 2, 2, 2, 5772, 5774, 7, 208, 2, 2, 5773,
	5775, 5, 554, 278, 2, 5774, 5773, 3, 2, 2, 2, 5774, 5775, 3, 2, 2, 2, 5775,
	5782, 3, 2, 2, 2, 5776, 5777, 7, 24, 2, 2, 5777, 5780, 7, 142, 2, 2, 5778,
	5780, 7, 774, 2, 2, 5779, 5776, 3, 2, 2, 2, 5779, 5778, 3, 2, 2, 2, 5780,
	5781, 3, 2, 2, 2, 5781, 5783, 5, 514, 258, 2, 5782, 5779, 3, 2, 2, 2, 5782,
	5783, 3, 2, 2, 2, 5783, 5794, 3, 2, 2, 2, 5784, 5794, 9, 106, 2, 2, 5785,
	5787, 7, 200, 2, 2, 5786, 5788, 5, 556, 279, 2, 5787, 5786, 3, 2, 2, 2,
	5787, 5788, 3, 2, 2, 2, 5788, 5794, 3, 2, 2, 2, 5789, 5791, 9, 99, 2, 2,
	5790, 5792, 7, 192, 2, 2, 5791, 5790, 3, 2, 2, 2, 5791, 5792, 3, 2, 2,
	2, 5792, 5794, 3, 2, 2, 2, 5793, 5768, 3, 2, 2, 2, 5793, 5772, 3, 2, 2,
	2, 5793, 5784, 3, 2, 2, 2, 5793, 5785, 3, 2, 2, 2, 5793, 5789, 3, 2, 2,
	2, 5794, 553, 3, 2, 2, 2, 5795, 5796, 7, 1063, 2, 2, 5796, 5797, 5, 534,
	268, 2, 5797, 5798, 7, 1064, 2, 2, 5798, 555, 3, 2, 2, 2, 5799, 5800, 7,
	1063, 2, 2, 5800, 5801, 5, 534, 268, 2, 5801, 5802, 7, 1065, 2, 2, 5802,
	5803, 5, 534, 268, 2, 5803, 5804, 7, 1064, 2, 2, 5804, 557, 3, 2, 2, 2,
	5805, 5806, 7, 1063, 2, 2, 5806, 5809, 5, 534, 268, 2, 5807, 5808, 7, 1065,
	2, 2, 5808, 5810, 5, 534, 268, 2, 5809, 5807, 3, 2, 2, 2, 5809, 5810, 3,
	2, 2, 2, 5810, 5811, 3, 2, 2, 2, 5811, 5812, 7, 1064, 2, 2, 5812, 559,
	3, 2, 2, 2, 5813, 5818, 5, 528, 265, 2, 5814, 5815, 7, 1065, 2, 2, 5815,
	5817, 5, 528, 265, 2, 5816, 5814, 3, 2, 2, 2, 5817, 5820, 3, 2, 2, 2, 5818,
	5816, 3, 2, 2, 2, 5818, 5819, 3, 2, 2, 2, 5819, 561, 3, 2, 2, 2, 5820,
	5818, 3, 2, 2, 2, 5821, 5826, 5, 504, 253, 2, 5822, 5823, 7, 1065, 2, 2,
	5823, 5825, 5, 504, 253, 2, 5824, 5822, 3, 2, 2, 2, 5825, 5828, 3, 2, 2,
	2, 5826, 5824, 3, 2, 2, 2, 5826, 5827, 3, 2, 2, 2, 5827, 563, 3, 2, 2,
	2, 5828, 5826, 3, 2, 2, 2, 5829, 5830, 7, 1063, 2, 2, 5830, 5835, 5, 508,
	255, 2, 5831, 5832, 7, 1065, 2, 2, 5832, 5834, 5, 508, 255, 2, 5833, 5831,
	3, 2, 2, 2, 5834, 5837, 3, 2, 2, 2, 5835, 5833, 3, 2, 2, 2, 5835, 5836,
	3, 2, 2, 2, 5836, 5838, 3, 2, 2, 2, 5837, 5835, 3, 2, 2, 2, 5838, 5839,
	7, 1064, 2, 2, 5839, 565, 3, 2, 2, 2, 5840, 5845, 5, 606, 304, 2, 5841,
	5842, 7, 1065, 2, 2, 5842, 5844, 5, 606, 304, 2, 5843, 5841, 3, 2, 2, 2,
	5844, 5847, 3, 2, 2, 2, 5845, 5843, 3, 2, 2, 2, 5845, 5846, 3, 2, 2, 2,
	5846, 567, 3, 2, 2, 2, 5847, 5845, 3, 2, 2, 2, 5848, 5853, 5, 580, 291,
	2, 5849, 5850, 7, 1065, 2, 2, 5850, 5852, 5, 580, 291, 2, 5851, 5849, 3,
	2, 2, 2, 5852, 5855, 3, 2, 2, 2, 5853, 5851, 3, 2, 2, 2, 5853, 5854, 3,
	2, 2, 2, 5854, 569, 3, 2, 2, 2, 5855, 5853, 3, 2, 2, 2, 5856, 5861, 5,
	546, 274, 2, 5857, 5858, 7, 1065, 2, 2, 5858, 5860, 5, 546, 274, 2, 5859,
	5857, 3, 2, 2, 2, 5860, 5863, 3, 2, 2, 2, 5861, 5859, 3, 2, 2, 2, 5861,
	5862, 3, 2, 2, 2, 5862, 571, 3, 2, 2, 2, 5863, 5861, 3, 2, 2, 2, 5864,
	5869, 7, 1078, 2, 2, 5865, 5866, 7, 1065, 2, 2, 5866, 5868, 7, 1078, 2,
	2, 5867, 5865, 3, 2, 2, 2, 5868, 5871, 3, 2, 2, 2, 5869, 5867, 3, 2, 2,
	2, 5869, 5870, 3, 2, 2, 2, 5870, 573, 3, 2, 2, 2, 5871, 5869, 3, 2, 2,
	2, 5872, 5877, 7, 1090, 2, 2, 5873, 5874, 7, 1065, 2, 2, 5874, 5876, 7,
	1090, 2, 2, 5875, 5873, 3, 2, 2, 2, 5876, 5879, 3, 2, 2, 2, 5877, 5875,
	3, 2, 2, 2, 5877, 5878, 3, 2, 2, 2, 5878, 575, 3, 2, 2, 2, 5879, 5877,
	3, 2, 2, 2, 5880, 5891, 7, 107, 2, 2, 5881, 5883, 5, 612, 307, 2, 5882,
	5881, 3, 2, 2, 2, 5882, 5883, 3, 2, 2, 2, 5883, 5884, 3, 2, 2, 2, 5884,
	5891, 5, 546, 274, 2, 5885, 5891, 5, 578, 290, 2, 5886, 5887, 7, 1063,
	2, 2, 5887, 5888, 5, 606, 304, 2, 5888, 5889, 7, 1064, 2, 2, 5889, 5891,
	3, 2, 2, 2, 5890, 5880, 3, 2, 2, 2, 5890, 5882, 3, 2, 2, 2, 5890, 5885,
	3, 2, 2, 2, 5890, 5886, 3, 2, 2, 2, 5891, 5895, 3, 2, 2, 2, 5892, 5893,
	7, 110, 2, 2, 5893, 5894, 7, 170, 2, 2, 5894, 5896, 5, 578, 290, 2, 5895,
	5892, 3, 2, 2, 2, 5895, 5896, 3, 2, 2, 2, 5896, 577, 3, 2, 2, 2, 5897,
	5903, 9, 107, 2, 2, 5898, 5900, 7, 1063, 2, 2, 5899, 5901, 5, 534, 268,
	2, 5900, 5899, 3, 2, 2, 2, 5900, 5901, 3, 2, 2, 2, 5901, 5902, 3, 2, 2,
	2, 5902, 5904, 7, 1064, 2, 2, 5903, 5898, 3, 2, 2, 2, 5903, 5904, 3, 2,
	2, 2, 5904, 5912, 3, 2, 2, 2, 5905, 5906, 7, 295, 2, 2, 5906, 5908, 7,
	1063, 2, 2, 5907, 5909, 5, 534, 268, 2, 5908, 5907, 3, 2, 2, 2, 5908, 5909,
	3, 2, 2, 2, 5909, 5910, 3, 2, 2, 2, 5910, 5912, 7, 1064, 2, 2, 5911, 5897,
	3, 2, 2, 2, 5911, 5905, 3, 2, 2, 2, 5912, 579, 3, 2, 2, 2, 5913, 5916,
	5, 606, 304, 2, 5914, 5916, 7, 40, 2, 2, 5915, 5913, 3, 2, 2, 2, 5915,
	5914, 3, 2, 2, 2, 5916, 581, 3, 2, 2, 2, 5917, 5918, 7, 72, 2, 2, 5918,
	5919, 7, 56, 2, 2, 5919, 583, 3, 2, 2, 2, 5920, 5921, 7, 72, 2, 2, 5921,
	5922, 7, 105, 2, 2, 5922, 5923, 7, 56, 2, 2, 5923, 585, 3, 2, 2, 2, 5924,
	5942, 5, 588, 295, 2, 5925, 5942, 5, 596, 299, 2, 5926, 5927, 5, 598, 300,
	2, 5927, 5929, 7, 1063, 2, 2, 5928, 5930, 5, 602, 302, 2, 5929, 5928, 3,
	2, 2, 2, 5929, 5930, 3, 2, 2, 2, 5930, 5931, 3, 2, 2, 2, 5931, 5932, 7,
	1064, 2, 2, 5932, 5942, 3, 2, 2, 2, 5933, 5934, 5, 502, 252, 2, 5934, 5936,
	7, 1063, 2, 2, 5935, 5937, 5, 602, 302, 2, 5936, 5935, 3, 2, 2, 2, 5936,
	5937, 3, 2, 2, 2, 5937, 5938, 3, 2, 2, 2, 5938, 5939, 7, 1064, 2, 2, 5939,
	5942, 3, 2, 2, 2, 5940, 5942, 5, 600, 301, 2, 5941, 5924, 3, 2, 2, 2, 5941,
	5925, 3, 2, 2, 2, 5941, 5926, 3, 2, 2, 2, 5941, 5933, 3, 2, 2, 2, 5941,
	5940, 3, 2, 2, 2, 5942, 587, 3, 2, 2, 2, 5943, 5946, 9, 108, 2, 2, 5944,
	5945, 7, 1063, 2, 2, 5945, 5947, 7, 1064, 2, 2, 5946, 5944, 3, 2, 2, 2,
	5946, 5947, 3, 2, 2, 2, 5947, 6136, 3, 2, 2, 2, 5948, 5949, 7, 31, 2, 2,
	5949, 5950, 7, 1063, 2, 2, 5950, 5951, 5, 606, 304, 2, 5951, 5952, 7, 1065,
	2, 2, 5952, 5953, 5, 552, 277, 2, 5953, 5954, 7, 1064, 2, 2, 5954, 6136,
	3, 2, 2, 2, 5955, 5956, 7, 31, 2, 2, 5956, 5957, 7, 1063, 2, 2, 5957, 5958,
	5, 606, 304, 2, 5958, 5959, 7, 173, 2, 2, 5959, 5960, 5, 514, 258, 2, 5960,
	5961, 7, 1064, 2, 2, 5961, 6136, 3, 2, 2, 2, 5962, 5963, 7, 22, 2, 2, 5963,
	5964, 7, 1063, 2, 2, 5964, 5965, 5, 606, 304, 2, 5965, 5966, 7, 13, 2,
	2, 5966, 5967, 5, 552, 277, 2, 5967, 5968, 7, 1064, 2, 2, 5968, 6136, 3,
	2, 2, 2, 5969, 5970, 7, 174, 2, 2, 5970, 5971, 7, 1063, 2, 2, 5971, 5972,
	5, 506, 254, 2, 5972, 5973, 7, 1064, 2, 2, 5973, 6136, 3, 2, 2, 2, 5974,
	5975, 7, 21, 2, 2, 5975, 5977, 5, 606, 304, 2, 5976, 5978, 5, 590, 296,
	2, 5977, 5976, 3, 2, 2, 2, 5978, 5979, 3, 2, 2, 2, 5979, 5977, 3, 2, 2,
	2, 5979, 5980, 3, 2, 2, 2, 5980, 5983, 3, 2, 2, 2, 5981, 5982, 7, 51, 2,
	2, 5982, 5984, 5, 604, 303, 2, 5983, 5981, 3, 2, 2, 2, 5983, 5984, 3, 2,
	2, 2, 5984, 5985, 3, 2, 2, 2, 5985, 5986, 7, 374, 2, 2, 5986, 6136, 3,
	2, 2, 2, 5987, 5989, 7, 21, 2, 2, 5988, 5990, 5, 590, 296, 2, 5989, 5988,
	3, 2, 2, 2, 5990, 5991, 3, 2, 2, 2, 5991, 5989, 3, 2, 2, 2, 5991, 5992,
	3, 2, 2, 2, 5992, 5995, 3, 2, 2, 2, 5993, 5994, 7, 51, 2, 2, 5994, 5996,
	5, 604, 303, 2, 5995, 5993, 3, 2, 2, 2, 5995, 5996, 3, 2, 2, 2, 5996, 5997,
	3, 2, 2, 2, 5997, 5998, 7, 374, 2, 2, 5998, 6136, 3, 2, 2, 2, 5999, 6000,
	7, 208, 2, 2, 6000, 6001, 7, 1063, 2, 2, 6001, 6004, 5, 602, 302, 2, 6002,
	6003, 7, 173, 2, 2, 6003, 6005, 5, 514, 258, 2, 6004, 6002, 3, 2, 2, 2,
	6004, 6005, 3, 2, 2, 2, 6005, 6006, 3, 2, 2, 2, 6006, 6007, 7, 1064, 2,
	2, 6007, 6136, 3, 2, 2, 2, 6008, 6009, 7, 296, 2, 2, 6009, 6012, 7, 1063,
	2, 2, 6010, 6013, 5, 538, 270, 2, 6011, 6013, 5, 606, 304, 2, 6012, 6010,
	3, 2, 2, 2, 6012, 6011, 3, 2, 2, 2, 6013, 6014, 3, 2, 2, 2, 6014, 6017,
	7, 74, 2, 2, 6015, 6018, 5, 538, 270, 2, 6016, 6018, 5, 606, 304, 2, 6017,
	6015, 3, 2, 2, 2, 6017, 6016, 3, 2, 2, 2, 6018, 6019, 3, 2, 2, 2, 6019,
	6020, 7, 1064, 2, 2, 6020, 6136, 3, 2, 2, 2, 6021, 6022, 9, 109, 2, 2,
	6022, 6025, 7, 1063, 2, 2, 6023, 6026, 5, 538, 270, 2, 6024, 6026, 5, 606,
	304, 2, 6025, 6023, 3, 2, 2, 2, 6025, 6024, 3, 2, 2, 2, 6026, 6027, 3,
	2, 2, 2, 6027, 6030, 7, 64, 2, 2, 6028, 6031, 5, 534, 268, 2, 6029, 6031,
	5, 606, 304, 2, 6030, 6028, 3, 2, 2, 2, 6030, 6029, 3, 2, 2, 2, 6031, 6037,
	3, 2, 2, 2, 6032, 6035, 7, 61, 2, 2, 6033, 6036, 5, 534, 268, 2, 6034,
	6036, 5, 606, 304, 2, 6035, 6033, 3, 2, 2, 2, 6035, 6034, 3, 2, 2, 2, 6036,
	6038, 3, 2, 2, 2, 6037, 6032, 3, 2, 2, 2, 6037, 6038, 3, 2, 2, 2, 6038,
	6039, 3, 2, 2, 2, 6039, 6040, 7, 1064, 2, 2, 6040, 6136, 3, 2, 2, 2, 6041,
	6042, 7, 300, 2, 2, 6042, 6043, 7, 1063, 2, 2, 6043, 6046, 9, 110, 2, 2,
	6044, 6047, 5, 538, 270, 2, 6045, 6047, 5, 606, 304, 2, 6046, 6044, 3,
	2, 2, 2, 6046, 6045, 3, 2, 2, 2, 6046, 6047, 3, 2, 2, 2, 6047, 6048, 3,
	2, 2, 2, 6048, 6051, 7, 64, 2, 2, 6049, 6052, 5, 538, 270, 2, 6050, 6052,
	5, 606, 304, 2, 6051, 6049, 3, 2, 2, 2, 6051, 6050, 3, 2, 2, 2, 6052, 6053,
	3, 2, 2, 2, 6053, 6054, 7, 1064, 2, 2, 6054, 6136, 3, 2, 2, 2, 6055, 6056,
	7, 300, 2, 2, 6056, 6059, 7, 1063, 2, 2, 6057, 6060, 5, 538, 270, 2, 6058,
	6060, 5, 606, 304, 2, 6059, 6057, 3, 2, 2, 2, 6059, 6058, 3, 2, 2, 2, 6060,
	6061, 3, 2, 2, 2, 6061, 6064, 7, 64, 2, 2, 6062, 6065, 5, 538, 270, 2,
	6063, 6065, 5, 606, 304, 2, 6064, 6062, 3, 2, 2, 2, 6064, 6063, 3, 2, 2,
	2, 6065, 6066, 3, 2, 2, 2, 6066, 6067, 7, 1064, 2, 2, 6067, 6136, 3, 2,
	2, 2, 6068, 6069, 7, 1032, 2, 2, 6069, 6072, 7, 1063, 2, 2, 6070, 6073,
	5, 538, 270, 2, 6071, 6073, 5, 606, 304, 2, 6072, 6070, 3, 2, 2, 2, 6072,
	6071, 3, 2, 2, 2, 6073, 6080, 3, 2, 2, 2, 6074, 6075, 7, 13, 2, 2, 6075,
	6076, 9, 111, 2, 2, 6076, 6077, 7, 1063, 2, 2, 6077, 6078, 5, 534, 268,
	2, 6078, 6079, 7, 1064, 2, 2, 6079, 6081, 3, 2, 2, 2, 6080, 6074, 3, 2,
	2, 2, 6080, 6081, 3, 2, 2, 2, 6081, 6083, 3, 2, 2, 2, 6082, 6084, 5, 592,
	297, 2, 6083, 6082, 3, 2, 2, 2, 6083, 6084, 3, 2, 2, 2, 6084, 6085, 3,
	2, 2, 2, 6085, 6086, 7, 1064, 2, 2, 6086, 6136, 3, 2, 2, 2, 6087, 6088,
	7, 293, 2, 2, 6088, 6089, 7, 1063, 2, 2, 6089, 6090, 5, 60, 31, 2, 6090,
	6093, 7, 64, 2, 2, 6091, 6094, 5, 538, 270, 2, 6092, 6094, 5, 606, 304,
	2, 6093, 6091, 3, 2, 2, 2, 6093, 6092, 3, 2, 2, 2, 6094, 6095, 3, 2, 2,
	2, 6095, 6096, 7, 1064, 2, 2, 6096, 6136, 3, 2, 2, 2, 6097, 6098, 7, 832,
	2, 2, 6098, 6099, 7, 1063, 2, 2, 6099, 6100, 9, 112, 2, 2, 6100, 6101,
	7, 1065, 2, 2, 6101, 6102, 5, 538, 270, 2, 6102, 6103, 7, 1064, 2, 2, 6103,
	6136, 3, 2, 2, 2, 6104, 6105, 7, 246, 2, 2, 6105, 6106, 7, 1063, 2, 2,
	6106, 6107, 5, 606, 304, 2, 6107, 6108, 7, 1065, 2, 2, 6108, 6111, 5, 606,
	304, 2, 6109, 6110, 7, 542, 2, 2, 6110, 6112, 5, 552, 277, 2, 6111, 6109,
	3, 2, 2, 2, 6111, 6112, 3, 2, 2, 2, 6112, 6121, 3, 2, 2, 2, 6113, 6118,
	7, 108, 2, 2, 6114, 6118, 7, 378, 2, 2, 6115, 6116, 7, 40, 2, 2, 6116,
	6118, 5, 576, 289, 2, 6117, 6113, 3, 2, 2, 2, 6117, 6114, 3, 2, 2, 2, 6117,
	6115, 3, 2, 2, 2, 6118, 6119, 3, 2, 2, 2, 6119, 6120, 7, 110, 2, 2, 6120,
	6122, 7, 53, 2, 2, 6121, 6117, 3, 2, 2, 2, 6121, 6122, 3, 2, 2, 2, 6122,
	6131, 3, 2, 2, 2, 6123, 6128, 7, 108, 2, 2, 6124, 6128, 7, 378, 2, 2, 6125,
	6126, 7, 40, 2, 2, 6126, 6128, 5, 576, 289, 2, 6127, 6123, 3, 2, 2, 2,
	6127, 6124, 3, 2, 2, 2, 6127, 6125, 3, 2, 2, 2, 6128, 6129, 3, 2, 2, 2,
	6129, 6130, 7, 110, 2, 2, 6130, 6132, 7, 378, 2, 2, 6131, 6127, 3, 2, 2,
	2, 6131, 6132, 3, 2, 2, 2, 6132, 6133, 3, 2, 2, 2, 6133, 6134, 7, 1064,
	2, 2, 6134, 6136, 3, 2, 2, 2, 6135, 5943, 3, 2, 2, 2, 6135, 5948, 3, 2,
	2, 2, 6135, 5955, 3, 2, 2, 2, 6135, 5962, 3, 2, 2, 2, 6135, 5969, 3, 2,
	2, 2, 6135, 5974, 3, 2, 2, 2, 6135, 5987, 3, 2, 2, 2, 6135, 5999, 3, 2,
	2, 2, 6135, 6008, 3, 2, 2, 2, 6135, 6021, 3, 2, 2, 2, 6135, 6041, 3, 2,
	2, 2, 6135, 6055, 3, 2, 2, 2, 6135, 6068, 3, 2, 2, 2, 6135, 6087, 3, 2,
	2, 2, 6135, 6097, 3, 2, 2, 2, 6135, 6104, 3, 2, 2, 2, 6136, 589, 3, 2,
	2, 2, 6137, 6138, 7, 175, 2, 2, 6138, 6139, 5, 604, 303, 2, 6139, 6140,
	7, 160, 2, 2, 6140, 6141, 5, 604, 303, 2, 6141, 591, 3, 2, 2, 2, 6142,
	6143, 7, 434, 2, 2, 6143, 6148, 5, 594, 298, 2, 6144, 6145, 7, 1065, 2,
	2, 6145, 6147, 5, 594, 298, 2, 6146, 6144, 3, 2, 2, 2, 6147, 6150, 3, 2,
	2, 2, 6148, 6146, 3, 2, 2, 2, 6148, 6149, 3, 2, 2, 2, 6149, 6157, 3, 2,
	2, 2, 6150, 6148, 3, 2, 2, 2, 6151, 6152, 7, 434, 2, 2, 6152, 6153, 5,
	534, 268, 2, 6153, 6154, 7, 1051, 2, 2, 6154, 6155, 5, 534, 268, 2, 6155,
	6157, 3, 2, 2, 2, 6156, 6142, 3, 2, 2, 2, 6156, 6151, 3, 2, 2, 2, 6157,
	593, 3, 2, 2, 2, 6158, 6160, 5, 534, 268, 2, 6159, 6161, 9, 113, 2, 2,
	6160, 6159, 3, 2, 2, 2, 6160, 6161, 3, 2, 2, 2, 6161, 595, 3, 2, 2, 2,
	6162, 6163, 9, 114, 2, 2, 6163, 6165, 7, 1063, 2, 2, 6164, 6166, 9, 41,
	2, 2, 6165, 6164, 3, 2, 2, 2, 6165, 6166, 3, 2, 2, 2, 6166, 6167, 3, 2,
	2, 2, 6167, 6168, 5, 604, 303, 2, 6168, 6169, 7, 1064, 2, 2, 6169, 6219,
	3, 2, 2, 2, 6170, 6171, 7, 273, 2, 2, 6171, 6177, 7, 1063, 2, 2, 6172,
	6178, 7, 1046, 2, 2, 6173, 6175, 7, 8, 2, 2, 6174, 6173, 3, 2, 2, 2, 6174,
	6175, 3, 2, 2, 2, 6175, 6176, 3, 2, 2, 2, 6176, 6178, 5, 604, 303, 2, 6177,
	6172, 3, 2, 2, 2, 6177, 6174, 3, 2, 2, 2, 6178, 6179, 3, 2, 2, 2, 6179,
	6219, 7, 1064, 2, 2, 6180, 6181, 7, 273, 2, 2, 6181, 6182, 7, 1063, 2,
	2, 6182, 6183, 7, 47, 2, 2, 6183, 6184, 5, 602, 302, 2, 6184, 6185, 7,
	1064, 2, 2, 6185, 6219, 3, 2, 2, 2, 6186, 6187, 9, 115, 2, 2, 6187, 6189,
	7, 1063, 2, 2, 6188, 6190, 7, 8, 2, 2, 6189, 6188, 3, 2, 2, 2, 6189, 6190,
	3, 2, 2, 2, 6190, 6191, 3, 2, 2, 2, 6191, 6192, 5, 604, 303, 2, 6192, 6193,
	7, 1064, 2, 2, 6193, 6219, 3, 2, 2, 2, 6194, 6195, 7, 274, 2, 2, 6195,
	6197, 7, 1063, 2, 2, 6196, 6198, 7, 47, 2, 2, 6197, 6196, 3, 2, 2, 2, 6197,
	6198, 3, 2, 2, 2, 6198, 6199, 3, 2, 2, 2, 6199, 6210, 5, 602, 302, 2, 6200,
	6201, 7, 115, 2, 2, 6201, 6202, 7, 18, 2, 2, 6202, 6207, 5, 210, 106, 2,
	6203, 6204, 7, 1065, 2, 2, 6204, 6206, 5, 210, 106, 2, 6205, 6203, 3, 2,
	2, 2, 6206, 6209, 3, 2, 2, 2, 6207, 6205, 3, 2, 2, 2, 6207, 6208, 3, 2,
	2, 2, 6208, 6211, 3, 2, 2, 2, 6209, 6207, 3, 2, 2, 2, 6210, 6200, 3, 2,
	2, 2, 6210, 6211, 3, 2, 2, 2, 6211, 6214, 3, 2, 2, 2, 6212, 6213, 7, 143,
	2, 2, 6213, 6215, 7, 1078, 2, 2, 6214, 6212, 3, 2, 2, 2, 6214, 6215, 3,
	2, 2, 2, 6215, 6216, 3, 2, 2, 2, 6216, 6217, 7, 1064, 2, 2, 6217, 6219,
	3, 2, 2, 2, 6218, 6162, 3, 2, 2, 2, 6218, 6170, 3, 2, 2, 2, 6218, 6180,
	3, 2, 2, 2, 6218, 6186, 3, 2, 2, 2, 6218, 6194, 3, 2, 2, 2, 6219, 597,
	3, 2, 2, 2, 6220, 6244, 5, 636, 319, 2, 6221, 6244, 7, 681, 2, 2, 6222,
	6244, 7, 289, 2, 2, 6223, 6244, 7, 285, 2, 2, 6224, 6244, 7, 286, 2, 2,
	6225, 6244, 7, 287, 2, 2, 6226, 6244, 7, 290, 2, 2, 6227, 6244, 7, 291,
	2, 2, 6228, 6244, 7, 292, 2, 2, 6229, 6244, 7, 72, 2, 2, 6230, 6244, 7,
	79, 2, 2, 6231, 6244, 7, 288, 2, 2, 6232, 6244, 7, 294, 2, 2, 6233, 6244,
	7, 470, 2, 2, 6234, 6244, 7, 295, 2, 2, 6235, 6244, 7, 131, 2, 2, 6236,
	6244, 7, 297, 2, 2, 6237, 6244, 7, 298, 2, 2, 6238, 6244, 7, 299, 2, 2,
	6239, 6244, 7, 300, 2, 2, 6240, 6244, 7, 301, 2, 2, 6241, 6244, 7, 302,
	2, 2, 6242, 6244, 7, 303, 2, 2, 6243, 6220, 3, 2, 2, 2, 6243, 6221, 3,
	2, 2, 2, 6243, 6222, 3, 2, 2, 2, 6243, 6223, 3, 2, 2, 2, 6243, 6224, 3,
	2, 2, 2, 6243, 6225, 3, 2, 2, 2, 6243, 6226, 3, 2, 2, 2, 6243, 6227, 3,
	2, 2, 2, 6243, 6228, 3, 2, 2, 2, 6243, 6229, 3, 2, 2, 2, 6243, 6230, 3,
	2, 2, 2, 6243, 6231, 3, 2, 2, 2, 6243, 6232, 3, 2, 2, 2, 6243, 6233, 3,
	2, 2, 2, 6243, 6234, 3, 2, 2, 2, 6243, 6235, 3, 2, 2, 2, 6243, 6236, 3,
	2, 2, 2, 6243, 6237, 3, 2, 2, 2, 6243, 6238, 3, 2, 2, 2, 6243, 6239, 3,
	2, 2, 2, 6243, 6240, 3, 2, 2, 2, 6243, 6241, 3, 2, 2, 2, 6243, 6242, 3,
	2, 2, 2, 6244, 599, 3, 2, 2, 2, 6245, 6246, 9, 116, 2, 2, 6246, 6247, 7,
	1063, 2, 2, 6247, 6248, 5, 604, 303, 2, 6248, 6249, 7, 1064, 2, 2, 6249,
	601, 3, 2, 2, 2, 6250, 6255, 5, 546, 274, 2, 6251, 6255, 5, 506, 254, 2,
	6252, 6255, 5, 586, 294, 2, 6253, 6255, 5, 606, 304, 2, 6254, 6250, 3,
	2, 2, 2, 6254, 6251, 3, 2, 2, 2, 6254, 6252, 3, 2, 2, 2, 6254, 6253, 3,
	2, 2, 2, 6255, 6265, 3, 2, 2, 2, 6256, 6261, 7, 1065, 2, 2, 6257, 6262,
	5, 546, 274, 2, 6258, 6262, 5, 506, 254, 2, 6259, 6262, 5, 586, 294, 2,
	6260, 6262, 5, 606, 304, 2, 6261, 6257, 3, 2, 2, 2, 6261, 6258, 3, 2, 2,
	2, 6261, 6259, 3, 2, 2, 2, 6261, 6260, 3, 2, 2, 2, 6262, 6264, 3, 2, 2,
	2, 6263, 6256, 3, 2, 2, 2, 6264, 6267, 3, 2, 2, 2, 6265, 6263, 3, 2, 2,
	2, 6265, 6266, 3, 2, 2, 2, 6266, 603, 3, 2, 2, 2, 6267, 6265, 3, 2, 2,
	2, 6268, 6273, 5, 546, 274, 2, 6269, 6273, 5, 506, 254, 2, 6270, 6273,
	5, 586, 294, 2, 6271, 6273, 5, 606, 304, 2, 6272, 6268, 3, 2, 2, 2, 6272,
	6269, 3, 2, 2, 2, 6272, 6270, 3, 2, 2, 2, 6272, 6271, 3, 2, 2, 2, 6273,
	605, 3, 2, 2, 2, 6274, 6275, 8, 304, 1, 2, 6275, 6276, 9, 117, 2, 2, 6276,
	6286, 5, 606, 304, 6, 6277, 6278, 5, 608, 305, 2, 6278, 6280, 7, 82, 2,
	2, 6279, 6281, 7, 105, 2, 2, 6280, 6279, 3, 2, 2, 2, 6280, 6281, 3, 2,
	2, 2, 6281, 6282, 3, 2, 2, 2, 6282, 6283, 9, 118, 2, 2, 6283, 6286, 3,
	2, 2, 2, 6284, 6286, 5, 608, 305, 2, 6285, 6274, 3, 2, 2, 2, 6285, 6277,
	3, 2, 2, 2, 6285, 6284, 3, 2, 2, 2, 6286, 6293, 3, 2, 2, 2, 6287, 6288,
	12, 5, 2, 2, 6288, 6289, 5, 616, 309, 2, 6289, 6290, 5, 606, 304, 6, 6290,
	6292, 3, 2, 2, 2, 6291, 6287, 3, 2, 2, 2, 6292, 6295, 3, 2, 2, 2, 6293,
	6291, 3, 2, 2, 2, 6293, 6294, 3, 2, 2, 2, 6294, 607, 3, 2, 2, 2, 6295,
	6293, 3, 2, 2, 2, 6296, 6299, 8, 305, 1, 2, 6297, 6298, 7, 1090, 2, 2,
	6298, 6300, 7, 1037, 2, 2, 6299, 6297, 3, 2, 2, 2, 6299, 6300, 3, 2, 2,
	2, 6300, 6301, 3, 2, 2, 2, 6301, 6302, 5, 610, 306, 2, 6302, 6367, 3, 2,
	2, 2, 6303, 6304, 12, 10, 2, 2, 6304, 6305, 5, 614, 308, 2, 6305, 6306,
	5, 608, 305, 11, 6306, 6366, 3, 2, 2, 2, 6307, 6309, 12, 8, 2, 2, 6308,
	6310, 7, 105, 2, 2, 6309, 6308, 3, 2, 2, 2, 6309, 6310, 3, 2, 2, 2, 6310,
	6311, 3, 2, 2, 2, 6311, 6312, 7, 16, 2, 2, 6312, 6313, 5, 608, 305, 2,
	6313, 6314, 7, 12, 2, 2, 6314, 6315, 5, 608, 305, 9, 6315, 6366, 3, 2,
	2, 2, 6316, 6317, 12, 7, 2, 2, 6317, 6318, 7, 566, 2, 2, 6318, 6319, 7,
	91, 2, 2, 6319, 6366, 5, 608, 305, 8, 6320, 6322, 12, 5, 2, 2, 6321, 6323,
	7, 105, 2, 2, 6322, 6321, 3, 2, 2, 2, 6322, 6323, 3, 2, 2, 2, 6323, 6324,
	3, 2, 2, 2, 6324, 6325, 9, 119, 2, 2, 6325, 6366, 5, 608, 305, 6, 6326,
	6328, 12, 12, 2, 2, 6327, 6329, 7, 105, 2, 2, 6328, 6327, 3, 2, 2, 2, 6328,
	6329, 3, 2, 2, 2, 6329, 6330, 3, 2, 2, 2, 6330, 6331, 7, 74, 2, 2, 6331,
	6334, 7, 1063, 2, 2, 6332, 6335, 5, 180, 91, 2, 6333, 6335, 5, 566, 284,
	2, 6334, 6332, 3, 2, 2, 2, 6334, 6333, 3, 2, 2, 2, 6335, 6336, 3, 2, 2,
	2, 6336, 6337, 7, 1064, 2, 2, 6337, 6366, 3, 2, 2, 2, 6338, 6339, 12, 11,
	2, 2, 6339, 6340, 7, 82, 2, 2, 6340, 6366, 5, 544, 273, 2, 6341, 6342,
	12, 9, 2, 2, 6342, 6343, 5, 614, 308, 2, 6343, 6344, 9, 120, 2, 2, 6344,
	6345, 7, 1063, 2, 2, 6345, 6346, 5, 180, 91, 2, 6346, 6347, 7, 1064, 2,
	2, 6347, 6366, 3, 2, 2, 2, 6348, 6350, 12, 6, 2, 2, 6349, 6351, 7, 105,
	2, 2, 6350, 6349, 3, 2, 2, 2, 6350, 6351, 3, 2, 2, 2, 6351, 6352, 3, 2,
	2, 2, 6352, 6353, 7, 91, 2, 2, 6353, 6356, 5, 608, 305, 2, 6354, 6355,
	7, 380, 2, 2, 6355, 6357, 7, 1078, 2, 2, 6356, 6354, 3, 2, 2, 2, 6356,
	6357, 3, 2, 2, 2, 6357, 6366, 3, 2, 2, 2, 6358, 6359, 12, 3, 2, 2, 6359,
	6360, 7, 467, 2, 2, 6360, 6361, 7, 488, 2, 2, 6361, 6362, 7, 1063, 2, 2,
	6362, 6363, 5, 608, 305, 2, 6363, 6364, 7, 1064, 2, 2, 6364, 6366, 3, 2,
	2, 2, 6365, 6303, 3, 2, 2, 2, 6365, 6307, 3, 2, 2, 2, 6365, 6316, 3, 2,
	2, 2, 6365, 6320, 3, 2, 2, 2, 6365, 6326, 3, 2, 2, 2, 6365, 6338, 3, 2,
	2, 2, 6365, 6341, 3, 2, 2, 2, 6365, 6348, 3, 2, 2, 2, 6365, 6358, 3, 2,
	2, 2, 6366, 6369, 3, 2, 2, 2, 6367, 6365, 3, 2, 2, 2, 6367, 6368, 3, 2,
	2, 2, 6368, 609, 3, 2, 2, 2, 6369, 6367, 3, 2, 2, 2, 6370, 6371, 8, 306,
	1, 2, 6371, 6416, 5, 546, 274, 2, 6372, 6416, 5, 506, 254, 2, 6373, 6416,
	5, 586, 294, 2, 6374, 6416, 5, 512, 257, 2, 6375, 6376, 5, 612, 307, 2,
	6376, 6377, 5, 610, 306, 12, 6377, 6416, 3, 2, 2, 2, 6378, 6379, 7, 212,
	2, 2, 6379, 6416, 5, 610, 306, 11, 6380, 6381, 7, 1063, 2, 2, 6381, 6386,
	5, 606, 304, 2, 6382, 6383, 7, 1065, 2, 2, 6383, 6385, 5, 606, 304, 2,
	6384, 6382, 3, 2, 2, 2, 6385, 6388, 3, 2, 2, 2, 6386, 6384, 3, 2, 2, 2,
	6386, 6387, 3, 2, 2, 2, 6387, 6389, 3, 2, 2, 2, 6388, 6386, 3, 2, 2, 2,
	6389, 6390, 7, 1064, 2, 2, 6390, 6416, 3, 2, 2, 2, 6391, 6392, 7, 548,
	2, 2, 6392, 6393, 7, 1063, 2, 2, 6393, 6396, 5, 606, 304, 2, 6394, 6395,
	7, 1065, 2, 2, 6395, 6397, 5, 606, 304, 2, 6396, 6394, 3, 2, 2, 2, 6397,
	6398, 3, 2, 2, 2, 6398, 6396, 3, 2, 2, 2, 6398, 6399, 3, 2, 2, 2, 6399,
	6400, 3, 2, 2, 2, 6400, 6401, 7, 1064, 2, 2, 6401, 6416, 3, 2, 2, 2, 6402,
	6403, 7, 56, 2, 2, 6403, 6404, 7, 1063, 2, 2, 6404, 6405, 5, 180, 91, 2,
	6405, 6406, 7, 1064, 2, 2, 6406, 6416, 3, 2, 2, 2, 6407, 6408, 7, 1063,
	2, 2, 6408, 6409, 5, 180, 91, 2, 6409, 6410, 7, 1064, 2, 2, 6410, 6416,
	3, 2, 2, 2, 6411, 6412, 7, 80, 2, 2, 6412, 6413, 5, 606, 304, 2, 6413,
	6414, 5, 60, 31, 2, 6414, 6416, 3, 2, 2, 2, 6415, 6370, 3, 2, 2, 2, 6415,
	6372, 3, 2, 2, 2, 6415, 6373, 3, 2, 2, 2, 6415, 6374, 3, 2, 2, 2, 6415,
	6375, 3, 2, 2, 2, 6415, 6378, 3, 2, 2, 2, 6415, 6380, 3, 2, 2, 2, 6415,
	6391, 3, 2, 2, 2, 6415, 6402, 3, 2, 2, 2, 6415, 6407, 3, 2, 2, 2, 6415,
	6411, 3, 2, 2, 2, 6416, 6434, 3, 2, 2, 2, 6417, 6418, 12, 5, 2, 2, 6418,
	6419, 5, 618, 310, 2, 6419, 6420, 5, 610, 306, 6, 6420, 6433, 3, 2, 2,
	2, 6421, 6422, 12, 4, 2, 2, 6422, 6423, 5, 620, 311, 2, 6423, 6424, 5,
	610, 306, 5, 6424, 6433, 3, 2, 2, 2, 6425, 6426, 12, 3, 2, 2, 6426, 6427,
	5, 622, 312, 2, 6427, 6428, 5, 610, 306, 4, 6428, 6433, 3, 2, 2, 2, 6429,
	6430, 12, 14, 2, 2, 6430, 6431, 7, 26, 2, 2, 6431, 6433, 5, 516, 259, 2,
	6432, 6417, 3, 2, 2, 2, 6432, 6421, 3, 2, 2, 2, 6432, 6425, 3, 2, 2, 2,
	6432, 6429, 3, 2, 2, 2, 6433, 6436, 3, 2, 2, 2, 6434, 6432, 3, 2, 2, 2,
	6434, 6435, 3, 2, 2, 2, 6435, 611, 3, 2, 2, 2, 6436, 6434, 3, 2, 2, 2,
	6437, 6438, 9, 121, 2, 2, 6438, 613, 3, 2, 2, 2, 6439, 6454, 7, 1054, 2,
	2, 6440, 6454, 7, 1055, 2, 2, 6441, 6454, 7, 1056, 2, 2, 6442, 6443, 7,
	1056, 2, 2, 6443, 6454, 7, 1054, 2, 2, 6444, 6445, 7, 1055, 2, 2, 6445,
	6454, 7, 1054, 2, 2, 6446, 6447, 7, 1056, 2, 2, 6447, 6454, 7, 1055, 2,
	2, 6448, 6449, 7, 1057, 2, 2, 6449, 6454, 7, 1054, 2, 2, 6450, 6451, 7,
	1056, 2, 2, 6451, 6452, 7, 1054, 2, 2, 6452, 6454, 7, 1055, 2, 2, 6453,
	6439, 3, 2, 2, 2, 6453, 6440, 3, 2, 2, 2, 6453, 6441, 3, 2, 2, 2, 6453,
	6442, 3, 2, 2, 2, 6453, 6444, 3, 2, 2, 2, 6453, 6446, 3, 2, 2, 2, 6453,
	6448, 3, 2, 2, 2, 6453, 6450, 3, 2, 2, 2, 6454, 615, 3, 2, 2, 2, 6455,
	6463, 7, 12, 2, 2, 6456, 6457, 7, 1060, 2, 2, 6457, 6463, 7, 1060, 2, 2,
	6458, 6463, 7, 180, 2, 2, 6459, 6463, 7, 114, 2, 2, 6460, 6461, 7, 1059,
	2, 2, 6461, 6463, 7, 1059, 2, 2, 6462, 6455, 3, 2, 2, 2, 6462, 6456, 3,
	2, 2, 2, 6462, 6458, 3, 2, 2, 2, 6462, 6459, 3, 2, 2, 2, 6462, 6460, 3,
	2, 2, 2, 6463, 617, 3, 2, 2, 2, 6464, 6465, 7, 1056, 2, 2, 6465, 6472,
	7, 1056, 2, 2, 6466, 6467, 7, 1055, 2, 2, 6467, 6472, 7, 1055, 2, 2, 6468,
	6472, 7, 1060, 2, 2, 6469, 6472, 7, 1061, 2, 2, 6470, 6472, 7, 1059, 2,
	2, 6471, 6464, 3, 2, 2, 2, 6471, 6466, 3, 2, 2, 2, 6471, 6468, 3, 2, 2,
	2, 6471, 6469, 3, 2, 2, 2, 6471, 6470, 3, 2, 2, 2, 6472, 619, 3, 2, 2,
	2, 6473, 6474, 9, 122, 2, 2, 6474, 621, 3, 2, 2, 2, 6475, 6476, 7, 1051,
	2, 2, 6476, 6481, 7, 1055, 2, 2, 6477, 6478, 7, 1051, 2, 2, 6478, 6479,
	7, 1055, 2, 2, 6479, 6481, 7, 1055, 2, 2, 6480, 6475, 3, 2, 2, 2, 6480,
	6477, 3, 2, 2, 2, 6481, 623, 3, 2, 2, 2, 6482, 6483, 9, 123, 2, 2, 6483,
	625, 3, 2, 2, 2, 6484, 6485, 9, 124, 2, 2, 6485, 627, 3, 2, 2, 2, 6486,
	6487, 9, 125, 2, 2, 6487, 629, 3, 2, 2, 2, 6488, 6489, 9, 126, 2, 2, 6489,
	631, 3, 2, 2, 2, 6490, 6491, 9, 127, 2, 2, 6491, 633, 3, 2, 2, 2, 6492,
	6493, 9, 128, 2, 2, 6493, 635, 3, 2, 2, 2, 6494, 6495, 9, 129, 2, 2, 6495,
	637, 3, 2, 2, 2, 944, 639, 642, 648, 651, 654, 656, 661, 664, 667, 676,
	715, 727, 738, 755, 760, 772, 799, 808, 813, 819, 824, 828, 837, 840, 843,
	847, 854, 857, 862, 870, 875, 880, 883, 885, 897, 900, 904, 907, 911, 914,
	918, 921, 924, 928, 931, 935, 941, 947, 953, 960, 967, 973, 979, 988, 993,
	1009, 1016, 1020, 1030, 1034, 1038, 1042, 1046, 1051, 1054, 1057, 1060,
	1063, 1069, 1073, 1079, 1084, 1087, 1090, 1092, 1103, 1107, 1110, 1124,
	1127, 1131, 1134, 1138, 1141, 1145, 1148, 1152, 1155, 1158, 1162, 1165,
	1169, 1175, 1188, 1195, 1200, 1203, 1208, 1216, 1222, 1226, 1229, 1234,
	1237, 1241, 1244, 1248, 1251, 1259, 1261, 1268, 1274, 1282, 1285, 1292,
	1295, 1297, 1303, 1309, 1326, 1333, 1340, 1351, 1354, 1367, 1380, 1385,
	1401, 1409, 1419, 1425, 1435, 1438, 1443, 1456, 1463, 1470, 1472, 1479,
	1483, 1485, 1490, 1493, 1499, 1504, 1506, 1510, 1513, 1516, 1522, 1527,
	1529, 1534, 1541, 1543, 1550, 1555, 1559, 1562, 1570, 1578, 1580, 1588,
	1592, 1595, 1601, 1606, 1609, 1615, 1618, 1622, 1627, 1632, 1636, 1641,
	1644, 1648, 1652, 1656, 1660, 1665, 1670, 1675, 1681, 1686, 1691, 1697,
	1702, 1707, 1712, 1717, 1722, 1727, 1732, 1737, 1742, 1747, 1753, 1758,
	1764, 1774, 1781, 1783, 1791, 1796, 1799, 1807, 1813, 1829, 1841, 1843,
	1846, 1854, 1860, 1866, 1879, 1886, 1895, 1900, 1911, 1920, 1925, 1937,
	1944, 1953, 1958, 1970, 1977, 1986, 1991, 1998, 2007, 2012, 2014, 2019,
	2027, 2036, 2040, 2044, 2049, 2055, 2061, 2066, 2071, 2076, 2081, 2084,
	2089, 2094, 2104, 2108, 2115, 2120, 2123, 2128, 2131, 2135, 2139, 2147,
	2166, 2169, 2172, 2176, 2186, 2199, 2206, 2209, 2218, 2221, 2224, 2235,
	2238, 2242, 2250, 2253, 2258, 2266, 2272, 2276, 2280, 2285, 2290, 2297,
	2301, 2312, 2320, 2323, 2329, 2335, 2337, 2342, 2345, 2351, 2357, 2359,
	2363, 2366, 2369, 2375, 2381, 2384, 2390, 2396, 2398, 2403, 2411, 2413,
	2422, 2427, 2435, 2439, 2447, 2457, 2462, 2469, 2473, 2477, 2509, 2513,
	2525, 2528, 2537, 2554, 2566, 2573, 2580, 2595, 2608, 2614, 2620, 2626,
	2632, 2638, 2644, 2649, 2656, 2663, 2670, 2675, 2678, 2680, 2694, 2701,
	2708, 2714, 2718, 2722, 2729, 2732, 2737, 2744, 2751, 2755, 2764, 2773,
	2782, 2785, 2789, 2798, 2802, 2805, 2808, 2814, 2817, 2823, 2832, 2835,
	2846, 2849, 2854, 2857, 2862, 2872, 2877, 2883, 2885, 2891, 2893, 2899,
	2907, 2912, 2920, 2923, 2928, 2931, 2936, 2944, 2952, 2958, 2966, 2971,
	2979, 2982, 2986, 2989, 2997, 3003, 3012, 3015, 3019, 3023, 3029, 3033,
	3037, 3039, 3042, 3045, 3048, 3054, 3058, 3061, 3064, 3067, 3070, 3072,
	3076, 3082, 3088, 3093, 3096, 3102, 3106, 3114, 3118, 3121, 3124, 3133,
	3137, 3140, 3144, 3148, 3151, 3154, 3159, 3165, 3169, 3179, 3185, 3189,
	3195, 3199, 3205, 3208, 3220, 3224, 3228, 3236, 3240, 3248, 3251, 3255,
	3258, 3266, 3271, 3274, 3277, 3281, 3284, 3293, 3298, 3307, 3312, 3319,
	3326, 3334, 3339, 3347, 3350, 3353, 3360, 3363, 3370, 3373, 3381, 3387,
	3398, 3401, 3412, 3418, 3422, 3433, 3438, 3440, 3444, 3454, 3464, 3470,
	3475, 3478, 3481, 3484, 3487, 3490, 3496, 3501, 3504, 3507, 3510, 3513,
	3516, 3518, 3524, 3529, 3532, 3535, 3538, 3541, 3545, 3551, 3555, 3565,
	3569, 3575, 3584, 3587, 3591, 3594, 3598, 3602, 3605, 3607, 3615, 3627,
	3633, 3635, 3641, 3643, 3645, 3651, 3659, 3667, 3673, 3682, 3687, 3694,
	3700, 3707, 3712, 3721, 3724, 3728, 3732, 3736, 3739, 3742, 3745, 3749,
	3753, 3756, 3759, 3762, 3769, 3773, 3788, 3801, 3809, 3819, 3823, 3826,
	3832, 3835, 3838, 3847, 3856, 3866, 3870, 3880, 3890, 3898, 3901, 3910,
	3913, 3917, 3922, 3926, 3935, 3938, 3969, 3972, 3975, 4031, 4036, 4064,
	4078, 4085, 4089, 4095, 4103, 4105, 4116, 4126, 4133, 4139, 4147, 4152,
	4160, 4168, 4176, 4184, 4190, 4193, 4197, 4202, 4207, 4213, 4215, 4226,
	4231, 4238, 4240, 4254, 4260, 4265, 4270, 4276, 4283, 4291, 4299, 4304,
	4310, 4313, 4321, 4328, 4337, 4340, 4357, 4365, 4373, 4377, 4384, 4390,
	4398, 4407, 4413, 4420, 4427, 4432, 4435, 4437, 4443, 4445, 4449, 4451,
	4454, 4463, 4469, 4476, 4483, 4488, 4491, 4493, 4499, 4501, 4505, 4507,
	4510, 4515, 4522, 4531, 4536, 4545, 4552, 4557, 4560, 4562, 4568, 4570,
	4573, 4585, 4591, 4600, 4609, 4614, 4623, 4629, 4640, 4643, 4655, 4662,
	4667, 4682, 4693, 4696, 4706, 4716, 4726, 4736, 4740, 4744, 4754, 4759,
	4817, 4835, 4843, 4854, 4861, 4865, 4872, 4877, 4880, 4883, 4892, 4896,
	4926, 4933, 4937, 4944, 4947, 4963, 4966, 4976, 4980, 4986, 4989, 4994,
	4998, 5005, 5008, 5014, 5038, 5051, 5054, 5064, 5072, 5076, 5083, 5086,
	5095, 5101, 5107, 5117, 5119, 5125, 5128, 5131, 5143, 5146, 5152, 5155,
	5163, 5171, 5177, 5181, 5195, 5207, 5214, 5217, 5224, 5231, 5236, 5241,
	5252, 5263, 5269, 5274, 5287, 5289, 5294, 5299, 5301, 5308, 5315, 5318,
	5321, 5327, 5331, 5337, 5343, 5356, 5361, 5369, 5372, 5377, 5382, 5390,
	5393, 5401, 5405, 5418, 5424, 5436, 5439, 5448, 5453, 5459, 5466, 5468,
	5473, 5475, 5479, 5485, 5488, 5498, 5502, 5522, 5529, 5531, 5538, 5540,
	5544, 5549, 5560, 5565, 5571, 5574, 5578, 5583, 5586, 5590, 5594, 5596,
	5601, 5606, 5619, 5622, 5626, 5629, 5632, 5637, 5640, 5645, 5650, 5653,
	5658, 5661, 5667, 5670, 5674, 5677, 5680, 5684, 5687, 5690, 5694, 5697,
	5700, 5703, 5707, 5710, 5713, 5718, 5723, 5728, 5731, 5736, 5739, 5744,
	5747, 5751, 5755, 5763, 5770, 5774, 5779, 5782, 5787, 5791, 5793, 5809,
	5818, 5826, 5835, 5845, 5853, 5861, 5869, 5877, 5882, 5890, 5895, 5900,
	5903, 5908, 5911, 5915, 5929, 5936, 5941, 5946, 5979, 5983, 5991, 5995,
	6004, 6012, 6017, 6025, 6030, 6035, 6037, 6046, 6051, 6059, 6064, 6072,
	6080, 6083, 6093, 6111, 6117, 6121, 6127, 6131, 6135, 6148, 6156, 6160,
	6165, 6174, 6177, 6189, 6197, 6207, 6210, 6214, 6218, 6243, 6254, 6261,
	6265, 6272, 6280, 6285, 6293, 6299, 6309, 6322, 6328, 6334, 6350, 6356,
	6365, 6367, 6386, 6398, 6415, 6432, 6434, 6453, 6462, 6471, 6480,
}
var literalNames = []string{
	"", "", "", "", "", "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'",
	"'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'",
	"'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'",
	"'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'",
	"'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'",
	"'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'",
	"'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'",
	"'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ESCAPED'",
	"'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'",
	"'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'",
	"'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'IF'", "'IGNORE'", "'IN'", "'INDEX'",
	"'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'",
	"'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'",
	"'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'",
	"'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'",
	"'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'",
	"", "'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'",
	"'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'",
	"'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", "'REFERENCES'",
	"'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'",
	"'RESIGNAL'", "'RESTRICT'", "'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'",
	"'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'",
	"'SIGNAL'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'",
	"'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'",
	"'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'",
	"'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'",
	"'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", "'USING'",
	"'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'",
	"'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'",
	"'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'",
	"'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'",
	"'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'",
	"'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'",
	"'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'",
	"'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'",
	"'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'",
	"'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'",
	"'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'JSON_ARRAY'",
	"'JSON_OBJECT'", "'JSON_QUOTE'", "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'",
	"'JSON_EXTRACT'", "'JSON_KEYS'", "'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'",
	"'JSON_ARRAY_APPEND'", "'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'",
	"'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", "'JSON_REPLACE'",
	"'JSON_SET'", "'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'",
	"'JSON_VALID'", "'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'",
	"'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'",
	"'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'",
	"'GROUP_CONCAT'", "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'",
	"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'",
	"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'",
	"'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'",
	"'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'",
	"'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'",
	"'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'",
	"'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'",
	"'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'",
	"'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'",
	"'CLIENT'", "'CLOSE'", "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'",
	"'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'",
	"'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", "'CONNECTION'", "'CONSISTENT'",
	"'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'",
	"'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", "'DATA'",
	"'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'",
	"'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'",
	"'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", "'END'",
	"'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'",
	"'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'",
	"'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", "'FIELDS'",
	"'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWS'",
	"'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'",
	"'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'",
	"'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'",
	"'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVISIBLE'",
	"'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'",
	"'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'",
	"'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'",
	"'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'",
	"'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", "'MASTER_PASSWORD'",
	"'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", "'MASTER_SSL_CA'",
	"'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'",
	"'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'",
	"'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'",
	"'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'",
	"'MERGE'", "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'",
	"'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", "'NAMES'",
	"'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'",
	"'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'",
	"'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'",
	"'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'",
	"'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'",
	"'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'",
	"'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'",
	"'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'",
	"'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'",
	"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'",
	"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'",
	"'RESET'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'",
	"'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'",
	"'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'",
	"'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'",
	"'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'",
	"'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'",
	"'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'",
	"'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'",
	"'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'",
	"'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'",
	"'TABLESPACE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'",
	"'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'",
	"'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'",
	"'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'",
	"'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'",
	"'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'",
	"'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", "'MONTH'",
	"'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", "'TABLES'",
	"'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", "'SHUTDOWN'",
	"'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", "'AUDIT_ADMIN'",
	"'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'",
	"'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", "'FIREWALL_USER'",
	"'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", "'FLUSH_USER_RESOURCES'",
	"'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'",
	"'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", "'REPLICATION_APPLIER'",
	"'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'",
	"'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", "", "'SET_USER_ID'", "'SHOW_ROUTINE'",
	"'SYSTEM_VARIABLES_ADMIN'", "'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'",
	"'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'",
	"'CP1256'", "'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'",
	"'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'",
	"'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'",
	"'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'",
	"'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'",
	"'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'",
	"'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'",
	"'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'",
	"'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'",
	"'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'",
	"'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'",
	"'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'",
	"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'",
	"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'",
	"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'",
	"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'",
	"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'",
	"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'",
	"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'",
	"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'",
	"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'",
	"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'",
	"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'",
	"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'",
	"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'",
	"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'",
	"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'",
	"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'",
	"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'",
	"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'",
	"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'",
	"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'",
	"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'",
	"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'",
	"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'",
	"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'",
	"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'",
	"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'",
	"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'",
	"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'",
	"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'",
	"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'",
	"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'",
	"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'",
	"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'",
	"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'",
	"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'",
	"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'",
	"'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'",
	"'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'",
	"'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'",
	"'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'",
	"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'",
	"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'",
	"'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", "'ST_GEOMETRYFROMTEXT'",
	"'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'",
	"'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'",
	"'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'",
	"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'",
	"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'",
	"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'",
	"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'",
	"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'",
	"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'",
	"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'",
	"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'",
	"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'",
	"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'",
	"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'",
	"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'",
	"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='",
	"'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'--'",
	"'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'",
	"'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''",
	"'\"'", "'`'", "':'",
}
var symbolicNames = []string{
	"", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", "ADD",
	"ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", "ASC", "BEFORE", "BETWEEN",
	"BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER",
	"CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT",
	"CREATE", "CROSS", "CURRENT", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES",
	"DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC",
	"DIAGNOSTICS", "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF",
	"EMPTY", "ENCLOSED", "ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH",
	"FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", "GET", "GRANT",
	"GROUP", "HAVING", "HIGH_PRIORITY", "IF", "IGNORE", "IN", "INDEX", "INFILE",
	"INNER", "INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN",
	"KEY", "KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR",
	"LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT",
	"MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG",
	"NULL_LITERAL", "NULL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY",
	"OR", "ORDER", "OUT", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE",
	"PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME",
	"REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETURN", "REVOKE",
	"RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW",
	"SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT",
	"SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING",
	"STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER",
	"TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE",
	"USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", "XOR",
	"ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "MIDDLEINT", "INT", "INT1",
	"INT2", "INT3", "INT4", "INT8", "INTEGER", "BIGINT", "REAL", "DOUBLE",
	"PRECISION", "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", "DEC", "NUMERIC",
	"DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", "NVARCHAR",
	"NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG",
	"LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING",
	"SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE",
	"HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND",
	"HOUR_MICROSECOND", "DAY_MICROSECOND", "JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE",
	"JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_KEYS", "JSON_OVERLAPS",
	"JSON_SEARCH", "JSON_VALUE", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT",
	"JSON_INSERT", "JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE",
	"JSON_REMOVE", "JSON_REPLACE", "JSON_SET", "JSON_UNQUOTE", "JSON_DEPTH",
	"JSON_LENGTH", "JSON_TYPE", "JSON_VALID", "JSON_TABLE", "JSON_SCHEMA_VALID",
	"JSON_SCHEMA_VALIDATION_REPORT", "JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE",
	"JSON_ARRAYAGG", "JSON_OBJECTAGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR",
	"COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP",
	"SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME",
	"CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB",
	"EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", "SUBSTRING",
	"SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT",
	"ACTION", "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT",
	"AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG",
	"BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN",
	"CHANGED", "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN",
	"CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME",
	"COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION",
	"CONCURRENT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU",
	"CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER",
	"DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", "DISK",
	"DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", "END",
	"ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT",
	"EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED",
	"EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER",
	"FIRST", "FIXED", "FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL",
	"GLOBAL", "GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST",
	"HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE",
	"INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INVISIBLE", "INVOKER",
	"IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE",
	"LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE",
	"LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY",
	"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS",
	"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA",
	"MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL",
	"MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER",
	"MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE",
	"MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE",
	"MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX",
	"MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", "NEVER", "NEXT", "NO",
	"NODEGROUP", "NONE", "OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE",
	"ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS",
	"PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD",
	"PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PREPARE",
	"PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY",
	"QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY",
	"RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE",
	"REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB",
	"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE",
	"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNED_SQLSTATE",
	"RETURNING", "RETURNS", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW",
	"ROWS", "ROW_FORMAT", "SAVEPOINT", "SCHEDULE", "SECURITY", "SERVER", "SESSION",
	"SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET",
	"SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS",
	"SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD",
	"START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES",
	"STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT",
	"SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME",
	"TABLESPACE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION",
	"TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE",
	"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES",
	"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT",
	"WARNINGS", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", "USA",
	"JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE",
	"WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE",
	"PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN",
	"AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN",
	"CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN",
	"FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES",
	"FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE",
	"INNODB_REDO_LOG_ENABLE", "NDB_STORED_USER", "PERSIST_RO_VARIABLES_ADMIN",
	"REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN",
	"RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN",
	"SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN",
	"VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", "ASCII", "BIG5",
	"CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932",
	"DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW",
	"HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7",
	"MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16",
	"UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE",
	"CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB",
	"NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED",
	"UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION",
	"GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
	"POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT",
	"AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT",
	"ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN",
	"ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT",
	"BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", "CENTROID",
	"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION",
	"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ",
	"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY",
	"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT",
	"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES",
	"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE",
	"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING",
	"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS",
	"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB",
	"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT",
	"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB",
	"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT",
	"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA",
	"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL",
	"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED",
	"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH",
	"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB",
	"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM",
	"MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", "MBRDISJOINT",
	"MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN",
	"MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT",
	"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT",
	"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT",
	"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS",
	"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF",
	"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB",
	"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS",
	"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT",
	"RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2",
	"SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS",
	"SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY",
	"ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS",
	"ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE",
	"ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT",
	"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT",
	"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB",
	"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB",
	"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED",
	"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT",
	"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS",
	"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN",
	"ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB",
	"ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION",
	"ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER",
	"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC",
	"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS",
	"UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER",
	"UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS",
	"WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION",
	"X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN",
	"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR",
	"DIVIDE", "MODULE", "PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL",
	"GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP",
	"BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA",
	"SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB",
	"DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING",
	"FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL",
	"DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL",
	"BIT_STRING", "STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID",
	"STRING_USER_NAME", "IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION",
}

var ruleNames = []string{
	"root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement",
	"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement",
	"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase",
	"createEvent", "createIndex", "createLogfileGroup", "createProcedure",
	"createFunction", "createServer", "createTable", "createTablespaceInnodb",
	"createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption",
	"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr",
	"intervalType", "enableType", "indexType", "indexOption", "procedureParameter",
	"functionParameter", "routineOption", "serverOption", "createDefinitions",
	"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint",
	"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition",
	"tableOption", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition",
	"subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom",
	"partitionDefinerVector", "subpartitionDefinition", "partitionOption",
	"alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup",
	"alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView",
	"alterSpecification", "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup",
	"dropProcedure", "dropFunction", "dropServer", "dropTable", "dropTablespace",
	"dropTrigger", "dropView", "renameTable", "renameTableClause", "truncateTable",
	"callStatement", "deleteStatement", "doStatement", "handlerStatement",
	"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement",
	"selectStatement", "updateStatement", "insertStatementValue", "updatedElement",
	"assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement",
	"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement",
	"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement",
	"orderByClause", "orderByExpression", "tableSources", "tableSource", "tableSourceItem",
	"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo",
	"querySpecification", "querySpecificationNointo", "unionParenthesis", "unionStatement",
	"selectSpec", "selectElements", "selectElement", "selectIntoExpression",
	"selectFieldsInto", "selectLinesInto", "fromClause", "groupByClause", "havingClause",
	"groupByItem", "limitClause", "limitClauseAtom", "startTransaction", "beginWork",
	"commitWork", "rollbackWork", "savepointStatement", "rollbackStatement",
	"releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement",
	"setTransactionStatement", "transactionMode", "lockTableElement", "lockAction",
	"transactionOption", "transactionLevel", "changeMaster", "changeReplicationFilter",
	"purgeBinaryLogs", "resetMaster", "resetSlave", "startSlave", "stopSlave",
	"startGroupReplication", "stopGroupReplication", "masterOption", "stringMasterOption",
	"decimalMasterOption", "boolMasterOption", "channelOption", "replicationFilter",
	"tablePair", "threadType", "untilOption", "connectionOption", "gtuidSet",
	"xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", "xaCommitWork",
	"xaRollbackWork", "xaRecoverWork", "prepareStatement", "executeStatement",
	"deallocatePrepare", "routineBody", "blockStatement", "caseStatement",
	"ifStatement", "iterateStatement", "leaveStatement", "loopStatement", "repeatStatement",
	"returnStatement", "whileStatement", "cursorStatement", "declareVariable",
	"declareCondition", "declareCursor", "declareHandler", "handlerConditionValue",
	"procedureSqlStatement", "caseAlternative", "elifAlternative", "alterUser",
	"createUser", "dropUser", "grantStatement", "grantProxy", "renameUser",
	"revokeStatement", "revokeProxy", "setPasswordStatement", "userSpecification",
	"userAuthOption", "tlsOption", "userResourceOption", "userPasswordOption",
	"userLockOption", "privelegeClause", "privilege", "privilegeLevel", "renameUserClause",
	"analyzeTable", "checkTable", "checksumTable", "optimizeTable", "repairTable",
	"checkTableOption", "createUdfunction", "installPlugin", "uninstallPlugin",
	"setStatement", "showStatement", "variableClause", "showCommonEntity",
	"showFilter", "showGlobalInfoClause", "showSchemaEntity", "showProfileType",
	"binlogStatement", "cacheIndexStatement", "flushStatement", "killStatement",
	"loadIndexIntoCache", "resetStatement", "shutdownStatement", "tableIndexes",
	"flushOption", "flushTableOption", "loadedTableIndexes", "simpleDescribeStatement",
	"fullDescribeStatement", "helpStatement", "useStatement", "signalStatement",
	"resignalStatement", "signalConditionInformation", "diagnosticsStatement",
	"diagnosticsConditionInformationName", "describeObjectClause", "fullId",
	"tableName", "fullColumnName", "indexColumnName", "userName", "mysqlVariable",
	"charsetName", "collationName", "engineName", "uuidSet", "xid", "xuidStringId",
	"authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral",
	"stringLiteral", "booleanLiteral", "hexadecimalLiteral", "nullNotnull",
	"constant", "dataType", "collectionOptions", "convertedDataType", "lengthOneDimension",
	"lengthTwoDimension", "lengthTwoOptionalDimension", "uidList", "tables",
	"indexColumnNames", "expressions", "expressionsWithDefaults", "constants",
	"simpleStrings", "userVariables", "defaultValue", "currentTimestamp", "expressionOrDefault",
	"ifExists", "ifNotExists", "functionCall", "specificFunction", "caseFuncAlternative",
	"levelsInWeightString", "levelInWeightListElement", "aggregateWindowedFunction",
	"scalarFunctionName", "passwordFunctionClause", "functionArgs", "functionArg",
	"expression", "predicate", "expressionAtom", "unaryOperator", "comparisonOperator",
	"logicalOperator", "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase",
	"transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase",
	"keywordsCanBeId", "functionNameBase",
}

type MySqlParser struct {
	*antlr.BaseParser
}

// NewMySqlParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *MySqlParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewMySqlParser(input antlr.TokenStream) *MySqlParser {
	this := new(MySqlParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "MySqlParser.g4"

	return this
}

// MySqlParser tokens.
const (
	MySqlParserEOF                               = antlr.TokenEOF
	MySqlParserSPACE                             = 1
	MySqlParserSPEC_MYSQL_COMMENT                = 2
	MySqlParserCOMMENT_INPUT                     = 3
	MySqlParserLINE_COMMENT                      = 4
	MySqlParserADD                               = 5
	MySqlParserALL                               = 6
	MySqlParserALTER                             = 7
	MySqlParserALWAYS                            = 8
	MySqlParserANALYZE                           = 9
	MySqlParserAND                               = 10
	MySqlParserAS                                = 11
	MySqlParserASC                               = 12
	MySqlParserBEFORE                            = 13
	MySqlParserBETWEEN                           = 14
	MySqlParserBOTH                              = 15
	MySqlParserBY                                = 16
	MySqlParserCALL                              = 17
	MySqlParserCASCADE                           = 18
	MySqlParserCASE                              = 19
	MySqlParserCAST                              = 20
	MySqlParserCHANGE                            = 21
	MySqlParserCHARACTER                         = 22
	MySqlParserCHECK                             = 23
	MySqlParserCOLLATE                           = 24
	MySqlParserCOLUMN                            = 25
	MySqlParserCONDITION                         = 26
	MySqlParserCONSTRAINT                        = 27
	MySqlParserCONTINUE                          = 28
	MySqlParserCONVERT                           = 29
	MySqlParserCREATE                            = 30
	MySqlParserCROSS                             = 31
	MySqlParserCURRENT                           = 32
	MySqlParserCURRENT_USER                      = 33
	MySqlParserCURSOR                            = 34
	MySqlParserDATABASE                          = 35
	MySqlParserDATABASES                         = 36
	MySqlParserDECLARE                           = 37
	MySqlParserDEFAULT                           = 38
	MySqlParserDELAYED                           = 39
	MySqlParserDELETE                            = 40
	MySqlParserDESC                              = 41
	MySqlParserDESCRIBE                          = 42
	MySqlParserDETERMINISTIC                     = 43
	MySqlParserDIAGNOSTICS                       = 44
	MySqlParserDISTINCT                          = 45
	MySqlParserDISTINCTROW                       = 46
	MySqlParserDROP                              = 47
	MySqlParserEACH                              = 48
	MySqlParserELSE                              = 49
	MySqlParserELSEIF                            = 50
	MySqlParserEMPTY                             = 51
	MySqlParserENCLOSED                          = 52
	MySqlParserESCAPED                           = 53
	MySqlParserEXISTS                            = 54
	MySqlParserEXIT                              = 55
	MySqlParserEXPLAIN                           = 56
	MySqlParserFALSE                             = 57
	MySqlParserFETCH                             = 58
	MySqlParserFOR                               = 59
	MySqlParserFORCE                             = 60
	MySqlParserFOREIGN                           = 61
	MySqlParserFROM                              = 62
	MySqlParserFULLTEXT                          = 63
	MySqlParserGENERATED                         = 64
	MySqlParserGET                               = 65
	MySqlParserGRANT                             = 66
	MySqlParserGROUP                             = 67
	MySqlParserHAVING                            = 68
	MySqlParserHIGH_PRIORITY                     = 69
	MySqlParserIF                                = 70
	MySqlParserIGNORE                            = 71
	MySqlParserIN                                = 72
	MySqlParserINDEX                             = 73
	MySqlParserINFILE                            = 74
	MySqlParserINNER                             = 75
	MySqlParserINOUT                             = 76
	MySqlParserINSERT                            = 77
	MySqlParserINTERVAL                          = 78
	MySqlParserINTO                              = 79
	MySqlParserIS                                = 80
	MySqlParserITERATE                           = 81
	MySqlParserJOIN                              = 82
	MySqlParserKEY                               = 83
	MySqlParserKEYS                              = 84
	MySqlParserKILL                              = 85
	MySqlParserLEADING                           = 86
	MySqlParserLEAVE                             = 87
	MySqlParserLEFT                              = 88
	MySqlParserLIKE                              = 89
	MySqlParserLIMIT                             = 90
	MySqlParserLINEAR                            = 91
	MySqlParserLINES                             = 92
	MySqlParserLOAD                              = 93
	MySqlParserLOCK                              = 94
	MySqlParserLOOP                              = 95
	MySqlParserLOW_PRIORITY                      = 96
	MySqlParserMASTER_BIND                       = 97
	MySqlParserMASTER_SSL_VERIFY_SERVER_CERT     = 98
	MySqlParserMATCH                             = 99
	MySqlParserMAXVALUE                          = 100
	MySqlParserMODIFIES                          = 101
	MySqlParserNATURAL                           = 102
	MySqlParserNOT                               = 103
	MySqlParserNO_WRITE_TO_BINLOG                = 104
	MySqlParserNULL_LITERAL                      = 105
	MySqlParserNULL                              = 106
	MySqlParserNUMBER                            = 107
	MySqlParserON                                = 108
	MySqlParserOPTIMIZE                          = 109
	MySqlParserOPTION                            = 110
	MySqlParserOPTIONALLY                        = 111
	MySqlParserOR                                = 112
	MySqlParserORDER                             = 113
	MySqlParserOUT                               = 114
	MySqlParserOUTER                             = 115
	MySqlParserOUTFILE                           = 116
	MySqlParserPARTITION                         = 117
	MySqlParserPRIMARY                           = 118
	MySqlParserPROCEDURE                         = 119
	MySqlParserPURGE                             = 120
	MySqlParserRANGE                             = 121
	MySqlParserREAD                              = 122
	MySqlParserREADS                             = 123
	MySqlParserREFERENCES                        = 124
	MySqlParserREGEXP                            = 125
	MySqlParserRELEASE                           = 126
	MySqlParserRENAME                            = 127
	MySqlParserREPEAT                            = 128
	MySqlParserREPLACE                           = 129
	MySqlParserREQUIRE                           = 130
	MySqlParserRESIGNAL                          = 131
	MySqlParserRESTRICT                          = 132
	MySqlParserRETURN                            = 133
	MySqlParserREVOKE                            = 134
	MySqlParserRIGHT                             = 135
	MySqlParserRLIKE                             = 136
	MySqlParserSCHEMA                            = 137
	MySqlParserSCHEMAS                           = 138
	MySqlParserSELECT                            = 139
	MySqlParserSET                               = 140
	MySqlParserSEPARATOR                         = 141
	MySqlParserSHOW                              = 142
	MySqlParserSIGNAL                            = 143
	MySqlParserSPATIAL                           = 144
	MySqlParserSQL                               = 145
	MySqlParserSQLEXCEPTION                      = 146
	MySqlParserSQLSTATE                          = 147
	MySqlParserSQLWARNING                        = 148
	MySqlParserSQL_BIG_RESULT                    = 149
	MySqlParserSQL_CALC_FOUND_ROWS               = 150
	MySqlParserSQL_SMALL_RESULT                  = 151
	MySqlParserSSL                               = 152
	MySqlParserSTACKED                           = 153
	MySqlParserSTARTING                          = 154
	MySqlParserSTRAIGHT_JOIN                     = 155
	MySqlParserTABLE                             = 156
	MySqlParserTERMINATED                        = 157
	MySqlParserTHEN                              = 158
	MySqlParserTO                                = 159
	MySqlParserTRAILING                          = 160
	MySqlParserTRIGGER                           = 161
	MySqlParserTRUE                              = 162
	MySqlParserUNDO                              = 163
	MySqlParserUNION                             = 164
	MySqlParserUNIQUE                            = 165
	MySqlParserUNLOCK                            = 166
	MySqlParserUNSIGNED                          = 167
	MySqlParserUPDATE                            = 168
	MySqlParserUSAGE                             = 169
	MySqlParserUSE                               = 170
	MySqlParserUSING                             = 171
	MySqlParserVALUES                            = 172
	MySqlParserWHEN                              = 173
	MySqlParserWHERE                             = 174
	MySqlParserWHILE                             = 175
	MySqlParserWITH                              = 176
	MySqlParserWRITE                             = 177
	MySqlParserXOR                               = 178
	MySqlParserZEROFILL                          = 179
	MySqlParserTINYINT                           = 180
	MySqlParserSMALLINT                          = 181
	MySqlParserMEDIUMINT                         = 182
	MySqlParserMIDDLEINT                         = 183
	MySqlParserINT                               = 184
	MySqlParserINT1                              = 185
	MySqlParserINT2                              = 186
	MySqlParserINT3                              = 187
	MySqlParserINT4                              = 188
	MySqlParserINT8                              = 189
	MySqlParserINTEGER                           = 190
	MySqlParserBIGINT                            = 191
	MySqlParserREAL                              = 192
	MySqlParserDOUBLE                            = 193
	MySqlParserPRECISION                         = 194
	MySqlParserFLOAT                             = 195
	MySqlParserFLOAT4                            = 196
	MySqlParserFLOAT8                            = 197
	MySqlParserDECIMAL                           = 198
	MySqlParserDEC                               = 199
	MySqlParserNUMERIC                           = 200
	MySqlParserDATE                              = 201
	MySqlParserTIME                              = 202
	MySqlParserTIMESTAMP                         = 203
	MySqlParserDATETIME                          = 204
	MySqlParserYEAR                              = 205
	MySqlParserCHAR                              = 206
	MySqlParserVARCHAR                           = 207
	MySqlParserNVARCHAR                          = 208
	MySqlParserNATIONAL                          = 209
	MySqlParserBINARY                            = 210
	MySqlParserVARBINARY                         = 211
	MySqlParserTINYBLOB                          = 212
	MySqlParserBLOB                              = 213
	MySqlParserMEDIUMBLOB                        = 214
	MySqlParserLONG                              = 215
	MySqlParserLONGBLOB                          = 216
	MySqlParserTINYTEXT                          = 217
	MySqlParserTEXT                              = 218
	MySqlParserMEDIUMTEXT                        = 219
	MySqlParserLONGTEXT                          = 220
	MySqlParserENUM                              = 221
	MySqlParserVARYING                           = 222
	MySqlParserSERIAL                            = 223
	MySqlParserYEAR_MONTH                        = 224
	MySqlParserDAY_HOUR                          = 225
	MySqlParserDAY_MINUTE                        = 226
	MySqlParserDAY_SECOND                        = 227
	MySqlParserHOUR_MINUTE                       = 228
	MySqlParserHOUR_SECOND                       = 229
	MySqlParserMINUTE_SECOND                     = 230
	MySqlParserSECOND_MICROSECOND                = 231
	MySqlParserMINUTE_MICROSECOND                = 232
	MySqlParserHOUR_MICROSECOND                  = 233
	MySqlParserDAY_MICROSECOND                   = 234
	MySqlParserJSON_ARRAY                        = 235
	MySqlParserJSON_OBJECT                       = 236
	MySqlParserJSON_QUOTE                        = 237
	MySqlParserJSON_CONTAINS                     = 238
	MySqlParserJSON_CONTAINS_PATH                = 239
	MySqlParserJSON_EXTRACT                      = 240
	MySqlParserJSON_KEYS                         = 241
	MySqlParserJSON_OVERLAPS                     = 242
	MySqlParserJSON_SEARCH                       = 243
	MySqlParserJSON_VALUE                        = 244
	MySqlParserJSON_ARRAY_APPEND                 = 245
	MySqlParserJSON_ARRAY_INSERT                 = 246
	MySqlParserJSON_INSERT                       = 247
	MySqlParserJSON_MERGE                        = 248
	MySqlParserJSON_MERGE_PATCH                  = 249
	MySqlParserJSON_MERGE_PRESERVE               = 250
	MySqlParserJSON_REMOVE                       = 251
	MySqlParserJSON_REPLACE                      = 252
	MySqlParserJSON_SET                          = 253
	MySqlParserJSON_UNQUOTE                      = 254
	MySqlParserJSON_DEPTH                        = 255
	MySqlParserJSON_LENGTH                       = 256
	MySqlParserJSON_TYPE                         = 257
	MySqlParserJSON_VALID                        = 258
	MySqlParserJSON_TABLE                        = 259
	MySqlParserJSON_SCHEMA_VALID                 = 260
	MySqlParserJSON_SCHEMA_VALIDATION_REPORT     = 261
	MySqlParserJSON_PRETTY                       = 262
	MySqlParserJSON_STORAGE_FREE                 = 263
	MySqlParserJSON_STORAGE_SIZE                 = 264
	MySqlParserJSON_ARRAYAGG                     = 265
	MySqlParserJSON_OBJECTAGG                    = 266
	MySqlParserAVG                               = 267
	MySqlParserBIT_AND                           = 268
	MySqlParserBIT_OR                            = 269
	MySqlParserBIT_XOR                           = 270
	MySqlParserCOUNT                             = 271
	MySqlParserGROUP_CONCAT                      = 272
	MySqlParserMAX                               = 273
	MySqlParserMIN                               = 274
	MySqlParserSTD                               = 275
	MySqlParserSTDDEV                            = 276
	MySqlParserSTDDEV_POP                        = 277
	MySqlParserSTDDEV_SAMP                       = 278
	MySqlParserSUM                               = 279
	MySqlParserVAR_POP                           = 280
	MySqlParserVAR_SAMP                          = 281
	MySqlParserVARIANCE                          = 282
	MySqlParserCURRENT_DATE                      = 283
	MySqlParserCURRENT_TIME                      = 284
	MySqlParserCURRENT_TIMESTAMP                 = 285
	MySqlParserLOCALTIME                         = 286
	MySqlParserCURDATE                           = 287
	MySqlParserCURTIME                           = 288
	MySqlParserDATE_ADD                          = 289
	MySqlParserDATE_SUB                          = 290
	MySqlParserEXTRACT                           = 291
	MySqlParserLOCALTIMESTAMP                    = 292
	MySqlParserNOW                               = 293
	MySqlParserPOSITION                          = 294
	MySqlParserSUBSTR                            = 295
	MySqlParserSUBSTRING                         = 296
	MySqlParserSYSDATE                           = 297
	MySqlParserTRIM                              = 298
	MySqlParserUTC_DATE                          = 299
	MySqlParserUTC_TIME                          = 300
	MySqlParserUTC_TIMESTAMP                     = 301
	MySqlParserACCOUNT                           = 302
	MySqlParserACTION                            = 303
	MySqlParserAFTER                             = 304
	MySqlParserAGGREGATE                         = 305
	MySqlParserALGORITHM                         = 306
	MySqlParserANY                               = 307
	MySqlParserAT                                = 308
	MySqlParserAUTHORS                           = 309
	MySqlParserAUTOCOMMIT                        = 310
	MySqlParserAUTOEXTEND_SIZE                   = 311
	MySqlParserAUTO_INCREMENT                    = 312
	MySqlParserAVG_ROW_LENGTH                    = 313
	MySqlParserBEGIN                             = 314
	MySqlParserBINLOG                            = 315
	MySqlParserBIT                               = 316
	MySqlParserBLOCK                             = 317
	MySqlParserBOOL                              = 318
	MySqlParserBOOLEAN                           = 319
	MySqlParserBTREE                             = 320
	MySqlParserCACHE                             = 321
	MySqlParserCASCADED                          = 322
	MySqlParserCHAIN                             = 323
	MySqlParserCHANGED                           = 324
	MySqlParserCHANNEL                           = 325
	MySqlParserCHECKSUM                          = 326
	MySqlParserPAGE_CHECKSUM                     = 327
	MySqlParserCIPHER                            = 328
	MySqlParserCLASS_ORIGIN                      = 329
	MySqlParserCLIENT                            = 330
	MySqlParserCLOSE                             = 331
	MySqlParserCOALESCE                          = 332
	MySqlParserCODE                              = 333
	MySqlParserCOLUMNS                           = 334
	MySqlParserCOLUMN_FORMAT                     = 335
	MySqlParserCOLUMN_NAME                       = 336
	MySqlParserCOMMENT                           = 337
	MySqlParserCOMMIT                            = 338
	MySqlParserCOMPACT                           = 339
	MySqlParserCOMPLETION                        = 340
	MySqlParserCOMPRESSED                        = 341
	MySqlParserCOMPRESSION                       = 342
	MySqlParserCONCURRENT                        = 343
	MySqlParserCONNECTION                        = 344
	MySqlParserCONSISTENT                        = 345
	MySqlParserCONSTRAINT_CATALOG                = 346
	MySqlParserCONSTRAINT_SCHEMA                 = 347
	MySqlParserCONSTRAINT_NAME                   = 348
	MySqlParserCONTAINS                          = 349
	MySqlParserCONTEXT                           = 350
	MySqlParserCONTRIBUTORS                      = 351
	MySqlParserCOPY                              = 352
	MySqlParserCPU                               = 353
	MySqlParserCURSOR_NAME                       = 354
	MySqlParserDATA                              = 355
	MySqlParserDATAFILE                          = 356
	MySqlParserDEALLOCATE                        = 357
	MySqlParserDEFAULT_AUTH                      = 358
	MySqlParserDEFINER                           = 359
	MySqlParserDELAY_KEY_WRITE                   = 360
	MySqlParserDES_KEY_FILE                      = 361
	MySqlParserDIRECTORY                         = 362
	MySqlParserDISABLE                           = 363
	MySqlParserDISCARD                           = 364
	MySqlParserDISK                              = 365
	MySqlParserDO                                = 366
	MySqlParserDUMPFILE                          = 367
	MySqlParserDUPLICATE                         = 368
	MySqlParserDYNAMIC                           = 369
	MySqlParserENABLE                            = 370
	MySqlParserENCRYPTION                        = 371
	MySqlParserEND                               = 372
	MySqlParserENDS                              = 373
	MySqlParserENGINE                            = 374
	MySqlParserENGINES                           = 375
	MySqlParserERROR                             = 376
	MySqlParserERRORS                            = 377
	MySqlParserESCAPE                            = 378
	MySqlParserEVEN                              = 379
	MySqlParserEVENT                             = 380
	MySqlParserEVENTS                            = 381
	MySqlParserEVERY                             = 382
	MySqlParserEXCHANGE                          = 383
	MySqlParserEXCLUSIVE                         = 384
	MySqlParserEXPIRE                            = 385
	MySqlParserEXPORT                            = 386
	MySqlParserEXTENDED                          = 387
	MySqlParserEXTENT_SIZE                       = 388
	MySqlParserFAST                              = 389
	MySqlParserFAULTS                            = 390
	MySqlParserFIELDS                            = 391
	MySqlParserFILE_BLOCK_SIZE                   = 392
	MySqlParserFILTER                            = 393
	MySqlParserFIRST                             = 394
	MySqlParserFIXED                             = 395
	MySqlParserFLUSH                             = 396
	MySqlParserFOLLOWS                           = 397
	MySqlParserFOUND                             = 398
	MySqlParserFULL                              = 399
	MySqlParserFUNCTION                          = 400
	MySqlParserGENERAL                           = 401
	MySqlParserGLOBAL                            = 402
	MySqlParserGRANTS                            = 403
	MySqlParserGROUP_REPLICATION                 = 404
	MySqlParserHANDLER                           = 405
	MySqlParserHASH                              = 406
	MySqlParserHELP                              = 407
	MySqlParserHOST                              = 408
	MySqlParserHOSTS                             = 409
	MySqlParserIDENTIFIED                        = 410
	MySqlParserIGNORE_SERVER_IDS                 = 411
	MySqlParserIMPORT                            = 412
	MySqlParserINDEXES                           = 413
	MySqlParserINITIAL_SIZE                      = 414
	MySqlParserINPLACE                           = 415
	MySqlParserINSERT_METHOD                     = 416
	MySqlParserINSTALL                           = 417
	MySqlParserINSTANCE                          = 418
	MySqlParserINVISIBLE                         = 419
	MySqlParserINVOKER                           = 420
	MySqlParserIO                                = 421
	MySqlParserIO_THREAD                         = 422
	MySqlParserIPC                               = 423
	MySqlParserISOLATION                         = 424
	MySqlParserISSUER                            = 425
	MySqlParserJSON                              = 426
	MySqlParserKEY_BLOCK_SIZE                    = 427
	MySqlParserLANGUAGE                          = 428
	MySqlParserLAST                              = 429
	MySqlParserLEAVES                            = 430
	MySqlParserLESS                              = 431
	MySqlParserLEVEL                             = 432
	MySqlParserLIST                              = 433
	MySqlParserLOCAL                             = 434
	MySqlParserLOGFILE                           = 435
	MySqlParserLOGS                              = 436
	MySqlParserMASTER                            = 437
	MySqlParserMASTER_AUTO_POSITION              = 438
	MySqlParserMASTER_CONNECT_RETRY              = 439
	MySqlParserMASTER_DELAY                      = 440
	MySqlParserMASTER_HEARTBEAT_PERIOD           = 441
	MySqlParserMASTER_HOST                       = 442
	MySqlParserMASTER_LOG_FILE                   = 443
	MySqlParserMASTER_LOG_POS                    = 444
	MySqlParserMASTER_PASSWORD                   = 445
	MySqlParserMASTER_PORT                       = 446
	MySqlParserMASTER_RETRY_COUNT                = 447
	MySqlParserMASTER_SSL                        = 448
	MySqlParserMASTER_SSL_CA                     = 449
	MySqlParserMASTER_SSL_CAPATH                 = 450
	MySqlParserMASTER_SSL_CERT                   = 451
	MySqlParserMASTER_SSL_CIPHER                 = 452
	MySqlParserMASTER_SSL_CRL                    = 453
	MySqlParserMASTER_SSL_CRLPATH                = 454
	MySqlParserMASTER_SSL_KEY                    = 455
	MySqlParserMASTER_TLS_VERSION                = 456
	MySqlParserMASTER_USER                       = 457
	MySqlParserMAX_CONNECTIONS_PER_HOUR          = 458
	MySqlParserMAX_QUERIES_PER_HOUR              = 459
	MySqlParserMAX_ROWS                          = 460
	MySqlParserMAX_SIZE                          = 461
	MySqlParserMAX_UPDATES_PER_HOUR              = 462
	MySqlParserMAX_USER_CONNECTIONS              = 463
	MySqlParserMEDIUM                            = 464
	MySqlParserMEMBER                            = 465
	MySqlParserMERGE                             = 466
	MySqlParserMESSAGE_TEXT                      = 467
	MySqlParserMID                               = 468
	MySqlParserMIGRATE                           = 469
	MySqlParserMIN_ROWS                          = 470
	MySqlParserMODE                              = 471
	MySqlParserMODIFY                            = 472
	MySqlParserMUTEX                             = 473
	MySqlParserMYSQL                             = 474
	MySqlParserMYSQL_ERRNO                       = 475
	MySqlParserNAME                              = 476
	MySqlParserNAMES                             = 477
	MySqlParserNCHAR                             = 478
	MySqlParserNEVER                             = 479
	MySqlParserNEXT                              = 480
	MySqlParserNO                                = 481
	MySqlParserNODEGROUP                         = 482
	MySqlParserNONE                              = 483
	MySqlParserOFFLINE                           = 484
	MySqlParserOFFSET                            = 485
	MySqlParserOF                                = 486
	MySqlParserOJ                                = 487
	MySqlParserOLD_PASSWORD                      = 488
	MySqlParserONE                               = 489
	MySqlParserONLINE                            = 490
	MySqlParserONLY                              = 491
	MySqlParserOPEN                              = 492
	MySqlParserOPTIMIZER_COSTS                   = 493
	MySqlParserOPTIONS                           = 494
	MySqlParserOWNER                             = 495
	MySqlParserPACK_KEYS                         = 496
	MySqlParserPAGE                              = 497
	MySqlParserPARSER                            = 498
	MySqlParserPARTIAL                           = 499
	MySqlParserPARTITIONING                      = 500
	MySqlParserPARTITIONS                        = 501
	MySqlParserPASSWORD                          = 502
	MySqlParserPHASE                             = 503
	MySqlParserPLUGIN                            = 504
	MySqlParserPLUGIN_DIR                        = 505
	MySqlParserPLUGINS                           = 506
	MySqlParserPORT                              = 507
	MySqlParserPRECEDES                          = 508
	MySqlParserPREPARE                           = 509
	MySqlParserPRESERVE                          = 510
	MySqlParserPREV                              = 511
	MySqlParserPROCESSLIST                       = 512
	MySqlParserPROFILE                           = 513
	MySqlParserPROFILES                          = 514
	MySqlParserPROXY                             = 515
	MySqlParserQUERY                             = 516
	MySqlParserQUICK                             = 517
	MySqlParserREBUILD                           = 518
	MySqlParserRECOVER                           = 519
	MySqlParserREDO_BUFFER_SIZE                  = 520
	MySqlParserREDUNDANT                         = 521
	MySqlParserRELAY                             = 522
	MySqlParserRELAY_LOG_FILE                    = 523
	MySqlParserRELAY_LOG_POS                     = 524
	MySqlParserRELAYLOG                          = 525
	MySqlParserREMOVE                            = 526
	MySqlParserREORGANIZE                        = 527
	MySqlParserREPAIR                            = 528
	MySqlParserREPLICATE_DO_DB                   = 529
	MySqlParserREPLICATE_DO_TABLE                = 530
	MySqlParserREPLICATE_IGNORE_DB               = 531
	MySqlParserREPLICATE_IGNORE_TABLE            = 532
	MySqlParserREPLICATE_REWRITE_DB              = 533
	MySqlParserREPLICATE_WILD_DO_TABLE           = 534
	MySqlParserREPLICATE_WILD_IGNORE_TABLE       = 535
	MySqlParserREPLICATION                       = 536
	MySqlParserRESET                             = 537
	MySqlParserRESUME                            = 538
	MySqlParserRETURNED_SQLSTATE                 = 539
	MySqlParserRETURNING                         = 540
	MySqlParserRETURNS                           = 541
	MySqlParserROLE                              = 542
	MySqlParserROLLBACK                          = 543
	MySqlParserROLLUP                            = 544
	MySqlParserROTATE                            = 545
	MySqlParserROW                               = 546
	MySqlParserROWS                              = 547
	MySqlParserROW_FORMAT                        = 548
	MySqlParserSAVEPOINT                         = 549
	MySqlParserSCHEDULE                          = 550
	MySqlParserSECURITY                          = 551
	MySqlParserSERVER                            = 552
	MySqlParserSESSION                           = 553
	MySqlParserSHARE                             = 554
	MySqlParserSHARED                            = 555
	MySqlParserSIGNED                            = 556
	MySqlParserSIMPLE                            = 557
	MySqlParserSLAVE                             = 558
	MySqlParserSLOW                              = 559
	MySqlParserSNAPSHOT                          = 560
	MySqlParserSOCKET                            = 561
	MySqlParserSOME                              = 562
	MySqlParserSONAME                            = 563
	MySqlParserSOUNDS                            = 564
	MySqlParserSOURCE                            = 565
	MySqlParserSQL_AFTER_GTIDS                   = 566
	MySqlParserSQL_AFTER_MTS_GAPS                = 567
	MySqlParserSQL_BEFORE_GTIDS                  = 568
	MySqlParserSQL_BUFFER_RESULT                 = 569
	MySqlParserSQL_CACHE                         = 570
	MySqlParserSQL_NO_CACHE                      = 571
	MySqlParserSQL_THREAD                        = 572
	MySqlParserSTART                             = 573
	MySqlParserSTARTS                            = 574
	MySqlParserSTATS_AUTO_RECALC                 = 575
	MySqlParserSTATS_PERSISTENT                  = 576
	MySqlParserSTATS_SAMPLE_PAGES                = 577
	MySqlParserSTATUS                            = 578
	MySqlParserSTOP                              = 579
	MySqlParserSTORAGE                           = 580
	MySqlParserSTORED                            = 581
	MySqlParserSTRING                            = 582
	MySqlParserSUBCLASS_ORIGIN                   = 583
	MySqlParserSUBJECT                           = 584
	MySqlParserSUBPARTITION                      = 585
	MySqlParserSUBPARTITIONS                     = 586
	MySqlParserSUSPEND                           = 587
	MySqlParserSWAPS                             = 588
	MySqlParserSWITCHES                          = 589
	MySqlParserTABLE_NAME                        = 590
	MySqlParserTABLESPACE                        = 591
	MySqlParserTEMPORARY                         = 592
	MySqlParserTEMPTABLE                         = 593
	MySqlParserTHAN                              = 594
	MySqlParserTRADITIONAL                       = 595
	MySqlParserTRANSACTION                       = 596
	MySqlParserTRANSACTIONAL                     = 597
	MySqlParserTRIGGERS                          = 598
	MySqlParserTRUNCATE                          = 599
	MySqlParserUNDEFINED                         = 600
	MySqlParserUNDOFILE                          = 601
	MySqlParserUNDO_BUFFER_SIZE                  = 602
	MySqlParserUNINSTALL                         = 603
	MySqlParserUNKNOWN                           = 604
	MySqlParserUNTIL                             = 605
	MySqlParserUPGRADE                           = 606
	MySqlParserUSER                              = 607
	MySqlParserUSE_FRM                           = 608
	MySqlParserUSER_RESOURCES                    = 609
	MySqlParserVALIDATION                        = 610
	MySqlParserVALUE                             = 611
	MySqlParserVARIABLES                         = 612
	MySqlParserVIEW                              = 613
	MySqlParserVIRTUAL                           = 614
	MySqlParserVISIBLE                           = 615
	MySqlParserWAIT                              = 616
	MySqlParserWARNINGS                          = 617
	MySqlParserWITHOUT                           = 618
	MySqlParserWORK                              = 619
	MySqlParserWRAPPER                           = 620
	MySqlParserX509                              = 621
	MySqlParserXA                                = 622
	MySqlParserXML                               = 623
	MySqlParserEUR                               = 624
	MySqlParserUSA                               = 625
	MySqlParserJIS                               = 626
	MySqlParserISO                               = 627
	MySqlParserINTERNAL                          = 628
	MySqlParserQUARTER                           = 629
	MySqlParserMONTH                             = 630
	MySqlParserDAY                               = 631
	MySqlParserHOUR                              = 632
	MySqlParserMINUTE                            = 633
	MySqlParserWEEK                              = 634
	MySqlParserSECOND                            = 635
	MySqlParserMICROSECOND                       = 636
	MySqlParserTABLES                            = 637
	MySqlParserROUTINE                           = 638
	MySqlParserEXECUTE                           = 639
	MySqlParserFILE                              = 640
	MySqlParserPROCESS                           = 641
	MySqlParserRELOAD                            = 642
	MySqlParserSHUTDOWN                          = 643
	MySqlParserSUPER                             = 644
	MySqlParserPRIVILEGES                        = 645
	MySqlParserAPPLICATION_PASSWORD_ADMIN        = 646
	MySqlParserAUDIT_ADMIN                       = 647
	MySqlParserBACKUP_ADMIN                      = 648
	MySqlParserBINLOG_ADMIN                      = 649
	MySqlParserBINLOG_ENCRYPTION_ADMIN           = 650
	MySqlParserCLONE_ADMIN                       = 651
	MySqlParserCONNECTION_ADMIN                  = 652
	MySqlParserENCRYPTION_KEY_ADMIN              = 653
	MySqlParserFIREWALL_ADMIN                    = 654
	MySqlParserFIREWALL_USER                     = 655
	MySqlParserFLUSH_OPTIMIZER_COSTS             = 656
	MySqlParserFLUSH_STATUS                      = 657
	MySqlParserFLUSH_TABLES                      = 658
	MySqlParserFLUSH_USER_RESOURCES              = 659
	MySqlParserGROUP_REPLICATION_ADMIN           = 660
	MySqlParserINNODB_REDO_LOG_ARCHIVE           = 661
	MySqlParserINNODB_REDO_LOG_ENABLE            = 662
	MySqlParserNDB_STORED_USER                   = 663
	MySqlParserPERSIST_RO_VARIABLES_ADMIN        = 664
	MySqlParserREPLICATION_APPLIER               = 665
	MySqlParserREPLICATION_SLAVE_ADMIN           = 666
	MySqlParserRESOURCE_GROUP_ADMIN              = 667
	MySqlParserRESOURCE_GROUP_USER               = 668
	MySqlParserROLE_ADMIN                        = 669
	MySqlParserSERVICE_CONNECTION_ADMIN          = 670
	MySqlParserSESSION_VARIABLES_ADMIN           = 671
	MySqlParserSET_USER_ID                       = 672
	MySqlParserSHOW_ROUTINE                      = 673
	MySqlParserSYSTEM_VARIABLES_ADMIN            = 674
	MySqlParserTABLE_ENCRYPTION_ADMIN            = 675
	MySqlParserVERSION_TOKEN_ADMIN               = 676
	MySqlParserXA_RECOVER_ADMIN                  = 677
	MySqlParserARMSCII8                          = 678
	MySqlParserASCII                             = 679
	MySqlParserBIG5                              = 680
	MySqlParserCP1250                            = 681
	MySqlParserCP1251                            = 682
	MySqlParserCP1256                            = 683
	MySqlParserCP1257                            = 684
	MySqlParserCP850                             = 685
	MySqlParserCP852                             = 686
	MySqlParserCP866                             = 687
	MySqlParserCP932                             = 688
	MySqlParserDEC8                              = 689
	MySqlParserEUCJPMS                           = 690
	MySqlParserEUCKR                             = 691
	MySqlParserGB2312                            = 692
	MySqlParserGBK                               = 693
	MySqlParserGEOSTD8                           = 694
	MySqlParserGREEK                             = 695
	MySqlParserHEBREW                            = 696
	MySqlParserHP8                               = 697
	MySqlParserKEYBCS2                           = 698
	MySqlParserKOI8R                             = 699
	MySqlParserKOI8U                             = 700
	MySqlParserLATIN1                            = 701
	MySqlParserLATIN2                            = 702
	MySqlParserLATIN5                            = 703
	MySqlParserLATIN7                            = 704
	MySqlParserMACCE                             = 705
	MySqlParserMACROMAN                          = 706
	MySqlParserSJIS                              = 707
	MySqlParserSWE7                              = 708
	MySqlParserTIS620                            = 709
	MySqlParserUCS2                              = 710
	MySqlParserUJIS                              = 711
	MySqlParserUTF16                             = 712
	MySqlParserUTF16LE                           = 713
	MySqlParserUTF32                             = 714
	MySqlParserUTF8                              = 715
	MySqlParserUTF8MB3                           = 716
	MySqlParserUTF8MB4                           = 717
	MySqlParserARCHIVE                           = 718
	MySqlParserBLACKHOLE                         = 719
	MySqlParserCSV                               = 720
	MySqlParserFEDERATED                         = 721
	MySqlParserINNODB                            = 722
	MySqlParserMEMORY                            = 723
	MySqlParserMRG_MYISAM                        = 724
	MySqlParserMYISAM                            = 725
	MySqlParserNDB                               = 726
	MySqlParserNDBCLUSTER                        = 727
	MySqlParserPERFORMANCE_SCHEMA                = 728
	MySqlParserTOKUDB                            = 729
	MySqlParserREPEATABLE                        = 730
	MySqlParserCOMMITTED                         = 731
	MySqlParserUNCOMMITTED                       = 732
	MySqlParserSERIALIZABLE                      = 733
	MySqlParserGEOMETRYCOLLECTION                = 734
	MySqlParserGEOMCOLLECTION                    = 735
	MySqlParserGEOMETRY                          = 736
	MySqlParserLINESTRING                        = 737
	MySqlParserMULTILINESTRING                   = 738
	MySqlParserMULTIPOINT                        = 739
	MySqlParserMULTIPOLYGON                      = 740
	MySqlParserPOINT                             = 741
	MySqlParserPOLYGON                           = 742
	MySqlParserABS                               = 743
	MySqlParserACOS                              = 744
	MySqlParserADDDATE                           = 745
	MySqlParserADDTIME                           = 746
	MySqlParserAES_DECRYPT                       = 747
	MySqlParserAES_ENCRYPT                       = 748
	MySqlParserAREA                              = 749
	MySqlParserASBINARY                          = 750
	MySqlParserASIN                              = 751
	MySqlParserASTEXT                            = 752
	MySqlParserASWKB                             = 753
	MySqlParserASWKT                             = 754
	MySqlParserASYMMETRIC_DECRYPT                = 755
	MySqlParserASYMMETRIC_DERIVE                 = 756
	MySqlParserASYMMETRIC_ENCRYPT                = 757
	MySqlParserASYMMETRIC_SIGN                   = 758
	MySqlParserASYMMETRIC_VERIFY                 = 759
	MySqlParserATAN                              = 760
	MySqlParserATAN2                             = 761
	MySqlParserBENCHMARK                         = 762
	MySqlParserBIN                               = 763
	MySqlParserBIT_COUNT                         = 764
	MySqlParserBIT_LENGTH                        = 765
	MySqlParserBUFFER                            = 766
	MySqlParserCATALOG_NAME                      = 767
	MySqlParserCEIL                              = 768
	MySqlParserCEILING                           = 769
	MySqlParserCENTROID                          = 770
	MySqlParserCHARACTER_LENGTH                  = 771
	MySqlParserCHARSET                           = 772
	MySqlParserCHAR_LENGTH                       = 773
	MySqlParserCOERCIBILITY                      = 774
	MySqlParserCOLLATION                         = 775
	MySqlParserCOMPRESS                          = 776
	MySqlParserCONCAT                            = 777
	MySqlParserCONCAT_WS                         = 778
	MySqlParserCONNECTION_ID                     = 779
	MySqlParserCONV                              = 780
	MySqlParserCONVERT_TZ                        = 781
	MySqlParserCOS                               = 782
	MySqlParserCOT                               = 783
	MySqlParserCRC32                             = 784
	MySqlParserCREATE_ASYMMETRIC_PRIV_KEY        = 785
	MySqlParserCREATE_ASYMMETRIC_PUB_KEY         = 786
	MySqlParserCREATE_DH_PARAMETERS              = 787
	MySqlParserCREATE_DIGEST                     = 788
	MySqlParserCROSSES                           = 789
	MySqlParserDATEDIFF                          = 790
	MySqlParserDATE_FORMAT                       = 791
	MySqlParserDAYNAME                           = 792
	MySqlParserDAYOFMONTH                        = 793
	MySqlParserDAYOFWEEK                         = 794
	MySqlParserDAYOFYEAR                         = 795
	MySqlParserDECODE                            = 796
	MySqlParserDEGREES                           = 797
	MySqlParserDES_DECRYPT                       = 798
	MySqlParserDES_ENCRYPT                       = 799
	MySqlParserDIMENSION                         = 800
	MySqlParserDISJOINT                          = 801
	MySqlParserELT                               = 802
	MySqlParserENCODE                            = 803
	MySqlParserENCRYPT                           = 804
	MySqlParserENDPOINT                          = 805
	MySqlParserENVELOPE                          = 806
	MySqlParserEQUALS                            = 807
	MySqlParserEXP                               = 808
	MySqlParserEXPORT_SET                        = 809
	MySqlParserEXTERIORRING                      = 810
	MySqlParserEXTRACTVALUE                      = 811
	MySqlParserFIELD                             = 812
	MySqlParserFIND_IN_SET                       = 813
	MySqlParserFLOOR                             = 814
	MySqlParserFORMAT                            = 815
	MySqlParserFOUND_ROWS                        = 816
	MySqlParserFROM_BASE64                       = 817
	MySqlParserFROM_DAYS                         = 818
	MySqlParserFROM_UNIXTIME                     = 819
	MySqlParserGEOMCOLLFROMTEXT                  = 820
	MySqlParserGEOMCOLLFROMWKB                   = 821
	MySqlParserGEOMETRYCOLLECTIONFROMTEXT        = 822
	MySqlParserGEOMETRYCOLLECTIONFROMWKB         = 823
	MySqlParserGEOMETRYFROMTEXT                  = 824
	MySqlParserGEOMETRYFROMWKB                   = 825
	MySqlParserGEOMETRYN                         = 826
	MySqlParserGEOMETRYTYPE                      = 827
	MySqlParserGEOMFROMTEXT                      = 828
	MySqlParserGEOMFROMWKB                       = 829
	MySqlParserGET_FORMAT                        = 830
	MySqlParserGET_LOCK                          = 831
	MySqlParserGLENGTH                           = 832
	MySqlParserGREATEST                          = 833
	MySqlParserGTID_SUBSET                       = 834
	MySqlParserGTID_SUBTRACT                     = 835
	MySqlParserHEX                               = 836
	MySqlParserIFNULL                            = 837
	MySqlParserINET6_ATON                        = 838
	MySqlParserINET6_NTOA                        = 839
	MySqlParserINET_ATON                         = 840
	MySqlParserINET_NTOA                         = 841
	MySqlParserINSTR                             = 842
	MySqlParserINTERIORRINGN                     = 843
	MySqlParserINTERSECTS                        = 844
	MySqlParserISCLOSED                          = 845
	MySqlParserISEMPTY                           = 846
	MySqlParserISNULL                            = 847
	MySqlParserISSIMPLE                          = 848
	MySqlParserIS_FREE_LOCK                      = 849
	MySqlParserIS_IPV4                           = 850
	MySqlParserIS_IPV4_COMPAT                    = 851
	MySqlParserIS_IPV4_MAPPED                    = 852
	MySqlParserIS_IPV6                           = 853
	MySqlParserIS_USED_LOCK                      = 854
	MySqlParserLAST_INSERT_ID                    = 855
	MySqlParserLCASE                             = 856
	MySqlParserLEAST                             = 857
	MySqlParserLENGTH                            = 858
	MySqlParserLINEFROMTEXT                      = 859
	MySqlParserLINEFROMWKB                       = 860
	MySqlParserLINESTRINGFROMTEXT                = 861
	MySqlParserLINESTRINGFROMWKB                 = 862
	MySqlParserLN                                = 863
	MySqlParserLOAD_FILE                         = 864
	MySqlParserLOCATE                            = 865
	MySqlParserLOG                               = 866
	MySqlParserLOG10                             = 867
	MySqlParserLOG2                              = 868
	MySqlParserLOWER                             = 869
	MySqlParserLPAD                              = 870
	MySqlParserLTRIM                             = 871
	MySqlParserMAKEDATE                          = 872
	MySqlParserMAKETIME                          = 873
	MySqlParserMAKE_SET                          = 874
	MySqlParserMASTER_POS_WAIT                   = 875
	MySqlParserMBRCONTAINS                       = 876
	MySqlParserMBRDISJOINT                       = 877
	MySqlParserMBREQUAL                          = 878
	MySqlParserMBRINTERSECTS                     = 879
	MySqlParserMBROVERLAPS                       = 880
	MySqlParserMBRTOUCHES                        = 881
	MySqlParserMBRWITHIN                         = 882
	MySqlParserMD5                               = 883
	MySqlParserMLINEFROMTEXT                     = 884
	MySqlParserMLINEFROMWKB                      = 885
	MySqlParserMONTHNAME                         = 886
	MySqlParserMPOINTFROMTEXT                    = 887
	MySqlParserMPOINTFROMWKB                     = 888
	MySqlParserMPOLYFROMTEXT                     = 889
	MySqlParserMPOLYFROMWKB                      = 890
	MySqlParserMULTILINESTRINGFROMTEXT           = 891
	MySqlParserMULTILINESTRINGFROMWKB            = 892
	MySqlParserMULTIPOINTFROMTEXT                = 893
	MySqlParserMULTIPOINTFROMWKB                 = 894
	MySqlParserMULTIPOLYGONFROMTEXT              = 895
	MySqlParserMULTIPOLYGONFROMWKB               = 896
	MySqlParserNAME_CONST                        = 897
	MySqlParserNULLIF                            = 898
	MySqlParserNUMGEOMETRIES                     = 899
	MySqlParserNUMINTERIORRINGS                  = 900
	MySqlParserNUMPOINTS                         = 901
	MySqlParserOCT                               = 902
	MySqlParserOCTET_LENGTH                      = 903
	MySqlParserORD                               = 904
	MySqlParserOVERLAPS                          = 905
	MySqlParserPERIOD_ADD                        = 906
	MySqlParserPERIOD_DIFF                       = 907
	MySqlParserPI                                = 908
	MySqlParserPOINTFROMTEXT                     = 909
	MySqlParserPOINTFROMWKB                      = 910
	MySqlParserPOINTN                            = 911
	MySqlParserPOLYFROMTEXT                      = 912
	MySqlParserPOLYFROMWKB                       = 913
	MySqlParserPOLYGONFROMTEXT                   = 914
	MySqlParserPOLYGONFROMWKB                    = 915
	MySqlParserPOW                               = 916
	MySqlParserPOWER                             = 917
	MySqlParserQUOTE                             = 918
	MySqlParserRADIANS                           = 919
	MySqlParserRAND                              = 920
	MySqlParserRANDOM_BYTES                      = 921
	MySqlParserRELEASE_LOCK                      = 922
	MySqlParserREVERSE                           = 923
	MySqlParserROUND                             = 924
	MySqlParserROW_COUNT                         = 925
	MySqlParserRPAD                              = 926
	MySqlParserRTRIM                             = 927
	MySqlParserSEC_TO_TIME                       = 928
	MySqlParserSESSION_USER                      = 929
	MySqlParserSHA                               = 930
	MySqlParserSHA1                              = 931
	MySqlParserSHA2                              = 932
	MySqlParserSCHEMA_NAME                       = 933
	MySqlParserSIGN                              = 934
	MySqlParserSIN                               = 935
	MySqlParserSLEEP                             = 936
	MySqlParserSOUNDEX                           = 937
	MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS       = 938
	MySqlParserSQRT                              = 939
	MySqlParserSRID                              = 940
	MySqlParserSTARTPOINT                        = 941
	MySqlParserSTRCMP                            = 942
	MySqlParserSTR_TO_DATE                       = 943
	MySqlParserST_AREA                           = 944
	MySqlParserST_ASBINARY                       = 945
	MySqlParserST_ASTEXT                         = 946
	MySqlParserST_ASWKB                          = 947
	MySqlParserST_ASWKT                          = 948
	MySqlParserST_BUFFER                         = 949
	MySqlParserST_CENTROID                       = 950
	MySqlParserST_CONTAINS                       = 951
	MySqlParserST_CROSSES                        = 952
	MySqlParserST_DIFFERENCE                     = 953
	MySqlParserST_DIMENSION                      = 954
	MySqlParserST_DISJOINT                       = 955
	MySqlParserST_DISTANCE                       = 956
	MySqlParserST_ENDPOINT                       = 957
	MySqlParserST_ENVELOPE                       = 958
	MySqlParserST_EQUALS                         = 959
	MySqlParserST_EXTERIORRING                   = 960
	MySqlParserST_GEOMCOLLFROMTEXT               = 961
	MySqlParserST_GEOMCOLLFROMTXT                = 962
	MySqlParserST_GEOMCOLLFROMWKB                = 963
	MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT     = 964
	MySqlParserST_GEOMETRYCOLLECTIONFROMWKB      = 965
	MySqlParserST_GEOMETRYFROMTEXT               = 966
	MySqlParserST_GEOMETRYFROMWKB                = 967
	MySqlParserST_GEOMETRYN                      = 968
	MySqlParserST_GEOMETRYTYPE                   = 969
	MySqlParserST_GEOMFROMTEXT                   = 970
	MySqlParserST_GEOMFROMWKB                    = 971
	MySqlParserST_INTERIORRINGN                  = 972
	MySqlParserST_INTERSECTION                   = 973
	MySqlParserST_INTERSECTS                     = 974
	MySqlParserST_ISCLOSED                       = 975
	MySqlParserST_ISEMPTY                        = 976
	MySqlParserST_ISSIMPLE                       = 977
	MySqlParserST_LINEFROMTEXT                   = 978
	MySqlParserST_LINEFROMWKB                    = 979
	MySqlParserST_LINESTRINGFROMTEXT             = 980
	MySqlParserST_LINESTRINGFROMWKB              = 981
	MySqlParserST_NUMGEOMETRIES                  = 982
	MySqlParserST_NUMINTERIORRING                = 983
	MySqlParserST_NUMINTERIORRINGS               = 984
	MySqlParserST_NUMPOINTS                      = 985
	MySqlParserST_OVERLAPS                       = 986
	MySqlParserST_POINTFROMTEXT                  = 987
	MySqlParserST_POINTFROMWKB                   = 988
	MySqlParserST_POINTN                         = 989
	MySqlParserST_POLYFROMTEXT                   = 990
	MySqlParserST_POLYFROMWKB                    = 991
	MySqlParserST_POLYGONFROMTEXT                = 992
	MySqlParserST_POLYGONFROMWKB                 = 993
	MySqlParserST_SRID                           = 994
	MySqlParserST_STARTPOINT                     = 995
	MySqlParserST_SYMDIFFERENCE                  = 996
	MySqlParserST_TOUCHES                        = 997
	MySqlParserST_UNION                          = 998
	MySqlParserST_WITHIN                         = 999
	MySqlParserST_X                              = 1000
	MySqlParserST_Y                              = 1001
	MySqlParserSUBDATE                           = 1002
	MySqlParserSUBSTRING_INDEX                   = 1003
	MySqlParserSUBTIME                           = 1004
	MySqlParserSYSTEM_USER                       = 1005
	MySqlParserTAN                               = 1006
	MySqlParserTIMEDIFF                          = 1007
	MySqlParserTIMESTAMPADD                      = 1008
	MySqlParserTIMESTAMPDIFF                     = 1009
	MySqlParserTIME_FORMAT                       = 1010
	MySqlParserTIME_TO_SEC                       = 1011
	MySqlParserTOUCHES                           = 1012
	MySqlParserTO_BASE64                         = 1013
	MySqlParserTO_DAYS                           = 1014
	MySqlParserTO_SECONDS                        = 1015
	MySqlParserUCASE                             = 1016
	MySqlParserUNCOMPRESS                        = 1017
	MySqlParserUNCOMPRESSED_LENGTH               = 1018
	MySqlParserUNHEX                             = 1019
	MySqlParserUNIX_TIMESTAMP                    = 1020
	MySqlParserUPDATEXML                         = 1021
	MySqlParserUPPER                             = 1022
	MySqlParserUUID                              = 1023
	MySqlParserUUID_SHORT                        = 1024
	MySqlParserVALIDATE_PASSWORD_STRENGTH        = 1025
	MySqlParserVERSION                           = 1026
	MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 1027
	MySqlParserWEEKDAY                           = 1028
	MySqlParserWEEKOFYEAR                        = 1029
	MySqlParserWEIGHT_STRING                     = 1030
	MySqlParserWITHIN                            = 1031
	MySqlParserYEARWEEK                          = 1032
	MySqlParserY_FUNCTION                        = 1033
	MySqlParserX_FUNCTION                        = 1034
	MySqlParserVAR_ASSIGN                        = 1035
	MySqlParserPLUS_ASSIGN                       = 1036
	MySqlParserMINUS_ASSIGN                      = 1037
	MySqlParserMULT_ASSIGN                       = 1038
	MySqlParserDIV_ASSIGN                        = 1039
	MySqlParserMOD_ASSIGN                        = 1040
	MySqlParserAND_ASSIGN                        = 1041
	MySqlParserXOR_ASSIGN                        = 1042
	MySqlParserOR_ASSIGN                         = 1043
	MySqlParserSTAR                              = 1044
	MySqlParserDIVIDE                            = 1045
	MySqlParserMODULE                            = 1046
	MySqlParserPLUS                              = 1047
	MySqlParserMINUSMINUS                        = 1048
	MySqlParserMINUS                             = 1049
	MySqlParserDIV                               = 1050
	MySqlParserMOD                               = 1051
	MySqlParserEQUAL_SYMBOL                      = 1052
	MySqlParserGREATER_SYMBOL                    = 1053
	MySqlParserLESS_SYMBOL                       = 1054
	MySqlParserEXCLAMATION_SYMBOL                = 1055
	MySqlParserBIT_NOT_OP                        = 1056
	MySqlParserBIT_OR_OP                         = 1057
	MySqlParserBIT_AND_OP                        = 1058
	MySqlParserBIT_XOR_OP                        = 1059
	MySqlParserDOT                               = 1060
	MySqlParserLR_BRACKET                        = 1061
	MySqlParserRR_BRACKET                        = 1062
	MySqlParserCOMMA                             = 1063
	MySqlParserSEMI                              = 1064
	MySqlParserAT_SIGN                           = 1065
	MySqlParserZERO_DECIMAL                      = 1066
	MySqlParserONE_DECIMAL                       = 1067
	MySqlParserTWO_DECIMAL                       = 1068
	MySqlParserSINGLE_QUOTE_SYMB                 = 1069
	MySqlParserDOUBLE_QUOTE_SYMB                 = 1070
	MySqlParserREVERSE_QUOTE_SYMB                = 1071
	MySqlParserCOLON_SYMB                        = 1072
	MySqlParserCHARSET_REVERSE_QOUTE_STRING      = 1073
	MySqlParserFILESIZE_LITERAL                  = 1074
	MySqlParserSTART_NATIONAL_STRING_LITERAL     = 1075
	MySqlParserSTRING_LITERAL                    = 1076
	MySqlParserDECIMAL_LITERAL                   = 1077
	MySqlParserHEXADECIMAL_LITERAL               = 1078
	MySqlParserREAL_LITERAL                      = 1079
	MySqlParserNULL_SPEC_LITERAL                 = 1080
	MySqlParserBIT_STRING                        = 1081
	MySqlParserSTRING_CHARSET_NAME               = 1082
	MySqlParserDOT_ID                            = 1083
	MySqlParserID                                = 1084
	MySqlParserREVERSE_QUOTE_ID                  = 1085
	MySqlParserSTRING_USER_NAME                  = 1086
	MySqlParserIP_ADDRESS                        = 1087
	MySqlParserLOCAL_ID                          = 1088
	MySqlParserGLOBAL_ID                         = 1089
	MySqlParserERROR_RECONGNIGION                = 1090
)

// MySqlParser rules.
const (
	MySqlParserRULE_root                                = 0
	MySqlParserRULE_sqlStatements                       = 1
	MySqlParserRULE_sqlStatement                        = 2
	MySqlParserRULE_emptyStatement                      = 3
	MySqlParserRULE_ddlStatement                        = 4
	MySqlParserRULE_dmlStatement                        = 5
	MySqlParserRULE_transactionStatement                = 6
	MySqlParserRULE_replicationStatement                = 7
	MySqlParserRULE_preparedStatement                   = 8
	MySqlParserRULE_compoundStatement                   = 9
	MySqlParserRULE_administrationStatement             = 10
	MySqlParserRULE_utilityStatement                    = 11
	MySqlParserRULE_createDatabase                      = 12
	MySqlParserRULE_createEvent                         = 13
	MySqlParserRULE_createIndex                         = 14
	MySqlParserRULE_createLogfileGroup                  = 15
	MySqlParserRULE_createProcedure                     = 16
	MySqlParserRULE_createFunction                      = 17
	MySqlParserRULE_createServer                        = 18
	MySqlParserRULE_createTable                         = 19
	MySqlParserRULE_createTablespaceInnodb              = 20
	MySqlParserRULE_createTablespaceNdb                 = 21
	MySqlParserRULE_createTrigger                       = 22
	MySqlParserRULE_createView                          = 23
	MySqlParserRULE_createDatabaseOption                = 24
	MySqlParserRULE_ownerStatement                      = 25
	MySqlParserRULE_scheduleExpression                  = 26
	MySqlParserRULE_timestampValue                      = 27
	MySqlParserRULE_intervalExpr                        = 28
	MySqlParserRULE_intervalType                        = 29
	MySqlParserRULE_enableType                          = 30
	MySqlParserRULE_indexType                           = 31
	MySqlParserRULE_indexOption                         = 32
	MySqlParserRULE_procedureParameter                  = 33
	MySqlParserRULE_functionParameter                   = 34
	MySqlParserRULE_routineOption                       = 35
	MySqlParserRULE_serverOption                        = 36
	MySqlParserRULE_createDefinitions                   = 37
	MySqlParserRULE_createDefinition                    = 38
	MySqlParserRULE_columnDefinition                    = 39
	MySqlParserRULE_columnConstraint                    = 40
	MySqlParserRULE_tableConstraint                     = 41
	MySqlParserRULE_referenceDefinition                 = 42
	MySqlParserRULE_referenceAction                     = 43
	MySqlParserRULE_referenceControlType                = 44
	MySqlParserRULE_indexColumnDefinition               = 45
	MySqlParserRULE_tableOption                         = 46
	MySqlParserRULE_tablespaceStorage                   = 47
	MySqlParserRULE_partitionDefinitions                = 48
	MySqlParserRULE_partitionFunctionDefinition         = 49
	MySqlParserRULE_subpartitionFunctionDefinition      = 50
	MySqlParserRULE_partitionDefinition                 = 51
	MySqlParserRULE_partitionDefinerAtom                = 52
	MySqlParserRULE_partitionDefinerVector              = 53
	MySqlParserRULE_subpartitionDefinition              = 54
	MySqlParserRULE_partitionOption                     = 55
	MySqlParserRULE_alterDatabase                       = 56
	MySqlParserRULE_alterEvent                          = 57
	MySqlParserRULE_alterFunction                       = 58
	MySqlParserRULE_alterInstance                       = 59
	MySqlParserRULE_alterLogfileGroup                   = 60
	MySqlParserRULE_alterProcedure                      = 61
	MySqlParserRULE_alterServer                         = 62
	MySqlParserRULE_alterTable                          = 63
	MySqlParserRULE_alterTablespace                     = 64
	MySqlParserRULE_alterView                           = 65
	MySqlParserRULE_alterSpecification                  = 66
	MySqlParserRULE_dropDatabase                        = 67
	MySqlParserRULE_dropEvent                           = 68
	MySqlParserRULE_dropIndex                           = 69
	MySqlParserRULE_dropLogfileGroup                    = 70
	MySqlParserRULE_dropProcedure                       = 71
	MySqlParserRULE_dropFunction                        = 72
	MySqlParserRULE_dropServer                          = 73
	MySqlParserRULE_dropTable                           = 74
	MySqlParserRULE_dropTablespace                      = 75
	MySqlParserRULE_dropTrigger                         = 76
	MySqlParserRULE_dropView                            = 77
	MySqlParserRULE_renameTable                         = 78
	MySqlParserRULE_renameTableClause                   = 79
	MySqlParserRULE_truncateTable                       = 80
	MySqlParserRULE_callStatement                       = 81
	MySqlParserRULE_deleteStatement                     = 82
	MySqlParserRULE_doStatement                         = 83
	MySqlParserRULE_handlerStatement                    = 84
	MySqlParserRULE_insertStatement                     = 85
	MySqlParserRULE_loadDataStatement                   = 86
	MySqlParserRULE_loadXmlStatement                    = 87
	MySqlParserRULE_replaceStatement                    = 88
	MySqlParserRULE_selectStatement                     = 89
	MySqlParserRULE_updateStatement                     = 90
	MySqlParserRULE_insertStatementValue                = 91
	MySqlParserRULE_updatedElement                      = 92
	MySqlParserRULE_assignmentField                     = 93
	MySqlParserRULE_lockClause                          = 94
	MySqlParserRULE_singleDeleteStatement               = 95
	MySqlParserRULE_multipleDeleteStatement             = 96
	MySqlParserRULE_handlerOpenStatement                = 97
	MySqlParserRULE_handlerReadIndexStatement           = 98
	MySqlParserRULE_handlerReadStatement                = 99
	MySqlParserRULE_handlerCloseStatement               = 100
	MySqlParserRULE_singleUpdateStatement               = 101
	MySqlParserRULE_multipleUpdateStatement             = 102
	MySqlParserRULE_orderByClause                       = 103
	MySqlParserRULE_orderByExpression                   = 104
	MySqlParserRULE_tableSources                        = 105
	MySqlParserRULE_tableSource                         = 106
	MySqlParserRULE_tableSourceItem                     = 107
	MySqlParserRULE_indexHint                           = 108
	MySqlParserRULE_indexHintType                       = 109
	MySqlParserRULE_joinPart                            = 110
	MySqlParserRULE_queryExpression                     = 111
	MySqlParserRULE_queryExpressionNointo               = 112
	MySqlParserRULE_querySpecification                  = 113
	MySqlParserRULE_querySpecificationNointo            = 114
	MySqlParserRULE_unionParenthesis                    = 115
	MySqlParserRULE_unionStatement                      = 116
	MySqlParserRULE_selectSpec                          = 117
	MySqlParserRULE_selectElements                      = 118
	MySqlParserRULE_selectElement                       = 119
	MySqlParserRULE_selectIntoExpression                = 120
	MySqlParserRULE_selectFieldsInto                    = 121
	MySqlParserRULE_selectLinesInto                     = 122
	MySqlParserRULE_fromClause                          = 123
	MySqlParserRULE_groupByClause                       = 124
	MySqlParserRULE_havingClause                        = 125
	MySqlParserRULE_groupByItem                         = 126
	MySqlParserRULE_limitClause                         = 127
	MySqlParserRULE_limitClauseAtom                     = 128
	MySqlParserRULE_startTransaction                    = 129
	MySqlParserRULE_beginWork                           = 130
	MySqlParserRULE_commitWork                          = 131
	MySqlParserRULE_rollbackWork                        = 132
	MySqlParserRULE_savepointStatement                  = 133
	MySqlParserRULE_rollbackStatement                   = 134
	MySqlParserRULE_releaseStatement                    = 135
	MySqlParserRULE_lockTables                          = 136
	MySqlParserRULE_unlockTables                        = 137
	MySqlParserRULE_setAutocommitStatement              = 138
	MySqlParserRULE_setTransactionStatement             = 139
	MySqlParserRULE_transactionMode                     = 140
	MySqlParserRULE_lockTableElement                    = 141
	MySqlParserRULE_lockAction                          = 142
	MySqlParserRULE_transactionOption                   = 143
	MySqlParserRULE_transactionLevel                    = 144
	MySqlParserRULE_changeMaster                        = 145
	MySqlParserRULE_changeReplicationFilter             = 146
	MySqlParserRULE_purgeBinaryLogs                     = 147
	MySqlParserRULE_resetMaster                         = 148
	MySqlParserRULE_resetSlave                          = 149
	MySqlParserRULE_startSlave                          = 150
	MySqlParserRULE_stopSlave                           = 151
	MySqlParserRULE_startGroupReplication               = 152
	MySqlParserRULE_stopGroupReplication                = 153
	MySqlParserRULE_masterOption                        = 154
	MySqlParserRULE_stringMasterOption                  = 155
	MySqlParserRULE_decimalMasterOption                 = 156
	MySqlParserRULE_boolMasterOption                    = 157
	MySqlParserRULE_channelOption                       = 158
	MySqlParserRULE_replicationFilter                   = 159
	MySqlParserRULE_tablePair                           = 160
	MySqlParserRULE_threadType                          = 161
	MySqlParserRULE_untilOption                         = 162
	MySqlParserRULE_connectionOption                    = 163
	MySqlParserRULE_gtuidSet                            = 164
	MySqlParserRULE_xaStartTransaction                  = 165
	MySqlParserRULE_xaEndTransaction                    = 166
	MySqlParserRULE_xaPrepareStatement                  = 167
	MySqlParserRULE_xaCommitWork                        = 168
	MySqlParserRULE_xaRollbackWork                      = 169
	MySqlParserRULE_xaRecoverWork                       = 170
	MySqlParserRULE_prepareStatement                    = 171
	MySqlParserRULE_executeStatement                    = 172
	MySqlParserRULE_deallocatePrepare                   = 173
	MySqlParserRULE_routineBody                         = 174
	MySqlParserRULE_blockStatement                      = 175
	MySqlParserRULE_caseStatement                       = 176
	MySqlParserRULE_ifStatement                         = 177
	MySqlParserRULE_iterateStatement                    = 178
	MySqlParserRULE_leaveStatement                      = 179
	MySqlParserRULE_loopStatement                       = 180
	MySqlParserRULE_repeatStatement                     = 181
	MySqlParserRULE_returnStatement                     = 182
	MySqlParserRULE_whileStatement                      = 183
	MySqlParserRULE_cursorStatement                     = 184
	MySqlParserRULE_declareVariable                     = 185
	MySqlParserRULE_declareCondition                    = 186
	MySqlParserRULE_declareCursor                       = 187
	MySqlParserRULE_declareHandler                      = 188
	MySqlParserRULE_handlerConditionValue               = 189
	MySqlParserRULE_procedureSqlStatement               = 190
	MySqlParserRULE_caseAlternative                     = 191
	MySqlParserRULE_elifAlternative                     = 192
	MySqlParserRULE_alterUser                           = 193
	MySqlParserRULE_createUser                          = 194
	MySqlParserRULE_dropUser                            = 195
	MySqlParserRULE_grantStatement                      = 196
	MySqlParserRULE_grantProxy                          = 197
	MySqlParserRULE_renameUser                          = 198
	MySqlParserRULE_revokeStatement                     = 199
	MySqlParserRULE_revokeProxy                         = 200
	MySqlParserRULE_setPasswordStatement                = 201
	MySqlParserRULE_userSpecification                   = 202
	MySqlParserRULE_userAuthOption                      = 203
	MySqlParserRULE_tlsOption                           = 204
	MySqlParserRULE_userResourceOption                  = 205
	MySqlParserRULE_userPasswordOption                  = 206
	MySqlParserRULE_userLockOption                      = 207
	MySqlParserRULE_privelegeClause                     = 208
	MySqlParserRULE_privilege                           = 209
	MySqlParserRULE_privilegeLevel                      = 210
	MySqlParserRULE_renameUserClause                    = 211
	MySqlParserRULE_analyzeTable                        = 212
	MySqlParserRULE_checkTable                          = 213
	MySqlParserRULE_checksumTable                       = 214
	MySqlParserRULE_optimizeTable                       = 215
	MySqlParserRULE_repairTable                         = 216
	MySqlParserRULE_checkTableOption                    = 217
	MySqlParserRULE_createUdfunction                    = 218
	MySqlParserRULE_installPlugin                       = 219
	MySqlParserRULE_uninstallPlugin                     = 220
	MySqlParserRULE_setStatement                        = 221
	MySqlParserRULE_showStatement                       = 222
	MySqlParserRULE_variableClause                      = 223
	MySqlParserRULE_showCommonEntity                    = 224
	MySqlParserRULE_showFilter                          = 225
	MySqlParserRULE_showGlobalInfoClause                = 226
	MySqlParserRULE_showSchemaEntity                    = 227
	MySqlParserRULE_showProfileType                     = 228
	MySqlParserRULE_binlogStatement                     = 229
	MySqlParserRULE_cacheIndexStatement                 = 230
	MySqlParserRULE_flushStatement                      = 231
	MySqlParserRULE_killStatement                       = 232
	MySqlParserRULE_loadIndexIntoCache                  = 233
	MySqlParserRULE_resetStatement                      = 234
	MySqlParserRULE_shutdownStatement                   = 235
	MySqlParserRULE_tableIndexes                        = 236
	MySqlParserRULE_flushOption                         = 237
	MySqlParserRULE_flushTableOption                    = 238
	MySqlParserRULE_loadedTableIndexes                  = 239
	MySqlParserRULE_simpleDescribeStatement             = 240
	MySqlParserRULE_fullDescribeStatement               = 241
	MySqlParserRULE_helpStatement                       = 242
	MySqlParserRULE_useStatement                        = 243
	MySqlParserRULE_signalStatement                     = 244
	MySqlParserRULE_resignalStatement                   = 245
	MySqlParserRULE_signalConditionInformation          = 246
	MySqlParserRULE_diagnosticsStatement                = 247
	MySqlParserRULE_diagnosticsConditionInformationName = 248
	MySqlParserRULE_describeObjectClause                = 249
	MySqlParserRULE_fullId                              = 250
	MySqlParserRULE_tableName                           = 251
	MySqlParserRULE_fullColumnName                      = 252
	MySqlParserRULE_indexColumnName                     = 253
	MySqlParserRULE_userName                            = 254
	MySqlParserRULE_mysqlVariable                       = 255
	MySqlParserRULE_charsetName                         = 256
	MySqlParserRULE_collationName                       = 257
	MySqlParserRULE_engineName                          = 258
	MySqlParserRULE_uuidSet                             = 259
	MySqlParserRULE_xid                                 = 260
	MySqlParserRULE_xuidStringId                        = 261
	MySqlParserRULE_authPlugin                          = 262
	MySqlParserRULE_uid                                 = 263
	MySqlParserRULE_simpleId                            = 264
	MySqlParserRULE_dottedId                            = 265
	MySqlParserRULE_decimalLiteral                      = 266
	MySqlParserRULE_fileSizeLiteral                     = 267
	MySqlParserRULE_stringLiteral                       = 268
	MySqlParserRULE_booleanLiteral                      = 269
	MySqlParserRULE_hexadecimalLiteral                  = 270
	MySqlParserRULE_nullNotnull                         = 271
	MySqlParserRULE_constant                            = 272
	MySqlParserRULE_dataType                            = 273
	MySqlParserRULE_collectionOptions                   = 274
	MySqlParserRULE_convertedDataType                   = 275
	MySqlParserRULE_lengthOneDimension                  = 276
	MySqlParserRULE_lengthTwoDimension                  = 277
	MySqlParserRULE_lengthTwoOptionalDimension          = 278
	MySqlParserRULE_uidList                             = 279
	MySqlParserRULE_tables                              = 280
	MySqlParserRULE_indexColumnNames                    = 281
	MySqlParserRULE_expressions                         = 282
	MySqlParserRULE_expressionsWithDefaults             = 283
	MySqlParserRULE_constants                           = 284
	MySqlParserRULE_simpleStrings                       = 285
	MySqlParserRULE_userVariables                       = 286
	MySqlParserRULE_defaultValue                        = 287
	MySqlParserRULE_currentTimestamp                    = 288
	MySqlParserRULE_expressionOrDefault                 = 289
	MySqlParserRULE_ifExists                            = 290
	MySqlParserRULE_ifNotExists                         = 291
	MySqlParserRULE_functionCall                        = 292
	MySqlParserRULE_specificFunction                    = 293
	MySqlParserRULE_caseFuncAlternative                 = 294
	MySqlParserRULE_levelsInWeightString                = 295
	MySqlParserRULE_levelInWeightListElement            = 296
	MySqlParserRULE_aggregateWindowedFunction           = 297
	MySqlParserRULE_scalarFunctionName                  = 298
	MySqlParserRULE_passwordFunctionClause              = 299
	MySqlParserRULE_functionArgs                        = 300
	MySqlParserRULE_functionArg                         = 301
	MySqlParserRULE_expression                          = 302
	MySqlParserRULE_predicate                           = 303
	MySqlParserRULE_expressionAtom                      = 304
	MySqlParserRULE_unaryOperator                       = 305
	MySqlParserRULE_comparisonOperator                  = 306
	MySqlParserRULE_logicalOperator                     = 307
	MySqlParserRULE_bitOperator                         = 308
	MySqlParserRULE_mathOperator                        = 309
	MySqlParserRULE_jsonOperator                        = 310
	MySqlParserRULE_charsetNameBase                     = 311
	MySqlParserRULE_transactionLevelBase                = 312
	MySqlParserRULE_privilegesBase                      = 313
	MySqlParserRULE_intervalTypeBase                    = 314
	MySqlParserRULE_dataTypeBase                        = 315
	MySqlParserRULE_keywordsCanBeId                     = 316
	MySqlParserRULE_functionNameBase                    = 317
)

// IRootContext is an interface to support dynamic dispatch.
type IRootContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRootContext differentiates from other interfaces.
	IsRootContext()
}

type RootContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRootContext() *RootContext {
	var p = new(RootContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_root
	return p
}

func (*RootContext) IsRootContext() {}

func NewRootContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RootContext {
	var p = new(RootContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_root

	return p
}

func (s *RootContext) GetParser() antlr.Parser { return s.parser }

func (s *RootContext) EOF() antlr.TerminalNode {
	return s.GetToken(MySqlParserEOF, 0)
}

func (s *RootContext) SqlStatements() ISqlStatementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISqlStatementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISqlStatementsContext)
}

func (s *RootContext) MINUSMINUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUSMINUS, 0)
}

func (s *RootContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RootContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RootContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRoot(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Root() (localctx IRootContext) {
	localctx = NewRootContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, MySqlParserRULE_root)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(637)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserALTER)|(1<<MySqlParserANALYZE)|(1<<MySqlParserCALL)|(1<<MySqlParserCHANGE)|(1<<MySqlParserCHECK)|(1<<MySqlParserCREATE))) != 0) || (((_la-40)&-(0x1f+1)) == 0 && ((1<<uint((_la-40)))&((1<<(MySqlParserDELETE-40))|(1<<(MySqlParserDESC-40))|(1<<(MySqlParserDESCRIBE-40))|(1<<(MySqlParserDROP-40))|(1<<(MySqlParserEXPLAIN-40))|(1<<(MySqlParserGET-40))|(1<<(MySqlParserGRANT-40)))) != 0) || (((_la-77)&-(0x1f+1)) == 0 && ((1<<uint((_la-77)))&((1<<(MySqlParserINSERT-77))|(1<<(MySqlParserKILL-77))|(1<<(MySqlParserLOAD-77))|(1<<(MySqlParserLOCK-77)))) != 0) || (((_la-109)&-(0x1f+1)) == 0 && ((1<<uint((_la-109)))&((1<<(MySqlParserOPTIMIZE-109))|(1<<(MySqlParserPURGE-109))|(1<<(MySqlParserRELEASE-109))|(1<<(MySqlParserRENAME-109))|(1<<(MySqlParserREPLACE-109))|(1<<(MySqlParserRESIGNAL-109))|(1<<(MySqlParserREVOKE-109))|(1<<(MySqlParserSELECT-109))|(1<<(MySqlParserSET-109)))) != 0) || (((_la-142)&-(0x1f+1)) == 0 && ((1<<uint((_la-142)))&((1<<(MySqlParserSHOW-142))|(1<<(MySqlParserSIGNAL-142))|(1<<(MySqlParserUNLOCK-142))|(1<<(MySqlParserUPDATE-142))|(1<<(MySqlParserUSE-142)))) != 0) || (((_la-314)&-(0x1f+1)) == 0 && ((1<<uint((_la-314)))&((1<<(MySqlParserBEGIN-314))|(1<<(MySqlParserBINLOG-314))|(1<<(MySqlParserCACHE-314))|(1<<(MySqlParserCHECKSUM-314))|(1<<(MySqlParserCOMMIT-314)))) != 0) || _la == MySqlParserDEALLOCATE || _la == MySqlParserDO || (((_la-396)&-(0x1f+1)) == 0 && ((1<<uint((_la-396)))&((1<<(MySqlParserFLUSH-396))|(1<<(MySqlParserHANDLER-396))|(1<<(MySqlParserHELP-396))|(1<<(MySqlParserINSTALL-396)))) != 0) || (((_la-509)&-(0x1f+1)) == 0 && ((1<<uint((_la-509)))&((1<<(MySqlParserPREPARE-509))|(1<<(MySqlParserREPAIR-509))|(1<<(MySqlParserRESET-509)))) != 0) || (((_la-543)&-(0x1f+1)) == 0 && ((1<<uint((_la-543)))&((1<<(MySqlParserROLLBACK-543))|(1<<(MySqlParserSAVEPOINT-543))|(1<<(MySqlParserSTART-543)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(MySqlParserSTOP-579))|(1<<(MySqlParserTRUNCATE-579))|(1<<(MySqlParserUNINSTALL-579)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserSHUTDOWN-622)))) != 0) || _la == MySqlParserLR_BRACKET || _la == MySqlParserSEMI {
		{
			p.SetState(636)
			p.SqlStatements()
		}

	}
	p.SetState(640)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMINUSMINUS {
		{
			p.SetState(639)
			p.Match(MySqlParserMINUSMINUS)
		}

	}
	{
		p.SetState(642)
		p.Match(MySqlParserEOF)
	}

	return localctx
}

// ISqlStatementsContext is an interface to support dynamic dispatch.
type ISqlStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSqlStatementsContext differentiates from other interfaces.
	IsSqlStatementsContext()
}

type SqlStatementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlStatementsContext() *SqlStatementsContext {
	var p = new(SqlStatementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_sqlStatements
	return p
}

func (*SqlStatementsContext) IsSqlStatementsContext() {}

func NewSqlStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlStatementsContext {
	var p = new(SqlStatementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_sqlStatements

	return p
}

func (s *SqlStatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlStatementsContext) AllSqlStatement() []ISqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISqlStatementContext)(nil)).Elem())
	var tst = make([]ISqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISqlStatementContext)
		}
	}

	return tst
}

func (s *SqlStatementsContext) SqlStatement(i int) ISqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISqlStatementContext)
}

func (s *SqlStatementsContext) AllEmptyStatement() []IEmptyStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEmptyStatementContext)(nil)).Elem())
	var tst = make([]IEmptyStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEmptyStatementContext)
		}
	}

	return tst
}

func (s *SqlStatementsContext) EmptyStatement(i int) IEmptyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmptyStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEmptyStatementContext)
}

func (s *SqlStatementsContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSEMI)
}

func (s *SqlStatementsContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSEMI, i)
}

func (s *SqlStatementsContext) AllMINUSMINUS() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserMINUSMINUS)
}

func (s *SqlStatementsContext) MINUSMINUS(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUSMINUS, i)
}

func (s *SqlStatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlStatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqlStatementsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSqlStatements(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SqlStatements() (localctx ISqlStatementsContext) {
	localctx = NewSqlStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, MySqlParserRULE_sqlStatements)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(654)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(652)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserLR_BRACKET:
				{
					p.SetState(644)
					p.SqlStatement()
				}
				p.SetState(646)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserMINUSMINUS {
					{
						p.SetState(645)
						p.Match(MySqlParserMINUSMINUS)
					}

				}
				p.SetState(649)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(648)
						p.Match(MySqlParserSEMI)
					}

				}

			case MySqlParserSEMI:
				{
					p.SetState(651)
					p.EmptyStatement()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(656)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())
	}
	p.SetState(665)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserLR_BRACKET:
		{
			p.SetState(657)
			p.SqlStatement()
		}
		p.SetState(662)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) == 1 {
			p.SetState(659)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserMINUSMINUS {
				{
					p.SetState(658)
					p.Match(MySqlParserMINUSMINUS)
				}

			}
			{
				p.SetState(661)
				p.Match(MySqlParserSEMI)
			}

		}

	case MySqlParserSEMI:
		{
			p.SetState(664)
			p.EmptyStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISqlStatementContext is an interface to support dynamic dispatch.
type ISqlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSqlStatementContext differentiates from other interfaces.
	IsSqlStatementContext()
}

type SqlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlStatementContext() *SqlStatementContext {
	var p = new(SqlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_sqlStatement
	return p
}

func (*SqlStatementContext) IsSqlStatementContext() {}

func NewSqlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlStatementContext {
	var p = new(SqlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_sqlStatement

	return p
}

func (s *SqlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlStatementContext) DdlStatement() IDdlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdlStatementContext)
}

func (s *SqlStatementContext) DmlStatement() IDmlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDmlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDmlStatementContext)
}

func (s *SqlStatementContext) TransactionStatement() ITransactionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransactionStatementContext)
}

func (s *SqlStatementContext) ReplicationStatement() IReplicationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplicationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplicationStatementContext)
}

func (s *SqlStatementContext) PreparedStatement() IPreparedStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPreparedStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPreparedStatementContext)
}

func (s *SqlStatementContext) AdministrationStatement() IAdministrationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdministrationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdministrationStatementContext)
}

func (s *SqlStatementContext) UtilityStatement() IUtilityStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUtilityStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUtilityStatementContext)
}

func (s *SqlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSqlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SqlStatement() (localctx ISqlStatementContext) {
	localctx = NewSqlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, MySqlParserRULE_sqlStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(674)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(667)
			p.DdlStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(668)
			p.DmlStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(669)
			p.TransactionStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(670)
			p.ReplicationStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(671)
			p.PreparedStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(672)
			p.AdministrationStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(673)
			p.UtilityStatement()
		}

	}

	return localctx
}

// IEmptyStatementContext is an interface to support dynamic dispatch.
type IEmptyStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmptyStatementContext differentiates from other interfaces.
	IsEmptyStatementContext()
}

type EmptyStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmptyStatementContext() *EmptyStatementContext {
	var p = new(EmptyStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_emptyStatement
	return p
}

func (*EmptyStatementContext) IsEmptyStatementContext() {}

func NewEmptyStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmptyStatementContext {
	var p = new(EmptyStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_emptyStatement

	return p
}

func (s *EmptyStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EmptyStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MySqlParserSEMI, 0)
}

func (s *EmptyStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmptyStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EmptyStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitEmptyStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) EmptyStatement() (localctx IEmptyStatementContext) {
	localctx = NewEmptyStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, MySqlParserRULE_emptyStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(676)
		p.Match(MySqlParserSEMI)
	}

	return localctx
}

// IDdlStatementContext is an interface to support dynamic dispatch.
type IDdlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDdlStatementContext differentiates from other interfaces.
	IsDdlStatementContext()
}

type DdlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDdlStatementContext() *DdlStatementContext {
	var p = new(DdlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_ddlStatement
	return p
}

func (*DdlStatementContext) IsDdlStatementContext() {}

func NewDdlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DdlStatementContext {
	var p = new(DdlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_ddlStatement

	return p
}

func (s *DdlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DdlStatementContext) CreateDatabase() ICreateDatabaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDatabaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateDatabaseContext)
}

func (s *DdlStatementContext) CreateEvent() ICreateEventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateEventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateEventContext)
}

func (s *DdlStatementContext) CreateIndex() ICreateIndexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateIndexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateIndexContext)
}

func (s *DdlStatementContext) CreateLogfileGroup() ICreateLogfileGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateLogfileGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateLogfileGroupContext)
}

func (s *DdlStatementContext) CreateProcedure() ICreateProcedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateProcedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateProcedureContext)
}

func (s *DdlStatementContext) CreateFunction() ICreateFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateFunctionContext)
}

func (s *DdlStatementContext) CreateServer() ICreateServerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateServerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateServerContext)
}

func (s *DdlStatementContext) CreateTable() ICreateTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTableContext)
}

func (s *DdlStatementContext) CreateTablespaceInnodb() ICreateTablespaceInnodbContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTablespaceInnodbContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTablespaceInnodbContext)
}

func (s *DdlStatementContext) CreateTablespaceNdb() ICreateTablespaceNdbContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTablespaceNdbContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTablespaceNdbContext)
}

func (s *DdlStatementContext) CreateTrigger() ICreateTriggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateTriggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateTriggerContext)
}

func (s *DdlStatementContext) CreateView() ICreateViewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateViewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateViewContext)
}

func (s *DdlStatementContext) AlterDatabase() IAlterDatabaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterDatabaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterDatabaseContext)
}

func (s *DdlStatementContext) AlterEvent() IAlterEventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterEventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterEventContext)
}

func (s *DdlStatementContext) AlterFunction() IAlterFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterFunctionContext)
}

func (s *DdlStatementContext) AlterInstance() IAlterInstanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterInstanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterInstanceContext)
}

func (s *DdlStatementContext) AlterLogfileGroup() IAlterLogfileGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterLogfileGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterLogfileGroupContext)
}

func (s *DdlStatementContext) AlterProcedure() IAlterProcedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterProcedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterProcedureContext)
}

func (s *DdlStatementContext) AlterServer() IAlterServerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterServerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterServerContext)
}

func (s *DdlStatementContext) AlterTable() IAlterTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTableContext)
}

func (s *DdlStatementContext) AlterTablespace() IAlterTablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterTablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterTablespaceContext)
}

func (s *DdlStatementContext) AlterView() IAlterViewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterViewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterViewContext)
}

func (s *DdlStatementContext) DropDatabase() IDropDatabaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropDatabaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropDatabaseContext)
}

func (s *DdlStatementContext) DropEvent() IDropEventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropEventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropEventContext)
}

func (s *DdlStatementContext) DropIndex() IDropIndexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropIndexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropIndexContext)
}

func (s *DdlStatementContext) DropLogfileGroup() IDropLogfileGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropLogfileGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropLogfileGroupContext)
}

func (s *DdlStatementContext) DropProcedure() IDropProcedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropProcedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropProcedureContext)
}

func (s *DdlStatementContext) DropFunction() IDropFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropFunctionContext)
}

func (s *DdlStatementContext) DropServer() IDropServerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropServerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropServerContext)
}

func (s *DdlStatementContext) DropTable() IDropTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropTableContext)
}

func (s *DdlStatementContext) DropTablespace() IDropTablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropTablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropTablespaceContext)
}

func (s *DdlStatementContext) DropTrigger() IDropTriggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropTriggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropTriggerContext)
}

func (s *DdlStatementContext) DropView() IDropViewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropViewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropViewContext)
}

func (s *DdlStatementContext) RenameTable() IRenameTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRenameTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRenameTableContext)
}

func (s *DdlStatementContext) TruncateTable() ITruncateTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruncateTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITruncateTableContext)
}

func (s *DdlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DdlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DdlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDdlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DdlStatement() (localctx IDdlStatementContext) {
	localctx = NewDdlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, MySqlParserRULE_ddlStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(713)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(678)
			p.CreateDatabase()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(679)
			p.CreateEvent()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(680)
			p.CreateIndex()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(681)
			p.CreateLogfileGroup()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(682)
			p.CreateProcedure()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(683)
			p.CreateFunction()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(684)
			p.CreateServer()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(685)
			p.CreateTable()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(686)
			p.CreateTablespaceInnodb()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(687)
			p.CreateTablespaceNdb()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(688)
			p.CreateTrigger()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(689)
			p.CreateView()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(690)
			p.AlterDatabase()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(691)
			p.AlterEvent()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(692)
			p.AlterFunction()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(693)
			p.AlterInstance()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(694)
			p.AlterLogfileGroup()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(695)
			p.AlterProcedure()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(696)
			p.AlterServer()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(697)
			p.AlterTable()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(698)
			p.AlterTablespace()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(699)
			p.AlterView()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(700)
			p.DropDatabase()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(701)
			p.DropEvent()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(702)
			p.DropIndex()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(703)
			p.DropLogfileGroup()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(704)
			p.DropProcedure()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(705)
			p.DropFunction()
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(706)
			p.DropServer()
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(707)
			p.DropTable()
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(708)
			p.DropTablespace()
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(709)
			p.DropTrigger()
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(710)
			p.DropView()
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(711)
			p.RenameTable()
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(712)
			p.TruncateTable()
		}

	}

	return localctx
}

// IDmlStatementContext is an interface to support dynamic dispatch.
type IDmlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDmlStatementContext differentiates from other interfaces.
	IsDmlStatementContext()
}

type DmlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDmlStatementContext() *DmlStatementContext {
	var p = new(DmlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dmlStatement
	return p
}

func (*DmlStatementContext) IsDmlStatementContext() {}

func NewDmlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DmlStatementContext {
	var p = new(DmlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dmlStatement

	return p
}

func (s *DmlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DmlStatementContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *DmlStatementContext) InsertStatement() IInsertStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertStatementContext)
}

func (s *DmlStatementContext) UpdateStatement() IUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateStatementContext)
}

func (s *DmlStatementContext) DeleteStatement() IDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteStatementContext)
}

func (s *DmlStatementContext) ReplaceStatement() IReplaceStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplaceStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplaceStatementContext)
}

func (s *DmlStatementContext) CallStatement() ICallStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallStatementContext)
}

func (s *DmlStatementContext) LoadDataStatement() ILoadDataStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadDataStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoadDataStatementContext)
}

func (s *DmlStatementContext) LoadXmlStatement() ILoadXmlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadXmlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoadXmlStatementContext)
}

func (s *DmlStatementContext) DoStatement() IDoStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDoStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDoStatementContext)
}

func (s *DmlStatementContext) HandlerStatement() IHandlerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerStatementContext)
}

func (s *DmlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DmlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DmlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDmlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DmlStatement() (localctx IDmlStatementContext) {
	localctx = NewDmlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, MySqlParserRULE_dmlStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(725)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(715)
			p.SelectStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(716)
			p.InsertStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(717)
			p.UpdateStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(718)
			p.DeleteStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(719)
			p.ReplaceStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(720)
			p.CallStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(721)
			p.LoadDataStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(722)
			p.LoadXmlStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(723)
			p.DoStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(724)
			p.HandlerStatement()
		}

	}

	return localctx
}

// ITransactionStatementContext is an interface to support dynamic dispatch.
type ITransactionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionStatementContext differentiates from other interfaces.
	IsTransactionStatementContext()
}

type TransactionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionStatementContext() *TransactionStatementContext {
	var p = new(TransactionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transactionStatement
	return p
}

func (*TransactionStatementContext) IsTransactionStatementContext() {}

func NewTransactionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionStatementContext {
	var p = new(TransactionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transactionStatement

	return p
}

func (s *TransactionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionStatementContext) StartTransaction() IStartTransactionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStartTransactionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStartTransactionContext)
}

func (s *TransactionStatementContext) BeginWork() IBeginWorkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBeginWorkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBeginWorkContext)
}

func (s *TransactionStatementContext) CommitWork() ICommitWorkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommitWorkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommitWorkContext)
}

func (s *TransactionStatementContext) RollbackWork() IRollbackWorkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollbackWorkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollbackWorkContext)
}

func (s *TransactionStatementContext) SavepointStatement() ISavepointStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISavepointStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISavepointStatementContext)
}

func (s *TransactionStatementContext) RollbackStatement() IRollbackStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollbackStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollbackStatementContext)
}

func (s *TransactionStatementContext) ReleaseStatement() IReleaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReleaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReleaseStatementContext)
}

func (s *TransactionStatementContext) LockTables() ILockTablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockTablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockTablesContext)
}

func (s *TransactionStatementContext) UnlockTables() IUnlockTablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnlockTablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnlockTablesContext)
}

func (s *TransactionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTransactionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TransactionStatement() (localctx ITransactionStatementContext) {
	localctx = NewTransactionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, MySqlParserRULE_transactionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(736)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(727)
			p.StartTransaction()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(728)
			p.BeginWork()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(729)
			p.CommitWork()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(730)
			p.RollbackWork()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(731)
			p.SavepointStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(732)
			p.RollbackStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(733)
			p.ReleaseStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(734)
			p.LockTables()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(735)
			p.UnlockTables()
		}

	}

	return localctx
}

// IReplicationStatementContext is an interface to support dynamic dispatch.
type IReplicationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplicationStatementContext differentiates from other interfaces.
	IsReplicationStatementContext()
}

type ReplicationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplicationStatementContext() *ReplicationStatementContext {
	var p = new(ReplicationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_replicationStatement
	return p
}

func (*ReplicationStatementContext) IsReplicationStatementContext() {}

func NewReplicationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplicationStatementContext {
	var p = new(ReplicationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_replicationStatement

	return p
}

func (s *ReplicationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplicationStatementContext) ChangeMaster() IChangeMasterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChangeMasterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChangeMasterContext)
}

func (s *ReplicationStatementContext) ChangeReplicationFilter() IChangeReplicationFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChangeReplicationFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChangeReplicationFilterContext)
}

func (s *ReplicationStatementContext) PurgeBinaryLogs() IPurgeBinaryLogsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPurgeBinaryLogsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPurgeBinaryLogsContext)
}

func (s *ReplicationStatementContext) ResetMaster() IResetMasterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResetMasterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResetMasterContext)
}

func (s *ReplicationStatementContext) ResetSlave() IResetSlaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResetSlaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResetSlaveContext)
}

func (s *ReplicationStatementContext) StartSlave() IStartSlaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStartSlaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStartSlaveContext)
}

func (s *ReplicationStatementContext) StopSlave() IStopSlaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStopSlaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStopSlaveContext)
}

func (s *ReplicationStatementContext) StartGroupReplication() IStartGroupReplicationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStartGroupReplicationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStartGroupReplicationContext)
}

func (s *ReplicationStatementContext) StopGroupReplication() IStopGroupReplicationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStopGroupReplicationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStopGroupReplicationContext)
}

func (s *ReplicationStatementContext) XaStartTransaction() IXaStartTransactionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXaStartTransactionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXaStartTransactionContext)
}

func (s *ReplicationStatementContext) XaEndTransaction() IXaEndTransactionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXaEndTransactionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXaEndTransactionContext)
}

func (s *ReplicationStatementContext) XaPrepareStatement() IXaPrepareStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXaPrepareStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXaPrepareStatementContext)
}

func (s *ReplicationStatementContext) XaCommitWork() IXaCommitWorkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXaCommitWorkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXaCommitWorkContext)
}

func (s *ReplicationStatementContext) XaRollbackWork() IXaRollbackWorkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXaRollbackWorkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXaRollbackWorkContext)
}

func (s *ReplicationStatementContext) XaRecoverWork() IXaRecoverWorkContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXaRecoverWorkContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXaRecoverWorkContext)
}

func (s *ReplicationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplicationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplicationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReplicationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ReplicationStatement() (localctx IReplicationStatementContext) {
	localctx = NewReplicationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, MySqlParserRULE_replicationStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(753)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(738)
			p.ChangeMaster()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(739)
			p.ChangeReplicationFilter()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(740)
			p.PurgeBinaryLogs()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(741)
			p.ResetMaster()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(742)
			p.ResetSlave()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(743)
			p.StartSlave()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(744)
			p.StopSlave()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(745)
			p.StartGroupReplication()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(746)
			p.StopGroupReplication()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(747)
			p.XaStartTransaction()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(748)
			p.XaEndTransaction()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(749)
			p.XaPrepareStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(750)
			p.XaCommitWork()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(751)
			p.XaRollbackWork()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(752)
			p.XaRecoverWork()
		}

	}

	return localctx
}

// IPreparedStatementContext is an interface to support dynamic dispatch.
type IPreparedStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPreparedStatementContext differentiates from other interfaces.
	IsPreparedStatementContext()
}

type PreparedStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPreparedStatementContext() *PreparedStatementContext {
	var p = new(PreparedStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_preparedStatement
	return p
}

func (*PreparedStatementContext) IsPreparedStatementContext() {}

func NewPreparedStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PreparedStatementContext {
	var p = new(PreparedStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_preparedStatement

	return p
}

func (s *PreparedStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PreparedStatementContext) PrepareStatement() IPrepareStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrepareStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrepareStatementContext)
}

func (s *PreparedStatementContext) ExecuteStatement() IExecuteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecuteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecuteStatementContext)
}

func (s *PreparedStatementContext) DeallocatePrepare() IDeallocatePrepareContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeallocatePrepareContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeallocatePrepareContext)
}

func (s *PreparedStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PreparedStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PreparedStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPreparedStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) PreparedStatement() (localctx IPreparedStatementContext) {
	localctx = NewPreparedStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, MySqlParserRULE_preparedStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(758)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserPREPARE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(755)
			p.PrepareStatement()
		}

	case MySqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(756)
			p.ExecuteStatement()
		}

	case MySqlParserDROP, MySqlParserDEALLOCATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(757)
			p.DeallocatePrepare()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICompoundStatementContext is an interface to support dynamic dispatch.
type ICompoundStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompoundStatementContext differentiates from other interfaces.
	IsCompoundStatementContext()
}

type CompoundStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompoundStatementContext() *CompoundStatementContext {
	var p = new(CompoundStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_compoundStatement
	return p
}

func (*CompoundStatementContext) IsCompoundStatementContext() {}

func NewCompoundStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompoundStatementContext {
	var p = new(CompoundStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_compoundStatement

	return p
}

func (s *CompoundStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CompoundStatementContext) BlockStatement() IBlockStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *CompoundStatementContext) CaseStatement() ICaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseStatementContext)
}

func (s *CompoundStatementContext) IfStatement() IIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *CompoundStatementContext) LeaveStatement() ILeaveStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeaveStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeaveStatementContext)
}

func (s *CompoundStatementContext) LoopStatement() ILoopStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopStatementContext)
}

func (s *CompoundStatementContext) RepeatStatement() IRepeatStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRepeatStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRepeatStatementContext)
}

func (s *CompoundStatementContext) WhileStatement() IWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *CompoundStatementContext) IterateStatement() IIterateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterateStatementContext)
}

func (s *CompoundStatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *CompoundStatementContext) CursorStatement() ICursorStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursorStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursorStatementContext)
}

func (s *CompoundStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompoundStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompoundStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCompoundStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CompoundStatement() (localctx ICompoundStatementContext) {
	localctx = NewCompoundStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, MySqlParserRULE_compoundStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(770)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(760)
			p.BlockStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(761)
			p.CaseStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(762)
			p.IfStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(763)
			p.LeaveStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(764)
			p.LoopStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(765)
			p.RepeatStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(766)
			p.WhileStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(767)
			p.IterateStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(768)
			p.ReturnStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(769)
			p.CursorStatement()
		}

	}

	return localctx
}

// IAdministrationStatementContext is an interface to support dynamic dispatch.
type IAdministrationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdministrationStatementContext differentiates from other interfaces.
	IsAdministrationStatementContext()
}

type AdministrationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdministrationStatementContext() *AdministrationStatementContext {
	var p = new(AdministrationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_administrationStatement
	return p
}

func (*AdministrationStatementContext) IsAdministrationStatementContext() {}

func NewAdministrationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdministrationStatementContext {
	var p = new(AdministrationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_administrationStatement

	return p
}

func (s *AdministrationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AdministrationStatementContext) AlterUser() IAlterUserContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterUserContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlterUserContext)
}

func (s *AdministrationStatementContext) CreateUser() ICreateUserContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateUserContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateUserContext)
}

func (s *AdministrationStatementContext) DropUser() IDropUserContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDropUserContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDropUserContext)
}

func (s *AdministrationStatementContext) GrantStatement() IGrantStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrantStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrantStatementContext)
}

func (s *AdministrationStatementContext) GrantProxy() IGrantProxyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrantProxyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrantProxyContext)
}

func (s *AdministrationStatementContext) RenameUser() IRenameUserContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRenameUserContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRenameUserContext)
}

func (s *AdministrationStatementContext) RevokeStatement() IRevokeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRevokeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRevokeStatementContext)
}

func (s *AdministrationStatementContext) RevokeProxy() IRevokeProxyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRevokeProxyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRevokeProxyContext)
}

func (s *AdministrationStatementContext) AnalyzeTable() IAnalyzeTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnalyzeTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnalyzeTableContext)
}

func (s *AdministrationStatementContext) CheckTable() ICheckTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckTableContext)
}

func (s *AdministrationStatementContext) ChecksumTable() IChecksumTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecksumTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecksumTableContext)
}

func (s *AdministrationStatementContext) OptimizeTable() IOptimizeTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptimizeTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptimizeTableContext)
}

func (s *AdministrationStatementContext) RepairTable() IRepairTableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRepairTableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRepairTableContext)
}

func (s *AdministrationStatementContext) CreateUdfunction() ICreateUdfunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateUdfunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateUdfunctionContext)
}

func (s *AdministrationStatementContext) InstallPlugin() IInstallPluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstallPluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstallPluginContext)
}

func (s *AdministrationStatementContext) UninstallPlugin() IUninstallPluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUninstallPluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUninstallPluginContext)
}

func (s *AdministrationStatementContext) SetStatement() ISetStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetStatementContext)
}

func (s *AdministrationStatementContext) ShowStatement() IShowStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowStatementContext)
}

func (s *AdministrationStatementContext) BinlogStatement() IBinlogStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinlogStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBinlogStatementContext)
}

func (s *AdministrationStatementContext) CacheIndexStatement() ICacheIndexStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICacheIndexStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICacheIndexStatementContext)
}

func (s *AdministrationStatementContext) FlushStatement() IFlushStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFlushStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFlushStatementContext)
}

func (s *AdministrationStatementContext) KillStatement() IKillStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKillStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKillStatementContext)
}

func (s *AdministrationStatementContext) LoadIndexIntoCache() ILoadIndexIntoCacheContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadIndexIntoCacheContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoadIndexIntoCacheContext)
}

func (s *AdministrationStatementContext) ResetStatement() IResetStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResetStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResetStatementContext)
}

func (s *AdministrationStatementContext) ShutdownStatement() IShutdownStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShutdownStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShutdownStatementContext)
}

func (s *AdministrationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdministrationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdministrationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAdministrationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AdministrationStatement() (localctx IAdministrationStatementContext) {
	localctx = NewAdministrationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, MySqlParserRULE_administrationStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(797)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(772)
			p.AlterUser()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(773)
			p.CreateUser()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(774)
			p.DropUser()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(775)
			p.GrantStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(776)
			p.GrantProxy()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(777)
			p.RenameUser()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(778)
			p.RevokeStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(779)
			p.RevokeProxy()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(780)
			p.AnalyzeTable()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(781)
			p.CheckTable()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(782)
			p.ChecksumTable()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(783)
			p.OptimizeTable()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(784)
			p.RepairTable()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(785)
			p.CreateUdfunction()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(786)
			p.InstallPlugin()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(787)
			p.UninstallPlugin()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(788)
			p.SetStatement()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(789)
			p.ShowStatement()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(790)
			p.BinlogStatement()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(791)
			p.CacheIndexStatement()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(792)
			p.FlushStatement()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(793)
			p.KillStatement()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(794)
			p.LoadIndexIntoCache()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(795)
			p.ResetStatement()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(796)
			p.ShutdownStatement()
		}

	}

	return localctx
}

// IUtilityStatementContext is an interface to support dynamic dispatch.
type IUtilityStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUtilityStatementContext differentiates from other interfaces.
	IsUtilityStatementContext()
}

type UtilityStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUtilityStatementContext() *UtilityStatementContext {
	var p = new(UtilityStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_utilityStatement
	return p
}

func (*UtilityStatementContext) IsUtilityStatementContext() {}

func NewUtilityStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UtilityStatementContext {
	var p = new(UtilityStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_utilityStatement

	return p
}

func (s *UtilityStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UtilityStatementContext) SimpleDescribeStatement() ISimpleDescribeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleDescribeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleDescribeStatementContext)
}

func (s *UtilityStatementContext) FullDescribeStatement() IFullDescribeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullDescribeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullDescribeStatementContext)
}

func (s *UtilityStatementContext) HelpStatement() IHelpStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHelpStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHelpStatementContext)
}

func (s *UtilityStatementContext) UseStatement() IUseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUseStatementContext)
}

func (s *UtilityStatementContext) SignalStatement() ISignalStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignalStatementContext)
}

func (s *UtilityStatementContext) ResignalStatement() IResignalStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResignalStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResignalStatementContext)
}

func (s *UtilityStatementContext) DiagnosticsStatement() IDiagnosticsStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDiagnosticsStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDiagnosticsStatementContext)
}

func (s *UtilityStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UtilityStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UtilityStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUtilityStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UtilityStatement() (localctx IUtilityStatementContext) {
	localctx = NewUtilityStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, MySqlParserRULE_utilityStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(806)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(799)
			p.SimpleDescribeStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(800)
			p.FullDescribeStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(801)
			p.HelpStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(802)
			p.UseStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(803)
			p.SignalStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(804)
			p.ResignalStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(805)
			p.DiagnosticsStatement()
		}

	}

	return localctx
}

// ICreateDatabaseContext is an interface to support dynamic dispatch.
type ICreateDatabaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDbFormat returns the dbFormat token.
	GetDbFormat() antlr.Token

	// SetDbFormat sets the dbFormat token.
	SetDbFormat(antlr.Token)

	// IsCreateDatabaseContext differentiates from other interfaces.
	IsCreateDatabaseContext()
}

type CreateDatabaseContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	dbFormat antlr.Token
}

func NewEmptyCreateDatabaseContext() *CreateDatabaseContext {
	var p = new(CreateDatabaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createDatabase
	return p
}

func (*CreateDatabaseContext) IsCreateDatabaseContext() {}

func NewCreateDatabaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateDatabaseContext {
	var p = new(CreateDatabaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createDatabase

	return p
}

func (s *CreateDatabaseContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateDatabaseContext) GetDbFormat() antlr.Token { return s.dbFormat }

func (s *CreateDatabaseContext) SetDbFormat(v antlr.Token) { s.dbFormat = v }

func (s *CreateDatabaseContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateDatabaseContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateDatabaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *CreateDatabaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *CreateDatabaseContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *CreateDatabaseContext) AllCreateDatabaseOption() []ICreateDatabaseOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreateDatabaseOptionContext)(nil)).Elem())
	var tst = make([]ICreateDatabaseOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreateDatabaseOptionContext)
		}
	}

	return tst
}

func (s *CreateDatabaseContext) CreateDatabaseOption(i int) ICreateDatabaseOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDatabaseOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreateDatabaseOptionContext)
}

func (s *CreateDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDatabaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateDatabaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateDatabase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateDatabase() (localctx ICreateDatabaseContext) {
	localctx = NewCreateDatabaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, MySqlParserRULE_createDatabase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(808)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(809)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CreateDatabaseContext).dbFormat = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CreateDatabaseContext).dbFormat = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(811)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(810)
			p.IfNotExists()
		}

	}
	{
		p.SetState(813)
		p.Uid()
	}
	p.SetState(817)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(MySqlParserCHARACTER-22))|(1<<(MySqlParserCOLLATE-22))|(1<<(MySqlParserDEFAULT-22)))) != 0) || _la == MySqlParserCHARSET {
		{
			p.SetState(814)
			p.CreateDatabaseOption()
		}

		p.SetState(819)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICreateEventContext is an interface to support dynamic dispatch.
type ICreateEventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateEventContext differentiates from other interfaces.
	IsCreateEventContext()
}

type CreateEventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateEventContext() *CreateEventContext {
	var p = new(CreateEventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createEvent
	return p
}

func (*CreateEventContext) IsCreateEventContext() {}

func NewCreateEventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateEventContext {
	var p = new(CreateEventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createEvent

	return p
}

func (s *CreateEventContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateEventContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateEventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *CreateEventContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *CreateEventContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *CreateEventContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *CreateEventContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEDULE, 0)
}

func (s *CreateEventContext) ScheduleExpression() IScheduleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScheduleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScheduleExpressionContext)
}

func (s *CreateEventContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *CreateEventContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *CreateEventContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateEventContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *CreateEventContext) COMPLETION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPLETION, 0)
}

func (s *CreateEventContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRESERVE, 0)
}

func (s *CreateEventContext) EnableType() IEnableTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnableTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnableTypeContext)
}

func (s *CreateEventContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *CreateEventContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CreateEventContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *CreateEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateEventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateEventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateEvent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateEvent() (localctx ICreateEventContext) {
	localctx = NewCreateEventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, MySqlParserRULE_createEvent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(820)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(822)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(821)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(824)
		p.Match(MySqlParserEVENT)
	}
	p.SetState(826)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(825)
			p.IfNotExists()
		}

	}
	{
		p.SetState(828)
		p.FullId()
	}
	{
		p.SetState(829)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(830)
		p.Match(MySqlParserSCHEDULE)
	}
	{
		p.SetState(831)
		p.ScheduleExpression()
	}
	p.SetState(838)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserON {
		{
			p.SetState(832)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(833)
			p.Match(MySqlParserCOMPLETION)
		}
		p.SetState(835)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(834)
				p.Match(MySqlParserNOT)
			}

		}
		{
			p.SetState(837)
			p.Match(MySqlParserPRESERVE)
		}

	}
	p.SetState(841)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDISABLE || _la == MySqlParserENABLE {
		{
			p.SetState(840)
			p.EnableType()
		}

	}
	p.SetState(845)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(843)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(844)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	}
	{
		p.SetState(847)
		p.Match(MySqlParserDO)
	}
	{
		p.SetState(848)
		p.RoutineBody()
	}

	return localctx
}

// ICreateIndexContext is an interface to support dynamic dispatch.
type ICreateIndexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIntimeAction returns the intimeAction token.
	GetIntimeAction() antlr.Token

	// GetIndexCategory returns the indexCategory token.
	GetIndexCategory() antlr.Token

	// GetAlgType returns the algType token.
	GetAlgType() antlr.Token

	// GetLockType returns the lockType token.
	GetLockType() antlr.Token

	// SetIntimeAction sets the intimeAction token.
	SetIntimeAction(antlr.Token)

	// SetIndexCategory sets the indexCategory token.
	SetIndexCategory(antlr.Token)

	// SetAlgType sets the algType token.
	SetAlgType(antlr.Token)

	// SetLockType sets the lockType token.
	SetLockType(antlr.Token)

	// IsCreateIndexContext differentiates from other interfaces.
	IsCreateIndexContext()
}

type CreateIndexContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	intimeAction  antlr.Token
	indexCategory antlr.Token
	algType       antlr.Token
	lockType      antlr.Token
}

func NewEmptyCreateIndexContext() *CreateIndexContext {
	var p = new(CreateIndexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createIndex
	return p
}

func (*CreateIndexContext) IsCreateIndexContext() {}

func NewCreateIndexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateIndexContext {
	var p = new(CreateIndexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createIndex

	return p
}

func (s *CreateIndexContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateIndexContext) GetIntimeAction() antlr.Token { return s.intimeAction }

func (s *CreateIndexContext) GetIndexCategory() antlr.Token { return s.indexCategory }

func (s *CreateIndexContext) GetAlgType() antlr.Token { return s.algType }

func (s *CreateIndexContext) GetLockType() antlr.Token { return s.lockType }

func (s *CreateIndexContext) SetIntimeAction(v antlr.Token) { s.intimeAction = v }

func (s *CreateIndexContext) SetIndexCategory(v antlr.Token) { s.indexCategory = v }

func (s *CreateIndexContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *CreateIndexContext) SetLockType(v antlr.Token) { s.lockType = v }

func (s *CreateIndexContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *CreateIndexContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateIndexContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *CreateIndexContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CreateIndexContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *CreateIndexContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *CreateIndexContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *CreateIndexContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *CreateIndexContext) AllALGORITHM() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserALGORITHM)
}

func (s *CreateIndexContext) ALGORITHM(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, i)
}

func (s *CreateIndexContext) AllLOCK() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLOCK)
}

func (s *CreateIndexContext) LOCK(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, i)
}

func (s *CreateIndexContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLINE, 0)
}

func (s *CreateIndexContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFLINE, 0)
}

func (s *CreateIndexContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIQUE, 0)
}

func (s *CreateIndexContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULLTEXT, 0)
}

func (s *CreateIndexContext) SPATIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSPATIAL, 0)
}

func (s *CreateIndexContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDEFAULT)
}

func (s *CreateIndexContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, i)
}

func (s *CreateIndexContext) AllINPLACE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserINPLACE)
}

func (s *CreateIndexContext) INPLACE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserINPLACE, i)
}

func (s *CreateIndexContext) AllCOPY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOPY)
}

func (s *CreateIndexContext) COPY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOPY, i)
}

func (s *CreateIndexContext) AllNONE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNONE)
}

func (s *CreateIndexContext) NONE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, i)
}

func (s *CreateIndexContext) AllSHARED() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSHARED)
}

func (s *CreateIndexContext) SHARED(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARED, i)
}

func (s *CreateIndexContext) AllEXCLUSIVE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEXCLUSIVE)
}

func (s *CreateIndexContext) EXCLUSIVE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLUSIVE, i)
}

func (s *CreateIndexContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *CreateIndexContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *CreateIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateIndexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateIndex() (localctx ICreateIndexContext) {
	localctx = NewCreateIndexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, MySqlParserRULE_createIndex)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(850)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(852)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserOFFLINE || _la == MySqlParserONLINE {
		{
			p.SetState(851)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateIndexContext).intimeAction = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserOFFLINE || _la == MySqlParserONLINE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateIndexContext).intimeAction = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(855)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFULLTEXT || _la == MySqlParserSPATIAL || _la == MySqlParserUNIQUE {
		{
			p.SetState(854)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateIndexContext).indexCategory = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFULLTEXT || _la == MySqlParserSPATIAL || _la == MySqlParserUNIQUE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateIndexContext).indexCategory = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(857)
		p.Match(MySqlParserINDEX)
	}
	{
		p.SetState(858)
		p.Uid()
	}
	p.SetState(860)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUSING {
		{
			p.SetState(859)
			p.IndexType()
		}

	}
	{
		p.SetState(862)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(863)
		p.TableName()
	}
	{
		p.SetState(864)
		p.IndexColumnNames()
	}
	p.SetState(868)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE {
		{
			p.SetState(865)
			p.IndexOption()
		}

		p.SetState(870)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(883)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(881)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserALGORITHM:
				{
					p.SetState(871)
					p.Match(MySqlParserALGORITHM)
				}
				p.SetState(873)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserEQUAL_SYMBOL {
					{
						p.SetState(872)
						p.Match(MySqlParserEQUAL_SYMBOL)
					}

				}
				{
					p.SetState(875)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*CreateIndexContext).algType = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserDEFAULT || _la == MySqlParserCOPY || _la == MySqlParserINPLACE) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*CreateIndexContext).algType = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case MySqlParserLOCK:
				{
					p.SetState(876)
					p.Match(MySqlParserLOCK)
				}
				p.SetState(878)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserEQUAL_SYMBOL {
					{
						p.SetState(877)
						p.Match(MySqlParserEQUAL_SYMBOL)
					}

				}
				{
					p.SetState(880)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*CreateIndexContext).lockType = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserDEFAULT || _la == MySqlParserEXCLUSIVE || _la == MySqlParserNONE || _la == MySqlParserSHARED) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*CreateIndexContext).lockType = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(885)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext())
	}

	return localctx
}

// ICreateLogfileGroupContext is an interface to support dynamic dispatch.
type ICreateLogfileGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUndoFile returns the undoFile token.
	GetUndoFile() antlr.Token

	// GetComment returns the comment token.
	GetComment() antlr.Token

	// SetUndoFile sets the undoFile token.
	SetUndoFile(antlr.Token)

	// SetComment sets the comment token.
	SetComment(antlr.Token)

	// GetInitSize returns the initSize rule contexts.
	GetInitSize() IFileSizeLiteralContext

	// GetUndoSize returns the undoSize rule contexts.
	GetUndoSize() IFileSizeLiteralContext

	// GetRedoSize returns the redoSize rule contexts.
	GetRedoSize() IFileSizeLiteralContext

	// SetInitSize sets the initSize rule contexts.
	SetInitSize(IFileSizeLiteralContext)

	// SetUndoSize sets the undoSize rule contexts.
	SetUndoSize(IFileSizeLiteralContext)

	// SetRedoSize sets the redoSize rule contexts.
	SetRedoSize(IFileSizeLiteralContext)

	// IsCreateLogfileGroupContext differentiates from other interfaces.
	IsCreateLogfileGroupContext()
}

type CreateLogfileGroupContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	undoFile antlr.Token
	initSize IFileSizeLiteralContext
	undoSize IFileSizeLiteralContext
	redoSize IFileSizeLiteralContext
	comment  antlr.Token
}

func NewEmptyCreateLogfileGroupContext() *CreateLogfileGroupContext {
	var p = new(CreateLogfileGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createLogfileGroup
	return p
}

func (*CreateLogfileGroupContext) IsCreateLogfileGroupContext() {}

func NewCreateLogfileGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateLogfileGroupContext {
	var p = new(CreateLogfileGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createLogfileGroup

	return p
}

func (s *CreateLogfileGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateLogfileGroupContext) GetUndoFile() antlr.Token { return s.undoFile }

func (s *CreateLogfileGroupContext) GetComment() antlr.Token { return s.comment }

func (s *CreateLogfileGroupContext) SetUndoFile(v antlr.Token) { s.undoFile = v }

func (s *CreateLogfileGroupContext) SetComment(v antlr.Token) { s.comment = v }

func (s *CreateLogfileGroupContext) GetInitSize() IFileSizeLiteralContext { return s.initSize }

func (s *CreateLogfileGroupContext) GetUndoSize() IFileSizeLiteralContext { return s.undoSize }

func (s *CreateLogfileGroupContext) GetRedoSize() IFileSizeLiteralContext { return s.redoSize }

func (s *CreateLogfileGroupContext) SetInitSize(v IFileSizeLiteralContext) { s.initSize = v }

func (s *CreateLogfileGroupContext) SetUndoSize(v IFileSizeLiteralContext) { s.undoSize = v }

func (s *CreateLogfileGroupContext) SetRedoSize(v IFileSizeLiteralContext) { s.redoSize = v }

func (s *CreateLogfileGroupContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateLogfileGroupContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *CreateLogfileGroupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *CreateLogfileGroupContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *CreateLogfileGroupContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateLogfileGroupContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *CreateLogfileGroupContext) UNDOFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDOFILE, 0)
}

func (s *CreateLogfileGroupContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *CreateLogfileGroupContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *CreateLogfileGroupContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *CreateLogfileGroupContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *CreateLogfileGroupContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *CreateLogfileGroupContext) UNDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDO_BUFFER_SIZE, 0)
}

func (s *CreateLogfileGroupContext) REDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREDO_BUFFER_SIZE, 0)
}

func (s *CreateLogfileGroupContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserNODEGROUP, 0)
}

func (s *CreateLogfileGroupContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *CreateLogfileGroupContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *CreateLogfileGroupContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *CreateLogfileGroupContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *CreateLogfileGroupContext) AllFileSizeLiteral() []IFileSizeLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem())
	var tst = make([]IFileSizeLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFileSizeLiteralContext)
		}
	}

	return tst
}

func (s *CreateLogfileGroupContext) FileSizeLiteral(i int) IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *CreateLogfileGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateLogfileGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateLogfileGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateLogfileGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateLogfileGroup() (localctx ICreateLogfileGroupContext) {
	localctx = NewCreateLogfileGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, MySqlParserRULE_createLogfileGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(886)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(887)
		p.Match(MySqlParserLOGFILE)
	}
	{
		p.SetState(888)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(889)
		p.Uid()
	}
	{
		p.SetState(890)
		p.Match(MySqlParserADD)
	}
	{
		p.SetState(891)
		p.Match(MySqlParserUNDOFILE)
	}
	{
		p.SetState(892)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*CreateLogfileGroupContext).undoFile = _m
	}
	p.SetState(898)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINITIAL_SIZE {
		{
			p.SetState(893)
			p.Match(MySqlParserINITIAL_SIZE)
		}
		p.SetState(895)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(894)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(897)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateLogfileGroupContext).initSize = _x
		}

	}
	p.SetState(905)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUNDO_BUFFER_SIZE {
		{
			p.SetState(900)
			p.Match(MySqlParserUNDO_BUFFER_SIZE)
		}
		p.SetState(902)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(901)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(904)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateLogfileGroupContext).undoSize = _x
		}

	}
	p.SetState(912)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserREDO_BUFFER_SIZE {
		{
			p.SetState(907)
			p.Match(MySqlParserREDO_BUFFER_SIZE)
		}
		p.SetState(909)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(908)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(911)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateLogfileGroupContext).redoSize = _x
		}

	}
	p.SetState(919)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNODEGROUP {
		{
			p.SetState(914)
			p.Match(MySqlParserNODEGROUP)
		}
		p.SetState(916)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(915)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(918)
			p.Uid()
		}

	}
	p.SetState(922)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWAIT {
		{
			p.SetState(921)
			p.Match(MySqlParserWAIT)
		}

	}
	p.SetState(929)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(924)
			p.Match(MySqlParserCOMMENT)
		}
		p.SetState(926)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(925)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(928)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*CreateLogfileGroupContext).comment = _m
		}

	}
	{
		p.SetState(931)
		p.Match(MySqlParserENGINE)
	}
	p.SetState(933)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEQUAL_SYMBOL {
		{
			p.SetState(932)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	}
	{
		p.SetState(935)
		p.EngineName()
	}

	return localctx
}

// ICreateProcedureContext is an interface to support dynamic dispatch.
type ICreateProcedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateProcedureContext differentiates from other interfaces.
	IsCreateProcedureContext()
}

type CreateProcedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateProcedureContext() *CreateProcedureContext {
	var p = new(CreateProcedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createProcedure
	return p
}

func (*CreateProcedureContext) IsCreateProcedureContext() {}

func NewCreateProcedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateProcedureContext {
	var p = new(CreateProcedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createProcedure

	return p
}

func (s *CreateProcedureContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateProcedureContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateProcedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *CreateProcedureContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *CreateProcedureContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CreateProcedureContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CreateProcedureContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *CreateProcedureContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateProcedureContext) AllProcedureParameter() []IProcedureParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureParameterContext)(nil)).Elem())
	var tst = make([]IProcedureParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureParameterContext)
		}
	}

	return tst
}

func (s *CreateProcedureContext) ProcedureParameter(i int) IProcedureParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureParameterContext)
}

func (s *CreateProcedureContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CreateProcedureContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CreateProcedureContext) AllRoutineOption() []IRoutineOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem())
	var tst = make([]IRoutineOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutineOptionContext)
		}
	}

	return tst
}

func (s *CreateProcedureContext) RoutineOption(i int) IRoutineOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutineOptionContext)
}

func (s *CreateProcedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateProcedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateProcedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateProcedure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateProcedure() (localctx ICreateProcedureContext) {
	localctx = NewCreateProcedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, MySqlParserRULE_createProcedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(937)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(939)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(938)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(941)
		p.Match(MySqlParserPROCEDURE)
	}
	{
		p.SetState(942)
		p.FullId()
	}
	{
		p.SetState(943)
		p.Match(MySqlParserLR_BRACKET)
	}
	p.SetState(945)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || (((_la-67)&-(0x1f+1)) == 0 && ((1<<uint((_la-67)))&((1<<(MySqlParserGROUP-67))|(1<<(MySqlParserIN-67))|(1<<(MySqlParserINOUT-67))|(1<<(MySqlParserLEFT-67)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserOUT-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(944)
			p.ProcedureParameter()
		}

	}
	p.SetState(951)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(947)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(948)
			p.ProcedureParameter()
		}

		p.SetState(953)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(954)
		p.Match(MySqlParserRR_BRACKET)
	}
	p.SetState(958)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(955)
				p.RoutineOption()
			}

		}
		p.SetState(960)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext())
	}
	{
		p.SetState(961)
		p.RoutineBody()
	}

	return localctx
}

// ICreateFunctionContext is an interface to support dynamic dispatch.
type ICreateFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateFunctionContext differentiates from other interfaces.
	IsCreateFunctionContext()
}

type CreateFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateFunctionContext() *CreateFunctionContext {
	var p = new(CreateFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createFunction
	return p
}

func (*CreateFunctionContext) IsCreateFunctionContext() {}

func NewCreateFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateFunctionContext {
	var p = new(CreateFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createFunction

	return p
}

func (s *CreateFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateFunctionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateFunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *CreateFunctionContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *CreateFunctionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CreateFunctionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CreateFunctionContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNS, 0)
}

func (s *CreateFunctionContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *CreateFunctionContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *CreateFunctionContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *CreateFunctionContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateFunctionContext) AllFunctionParameter() []IFunctionParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionParameterContext)(nil)).Elem())
	var tst = make([]IFunctionParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionParameterContext)
		}
	}

	return tst
}

func (s *CreateFunctionContext) FunctionParameter(i int) IFunctionParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionParameterContext)
}

func (s *CreateFunctionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CreateFunctionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CreateFunctionContext) AllRoutineOption() []IRoutineOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem())
	var tst = make([]IRoutineOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutineOptionContext)
		}
	}

	return tst
}

func (s *CreateFunctionContext) RoutineOption(i int) IRoutineOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutineOptionContext)
}

func (s *CreateFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateFunction() (localctx ICreateFunctionContext) {
	localctx = NewCreateFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, MySqlParserRULE_createFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(963)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(965)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(964)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(967)
		p.Match(MySqlParserFUNCTION)
	}
	{
		p.SetState(968)
		p.FullId()
	}
	{
		p.SetState(969)
		p.Match(MySqlParserLR_BRACKET)
	}
	p.SetState(971)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(970)
			p.FunctionParameter()
		}

	}
	p.SetState(977)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(973)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(974)
			p.FunctionParameter()
		}

		p.SetState(979)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(980)
		p.Match(MySqlParserRR_BRACKET)
	}
	{
		p.SetState(981)
		p.Match(MySqlParserRETURNS)
	}
	{
		p.SetState(982)
		p.DataType()
	}
	p.SetState(986)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(983)
				p.RoutineOption()
			}

		}
		p.SetState(988)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())
	}
	p.SetState(991)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDIAGNOSTICS, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserGROUP, MySqlParserINSERT, MySqlParserKILL, MySqlParserLEFT, MySqlParserLOAD, MySqlParserLOCK, MySqlParserNUMBER, MySqlParserOPTIMIZE, MySqlParserORDER, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserSTACKED, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserLR_BRACKET, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		{
			p.SetState(989)
			p.RoutineBody()
		}

	case MySqlParserRETURN:
		{
			p.SetState(990)
			p.ReturnStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreateServerContext is an interface to support dynamic dispatch.
type ICreateServerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWrapperName returns the wrapperName token.
	GetWrapperName() antlr.Token

	// SetWrapperName sets the wrapperName token.
	SetWrapperName(antlr.Token)

	// IsCreateServerContext differentiates from other interfaces.
	IsCreateServerContext()
}

type CreateServerContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	wrapperName antlr.Token
}

func NewEmptyCreateServerContext() *CreateServerContext {
	var p = new(CreateServerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createServer
	return p
}

func (*CreateServerContext) IsCreateServerContext() {}

func NewCreateServerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateServerContext {
	var p = new(CreateServerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createServer

	return p
}

func (s *CreateServerContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateServerContext) GetWrapperName() antlr.Token { return s.wrapperName }

func (s *CreateServerContext) SetWrapperName(v antlr.Token) { s.wrapperName = v }

func (s *CreateServerContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateServerContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVER, 0)
}

func (s *CreateServerContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateServerContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOREIGN, 0)
}

func (s *CreateServerContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *CreateServerContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRAPPER, 0)
}

func (s *CreateServerContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONS, 0)
}

func (s *CreateServerContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CreateServerContext) AllServerOption() []IServerOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IServerOptionContext)(nil)).Elem())
	var tst = make([]IServerOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IServerOptionContext)
		}
	}

	return tst
}

func (s *CreateServerContext) ServerOption(i int) IServerOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IServerOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IServerOptionContext)
}

func (s *CreateServerContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CreateServerContext) MYSQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYSQL, 0)
}

func (s *CreateServerContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CreateServerContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CreateServerContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CreateServerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateServerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateServerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateServer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateServer() (localctx ICreateServerContext) {
	localctx = NewCreateServerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, MySqlParserRULE_createServer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(993)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(994)
		p.Match(MySqlParserSERVER)
	}
	{
		p.SetState(995)
		p.Uid()
	}
	{
		p.SetState(996)
		p.Match(MySqlParserFOREIGN)
	}
	{
		p.SetState(997)
		p.Match(MySqlParserDATA)
	}
	{
		p.SetState(998)
		p.Match(MySqlParserWRAPPER)
	}
	{
		p.SetState(999)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CreateServerContext).wrapperName = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserMYSQL || _la == MySqlParserSTRING_LITERAL) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CreateServerContext).wrapperName = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1000)
		p.Match(MySqlParserOPTIONS)
	}
	{
		p.SetState(1001)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(1002)
		p.ServerOption()
	}
	p.SetState(1007)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(1003)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(1004)
			p.ServerOption()
		}

		p.SetState(1009)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1010)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// ICreateTableContext is an interface to support dynamic dispatch.
type ICreateTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateTableContext differentiates from other interfaces.
	IsCreateTableContext()
}

type CreateTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateTableContext() *CreateTableContext {
	var p = new(CreateTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createTable
	return p
}

func (*CreateTableContext) IsCreateTableContext() {}

func NewCreateTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTableContext {
	var p = new(CreateTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createTable

	return p
}

func (s *CreateTableContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTableContext) CopyFrom(ctx *CreateTableContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *CreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type CopyCreateTableContext struct {
	*CreateTableContext
	parenthesisTable ITableNameContext
}

func NewCopyCreateTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CopyCreateTableContext {
	var p = new(CopyCreateTableContext)

	p.CreateTableContext = NewEmptyCreateTableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateTableContext))

	return p
}

func (s *CopyCreateTableContext) GetParenthesisTable() ITableNameContext { return s.parenthesisTable }

func (s *CopyCreateTableContext) SetParenthesisTable(v ITableNameContext) { s.parenthesisTable = v }

func (s *CopyCreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CopyCreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CopyCreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *CopyCreateTableContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *CopyCreateTableContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CopyCreateTableContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIKE, 0)
}

func (s *CopyCreateTableContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CopyCreateTableContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CopyCreateTableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *CopyCreateTableContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *CopyCreateTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCopyCreateTable(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnCreateTableContext struct {
	*CreateTableContext
}

func NewColumnCreateTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnCreateTableContext {
	var p = new(ColumnCreateTableContext)

	p.CreateTableContext = NewEmptyCreateTableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateTableContext))

	return p
}

func (s *ColumnCreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnCreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *ColumnCreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *ColumnCreateTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ColumnCreateTableContext) CreateDefinitions() ICreateDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateDefinitionsContext)
}

func (s *ColumnCreateTableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *ColumnCreateTableContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *ColumnCreateTableContext) AllTableOption() []ITableOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableOptionContext)(nil)).Elem())
	var tst = make([]ITableOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableOptionContext)
		}
	}

	return tst
}

func (s *ColumnCreateTableContext) TableOption(i int) ITableOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableOptionContext)
}

func (s *ColumnCreateTableContext) PartitionDefinitions() IPartitionDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionsContext)
}

func (s *ColumnCreateTableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ColumnCreateTableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ColumnCreateTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColumnCreateTable(s)

	default:
		return t.VisitChildren(s)
	}
}

type QueryCreateTableContext struct {
	*CreateTableContext
	keyViolate antlr.Token
}

func NewQueryCreateTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QueryCreateTableContext {
	var p = new(QueryCreateTableContext)

	p.CreateTableContext = NewEmptyCreateTableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateTableContext))

	return p
}

func (s *QueryCreateTableContext) GetKeyViolate() antlr.Token { return s.keyViolate }

func (s *QueryCreateTableContext) SetKeyViolate(v antlr.Token) { s.keyViolate = v }

func (s *QueryCreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryCreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *QueryCreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *QueryCreateTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *QueryCreateTableContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *QueryCreateTableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *QueryCreateTableContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *QueryCreateTableContext) CreateDefinitions() ICreateDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateDefinitionsContext)
}

func (s *QueryCreateTableContext) AllTableOption() []ITableOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableOptionContext)(nil)).Elem())
	var tst = make([]ITableOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableOptionContext)
		}
	}

	return tst
}

func (s *QueryCreateTableContext) TableOption(i int) ITableOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableOptionContext)
}

func (s *QueryCreateTableContext) PartitionDefinitions() IPartitionDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionsContext)
}

func (s *QueryCreateTableContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *QueryCreateTableContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *QueryCreateTableContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *QueryCreateTableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *QueryCreateTableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *QueryCreateTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitQueryCreateTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateTable() (localctx ICreateTableContext) {
	localctx = NewCreateTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, MySqlParserRULE_createTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1090)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCopyCreateTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1012)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(1014)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserTEMPORARY {
			{
				p.SetState(1013)
				p.Match(MySqlParserTEMPORARY)
			}

		}
		{
			p.SetState(1016)
			p.Match(MySqlParserTABLE)
		}
		p.SetState(1018)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(1017)
				p.IfNotExists()
			}

		}
		{
			p.SetState(1020)
			p.TableName()
		}
		p.SetState(1028)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLIKE:
			{
				p.SetState(1021)
				p.Match(MySqlParserLIKE)
			}
			{
				p.SetState(1022)
				p.TableName()
			}

		case MySqlParserLR_BRACKET:
			{
				p.SetState(1023)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1024)
				p.Match(MySqlParserLIKE)
			}
			{
				p.SetState(1025)

				var _x = p.TableName()

				localctx.(*CopyCreateTableContext).parenthesisTable = _x
			}
			{
				p.SetState(1026)
				p.Match(MySqlParserRR_BRACKET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		localctx = NewQueryCreateTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1030)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(1032)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserTEMPORARY {
			{
				p.SetState(1031)
				p.Match(MySqlParserTEMPORARY)
			}

		}
		{
			p.SetState(1034)
			p.Match(MySqlParserTABLE)
		}
		p.SetState(1036)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(1035)
				p.IfNotExists()
			}

		}
		{
			p.SetState(1038)
			p.TableName()
		}
		p.SetState(1040)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1039)
				p.CreateDefinitions()
			}

		}
		p.SetState(1052)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(MySqlParserCHARACTER-22))|(1<<(MySqlParserCOLLATE-22))|(1<<(MySqlParserDEFAULT-22)))) != 0) || _la == MySqlParserINDEX || _la == MySqlParserUNION || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserCHECKSUM-312))|(1<<(MySqlParserPAGE_CHECKSUM-312))|(1<<(MySqlParserCOMMENT-312))|(1<<(MySqlParserCOMPRESSION-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserDATA-344))|(1<<(MySqlParserDELAY_KEY_WRITE-344))|(1<<(MySqlParserENCRYPTION-344))|(1<<(MySqlParserENGINE-344)))) != 0) || _la == MySqlParserINSERT_METHOD || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserMAX_ROWS || _la == MySqlParserMIN_ROWS || _la == MySqlParserPACK_KEYS || _la == MySqlParserPASSWORD || (((_la-548)&-(0x1f+1)) == 0 && ((1<<uint((_la-548)))&((1<<(MySqlParserROW_FORMAT-548))|(1<<(MySqlParserSTATS_AUTO_RECALC-548))|(1<<(MySqlParserSTATS_PERSISTENT-548))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-548)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE || _la == MySqlParserCHARSET {
			{
				p.SetState(1042)
				p.TableOption()
			}
			p.SetState(1049)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(MySqlParserCHARACTER-22))|(1<<(MySqlParserCOLLATE-22))|(1<<(MySqlParserDEFAULT-22)))) != 0) || _la == MySqlParserINDEX || _la == MySqlParserUNION || (((_la-312)&-(0x1f+1)) == 0 && ((1<<uint((_la-312)))&((1<<(MySqlParserAUTO_INCREMENT-312))|(1<<(MySqlParserAVG_ROW_LENGTH-312))|(1<<(MySqlParserCHECKSUM-312))|(1<<(MySqlParserPAGE_CHECKSUM-312))|(1<<(MySqlParserCOMMENT-312))|(1<<(MySqlParserCOMPRESSION-312)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserCONNECTION-344))|(1<<(MySqlParserDATA-344))|(1<<(MySqlParserDELAY_KEY_WRITE-344))|(1<<(MySqlParserENCRYPTION-344))|(1<<(MySqlParserENGINE-344)))) != 0) || _la == MySqlParserINSERT_METHOD || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserMAX_ROWS || _la == MySqlParserMIN_ROWS || _la == MySqlParserPACK_KEYS || _la == MySqlParserPASSWORD || (((_la-548)&-(0x1f+1)) == 0 && ((1<<uint((_la-548)))&((1<<(MySqlParserROW_FORMAT-548))|(1<<(MySqlParserSTATS_AUTO_RECALC-548))|(1<<(MySqlParserSTATS_PERSISTENT-548))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-548)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE || _la == MySqlParserCHARSET || _la == MySqlParserCOMMA {
				p.SetState(1044)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserCOMMA {
					{
						p.SetState(1043)
						p.Match(MySqlParserCOMMA)
					}

				}
				{
					p.SetState(1046)
					p.TableOption()
				}

				p.SetState(1051)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(1055)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPARTITION {
			{
				p.SetState(1054)
				p.PartitionDefinitions()
			}

		}
		p.SetState(1058)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIGNORE || _la == MySqlParserREPLACE {
			{
				p.SetState(1057)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*QueryCreateTableContext).keyViolate = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserIGNORE || _la == MySqlParserREPLACE) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*QueryCreateTableContext).keyViolate = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(1061)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(1060)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(1063)
			p.SelectStatement()
		}

	case 3:
		localctx = NewColumnCreateTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1065)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(1067)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserTEMPORARY {
			{
				p.SetState(1066)
				p.Match(MySqlParserTEMPORARY)
			}

		}
		{
			p.SetState(1069)
			p.Match(MySqlParserTABLE)
		}
		p.SetState(1071)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(1070)
				p.IfNotExists()
			}

		}
		{
			p.SetState(1073)
			p.TableName()
		}
		{
			p.SetState(1074)
			p.CreateDefinitions()
		}
		p.SetState(1085)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1075)
				p.TableOption()
			}
			p.SetState(1082)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					p.SetState(1077)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == MySqlParserCOMMA {
						{
							p.SetState(1076)
							p.Match(MySqlParserCOMMA)
						}

					}
					{
						p.SetState(1079)
						p.TableOption()
					}

				}
				p.SetState(1084)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext())
			}

		}
		p.SetState(1088)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPARTITION {
			{
				p.SetState(1087)
				p.PartitionDefinitions()
			}

		}

	}

	return localctx
}

// ICreateTablespaceInnodbContext is an interface to support dynamic dispatch.
type ICreateTablespaceInnodbContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatafile returns the datafile token.
	GetDatafile() antlr.Token

	// SetDatafile sets the datafile token.
	SetDatafile(antlr.Token)

	// GetFileBlockSize returns the fileBlockSize rule contexts.
	GetFileBlockSize() IFileSizeLiteralContext

	// SetFileBlockSize sets the fileBlockSize rule contexts.
	SetFileBlockSize(IFileSizeLiteralContext)

	// IsCreateTablespaceInnodbContext differentiates from other interfaces.
	IsCreateTablespaceInnodbContext()
}

type CreateTablespaceInnodbContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	datafile      antlr.Token
	fileBlockSize IFileSizeLiteralContext
}

func NewEmptyCreateTablespaceInnodbContext() *CreateTablespaceInnodbContext {
	var p = new(CreateTablespaceInnodbContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createTablespaceInnodb
	return p
}

func (*CreateTablespaceInnodbContext) IsCreateTablespaceInnodbContext() {}

func NewCreateTablespaceInnodbContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTablespaceInnodbContext {
	var p = new(CreateTablespaceInnodbContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createTablespaceInnodb

	return p
}

func (s *CreateTablespaceInnodbContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTablespaceInnodbContext) GetDatafile() antlr.Token { return s.datafile }

func (s *CreateTablespaceInnodbContext) SetDatafile(v antlr.Token) { s.datafile = v }

func (s *CreateTablespaceInnodbContext) GetFileBlockSize() IFileSizeLiteralContext {
	return s.fileBlockSize
}

func (s *CreateTablespaceInnodbContext) SetFileBlockSize(v IFileSizeLiteralContext) {
	s.fileBlockSize = v
}

func (s *CreateTablespaceInnodbContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateTablespaceInnodbContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *CreateTablespaceInnodbContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateTablespaceInnodbContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *CreateTablespaceInnodbContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATAFILE, 0)
}

func (s *CreateTablespaceInnodbContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CreateTablespaceInnodbContext) FILE_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILE_BLOCK_SIZE, 0)
}

func (s *CreateTablespaceInnodbContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *CreateTablespaceInnodbContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *CreateTablespaceInnodbContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *CreateTablespaceInnodbContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *CreateTablespaceInnodbContext) FileSizeLiteral() IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *CreateTablespaceInnodbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTablespaceInnodbContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTablespaceInnodbContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateTablespaceInnodb(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateTablespaceInnodb() (localctx ICreateTablespaceInnodbContext) {
	localctx = NewCreateTablespaceInnodbContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, MySqlParserRULE_createTablespaceInnodb)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1092)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(1093)
		p.Match(MySqlParserTABLESPACE)
	}
	{
		p.SetState(1094)
		p.Uid()
	}
	{
		p.SetState(1095)
		p.Match(MySqlParserADD)
	}
	{
		p.SetState(1096)
		p.Match(MySqlParserDATAFILE)
	}
	{
		p.SetState(1097)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*CreateTablespaceInnodbContext).datafile = _m
	}
	p.SetState(1101)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFILE_BLOCK_SIZE {
		{
			p.SetState(1098)
			p.Match(MySqlParserFILE_BLOCK_SIZE)
		}
		{
			p.SetState(1099)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(1100)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateTablespaceInnodbContext).fileBlockSize = _x
		}

	}
	p.SetState(1108)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserENGINE {
		{
			p.SetState(1103)
			p.Match(MySqlParserENGINE)
		}
		p.SetState(1105)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1104)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1107)
			p.EngineName()
		}

	}

	return localctx
}

// ICreateTablespaceNdbContext is an interface to support dynamic dispatch.
type ICreateTablespaceNdbContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatafile returns the datafile token.
	GetDatafile() antlr.Token

	// GetComment returns the comment token.
	GetComment() antlr.Token

	// SetDatafile sets the datafile token.
	SetDatafile(antlr.Token)

	// SetComment sets the comment token.
	SetComment(antlr.Token)

	// GetExtentSize returns the extentSize rule contexts.
	GetExtentSize() IFileSizeLiteralContext

	// GetInitialSize returns the initialSize rule contexts.
	GetInitialSize() IFileSizeLiteralContext

	// GetAutoextendSize returns the autoextendSize rule contexts.
	GetAutoextendSize() IFileSizeLiteralContext

	// GetMaxSize returns the maxSize rule contexts.
	GetMaxSize() IFileSizeLiteralContext

	// SetExtentSize sets the extentSize rule contexts.
	SetExtentSize(IFileSizeLiteralContext)

	// SetInitialSize sets the initialSize rule contexts.
	SetInitialSize(IFileSizeLiteralContext)

	// SetAutoextendSize sets the autoextendSize rule contexts.
	SetAutoextendSize(IFileSizeLiteralContext)

	// SetMaxSize sets the maxSize rule contexts.
	SetMaxSize(IFileSizeLiteralContext)

	// IsCreateTablespaceNdbContext differentiates from other interfaces.
	IsCreateTablespaceNdbContext()
}

type CreateTablespaceNdbContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	datafile       antlr.Token
	extentSize     IFileSizeLiteralContext
	initialSize    IFileSizeLiteralContext
	autoextendSize IFileSizeLiteralContext
	maxSize        IFileSizeLiteralContext
	comment        antlr.Token
}

func NewEmptyCreateTablespaceNdbContext() *CreateTablespaceNdbContext {
	var p = new(CreateTablespaceNdbContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createTablespaceNdb
	return p
}

func (*CreateTablespaceNdbContext) IsCreateTablespaceNdbContext() {}

func NewCreateTablespaceNdbContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTablespaceNdbContext {
	var p = new(CreateTablespaceNdbContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createTablespaceNdb

	return p
}

func (s *CreateTablespaceNdbContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTablespaceNdbContext) GetDatafile() antlr.Token { return s.datafile }

func (s *CreateTablespaceNdbContext) GetComment() antlr.Token { return s.comment }

func (s *CreateTablespaceNdbContext) SetDatafile(v antlr.Token) { s.datafile = v }

func (s *CreateTablespaceNdbContext) SetComment(v antlr.Token) { s.comment = v }

func (s *CreateTablespaceNdbContext) GetExtentSize() IFileSizeLiteralContext { return s.extentSize }

func (s *CreateTablespaceNdbContext) GetInitialSize() IFileSizeLiteralContext { return s.initialSize }

func (s *CreateTablespaceNdbContext) GetAutoextendSize() IFileSizeLiteralContext {
	return s.autoextendSize
}

func (s *CreateTablespaceNdbContext) GetMaxSize() IFileSizeLiteralContext { return s.maxSize }

func (s *CreateTablespaceNdbContext) SetExtentSize(v IFileSizeLiteralContext) { s.extentSize = v }

func (s *CreateTablespaceNdbContext) SetInitialSize(v IFileSizeLiteralContext) { s.initialSize = v }

func (s *CreateTablespaceNdbContext) SetAutoextendSize(v IFileSizeLiteralContext) {
	s.autoextendSize = v
}

func (s *CreateTablespaceNdbContext) SetMaxSize(v IFileSizeLiteralContext) { s.maxSize = v }

func (s *CreateTablespaceNdbContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateTablespaceNdbContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *CreateTablespaceNdbContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *CreateTablespaceNdbContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateTablespaceNdbContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *CreateTablespaceNdbContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATAFILE, 0)
}

func (s *CreateTablespaceNdbContext) USE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE, 0)
}

func (s *CreateTablespaceNdbContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *CreateTablespaceNdbContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *CreateTablespaceNdbContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *CreateTablespaceNdbContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *CreateTablespaceNdbContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *CreateTablespaceNdbContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *CreateTablespaceNdbContext) EXTENT_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENT_SIZE, 0)
}

func (s *CreateTablespaceNdbContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *CreateTablespaceNdbContext) AUTOEXTEND_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTOEXTEND_SIZE, 0)
}

func (s *CreateTablespaceNdbContext) MAX_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_SIZE, 0)
}

func (s *CreateTablespaceNdbContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserNODEGROUP, 0)
}

func (s *CreateTablespaceNdbContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *CreateTablespaceNdbContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *CreateTablespaceNdbContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *CreateTablespaceNdbContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *CreateTablespaceNdbContext) AllFileSizeLiteral() []IFileSizeLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem())
	var tst = make([]IFileSizeLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFileSizeLiteralContext)
		}
	}

	return tst
}

func (s *CreateTablespaceNdbContext) FileSizeLiteral(i int) IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *CreateTablespaceNdbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTablespaceNdbContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTablespaceNdbContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateTablespaceNdb(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateTablespaceNdb() (localctx ICreateTablespaceNdbContext) {
	localctx = NewCreateTablespaceNdbContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, MySqlParserRULE_createTablespaceNdb)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1110)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(1111)
		p.Match(MySqlParserTABLESPACE)
	}
	{
		p.SetState(1112)
		p.Uid()
	}
	{
		p.SetState(1113)
		p.Match(MySqlParserADD)
	}
	{
		p.SetState(1114)
		p.Match(MySqlParserDATAFILE)
	}
	{
		p.SetState(1115)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*CreateTablespaceNdbContext).datafile = _m
	}
	{
		p.SetState(1116)
		p.Match(MySqlParserUSE)
	}
	{
		p.SetState(1117)
		p.Match(MySqlParserLOGFILE)
	}
	{
		p.SetState(1118)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(1119)
		p.Uid()
	}
	p.SetState(1125)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEXTENT_SIZE {
		{
			p.SetState(1120)
			p.Match(MySqlParserEXTENT_SIZE)
		}
		p.SetState(1122)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1121)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1124)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateTablespaceNdbContext).extentSize = _x
		}

	}
	p.SetState(1132)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINITIAL_SIZE {
		{
			p.SetState(1127)
			p.Match(MySqlParserINITIAL_SIZE)
		}
		p.SetState(1129)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1128)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1131)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateTablespaceNdbContext).initialSize = _x
		}

	}
	p.SetState(1139)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAUTOEXTEND_SIZE {
		{
			p.SetState(1134)
			p.Match(MySqlParserAUTOEXTEND_SIZE)
		}
		p.SetState(1136)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1135)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1138)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateTablespaceNdbContext).autoextendSize = _x
		}

	}
	p.SetState(1146)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMAX_SIZE {
		{
			p.SetState(1141)
			p.Match(MySqlParserMAX_SIZE)
		}
		p.SetState(1143)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1142)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1145)

			var _x = p.FileSizeLiteral()

			localctx.(*CreateTablespaceNdbContext).maxSize = _x
		}

	}
	p.SetState(1153)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNODEGROUP {
		{
			p.SetState(1148)
			p.Match(MySqlParserNODEGROUP)
		}
		p.SetState(1150)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1149)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1152)
			p.Uid()
		}

	}
	p.SetState(1156)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWAIT {
		{
			p.SetState(1155)
			p.Match(MySqlParserWAIT)
		}

	}
	p.SetState(1163)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(1158)
			p.Match(MySqlParserCOMMENT)
		}
		p.SetState(1160)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1159)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1162)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*CreateTablespaceNdbContext).comment = _m
		}

	}
	{
		p.SetState(1165)
		p.Match(MySqlParserENGINE)
	}
	p.SetState(1167)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEQUAL_SYMBOL {
		{
			p.SetState(1166)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	}
	{
		p.SetState(1169)
		p.EngineName()
	}

	return localctx
}

// ICreateTriggerContext is an interface to support dynamic dispatch.
type ICreateTriggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTriggerTime returns the triggerTime token.
	GetTriggerTime() antlr.Token

	// GetTriggerEvent returns the triggerEvent token.
	GetTriggerEvent() antlr.Token

	// GetTriggerPlace returns the triggerPlace token.
	GetTriggerPlace() antlr.Token

	// SetTriggerTime sets the triggerTime token.
	SetTriggerTime(antlr.Token)

	// SetTriggerEvent sets the triggerEvent token.
	SetTriggerEvent(antlr.Token)

	// SetTriggerPlace sets the triggerPlace token.
	SetTriggerPlace(antlr.Token)

	// GetThisTrigger returns the thisTrigger rule contexts.
	GetThisTrigger() IFullIdContext

	// GetOtherTrigger returns the otherTrigger rule contexts.
	GetOtherTrigger() IFullIdContext

	// SetThisTrigger sets the thisTrigger rule contexts.
	SetThisTrigger(IFullIdContext)

	// SetOtherTrigger sets the otherTrigger rule contexts.
	SetOtherTrigger(IFullIdContext)

	// IsCreateTriggerContext differentiates from other interfaces.
	IsCreateTriggerContext()
}

type CreateTriggerContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	thisTrigger  IFullIdContext
	triggerTime  antlr.Token
	triggerEvent antlr.Token
	triggerPlace antlr.Token
	otherTrigger IFullIdContext
}

func NewEmptyCreateTriggerContext() *CreateTriggerContext {
	var p = new(CreateTriggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createTrigger
	return p
}

func (*CreateTriggerContext) IsCreateTriggerContext() {}

func NewCreateTriggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateTriggerContext {
	var p = new(CreateTriggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createTrigger

	return p
}

func (s *CreateTriggerContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateTriggerContext) GetTriggerTime() antlr.Token { return s.triggerTime }

func (s *CreateTriggerContext) GetTriggerEvent() antlr.Token { return s.triggerEvent }

func (s *CreateTriggerContext) GetTriggerPlace() antlr.Token { return s.triggerPlace }

func (s *CreateTriggerContext) SetTriggerTime(v antlr.Token) { s.triggerTime = v }

func (s *CreateTriggerContext) SetTriggerEvent(v antlr.Token) { s.triggerEvent = v }

func (s *CreateTriggerContext) SetTriggerPlace(v antlr.Token) { s.triggerPlace = v }

func (s *CreateTriggerContext) GetThisTrigger() IFullIdContext { return s.thisTrigger }

func (s *CreateTriggerContext) GetOtherTrigger() IFullIdContext { return s.otherTrigger }

func (s *CreateTriggerContext) SetThisTrigger(v IFullIdContext) { s.thisTrigger = v }

func (s *CreateTriggerContext) SetOtherTrigger(v IFullIdContext) { s.otherTrigger = v }

func (s *CreateTriggerContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateTriggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGER, 0)
}

func (s *CreateTriggerContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *CreateTriggerContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *CreateTriggerContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *CreateTriggerContext) EACH() antlr.TerminalNode {
	return s.GetToken(MySqlParserEACH, 0)
}

func (s *CreateTriggerContext) ROW() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW, 0)
}

func (s *CreateTriggerContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *CreateTriggerContext) AllFullId() []IFullIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFullIdContext)(nil)).Elem())
	var tst = make([]IFullIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFullIdContext)
		}
	}

	return tst
}

func (s *CreateTriggerContext) FullId(i int) IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *CreateTriggerContext) BEFORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEFORE, 0)
}

func (s *CreateTriggerContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *CreateTriggerContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT, 0)
}

func (s *CreateTriggerContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *CreateTriggerContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *CreateTriggerContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateTriggerContext) FOLLOWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOLLOWS, 0)
}

func (s *CreateTriggerContext) PRECEDES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRECEDES, 0)
}

func (s *CreateTriggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateTriggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateTriggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateTrigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateTrigger() (localctx ICreateTriggerContext) {
	localctx = NewCreateTriggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, MySqlParserRULE_createTrigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1171)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(1173)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(1172)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(1175)
		p.Match(MySqlParserTRIGGER)
	}
	{
		p.SetState(1176)

		var _x = p.FullId()

		localctx.(*CreateTriggerContext).thisTrigger = _x
	}
	{
		p.SetState(1177)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CreateTriggerContext).triggerTime = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserBEFORE || _la == MySqlParserAFTER) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CreateTriggerContext).triggerTime = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1178)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CreateTriggerContext).triggerEvent = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDELETE || _la == MySqlParserINSERT || _la == MySqlParserUPDATE) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CreateTriggerContext).triggerEvent = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1179)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(1180)
		p.TableName()
	}
	{
		p.SetState(1181)
		p.Match(MySqlParserFOR)
	}
	{
		p.SetState(1182)
		p.Match(MySqlParserEACH)
	}
	{
		p.SetState(1183)
		p.Match(MySqlParserROW)
	}
	p.SetState(1186)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1184)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateTriggerContext).triggerPlace = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFOLLOWS || _la == MySqlParserPRECEDES) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateTriggerContext).triggerPlace = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1185)

			var _x = p.FullId()

			localctx.(*CreateTriggerContext).otherTrigger = _x
		}

	}
	{
		p.SetState(1188)
		p.RoutineBody()
	}

	return localctx
}

// ICreateViewContext is an interface to support dynamic dispatch.
type ICreateViewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlgType returns the algType token.
	GetAlgType() antlr.Token

	// GetSecContext returns the secContext token.
	GetSecContext() antlr.Token

	// GetCheckOption returns the checkOption token.
	GetCheckOption() antlr.Token

	// SetAlgType sets the algType token.
	SetAlgType(antlr.Token)

	// SetSecContext sets the secContext token.
	SetSecContext(antlr.Token)

	// SetCheckOption sets the checkOption token.
	SetCheckOption(antlr.Token)

	// IsCreateViewContext differentiates from other interfaces.
	IsCreateViewContext()
}

type CreateViewContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	algType     antlr.Token
	secContext  antlr.Token
	checkOption antlr.Token
}

func NewEmptyCreateViewContext() *CreateViewContext {
	var p = new(CreateViewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createView
	return p
}

func (*CreateViewContext) IsCreateViewContext() {}

func NewCreateViewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateViewContext {
	var p = new(CreateViewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createView

	return p
}

func (s *CreateViewContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateViewContext) GetAlgType() antlr.Token { return s.algType }

func (s *CreateViewContext) GetSecContext() antlr.Token { return s.secContext }

func (s *CreateViewContext) GetCheckOption() antlr.Token { return s.checkOption }

func (s *CreateViewContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *CreateViewContext) SetSecContext(v antlr.Token) { s.secContext = v }

func (s *CreateViewContext) SetCheckOption(v antlr.Token) { s.checkOption = v }

func (s *CreateViewContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *CreateViewContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *CreateViewContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *CreateViewContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *CreateViewContext) OR() antlr.TerminalNode {
	return s.GetToken(MySqlParserOR, 0)
}

func (s *CreateViewContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *CreateViewContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *CreateViewContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *CreateViewContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *CreateViewContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *CreateViewContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECURITY, 0)
}

func (s *CreateViewContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CreateViewContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *CreateViewContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CreateViewContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *CreateViewContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *CreateViewContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *CreateViewContext) UNDEFINED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDEFINED, 0)
}

func (s *CreateViewContext) MERGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMERGE, 0)
}

func (s *CreateViewContext) TEMPTABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPTABLE, 0)
}

func (s *CreateViewContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *CreateViewContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVOKER, 0)
}

func (s *CreateViewContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADED, 0)
}

func (s *CreateViewContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *CreateViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateViewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateViewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateView(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateView() (localctx ICreateViewContext) {
	localctx = NewCreateViewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, MySqlParserRULE_createView)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1190)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(1193)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserOR {
		{
			p.SetState(1191)
			p.Match(MySqlParserOR)
		}
		{
			p.SetState(1192)
			p.Match(MySqlParserREPLACE)
		}

	}
	p.SetState(1198)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALGORITHM {
		{
			p.SetState(1195)
			p.Match(MySqlParserALGORITHM)
		}
		{
			p.SetState(1196)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(1197)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateViewContext).algType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserMERGE || _la == MySqlParserTEMPTABLE || _la == MySqlParserUNDEFINED) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateViewContext).algType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1201)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(1200)
			p.OwnerStatement()
		}

	}
	p.SetState(1206)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSQL {
		{
			p.SetState(1203)
			p.Match(MySqlParserSQL)
		}
		{
			p.SetState(1204)
			p.Match(MySqlParserSECURITY)
		}
		{
			p.SetState(1205)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CreateViewContext).secContext = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFINER || _la == MySqlParserINVOKER) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CreateViewContext).secContext = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1208)
		p.Match(MySqlParserVIEW)
	}
	{
		p.SetState(1209)
		p.FullId()
	}
	p.SetState(1214)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(1210)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1211)
			p.UidList()
		}
		{
			p.SetState(1212)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	{
		p.SetState(1216)
		p.Match(MySqlParserAS)
	}
	{
		p.SetState(1217)
		p.SelectStatement()
	}
	p.SetState(1224)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWITH {
		{
			p.SetState(1218)
			p.Match(MySqlParserWITH)
		}
		p.SetState(1220)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCASCADED || _la == MySqlParserLOCAL {
			{
				p.SetState(1219)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*CreateViewContext).checkOption = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserCASCADED || _la == MySqlParserLOCAL) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*CreateViewContext).checkOption = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1222)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(1223)
			p.Match(MySqlParserOPTION)
		}

	}

	return localctx
}

// ICreateDatabaseOptionContext is an interface to support dynamic dispatch.
type ICreateDatabaseOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDefaultToken returns the defaultToken token.
	GetDefaultToken() antlr.Token

	// GetCharsetDefault returns the charsetDefault token.
	GetCharsetDefault() antlr.Token

	// SetDefaultToken sets the defaultToken token.
	SetDefaultToken(antlr.Token)

	// SetCharsetDefault sets the charsetDefault token.
	SetCharsetDefault(antlr.Token)

	// IsCreateDatabaseOptionContext differentiates from other interfaces.
	IsCreateDatabaseOptionContext()
}

type CreateDatabaseOptionContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	defaultToken   antlr.Token
	charsetDefault antlr.Token
}

func NewEmptyCreateDatabaseOptionContext() *CreateDatabaseOptionContext {
	var p = new(CreateDatabaseOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createDatabaseOption
	return p
}

func (*CreateDatabaseOptionContext) IsCreateDatabaseOptionContext() {}

func NewCreateDatabaseOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateDatabaseOptionContext {
	var p = new(CreateDatabaseOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createDatabaseOption

	return p
}

func (s *CreateDatabaseOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateDatabaseOptionContext) GetDefaultToken() antlr.Token { return s.defaultToken }

func (s *CreateDatabaseOptionContext) GetCharsetDefault() antlr.Token { return s.charsetDefault }

func (s *CreateDatabaseOptionContext) SetDefaultToken(v antlr.Token) { s.defaultToken = v }

func (s *CreateDatabaseOptionContext) SetCharsetDefault(v antlr.Token) { s.charsetDefault = v }

func (s *CreateDatabaseOptionContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *CreateDatabaseOptionContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *CreateDatabaseOptionContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET, 0)
}

func (s *CreateDatabaseOptionContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *CreateDatabaseOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *CreateDatabaseOptionContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDEFAULT)
}

func (s *CreateDatabaseOptionContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, i)
}

func (s *CreateDatabaseOptionContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *CreateDatabaseOptionContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *CreateDatabaseOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDatabaseOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateDatabaseOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateDatabaseOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateDatabaseOption() (localctx ICreateDatabaseOptionContext) {
	localctx = NewCreateDatabaseOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, MySqlParserRULE_createDatabaseOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1249)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1227)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(1226)

				var _m = p.Match(MySqlParserDEFAULT)

				localctx.(*CreateDatabaseOptionContext).defaultToken = _m
			}

		}
		p.SetState(1232)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCHARACTER:
			{
				p.SetState(1229)
				p.Match(MySqlParserCHARACTER)
			}
			{
				p.SetState(1230)
				p.Match(MySqlParserSET)
			}

		case MySqlParserCHARSET:
			{
				p.SetState(1231)
				p.Match(MySqlParserCHARSET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1235)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1234)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(1239)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserBINARY, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL:
			{
				p.SetState(1237)
				p.CharsetName()
			}

		case MySqlParserDEFAULT:
			{
				p.SetState(1238)

				var _m = p.Match(MySqlParserDEFAULT)

				localctx.(*CreateDatabaseOptionContext).charsetDefault = _m
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1242)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(1241)

				var _m = p.Match(MySqlParserDEFAULT)

				localctx.(*CreateDatabaseOptionContext).defaultToken = _m
			}

		}
		{
			p.SetState(1244)
			p.Match(MySqlParserCOLLATE)
		}
		p.SetState(1246)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1245)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1248)
			p.CollationName()
		}

	}

	return localctx
}

// IOwnerStatementContext is an interface to support dynamic dispatch.
type IOwnerStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOwnerStatementContext differentiates from other interfaces.
	IsOwnerStatementContext()
}

type OwnerStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOwnerStatementContext() *OwnerStatementContext {
	var p = new(OwnerStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_ownerStatement
	return p
}

func (*OwnerStatementContext) IsOwnerStatementContext() {}

func NewOwnerStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OwnerStatementContext {
	var p = new(OwnerStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_ownerStatement

	return p
}

func (s *OwnerStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OwnerStatementContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *OwnerStatementContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *OwnerStatementContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *OwnerStatementContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_USER, 0)
}

func (s *OwnerStatementContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *OwnerStatementContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *OwnerStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OwnerStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OwnerStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitOwnerStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) OwnerStatement() (localctx IOwnerStatementContext) {
	localctx = NewOwnerStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, MySqlParserRULE_ownerStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1251)
		p.Match(MySqlParserDEFINER)
	}
	{
		p.SetState(1252)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	p.SetState(1259)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserSTRING_USER_NAME:
		{
			p.SetState(1253)
			p.UserName()
		}

	case MySqlParserCURRENT_USER:
		{
			p.SetState(1254)
			p.Match(MySqlParserCURRENT_USER)
		}
		p.SetState(1257)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(1255)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1256)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IScheduleExpressionContext is an interface to support dynamic dispatch.
type IScheduleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScheduleExpressionContext differentiates from other interfaces.
	IsScheduleExpressionContext()
}

type ScheduleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScheduleExpressionContext() *ScheduleExpressionContext {
	var p = new(ScheduleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_scheduleExpression
	return p
}

func (*ScheduleExpressionContext) IsScheduleExpressionContext() {}

func NewScheduleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScheduleExpressionContext {
	var p = new(ScheduleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_scheduleExpression

	return p
}

func (s *ScheduleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ScheduleExpressionContext) CopyFrom(ctx *ScheduleExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ScheduleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScheduleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PreciseScheduleContext struct {
	*ScheduleExpressionContext
}

func NewPreciseScheduleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PreciseScheduleContext {
	var p = new(PreciseScheduleContext)

	p.ScheduleExpressionContext = NewEmptyScheduleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ScheduleExpressionContext))

	return p
}

func (s *PreciseScheduleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PreciseScheduleContext) AT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAT, 0)
}

func (s *PreciseScheduleContext) TimestampValue() ITimestampValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestampValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimestampValueContext)
}

func (s *PreciseScheduleContext) AllIntervalExpr() []IIntervalExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntervalExprContext)(nil)).Elem())
	var tst = make([]IIntervalExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntervalExprContext)
		}
	}

	return tst
}

func (s *PreciseScheduleContext) IntervalExpr(i int) IIntervalExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntervalExprContext)
}

func (s *PreciseScheduleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPreciseSchedule(s)

	default:
		return t.VisitChildren(s)
	}
}

type IntervalScheduleContext struct {
	*ScheduleExpressionContext
	startTimestamp ITimestampValueContext
	_intervalExpr  IIntervalExprContext
	startIntervals []IIntervalExprContext
	endTimestamp   ITimestampValueContext
	endIntervals   []IIntervalExprContext
}

func NewIntervalScheduleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntervalScheduleContext {
	var p = new(IntervalScheduleContext)

	p.ScheduleExpressionContext = NewEmptyScheduleExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ScheduleExpressionContext))

	return p
}

func (s *IntervalScheduleContext) GetStartTimestamp() ITimestampValueContext { return s.startTimestamp }

func (s *IntervalScheduleContext) Get_intervalExpr() IIntervalExprContext { return s._intervalExpr }

func (s *IntervalScheduleContext) GetEndTimestamp() ITimestampValueContext { return s.endTimestamp }

func (s *IntervalScheduleContext) SetStartTimestamp(v ITimestampValueContext) { s.startTimestamp = v }

func (s *IntervalScheduleContext) Set_intervalExpr(v IIntervalExprContext) { s._intervalExpr = v }

func (s *IntervalScheduleContext) SetEndTimestamp(v ITimestampValueContext) { s.endTimestamp = v }

func (s *IntervalScheduleContext) GetStartIntervals() []IIntervalExprContext { return s.startIntervals }

func (s *IntervalScheduleContext) GetEndIntervals() []IIntervalExprContext { return s.endIntervals }

func (s *IntervalScheduleContext) SetStartIntervals(v []IIntervalExprContext) { s.startIntervals = v }

func (s *IntervalScheduleContext) SetEndIntervals(v []IIntervalExprContext) { s.endIntervals = v }

func (s *IntervalScheduleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalScheduleContext) EVERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVERY, 0)
}

func (s *IntervalScheduleContext) IntervalType() IIntervalTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalTypeContext)
}

func (s *IntervalScheduleContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *IntervalScheduleContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IntervalScheduleContext) STARTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTARTS, 0)
}

func (s *IntervalScheduleContext) ENDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserENDS, 0)
}

func (s *IntervalScheduleContext) AllTimestampValue() []ITimestampValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITimestampValueContext)(nil)).Elem())
	var tst = make([]ITimestampValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITimestampValueContext)
		}
	}

	return tst
}

func (s *IntervalScheduleContext) TimestampValue(i int) ITimestampValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestampValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITimestampValueContext)
}

func (s *IntervalScheduleContext) AllIntervalExpr() []IIntervalExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntervalExprContext)(nil)).Elem())
	var tst = make([]IIntervalExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntervalExprContext)
		}
	}

	return tst
}

func (s *IntervalScheduleContext) IntervalExpr(i int) IIntervalExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntervalExprContext)
}

func (s *IntervalScheduleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIntervalSchedule(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ScheduleExpression() (localctx IScheduleExpressionContext) {
	localctx = NewScheduleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, MySqlParserRULE_scheduleExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1295)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserAT:
		localctx = NewPreciseScheduleContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1261)
			p.Match(MySqlParserAT)
		}
		{
			p.SetState(1262)
			p.TimestampValue()
		}
		p.SetState(1266)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserPLUS {
			{
				p.SetState(1263)
				p.IntervalExpr()
			}

			p.SetState(1268)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySqlParserEVERY:
		localctx = NewIntervalScheduleContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1269)
			p.Match(MySqlParserEVERY)
		}
		p.SetState(1272)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1270)
				p.DecimalLiteral()
			}

		case 2:
			{
				p.SetState(1271)
				p.expression(0)
			}

		}
		{
			p.SetState(1274)
			p.IntervalType()
		}
		p.SetState(1283)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSTARTS {
			{
				p.SetState(1275)
				p.Match(MySqlParserSTARTS)
			}
			{
				p.SetState(1276)

				var _x = p.TimestampValue()

				localctx.(*IntervalScheduleContext).startTimestamp = _x
			}
			p.SetState(1280)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserPLUS {
				{
					p.SetState(1277)

					var _x = p.IntervalExpr()

					localctx.(*IntervalScheduleContext)._intervalExpr = _x
				}
				localctx.(*IntervalScheduleContext).startIntervals = append(localctx.(*IntervalScheduleContext).startIntervals, localctx.(*IntervalScheduleContext)._intervalExpr)

				p.SetState(1282)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(1293)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserENDS {
			{
				p.SetState(1285)
				p.Match(MySqlParserENDS)
			}
			{
				p.SetState(1286)

				var _x = p.TimestampValue()

				localctx.(*IntervalScheduleContext).endTimestamp = _x
			}
			p.SetState(1290)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserPLUS {
				{
					p.SetState(1287)

					var _x = p.IntervalExpr()

					localctx.(*IntervalScheduleContext)._intervalExpr = _x
				}
				localctx.(*IntervalScheduleContext).endIntervals = append(localctx.(*IntervalScheduleContext).endIntervals, localctx.(*IntervalScheduleContext)._intervalExpr)

				p.SetState(1292)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITimestampValueContext is an interface to support dynamic dispatch.
type ITimestampValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimestampValueContext differentiates from other interfaces.
	IsTimestampValueContext()
}

type TimestampValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimestampValueContext() *TimestampValueContext {
	var p = new(TimestampValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_timestampValue
	return p
}

func (*TimestampValueContext) IsTimestampValueContext() {}

func NewTimestampValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimestampValueContext {
	var p = new(TimestampValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_timestampValue

	return p
}

func (s *TimestampValueContext) GetParser() antlr.Parser { return s.parser }

func (s *TimestampValueContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIMESTAMP, 0)
}

func (s *TimestampValueContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *TimestampValueContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *TimestampValueContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TimestampValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimestampValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimestampValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTimestampValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TimestampValue() (localctx ITimestampValueContext) {
	localctx = NewTimestampValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, MySqlParserRULE_timestampValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1301)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1297)
			p.Match(MySqlParserCURRENT_TIMESTAMP)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1298)
			p.StringLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1299)
			p.DecimalLiteral()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1300)
			p.expression(0)
		}

	}

	return localctx
}

// IIntervalExprContext is an interface to support dynamic dispatch.
type IIntervalExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalExprContext differentiates from other interfaces.
	IsIntervalExprContext()
}

type IntervalExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalExprContext() *IntervalExprContext {
	var p = new(IntervalExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_intervalExpr
	return p
}

func (*IntervalExprContext) IsIntervalExprContext() {}

func NewIntervalExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalExprContext {
	var p = new(IntervalExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_intervalExpr

	return p
}

func (s *IntervalExprContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalExprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUS, 0)
}

func (s *IntervalExprContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERVAL, 0)
}

func (s *IntervalExprContext) IntervalType() IIntervalTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalTypeContext)
}

func (s *IntervalExprContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *IntervalExprContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IntervalExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIntervalExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IntervalExpr() (localctx IIntervalExprContext) {
	localctx = NewIntervalExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, MySqlParserRULE_intervalExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1303)
		p.Match(MySqlParserPLUS)
	}
	{
		p.SetState(1304)
		p.Match(MySqlParserINTERVAL)
	}
	p.SetState(1307)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1305)
			p.DecimalLiteral()
		}

	case 2:
		{
			p.SetState(1306)
			p.expression(0)
		}

	}
	{
		p.SetState(1309)
		p.IntervalType()
	}

	return localctx
}

// IIntervalTypeContext is an interface to support dynamic dispatch.
type IIntervalTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalTypeContext differentiates from other interfaces.
	IsIntervalTypeContext()
}

type IntervalTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalTypeContext() *IntervalTypeContext {
	var p = new(IntervalTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_intervalType
	return p
}

func (*IntervalTypeContext) IsIntervalTypeContext() {}

func NewIntervalTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalTypeContext {
	var p = new(IntervalTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_intervalType

	return p
}

func (s *IntervalTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalTypeContext) IntervalTypeBase() IIntervalTypeBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalTypeBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalTypeBaseContext)
}

func (s *IntervalTypeContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR, 0)
}

func (s *IntervalTypeContext) YEAR_MONTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR_MONTH, 0)
}

func (s *IntervalTypeContext) DAY_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY_HOUR, 0)
}

func (s *IntervalTypeContext) DAY_MINUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY_MINUTE, 0)
}

func (s *IntervalTypeContext) DAY_SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY_SECOND, 0)
}

func (s *IntervalTypeContext) HOUR_MINUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR_MINUTE, 0)
}

func (s *IntervalTypeContext) HOUR_SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR_SECOND, 0)
}

func (s *IntervalTypeContext) MINUTE_SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUTE_SECOND, 0)
}

func (s *IntervalTypeContext) SECOND_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECOND_MICROSECOND, 0)
}

func (s *IntervalTypeContext) MINUTE_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUTE_MICROSECOND, 0)
}

func (s *IntervalTypeContext) HOUR_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR_MICROSECOND, 0)
}

func (s *IntervalTypeContext) DAY_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY_MICROSECOND, 0)
}

func (s *IntervalTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIntervalType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IntervalType() (localctx IIntervalTypeContext) {
	localctx = NewIntervalTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, MySqlParserRULE_intervalType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1324)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1311)
			p.IntervalTypeBase()
		}

	case MySqlParserYEAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1312)
			p.Match(MySqlParserYEAR)
		}

	case MySqlParserYEAR_MONTH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1313)
			p.Match(MySqlParserYEAR_MONTH)
		}

	case MySqlParserDAY_HOUR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1314)
			p.Match(MySqlParserDAY_HOUR)
		}

	case MySqlParserDAY_MINUTE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1315)
			p.Match(MySqlParserDAY_MINUTE)
		}

	case MySqlParserDAY_SECOND:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1316)
			p.Match(MySqlParserDAY_SECOND)
		}

	case MySqlParserHOUR_MINUTE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1317)
			p.Match(MySqlParserHOUR_MINUTE)
		}

	case MySqlParserHOUR_SECOND:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1318)
			p.Match(MySqlParserHOUR_SECOND)
		}

	case MySqlParserMINUTE_SECOND:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1319)
			p.Match(MySqlParserMINUTE_SECOND)
		}

	case MySqlParserSECOND_MICROSECOND:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1320)
			p.Match(MySqlParserSECOND_MICROSECOND)
		}

	case MySqlParserMINUTE_MICROSECOND:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1321)
			p.Match(MySqlParserMINUTE_MICROSECOND)
		}

	case MySqlParserHOUR_MICROSECOND:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1322)
			p.Match(MySqlParserHOUR_MICROSECOND)
		}

	case MySqlParserDAY_MICROSECOND:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1323)
			p.Match(MySqlParserDAY_MICROSECOND)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEnableTypeContext is an interface to support dynamic dispatch.
type IEnableTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnableTypeContext differentiates from other interfaces.
	IsEnableTypeContext()
}

type EnableTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnableTypeContext() *EnableTypeContext {
	var p = new(EnableTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_enableType
	return p
}

func (*EnableTypeContext) IsEnableTypeContext() {}

func NewEnableTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnableTypeContext {
	var p = new(EnableTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_enableType

	return p
}

func (s *EnableTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *EnableTypeContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENABLE, 0)
}

func (s *EnableTypeContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISABLE, 0)
}

func (s *EnableTypeContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *EnableTypeContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *EnableTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnableTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnableTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitEnableType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) EnableType() (localctx IEnableTypeContext) {
	localctx = NewEnableTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, MySqlParserRULE_enableType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1331)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1326)
			p.Match(MySqlParserENABLE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1327)
			p.Match(MySqlParserDISABLE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1328)
			p.Match(MySqlParserDISABLE)
		}
		{
			p.SetState(1329)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(1330)
			p.Match(MySqlParserSLAVE)
		}

	}

	return localctx
}

// IIndexTypeContext is an interface to support dynamic dispatch.
type IIndexTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexTypeContext differentiates from other interfaces.
	IsIndexTypeContext()
}

type IndexTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexTypeContext() *IndexTypeContext {
	var p = new(IndexTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexType
	return p
}

func (*IndexTypeContext) IsIndexTypeContext() {}

func NewIndexTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexTypeContext {
	var p = new(IndexTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexType

	return p
}

func (s *IndexTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexTypeContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *IndexTypeContext) BTREE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBTREE, 0)
}

func (s *IndexTypeContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySqlParserHASH, 0)
}

func (s *IndexTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIndexType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IndexType() (localctx IIndexTypeContext) {
	localctx = NewIndexTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, MySqlParserRULE_indexType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1333)
		p.Match(MySqlParserUSING)
	}
	{
		p.SetState(1334)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserBTREE || _la == MySqlParserHASH) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIndexOptionContext is an interface to support dynamic dispatch.
type IIndexOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexOptionContext differentiates from other interfaces.
	IsIndexOptionContext()
}

type IndexOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexOptionContext() *IndexOptionContext {
	var p = new(IndexOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexOption
	return p
}

func (*IndexOptionContext) IsIndexOptionContext() {}

func NewIndexOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexOptionContext {
	var p = new(IndexOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexOption

	return p
}

func (s *IndexOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexOptionContext) KEY_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY_BLOCK_SIZE, 0)
}

func (s *IndexOptionContext) FileSizeLiteral() IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *IndexOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *IndexOptionContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *IndexOptionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *IndexOptionContext) PARSER() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARSER, 0)
}

func (s *IndexOptionContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *IndexOptionContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *IndexOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *IndexOptionContext) INVISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVISIBLE, 0)
}

func (s *IndexOptionContext) VISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVISIBLE, 0)
}

func (s *IndexOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIndexOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IndexOption() (localctx IIndexOptionContext) {
	localctx = NewIndexOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, MySqlParserRULE_indexOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1349)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserKEY_BLOCK_SIZE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1336)
			p.Match(MySqlParserKEY_BLOCK_SIZE)
		}
		p.SetState(1338)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1337)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1340)
			p.FileSizeLiteral()
		}

	case MySqlParserUSING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1341)
			p.IndexType()
		}

	case MySqlParserWITH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1342)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(1343)
			p.Match(MySqlParserPARSER)
		}
		{
			p.SetState(1344)
			p.Uid()
		}

	case MySqlParserCOMMENT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1345)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(1346)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserINVISIBLE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1347)
			p.Match(MySqlParserINVISIBLE)
		}

	case MySqlParserVISIBLE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1348)
			p.Match(MySqlParserVISIBLE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProcedureParameterContext is an interface to support dynamic dispatch.
type IProcedureParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDirection returns the direction token.
	GetDirection() antlr.Token

	// SetDirection sets the direction token.
	SetDirection(antlr.Token)

	// IsProcedureParameterContext differentiates from other interfaces.
	IsProcedureParameterContext()
}

type ProcedureParameterContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	direction antlr.Token
}

func NewEmptyProcedureParameterContext() *ProcedureParameterContext {
	var p = new(ProcedureParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_procedureParameter
	return p
}

func (*ProcedureParameterContext) IsProcedureParameterContext() {}

func NewProcedureParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProcedureParameterContext {
	var p = new(ProcedureParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_procedureParameter

	return p
}

func (s *ProcedureParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ProcedureParameterContext) GetDirection() antlr.Token { return s.direction }

func (s *ProcedureParameterContext) SetDirection(v antlr.Token) { s.direction = v }

func (s *ProcedureParameterContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ProcedureParameterContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *ProcedureParameterContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *ProcedureParameterContext) OUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserOUT, 0)
}

func (s *ProcedureParameterContext) INOUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINOUT, 0)
}

func (s *ProcedureParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProcedureParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProcedureParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitProcedureParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ProcedureParameter() (localctx IProcedureParameterContext) {
	localctx = NewProcedureParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, MySqlParserRULE_procedureParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1352)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIN || _la == MySqlParserINOUT || _la == MySqlParserOUT {
		{
			p.SetState(1351)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ProcedureParameterContext).direction = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserIN || _la == MySqlParserINOUT || _la == MySqlParserOUT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ProcedureParameterContext).direction = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1354)
		p.Uid()
	}
	{
		p.SetState(1355)
		p.DataType()
	}

	return localctx
}

// IFunctionParameterContext is an interface to support dynamic dispatch.
type IFunctionParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionParameterContext differentiates from other interfaces.
	IsFunctionParameterContext()
}

type FunctionParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionParameterContext() *FunctionParameterContext {
	var p = new(FunctionParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_functionParameter
	return p
}

func (*FunctionParameterContext) IsFunctionParameterContext() {}

func NewFunctionParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionParameterContext {
	var p = new(FunctionParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_functionParameter

	return p
}

func (s *FunctionParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionParameterContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *FunctionParameterContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *FunctionParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFunctionParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) FunctionParameter() (localctx IFunctionParameterContext) {
	localctx = NewFunctionParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, MySqlParserRULE_functionParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1357)
		p.Uid()
	}
	{
		p.SetState(1358)
		p.DataType()
	}

	return localctx
}

// IRoutineOptionContext is an interface to support dynamic dispatch.
type IRoutineOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoutineOptionContext differentiates from other interfaces.
	IsRoutineOptionContext()
}

type RoutineOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoutineOptionContext() *RoutineOptionContext {
	var p = new(RoutineOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_routineOption
	return p
}

func (*RoutineOptionContext) IsRoutineOptionContext() {}

func NewRoutineOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RoutineOptionContext {
	var p = new(RoutineOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_routineOption

	return p
}

func (s *RoutineOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *RoutineOptionContext) CopyFrom(ctx *RoutineOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *RoutineOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type RoutineBehaviorContext struct {
	*RoutineOptionContext
}

func NewRoutineBehaviorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RoutineBehaviorContext {
	var p = new(RoutineBehaviorContext)

	p.RoutineOptionContext = NewEmptyRoutineOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoutineOptionContext))

	return p
}

func (s *RoutineBehaviorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineBehaviorContext) DETERMINISTIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDETERMINISTIC, 0)
}

func (s *RoutineBehaviorContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *RoutineBehaviorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRoutineBehavior(s)

	default:
		return t.VisitChildren(s)
	}
}

type RoutineLanguageContext struct {
	*RoutineOptionContext
}

func NewRoutineLanguageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RoutineLanguageContext {
	var p = new(RoutineLanguageContext)

	p.RoutineOptionContext = NewEmptyRoutineOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoutineOptionContext))

	return p
}

func (s *RoutineLanguageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineLanguageContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLANGUAGE, 0)
}

func (s *RoutineLanguageContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *RoutineLanguageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRoutineLanguage(s)

	default:
		return t.VisitChildren(s)
	}
}

type RoutineCommentContext struct {
	*RoutineOptionContext
}

func NewRoutineCommentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RoutineCommentContext {
	var p = new(RoutineCommentContext)

	p.RoutineOptionContext = NewEmptyRoutineOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoutineOptionContext))

	return p
}

func (s *RoutineCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineCommentContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *RoutineCommentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *RoutineCommentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRoutineComment(s)

	default:
		return t.VisitChildren(s)
	}
}

type RoutineSecurityContext struct {
	*RoutineOptionContext
	context antlr.Token
}

func NewRoutineSecurityContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RoutineSecurityContext {
	var p = new(RoutineSecurityContext)

	p.RoutineOptionContext = NewEmptyRoutineOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoutineOptionContext))

	return p
}

func (s *RoutineSecurityContext) GetContext() antlr.Token { return s.context }

func (s *RoutineSecurityContext) SetContext(v antlr.Token) { s.context = v }

func (s *RoutineSecurityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineSecurityContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *RoutineSecurityContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECURITY, 0)
}

func (s *RoutineSecurityContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *RoutineSecurityContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVOKER, 0)
}

func (s *RoutineSecurityContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRoutineSecurity(s)

	default:
		return t.VisitChildren(s)
	}
}

type RoutineDataContext struct {
	*RoutineOptionContext
}

func NewRoutineDataContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RoutineDataContext {
	var p = new(RoutineDataContext)

	p.RoutineOptionContext = NewEmptyRoutineOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RoutineOptionContext))

	return p
}

func (s *RoutineDataContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineDataContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTAINS, 0)
}

func (s *RoutineDataContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *RoutineDataContext) NO() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, 0)
}

func (s *RoutineDataContext) READS() antlr.TerminalNode {
	return s.GetToken(MySqlParserREADS, 0)
}

func (s *RoutineDataContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *RoutineDataContext) MODIFIES() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODIFIES, 0)
}

func (s *RoutineDataContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRoutineData(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) RoutineOption() (localctx IRoutineOptionContext) {
	localctx = NewRoutineOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, MySqlParserRULE_routineOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1383)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCOMMENT:
		localctx = NewRoutineCommentContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1360)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(1361)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserLANGUAGE:
		localctx = NewRoutineLanguageContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1362)
			p.Match(MySqlParserLANGUAGE)
		}
		{
			p.SetState(1363)
			p.Match(MySqlParserSQL)
		}

	case MySqlParserDETERMINISTIC, MySqlParserNOT:
		localctx = NewRoutineBehaviorContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1365)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(1364)
				p.Match(MySqlParserNOT)
			}

		}
		{
			p.SetState(1367)
			p.Match(MySqlParserDETERMINISTIC)
		}

	case MySqlParserMODIFIES, MySqlParserREADS, MySqlParserCONTAINS, MySqlParserNO:
		localctx = NewRoutineDataContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1378)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCONTAINS:
			{
				p.SetState(1368)
				p.Match(MySqlParserCONTAINS)
			}
			{
				p.SetState(1369)
				p.Match(MySqlParserSQL)
			}

		case MySqlParserNO:
			{
				p.SetState(1370)
				p.Match(MySqlParserNO)
			}
			{
				p.SetState(1371)
				p.Match(MySqlParserSQL)
			}

		case MySqlParserREADS:
			{
				p.SetState(1372)
				p.Match(MySqlParserREADS)
			}
			{
				p.SetState(1373)
				p.Match(MySqlParserSQL)
			}
			{
				p.SetState(1374)
				p.Match(MySqlParserDATA)
			}

		case MySqlParserMODIFIES:
			{
				p.SetState(1375)
				p.Match(MySqlParserMODIFIES)
			}
			{
				p.SetState(1376)
				p.Match(MySqlParserSQL)
			}
			{
				p.SetState(1377)
				p.Match(MySqlParserDATA)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySqlParserSQL:
		localctx = NewRoutineSecurityContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1380)
			p.Match(MySqlParserSQL)
		}
		{
			p.SetState(1381)
			p.Match(MySqlParserSECURITY)
		}
		{
			p.SetState(1382)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*RoutineSecurityContext).context = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFINER || _la == MySqlParserINVOKER) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*RoutineSecurityContext).context = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IServerOptionContext is an interface to support dynamic dispatch.
type IServerOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsServerOptionContext differentiates from other interfaces.
	IsServerOptionContext()
}

type ServerOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyServerOptionContext() *ServerOptionContext {
	var p = new(ServerOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_serverOption
	return p
}

func (*ServerOptionContext) IsServerOptionContext() {}

func NewServerOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ServerOptionContext {
	var p = new(ServerOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_serverOption

	return p
}

func (s *ServerOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ServerOptionContext) HOST() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOST, 0)
}

func (s *ServerOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *ServerOptionContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *ServerOptionContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *ServerOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *ServerOptionContext) SOCKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOCKET, 0)
}

func (s *ServerOptionContext) OWNER() antlr.TerminalNode {
	return s.GetToken(MySqlParserOWNER, 0)
}

func (s *ServerOptionContext) PORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPORT, 0)
}

func (s *ServerOptionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *ServerOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ServerOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ServerOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitServerOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ServerOption() (localctx IServerOptionContext) {
	localctx = NewServerOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, MySqlParserRULE_serverOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1399)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserHOST:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1385)
			p.Match(MySqlParserHOST)
		}
		{
			p.SetState(1386)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserDATABASE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1387)
			p.Match(MySqlParserDATABASE)
		}
		{
			p.SetState(1388)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserUSER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1389)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(1390)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserPASSWORD:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1391)
			p.Match(MySqlParserPASSWORD)
		}
		{
			p.SetState(1392)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserSOCKET:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1393)
			p.Match(MySqlParserSOCKET)
		}
		{
			p.SetState(1394)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserOWNER:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1395)
			p.Match(MySqlParserOWNER)
		}
		{
			p.SetState(1396)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserPORT:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1397)
			p.Match(MySqlParserPORT)
		}
		{
			p.SetState(1398)
			p.DecimalLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreateDefinitionsContext is an interface to support dynamic dispatch.
type ICreateDefinitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateDefinitionsContext differentiates from other interfaces.
	IsCreateDefinitionsContext()
}

type CreateDefinitionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateDefinitionsContext() *CreateDefinitionsContext {
	var p = new(CreateDefinitionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createDefinitions
	return p
}

func (*CreateDefinitionsContext) IsCreateDefinitionsContext() {}

func NewCreateDefinitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateDefinitionsContext {
	var p = new(CreateDefinitionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createDefinitions

	return p
}

func (s *CreateDefinitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateDefinitionsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CreateDefinitionsContext) AllCreateDefinition() []ICreateDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreateDefinitionContext)(nil)).Elem())
	var tst = make([]ICreateDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreateDefinitionContext)
		}
	}

	return tst
}

func (s *CreateDefinitionsContext) CreateDefinition(i int) ICreateDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreateDefinitionContext)
}

func (s *CreateDefinitionsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CreateDefinitionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CreateDefinitionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CreateDefinitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDefinitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateDefinitionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateDefinitions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateDefinitions() (localctx ICreateDefinitionsContext) {
	localctx = NewCreateDefinitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, MySqlParserRULE_createDefinitions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1401)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(1402)
		p.CreateDefinition()
	}
	p.SetState(1407)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(1403)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(1404)
			p.CreateDefinition()
		}

		p.SetState(1409)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1410)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// ICreateDefinitionContext is an interface to support dynamic dispatch.
type ICreateDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateDefinitionContext differentiates from other interfaces.
	IsCreateDefinitionContext()
}

type CreateDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateDefinitionContext() *CreateDefinitionContext {
	var p = new(CreateDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createDefinition
	return p
}

func (*CreateDefinitionContext) IsCreateDefinitionContext() {}

func NewCreateDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateDefinitionContext {
	var p = new(CreateDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createDefinition

	return p
}

func (s *CreateDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateDefinitionContext) CopyFrom(ctx *CreateDefinitionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *CreateDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ColumnDeclarationContext struct {
	*CreateDefinitionContext
}

func NewColumnDeclarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnDeclarationContext {
	var p = new(ColumnDeclarationContext)

	p.CreateDefinitionContext = NewEmptyCreateDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateDefinitionContext))

	return p
}

func (s *ColumnDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnDeclarationContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ColumnDeclarationContext) ColumnDefinition() IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *ColumnDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColumnDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

type ConstraintDeclarationContext struct {
	*CreateDefinitionContext
}

func NewConstraintDeclarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstraintDeclarationContext {
	var p = new(ConstraintDeclarationContext)

	p.CreateDefinitionContext = NewEmptyCreateDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateDefinitionContext))

	return p
}

func (s *ConstraintDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstraintDeclarationContext) TableConstraint() ITableConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableConstraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableConstraintContext)
}

func (s *ConstraintDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitConstraintDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

type IndexDeclarationContext struct {
	*CreateDefinitionContext
}

func NewIndexDeclarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexDeclarationContext {
	var p = new(IndexDeclarationContext)

	p.CreateDefinitionContext = NewEmptyCreateDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateDefinitionContext))

	return p
}

func (s *IndexDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexDeclarationContext) IndexColumnDefinition() IIndexColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnDefinitionContext)
}

func (s *IndexDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIndexDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateDefinition() (localctx ICreateDefinitionContext) {
	localctx = NewCreateDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, MySqlParserRULE_createDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1417)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		localctx = NewColumnDeclarationContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1412)
			p.Uid()
		}
		{
			p.SetState(1413)
			p.ColumnDefinition()
		}

	case MySqlParserCHECK, MySqlParserCONSTRAINT, MySqlParserFOREIGN, MySqlParserPRIMARY, MySqlParserUNIQUE:
		localctx = NewConstraintDeclarationContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1415)
			p.TableConstraint()
		}

	case MySqlParserFULLTEXT, MySqlParserINDEX, MySqlParserKEY, MySqlParserSPATIAL:
		localctx = NewIndexDeclarationContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1416)
			p.IndexColumnDefinition()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IColumnDefinitionContext is an interface to support dynamic dispatch.
type IColumnDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnDefinitionContext differentiates from other interfaces.
	IsColumnDefinitionContext()
}

type ColumnDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnDefinitionContext() *ColumnDefinitionContext {
	var p = new(ColumnDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_columnDefinition
	return p
}

func (*ColumnDefinitionContext) IsColumnDefinitionContext() {}

func NewColumnDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnDefinitionContext {
	var p = new(ColumnDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_columnDefinition

	return p
}

func (s *ColumnDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnDefinitionContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *ColumnDefinitionContext) AllColumnConstraint() []IColumnConstraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnConstraintContext)(nil)).Elem())
	var tst = make([]IColumnConstraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnConstraintContext)
		}
	}

	return tst
}

func (s *ColumnDefinitionContext) ColumnConstraint(i int) IColumnConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnConstraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnConstraintContext)
}

func (s *ColumnDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColumnDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ColumnDefinition() (localctx IColumnDefinitionContext) {
	localctx = NewColumnDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, MySqlParserRULE_columnDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1419)
		p.DataType()
	}
	p.SetState(1423)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1420)
				p.ColumnConstraint()
			}

		}
		p.SetState(1425)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext())
	}

	return localctx
}

// IColumnConstraintContext is an interface to support dynamic dispatch.
type IColumnConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnConstraintContext differentiates from other interfaces.
	IsColumnConstraintContext()
}

type ColumnConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnConstraintContext() *ColumnConstraintContext {
	var p = new(ColumnConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_columnConstraint
	return p
}

func (*ColumnConstraintContext) IsColumnConstraintContext() {}

func NewColumnConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnConstraintContext {
	var p = new(ColumnConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_columnConstraint

	return p
}

func (s *ColumnConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnConstraintContext) CopyFrom(ctx *ColumnConstraintContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type StorageColumnConstraintContext struct {
	*ColumnConstraintContext
	storageval antlr.Token
}

func NewStorageColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StorageColumnConstraintContext {
	var p = new(StorageColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *StorageColumnConstraintContext) GetStorageval() antlr.Token { return s.storageval }

func (s *StorageColumnConstraintContext) SetStorageval(v antlr.Token) { s.storageval = v }

func (s *StorageColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StorageColumnConstraintContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *StorageColumnConstraintContext) DISK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISK, 0)
}

func (s *StorageColumnConstraintContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *StorageColumnConstraintContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *StorageColumnConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStorageColumnConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type AutoIncrementColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewAutoIncrementColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AutoIncrementColumnConstraintContext {
	var p = new(AutoIncrementColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *AutoIncrementColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AutoIncrementColumnConstraintContext) AUTO_INCREMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTO_INCREMENT, 0)
}

func (s *AutoIncrementColumnConstraintContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *AutoIncrementColumnConstraintContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *AutoIncrementColumnConstraintContext) CurrentTimestamp() ICurrentTimestampContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICurrentTimestampContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICurrentTimestampContext)
}

func (s *AutoIncrementColumnConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAutoIncrementColumnConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type CommentColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewCommentColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CommentColumnConstraintContext {
	var p = new(CommentColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *CommentColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommentColumnConstraintContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *CommentColumnConstraintContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CommentColumnConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCommentColumnConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type UniqueKeyColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewUniqueKeyColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UniqueKeyColumnConstraintContext {
	var p = new(UniqueKeyColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *UniqueKeyColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniqueKeyColumnConstraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIQUE, 0)
}

func (s *UniqueKeyColumnConstraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *UniqueKeyColumnConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUniqueKeyColumnConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type SerialDefaultColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewSerialDefaultColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SerialDefaultColumnConstraintContext {
	var p = new(SerialDefaultColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *SerialDefaultColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SerialDefaultColumnConstraintContext) SERIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERIAL, 0)
}

func (s *SerialDefaultColumnConstraintContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *SerialDefaultColumnConstraintContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *SerialDefaultColumnConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSerialDefaultColumnConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type GeneratedColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewGeneratedColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GeneratedColumnConstraintContext {
	var p = new(GeneratedColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *GeneratedColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GeneratedColumnConstraintContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *GeneratedColumnConstraintContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *GeneratedColumnConstraintContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GeneratedColumnConstraintContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *GeneratedColumnConstraintContext) GENERATED() antlr.TerminalNode {
	return s.GetToken(MySqlParserGENERATED, 0)
}

func (s *GeneratedColumnConstraintContext) ALWAYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserALWAYS, 0)
}

func (s *GeneratedColumnConstraintContext) VIRTUAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIRTUAL, 0)
}

func (s *GeneratedColumnConstraintContext) STORED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORED, 0)
}

func (s *GeneratedColumnConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGeneratedColumnConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type FormatColumnConstraintContext struct {
	*ColumnConstraintContext
	colformat antlr.Token
}

func NewFormatColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FormatColumnConstraintContext {
	var p = new(FormatColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *FormatColumnConstraintContext) GetColformat() antlr.Token { return s.colformat }

func (s *FormatColumnConstraintContext) SetColformat(v antlr.Token) { s.colformat = v }

func (s *FormatColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormatColumnConstraintContext) COLUMN_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN_FORMAT, 0)
}

func (s *FormatColumnConstraintContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIXED, 0)
}

func (s *FormatColumnConstraintContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDYNAMIC, 0)
}

func (s *FormatColumnConstraintContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *FormatColumnConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFormatColumnConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type CollateColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewCollateColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CollateColumnConstraintContext {
	var p = new(CollateColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *CollateColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollateColumnConstraintContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *CollateColumnConstraintContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *CollateColumnConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCollateColumnConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type PrimaryKeyColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewPrimaryKeyColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryKeyColumnConstraintContext {
	var p = new(PrimaryKeyColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *PrimaryKeyColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryKeyColumnConstraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *PrimaryKeyColumnConstraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIMARY, 0)
}

func (s *PrimaryKeyColumnConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPrimaryKeyColumnConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type CheckColumnConstraintContext struct {
	*ColumnConstraintContext
	name IUidContext
}

func NewCheckColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CheckColumnConstraintContext {
	var p = new(CheckColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *CheckColumnConstraintContext) GetName() IUidContext { return s.name }

func (s *CheckColumnConstraintContext) SetName(v IUidContext) { s.name = v }

func (s *CheckColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckColumnConstraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *CheckColumnConstraintContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CheckColumnConstraintContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CheckColumnConstraintContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CheckColumnConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *CheckColumnConstraintContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CheckColumnConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCheckColumnConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type NullColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewNullColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NullColumnConstraintContext {
	var p = new(NullColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *NullColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullColumnConstraintContext) NullNotnull() INullNotnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INullNotnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INullNotnullContext)
}

func (s *NullColumnConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitNullColumnConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type DefaultColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewDefaultColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefaultColumnConstraintContext {
	var p = new(DefaultColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *DefaultColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultColumnConstraintContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *DefaultColumnConstraintContext) DefaultValue() IDefaultValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultValueContext)
}

func (s *DefaultColumnConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDefaultColumnConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type ReferenceColumnConstraintContext struct {
	*ColumnConstraintContext
}

func NewReferenceColumnConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReferenceColumnConstraintContext {
	var p = new(ReferenceColumnConstraintContext)

	p.ColumnConstraintContext = NewEmptyColumnConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ColumnConstraintContext))

	return p
}

func (s *ReferenceColumnConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferenceColumnConstraintContext) ReferenceDefinition() IReferenceDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceDefinitionContext)
}

func (s *ReferenceColumnConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReferenceColumnConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ColumnConstraint() (localctx IColumnConstraintContext) {
	localctx = NewColumnConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, MySqlParserRULE_columnConstraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1477)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserNOT, MySqlParserNULL_LITERAL, MySqlParserNULL_SPEC_LITERAL:
		localctx = NewNullColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1426)
			p.NullNotnull()
		}

	case MySqlParserDEFAULT:
		localctx = NewDefaultColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1427)
			p.Match(MySqlParserDEFAULT)
		}
		{
			p.SetState(1428)
			p.DefaultValue()
		}

	case MySqlParserON, MySqlParserAUTO_INCREMENT:
		localctx = NewAutoIncrementColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1433)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserAUTO_INCREMENT:
			{
				p.SetState(1429)
				p.Match(MySqlParserAUTO_INCREMENT)
			}

		case MySqlParserON:
			{
				p.SetState(1430)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(1431)
				p.Match(MySqlParserUPDATE)
			}
			{
				p.SetState(1432)
				p.CurrentTimestamp()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySqlParserKEY, MySqlParserPRIMARY:
		localctx = NewPrimaryKeyColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1436)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPRIMARY {
			{
				p.SetState(1435)
				p.Match(MySqlParserPRIMARY)
			}

		}
		{
			p.SetState(1438)
			p.Match(MySqlParserKEY)
		}

	case MySqlParserUNIQUE:
		localctx = NewUniqueKeyColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1439)
			p.Match(MySqlParserUNIQUE)
		}
		p.SetState(1441)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1440)
				p.Match(MySqlParserKEY)
			}

		}

	case MySqlParserCOMMENT:
		localctx = NewCommentColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1443)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(1444)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserCOLUMN_FORMAT:
		localctx = NewFormatColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1445)
			p.Match(MySqlParserCOLUMN_FORMAT)
		}
		{
			p.SetState(1446)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*FormatColumnConstraintContext).colformat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserDYNAMIC || _la == MySqlParserFIXED) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*FormatColumnConstraintContext).colformat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserSTORAGE:
		localctx = NewStorageColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1447)
			p.Match(MySqlParserSTORAGE)
		}
		{
			p.SetState(1448)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*StorageColumnConstraintContext).storageval = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserDISK || _la == MySqlParserMEMORY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*StorageColumnConstraintContext).storageval = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserREFERENCES:
		localctx = NewReferenceColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1449)
			p.ReferenceDefinition()
		}

	case MySqlParserCOLLATE:
		localctx = NewCollateColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1450)
			p.Match(MySqlParserCOLLATE)
		}
		{
			p.SetState(1451)
			p.CollationName()
		}

	case MySqlParserAS, MySqlParserGENERATED:
		localctx = NewGeneratedColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		p.SetState(1454)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserGENERATED {
			{
				p.SetState(1452)
				p.Match(MySqlParserGENERATED)
			}
			{
				p.SetState(1453)
				p.Match(MySqlParserALWAYS)
			}

		}
		{
			p.SetState(1456)
			p.Match(MySqlParserAS)
		}
		{
			p.SetState(1457)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1458)
			p.expression(0)
		}
		{
			p.SetState(1459)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(1461)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSTORED || _la == MySqlParserVIRTUAL {
			{
				p.SetState(1460)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserSTORED || _la == MySqlParserVIRTUAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	case MySqlParserSERIAL:
		localctx = NewSerialDefaultColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1463)
			p.Match(MySqlParserSERIAL)
		}
		{
			p.SetState(1464)
			p.Match(MySqlParserDEFAULT)
		}
		{
			p.SetState(1465)
			p.Match(MySqlParserVALUE)
		}

	case MySqlParserCHECK, MySqlParserCONSTRAINT:
		localctx = NewCheckColumnConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		p.SetState(1470)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(1466)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(1468)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(1467)

					var _x = p.Uid()

					localctx.(*CheckColumnConstraintContext).name = _x
				}

			}

		}
		{
			p.SetState(1472)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(1473)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1474)
			p.expression(0)
		}
		{
			p.SetState(1475)
			p.Match(MySqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITableConstraintContext is an interface to support dynamic dispatch.
type ITableConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableConstraintContext differentiates from other interfaces.
	IsTableConstraintContext()
}

type TableConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableConstraintContext() *TableConstraintContext {
	var p = new(TableConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableConstraint
	return p
}

func (*TableConstraintContext) IsTableConstraintContext() {}

func NewTableConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableConstraintContext {
	var p = new(TableConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableConstraint

	return p
}

func (s *TableConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *TableConstraintContext) CopyFrom(ctx *TableConstraintContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type UniqueKeyTableConstraintContext struct {
	*TableConstraintContext
	name        IUidContext
	indexFormat antlr.Token
	index       IUidContext
}

func NewUniqueKeyTableConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UniqueKeyTableConstraintContext {
	var p = new(UniqueKeyTableConstraintContext)

	p.TableConstraintContext = NewEmptyTableConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableConstraintContext))

	return p
}

func (s *UniqueKeyTableConstraintContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *UniqueKeyTableConstraintContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *UniqueKeyTableConstraintContext) GetName() IUidContext { return s.name }

func (s *UniqueKeyTableConstraintContext) GetIndex() IUidContext { return s.index }

func (s *UniqueKeyTableConstraintContext) SetName(v IUidContext) { s.name = v }

func (s *UniqueKeyTableConstraintContext) SetIndex(v IUidContext) { s.index = v }

func (s *UniqueKeyTableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniqueKeyTableConstraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIQUE, 0)
}

func (s *UniqueKeyTableConstraintContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *UniqueKeyTableConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *UniqueKeyTableConstraintContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *UniqueKeyTableConstraintContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *UniqueKeyTableConstraintContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *UniqueKeyTableConstraintContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *UniqueKeyTableConstraintContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *UniqueKeyTableConstraintContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *UniqueKeyTableConstraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *UniqueKeyTableConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUniqueKeyTableConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type CheckTableConstraintContext struct {
	*TableConstraintContext
	name IUidContext
}

func NewCheckTableConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CheckTableConstraintContext {
	var p = new(CheckTableConstraintContext)

	p.TableConstraintContext = NewEmptyTableConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableConstraintContext))

	return p
}

func (s *CheckTableConstraintContext) GetName() IUidContext { return s.name }

func (s *CheckTableConstraintContext) SetName(v IUidContext) { s.name = v }

func (s *CheckTableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckTableConstraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *CheckTableConstraintContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CheckTableConstraintContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CheckTableConstraintContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CheckTableConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *CheckTableConstraintContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CheckTableConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCheckTableConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type PrimaryKeyTableConstraintContext struct {
	*TableConstraintContext
	name  IUidContext
	index IUidContext
}

func NewPrimaryKeyTableConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryKeyTableConstraintContext {
	var p = new(PrimaryKeyTableConstraintContext)

	p.TableConstraintContext = NewEmptyTableConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableConstraintContext))

	return p
}

func (s *PrimaryKeyTableConstraintContext) GetName() IUidContext { return s.name }

func (s *PrimaryKeyTableConstraintContext) GetIndex() IUidContext { return s.index }

func (s *PrimaryKeyTableConstraintContext) SetName(v IUidContext) { s.name = v }

func (s *PrimaryKeyTableConstraintContext) SetIndex(v IUidContext) { s.index = v }

func (s *PrimaryKeyTableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryKeyTableConstraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIMARY, 0)
}

func (s *PrimaryKeyTableConstraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *PrimaryKeyTableConstraintContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *PrimaryKeyTableConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *PrimaryKeyTableConstraintContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *PrimaryKeyTableConstraintContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *PrimaryKeyTableConstraintContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *PrimaryKeyTableConstraintContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *PrimaryKeyTableConstraintContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PrimaryKeyTableConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPrimaryKeyTableConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type ForeignKeyTableConstraintContext struct {
	*TableConstraintContext
	name  IUidContext
	index IUidContext
}

func NewForeignKeyTableConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ForeignKeyTableConstraintContext {
	var p = new(ForeignKeyTableConstraintContext)

	p.TableConstraintContext = NewEmptyTableConstraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableConstraintContext))

	return p
}

func (s *ForeignKeyTableConstraintContext) GetName() IUidContext { return s.name }

func (s *ForeignKeyTableConstraintContext) GetIndex() IUidContext { return s.index }

func (s *ForeignKeyTableConstraintContext) SetName(v IUidContext) { s.name = v }

func (s *ForeignKeyTableConstraintContext) SetIndex(v IUidContext) { s.index = v }

func (s *ForeignKeyTableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForeignKeyTableConstraintContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOREIGN, 0)
}

func (s *ForeignKeyTableConstraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *ForeignKeyTableConstraintContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *ForeignKeyTableConstraintContext) ReferenceDefinition() IReferenceDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceDefinitionContext)
}

func (s *ForeignKeyTableConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *ForeignKeyTableConstraintContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *ForeignKeyTableConstraintContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ForeignKeyTableConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitForeignKeyTableConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TableConstraint() (localctx ITableConstraintContext) {
	localctx = NewTableConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, MySqlParserRULE_tableConstraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1548)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPrimaryKeyTableConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1483)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(1479)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(1481)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(1480)

					var _x = p.Uid()

					localctx.(*PrimaryKeyTableConstraintContext).name = _x
				}

			}

		}
		{
			p.SetState(1485)
			p.Match(MySqlParserPRIMARY)
		}
		{
			p.SetState(1486)
			p.Match(MySqlParserKEY)
		}
		p.SetState(1488)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(1487)

				var _x = p.Uid()

				localctx.(*PrimaryKeyTableConstraintContext).index = _x
			}

		}
		p.SetState(1491)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(1490)
				p.IndexType()
			}

		}
		{
			p.SetState(1493)
			p.IndexColumnNames()
		}
		p.SetState(1497)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE {
			{
				p.SetState(1494)
				p.IndexOption()
			}

			p.SetState(1499)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewUniqueKeyTableConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1504)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(1500)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(1502)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(1501)

					var _x = p.Uid()

					localctx.(*UniqueKeyTableConstraintContext).name = _x
				}

			}

		}
		{
			p.SetState(1506)
			p.Match(MySqlParserUNIQUE)
		}
		p.SetState(1508)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			{
				p.SetState(1507)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*UniqueKeyTableConstraintContext).indexFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*UniqueKeyTableConstraintContext).indexFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(1511)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(1510)

				var _x = p.Uid()

				localctx.(*UniqueKeyTableConstraintContext).index = _x
			}

		}
		p.SetState(1514)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(1513)
				p.IndexType()
			}

		}
		{
			p.SetState(1516)
			p.IndexColumnNames()
		}
		p.SetState(1520)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE {
			{
				p.SetState(1517)
				p.IndexOption()
			}

			p.SetState(1522)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 3:
		localctx = NewForeignKeyTableConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1527)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(1523)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(1525)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(1524)

					var _x = p.Uid()

					localctx.(*ForeignKeyTableConstraintContext).name = _x
				}

			}

		}
		{
			p.SetState(1529)
			p.Match(MySqlParserFOREIGN)
		}
		{
			p.SetState(1530)
			p.Match(MySqlParserKEY)
		}
		p.SetState(1532)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(1531)

				var _x = p.Uid()

				localctx.(*ForeignKeyTableConstraintContext).index = _x
			}

		}
		{
			p.SetState(1534)
			p.IndexColumnNames()
		}
		{
			p.SetState(1535)
			p.ReferenceDefinition()
		}

	case 4:
		localctx = NewCheckTableConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1541)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(1537)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(1539)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(1538)

					var _x = p.Uid()

					localctx.(*CheckTableConstraintContext).name = _x
				}

			}

		}
		{
			p.SetState(1543)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(1544)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1545)
			p.expression(0)
		}
		{
			p.SetState(1546)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IReferenceDefinitionContext is an interface to support dynamic dispatch.
type IReferenceDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMatchType returns the matchType token.
	GetMatchType() antlr.Token

	// SetMatchType sets the matchType token.
	SetMatchType(antlr.Token)

	// IsReferenceDefinitionContext differentiates from other interfaces.
	IsReferenceDefinitionContext()
}

type ReferenceDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	matchType antlr.Token
}

func NewEmptyReferenceDefinitionContext() *ReferenceDefinitionContext {
	var p = new(ReferenceDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_referenceDefinition
	return p
}

func (*ReferenceDefinitionContext) IsReferenceDefinitionContext() {}

func NewReferenceDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReferenceDefinitionContext {
	var p = new(ReferenceDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_referenceDefinition

	return p
}

func (s *ReferenceDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ReferenceDefinitionContext) GetMatchType() antlr.Token { return s.matchType }

func (s *ReferenceDefinitionContext) SetMatchType(v antlr.Token) { s.matchType = v }

func (s *ReferenceDefinitionContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(MySqlParserREFERENCES, 0)
}

func (s *ReferenceDefinitionContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ReferenceDefinitionContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *ReferenceDefinitionContext) MATCH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMATCH, 0)
}

func (s *ReferenceDefinitionContext) ReferenceAction() IReferenceActionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceActionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceActionContext)
}

func (s *ReferenceDefinitionContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *ReferenceDefinitionContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTIAL, 0)
}

func (s *ReferenceDefinitionContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIMPLE, 0)
}

func (s *ReferenceDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferenceDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReferenceDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReferenceDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ReferenceDefinition() (localctx IReferenceDefinitionContext) {
	localctx = NewReferenceDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, MySqlParserRULE_referenceDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1550)
		p.Match(MySqlParserREFERENCES)
	}
	{
		p.SetState(1551)
		p.TableName()
	}
	p.SetState(1553)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1552)
			p.IndexColumnNames()
		}

	}
	p.SetState(1557)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMATCH {
		{
			p.SetState(1555)
			p.Match(MySqlParserMATCH)
		}
		{
			p.SetState(1556)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ReferenceDefinitionContext).matchType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFULL || _la == MySqlParserPARTIAL || _la == MySqlParserSIMPLE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ReferenceDefinitionContext).matchType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(1560)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1559)
			p.ReferenceAction()
		}

	}

	return localctx
}

// IReferenceActionContext is an interface to support dynamic dispatch.
type IReferenceActionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOnDelete returns the onDelete rule contexts.
	GetOnDelete() IReferenceControlTypeContext

	// GetOnUpdate returns the onUpdate rule contexts.
	GetOnUpdate() IReferenceControlTypeContext

	// SetOnDelete sets the onDelete rule contexts.
	SetOnDelete(IReferenceControlTypeContext)

	// SetOnUpdate sets the onUpdate rule contexts.
	SetOnUpdate(IReferenceControlTypeContext)

	// IsReferenceActionContext differentiates from other interfaces.
	IsReferenceActionContext()
}

type ReferenceActionContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	onDelete IReferenceControlTypeContext
	onUpdate IReferenceControlTypeContext
}

func NewEmptyReferenceActionContext() *ReferenceActionContext {
	var p = new(ReferenceActionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_referenceAction
	return p
}

func (*ReferenceActionContext) IsReferenceActionContext() {}

func NewReferenceActionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReferenceActionContext {
	var p = new(ReferenceActionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_referenceAction

	return p
}

func (s *ReferenceActionContext) GetParser() antlr.Parser { return s.parser }

func (s *ReferenceActionContext) GetOnDelete() IReferenceControlTypeContext { return s.onDelete }

func (s *ReferenceActionContext) GetOnUpdate() IReferenceControlTypeContext { return s.onUpdate }

func (s *ReferenceActionContext) SetOnDelete(v IReferenceControlTypeContext) { s.onDelete = v }

func (s *ReferenceActionContext) SetOnUpdate(v IReferenceControlTypeContext) { s.onUpdate = v }

func (s *ReferenceActionContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *ReferenceActionContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *ReferenceActionContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *ReferenceActionContext) AllReferenceControlType() []IReferenceControlTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReferenceControlTypeContext)(nil)).Elem())
	var tst = make([]IReferenceControlTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReferenceControlTypeContext)
		}
	}

	return tst
}

func (s *ReferenceActionContext) ReferenceControlType(i int) IReferenceControlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceControlTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReferenceControlTypeContext)
}

func (s *ReferenceActionContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *ReferenceActionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferenceActionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReferenceActionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReferenceAction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ReferenceAction() (localctx IReferenceActionContext) {
	localctx = NewReferenceActionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, MySqlParserRULE_referenceAction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1578)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1562)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(1563)
			p.Match(MySqlParserDELETE)
		}
		{
			p.SetState(1564)

			var _x = p.ReferenceControlType()

			localctx.(*ReferenceActionContext).onDelete = _x
		}
		p.SetState(1568)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1565)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(1566)
				p.Match(MySqlParserUPDATE)
			}
			{
				p.SetState(1567)

				var _x = p.ReferenceControlType()

				localctx.(*ReferenceActionContext).onUpdate = _x
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1570)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(1571)
			p.Match(MySqlParserUPDATE)
		}
		{
			p.SetState(1572)

			var _x = p.ReferenceControlType()

			localctx.(*ReferenceActionContext).onUpdate = _x
		}
		p.SetState(1576)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1573)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(1574)
				p.Match(MySqlParserDELETE)
			}
			{
				p.SetState(1575)

				var _x = p.ReferenceControlType()

				localctx.(*ReferenceActionContext).onDelete = _x
			}

		}

	}

	return localctx
}

// IReferenceControlTypeContext is an interface to support dynamic dispatch.
type IReferenceControlTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReferenceControlTypeContext differentiates from other interfaces.
	IsReferenceControlTypeContext()
}

type ReferenceControlTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReferenceControlTypeContext() *ReferenceControlTypeContext {
	var p = new(ReferenceControlTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_referenceControlType
	return p
}

func (*ReferenceControlTypeContext) IsReferenceControlTypeContext() {}

func NewReferenceControlTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReferenceControlTypeContext {
	var p = new(ReferenceControlTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_referenceControlType

	return p
}

func (s *ReferenceControlTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ReferenceControlTypeContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESTRICT, 0)
}

func (s *ReferenceControlTypeContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADE, 0)
}

func (s *ReferenceControlTypeContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *ReferenceControlTypeContext) NULL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_LITERAL, 0)
}

func (s *ReferenceControlTypeContext) NO() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, 0)
}

func (s *ReferenceControlTypeContext) ACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserACTION, 0)
}

func (s *ReferenceControlTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferenceControlTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReferenceControlTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReferenceControlType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ReferenceControlType() (localctx IReferenceControlTypeContext) {
	localctx = NewReferenceControlTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, MySqlParserRULE_referenceControlType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1586)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserRESTRICT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1580)
			p.Match(MySqlParserRESTRICT)
		}

	case MySqlParserCASCADE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1581)
			p.Match(MySqlParserCASCADE)
		}

	case MySqlParserSET:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1582)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(1583)
			p.Match(MySqlParserNULL_LITERAL)
		}

	case MySqlParserNO:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1584)
			p.Match(MySqlParserNO)
		}
		{
			p.SetState(1585)
			p.Match(MySqlParserACTION)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIndexColumnDefinitionContext is an interface to support dynamic dispatch.
type IIndexColumnDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexColumnDefinitionContext differentiates from other interfaces.
	IsIndexColumnDefinitionContext()
}

type IndexColumnDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexColumnDefinitionContext() *IndexColumnDefinitionContext {
	var p = new(IndexColumnDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexColumnDefinition
	return p
}

func (*IndexColumnDefinitionContext) IsIndexColumnDefinitionContext() {}

func NewIndexColumnDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexColumnDefinitionContext {
	var p = new(IndexColumnDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexColumnDefinition

	return p
}

func (s *IndexColumnDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexColumnDefinitionContext) CopyFrom(ctx *IndexColumnDefinitionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *IndexColumnDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexColumnDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SpecialIndexDeclarationContext struct {
	*IndexColumnDefinitionContext
	indexFormat antlr.Token
}

func NewSpecialIndexDeclarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SpecialIndexDeclarationContext {
	var p = new(SpecialIndexDeclarationContext)

	p.IndexColumnDefinitionContext = NewEmptyIndexColumnDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexColumnDefinitionContext))

	return p
}

func (s *SpecialIndexDeclarationContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *SpecialIndexDeclarationContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *SpecialIndexDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecialIndexDeclarationContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *SpecialIndexDeclarationContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULLTEXT, 0)
}

func (s *SpecialIndexDeclarationContext) SPATIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSPATIAL, 0)
}

func (s *SpecialIndexDeclarationContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SpecialIndexDeclarationContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *SpecialIndexDeclarationContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *SpecialIndexDeclarationContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *SpecialIndexDeclarationContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *SpecialIndexDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSpecialIndexDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

type SimpleIndexDeclarationContext struct {
	*IndexColumnDefinitionContext
	indexFormat antlr.Token
}

func NewSimpleIndexDeclarationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleIndexDeclarationContext {
	var p = new(SimpleIndexDeclarationContext)

	p.IndexColumnDefinitionContext = NewEmptyIndexColumnDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IndexColumnDefinitionContext))

	return p
}

func (s *SimpleIndexDeclarationContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *SimpleIndexDeclarationContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *SimpleIndexDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleIndexDeclarationContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *SimpleIndexDeclarationContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *SimpleIndexDeclarationContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *SimpleIndexDeclarationContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SimpleIndexDeclarationContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *SimpleIndexDeclarationContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *SimpleIndexDeclarationContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *SimpleIndexDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimpleIndexDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IndexColumnDefinition() (localctx IIndexColumnDefinitionContext) {
	localctx = NewIndexColumnDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, MySqlParserRULE_indexColumnDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1616)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserINDEX, MySqlParserKEY:
		localctx = NewSimpleIndexDeclarationContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1588)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SimpleIndexDeclarationContext).indexFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SimpleIndexDeclarationContext).indexFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1590)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(1589)
				p.Uid()
			}

		}
		p.SetState(1593)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(1592)
				p.IndexType()
			}

		}
		{
			p.SetState(1595)
			p.IndexColumnNames()
		}
		p.SetState(1599)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE {
			{
				p.SetState(1596)
				p.IndexOption()
			}

			p.SetState(1601)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySqlParserFULLTEXT, MySqlParserSPATIAL:
		localctx = NewSpecialIndexDeclarationContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1602)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFULLTEXT || _la == MySqlParserSPATIAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1604)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			{
				p.SetState(1603)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*SpecialIndexDeclarationContext).indexFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*SpecialIndexDeclarationContext).indexFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(1607)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(1606)
				p.Uid()
			}

		}
		{
			p.SetState(1609)
			p.IndexColumnNames()
		}
		p.SetState(1613)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE {
			{
				p.SetState(1610)
				p.IndexOption()
			}

			p.SetState(1615)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITableOptionContext is an interface to support dynamic dispatch.
type ITableOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableOptionContext differentiates from other interfaces.
	IsTableOptionContext()
}

type TableOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableOptionContext() *TableOptionContext {
	var p = new(TableOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableOption
	return p
}

func (*TableOptionContext) IsTableOptionContext() {}

func NewTableOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableOptionContext {
	var p = new(TableOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableOption

	return p
}

func (s *TableOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *TableOptionContext) CopyFrom(ctx *TableOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TableOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TableOptionEngineContext struct {
	*TableOptionContext
}

func NewTableOptionEngineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionEngineContext {
	var p = new(TableOptionEngineContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionEngineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionEngineContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *TableOptionEngineContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *TableOptionEngineContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionEngineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionEngine(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionMaxRowsContext struct {
	*TableOptionContext
}

func NewTableOptionMaxRowsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionMaxRowsContext {
	var p = new(TableOptionMaxRowsContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionMaxRowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionMaxRowsContext) MAX_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_ROWS, 0)
}

func (s *TableOptionMaxRowsContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *TableOptionMaxRowsContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionMaxRowsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionMaxRows(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionCollateContext struct {
	*TableOptionContext
}

func NewTableOptionCollateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionCollateContext {
	var p = new(TableOptionCollateContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionCollateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionCollateContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *TableOptionCollateContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *TableOptionCollateContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TableOptionCollateContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionCollateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionCollate(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionPersistentContext struct {
	*TableOptionContext
	extBoolValue antlr.Token
}

func NewTableOptionPersistentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionPersistentContext {
	var p = new(TableOptionPersistentContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionPersistentContext) GetExtBoolValue() antlr.Token { return s.extBoolValue }

func (s *TableOptionPersistentContext) SetExtBoolValue(v antlr.Token) { s.extBoolValue = v }

func (s *TableOptionPersistentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionPersistentContext) STATS_PERSISTENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_PERSISTENT, 0)
}

func (s *TableOptionPersistentContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TableOptionPersistentContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *TableOptionPersistentContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *TableOptionPersistentContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionPersistentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionPersistent(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionTablespaceContext struct {
	*TableOptionContext
}

func NewTableOptionTablespaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionTablespaceContext {
	var p = new(TableOptionTablespaceContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *TableOptionTablespaceContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *TableOptionTablespaceContext) TablespaceStorage() ITablespaceStorageContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablespaceStorageContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablespaceStorageContext)
}

func (s *TableOptionTablespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionTablespace(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionPackKeysContext struct {
	*TableOptionContext
	extBoolValue antlr.Token
}

func NewTableOptionPackKeysContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionPackKeysContext {
	var p = new(TableOptionPackKeysContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionPackKeysContext) GetExtBoolValue() antlr.Token { return s.extBoolValue }

func (s *TableOptionPackKeysContext) SetExtBoolValue(v antlr.Token) { s.extBoolValue = v }

func (s *TableOptionPackKeysContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionPackKeysContext) PACK_KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPACK_KEYS, 0)
}

func (s *TableOptionPackKeysContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *TableOptionPackKeysContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *TableOptionPackKeysContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TableOptionPackKeysContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionPackKeysContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionPackKeys(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionPasswordContext struct {
	*TableOptionContext
}

func NewTableOptionPasswordContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionPasswordContext {
	var p = new(TableOptionPasswordContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionPasswordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionPasswordContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *TableOptionPasswordContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionPasswordContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionPasswordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionPassword(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionUnionContext struct {
	*TableOptionContext
}

func NewTableOptionUnionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionUnionContext {
	var p = new(TableOptionUnionContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionUnionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionUnionContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *TableOptionUnionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *TableOptionUnionContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *TableOptionUnionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *TableOptionUnionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionUnionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionUnion(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionSamplePageContext struct {
	*TableOptionContext
}

func NewTableOptionSamplePageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionSamplePageContext {
	var p = new(TableOptionSamplePageContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionSamplePageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionSamplePageContext) STATS_SAMPLE_PAGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_SAMPLE_PAGES, 0)
}

func (s *TableOptionSamplePageContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *TableOptionSamplePageContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionSamplePageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionSamplePage(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionCharsetContext struct {
	*TableOptionContext
}

func NewTableOptionCharsetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionCharsetContext {
	var p = new(TableOptionCharsetContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionCharsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionCharsetContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *TableOptionCharsetContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *TableOptionCharsetContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET, 0)
}

func (s *TableOptionCharsetContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *TableOptionCharsetContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDEFAULT)
}

func (s *TableOptionCharsetContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, i)
}

func (s *TableOptionCharsetContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionCharsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionCharset(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionIndexDirectoryContext struct {
	*TableOptionContext
}

func NewTableOptionIndexDirectoryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionIndexDirectoryContext {
	var p = new(TableOptionIndexDirectoryContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionIndexDirectoryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionIndexDirectoryContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *TableOptionIndexDirectoryContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *TableOptionIndexDirectoryContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionIndexDirectoryContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionIndexDirectoryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionIndexDirectory(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionKeyBlockSizeContext struct {
	*TableOptionContext
}

func NewTableOptionKeyBlockSizeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionKeyBlockSizeContext {
	var p = new(TableOptionKeyBlockSizeContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionKeyBlockSizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionKeyBlockSizeContext) KEY_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY_BLOCK_SIZE, 0)
}

func (s *TableOptionKeyBlockSizeContext) FileSizeLiteral() IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *TableOptionKeyBlockSizeContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionKeyBlockSizeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionKeyBlockSize(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionEncryptionContext struct {
	*TableOptionContext
}

func NewTableOptionEncryptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionEncryptionContext {
	var p = new(TableOptionEncryptionContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionEncryptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionEncryptionContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCRYPTION, 0)
}

func (s *TableOptionEncryptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionEncryptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionEncryptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionEncryption(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionDataDirectoryContext struct {
	*TableOptionContext
}

func NewTableOptionDataDirectoryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionDataDirectoryContext {
	var p = new(TableOptionDataDirectoryContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionDataDirectoryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionDataDirectoryContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *TableOptionDataDirectoryContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *TableOptionDataDirectoryContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionDataDirectoryContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionDataDirectoryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionDataDirectory(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionRecalculationContext struct {
	*TableOptionContext
	extBoolValue antlr.Token
}

func NewTableOptionRecalculationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionRecalculationContext {
	var p = new(TableOptionRecalculationContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionRecalculationContext) GetExtBoolValue() antlr.Token { return s.extBoolValue }

func (s *TableOptionRecalculationContext) SetExtBoolValue(v antlr.Token) { s.extBoolValue = v }

func (s *TableOptionRecalculationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionRecalculationContext) STATS_AUTO_RECALC() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_AUTO_RECALC, 0)
}

func (s *TableOptionRecalculationContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TableOptionRecalculationContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *TableOptionRecalculationContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *TableOptionRecalculationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionRecalculationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionRecalculation(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionAutoIncrementContext struct {
	*TableOptionContext
}

func NewTableOptionAutoIncrementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionAutoIncrementContext {
	var p = new(TableOptionAutoIncrementContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionAutoIncrementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionAutoIncrementContext) AUTO_INCREMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTO_INCREMENT, 0)
}

func (s *TableOptionAutoIncrementContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *TableOptionAutoIncrementContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionAutoIncrementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionAutoIncrement(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionChecksumContext struct {
	*TableOptionContext
	boolValue antlr.Token
}

func NewTableOptionChecksumContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionChecksumContext {
	var p = new(TableOptionChecksumContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionChecksumContext) GetBoolValue() antlr.Token { return s.boolValue }

func (s *TableOptionChecksumContext) SetBoolValue(v antlr.Token) { s.boolValue = v }

func (s *TableOptionChecksumContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionChecksumContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECKSUM, 0)
}

func (s *TableOptionChecksumContext) PAGE_CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserPAGE_CHECKSUM, 0)
}

func (s *TableOptionChecksumContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *TableOptionChecksumContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *TableOptionChecksumContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionChecksumContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionChecksum(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionDelayContext struct {
	*TableOptionContext
	boolValue antlr.Token
}

func NewTableOptionDelayContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionDelayContext {
	var p = new(TableOptionDelayContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionDelayContext) GetBoolValue() antlr.Token { return s.boolValue }

func (s *TableOptionDelayContext) SetBoolValue(v antlr.Token) { s.boolValue = v }

func (s *TableOptionDelayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionDelayContext) DELAY_KEY_WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELAY_KEY_WRITE, 0)
}

func (s *TableOptionDelayContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *TableOptionDelayContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *TableOptionDelayContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionDelayContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionDelay(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionConnectionContext struct {
	*TableOptionContext
}

func NewTableOptionConnectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionConnectionContext {
	var p = new(TableOptionConnectionContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionConnectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionConnectionContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION, 0)
}

func (s *TableOptionConnectionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionConnectionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionConnectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionConnection(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionCommentContext struct {
	*TableOptionContext
}

func NewTableOptionCommentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionCommentContext {
	var p = new(TableOptionCommentContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionCommentContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *TableOptionCommentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionCommentContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionCommentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionComment(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionAverageContext struct {
	*TableOptionContext
}

func NewTableOptionAverageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionAverageContext {
	var p = new(TableOptionAverageContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionAverageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionAverageContext) AVG_ROW_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserAVG_ROW_LENGTH, 0)
}

func (s *TableOptionAverageContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *TableOptionAverageContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionAverageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionAverage(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionRowFormatContext struct {
	*TableOptionContext
	rowFormat antlr.Token
}

func NewTableOptionRowFormatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionRowFormatContext {
	var p = new(TableOptionRowFormatContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionRowFormatContext) GetRowFormat() antlr.Token { return s.rowFormat }

func (s *TableOptionRowFormatContext) SetRowFormat(v antlr.Token) { s.rowFormat = v }

func (s *TableOptionRowFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionRowFormatContext) ROW_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW_FORMAT, 0)
}

func (s *TableOptionRowFormatContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TableOptionRowFormatContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDYNAMIC, 0)
}

func (s *TableOptionRowFormatContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIXED, 0)
}

func (s *TableOptionRowFormatContext) COMPRESSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESSED, 0)
}

func (s *TableOptionRowFormatContext) REDUNDANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserREDUNDANT, 0)
}

func (s *TableOptionRowFormatContext) COMPACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPACT, 0)
}

func (s *TableOptionRowFormatContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *TableOptionRowFormatContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionRowFormatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionRowFormat(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionCompressionContext struct {
	*TableOptionContext
}

func NewTableOptionCompressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionCompressionContext {
	var p = new(TableOptionCompressionContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionCompressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionCompressionContext) COMPRESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESSION, 0)
}

func (s *TableOptionCompressionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TableOptionCompressionContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *TableOptionCompressionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionCompressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionCompression(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionInsertMethodContext struct {
	*TableOptionContext
	insertMethod antlr.Token
}

func NewTableOptionInsertMethodContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionInsertMethodContext {
	var p = new(TableOptionInsertMethodContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionInsertMethodContext) GetInsertMethod() antlr.Token { return s.insertMethod }

func (s *TableOptionInsertMethodContext) SetInsertMethod(v antlr.Token) { s.insertMethod = v }

func (s *TableOptionInsertMethodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionInsertMethodContext) INSERT_METHOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT_METHOD, 0)
}

func (s *TableOptionInsertMethodContext) NO() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, 0)
}

func (s *TableOptionInsertMethodContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *TableOptionInsertMethodContext) LAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST, 0)
}

func (s *TableOptionInsertMethodContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionInsertMethodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionInsertMethod(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableOptionMinRowsContext struct {
	*TableOptionContext
}

func NewTableOptionMinRowsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableOptionMinRowsContext {
	var p = new(TableOptionMinRowsContext)

	p.TableOptionContext = NewEmptyTableOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableOptionContext))

	return p
}

func (s *TableOptionMinRowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableOptionMinRowsContext) MIN_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN_ROWS, 0)
}

func (s *TableOptionMinRowsContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *TableOptionMinRowsContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *TableOptionMinRowsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableOptionMinRows(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TableOption() (localctx ITableOptionContext) {
	localctx = NewTableOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, MySqlParserRULE_tableOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1762)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 199, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTableOptionEngineContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1618)
			p.Match(MySqlParserENGINE)
		}
		p.SetState(1620)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1619)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1622)
			p.EngineName()
		}

	case 2:
		localctx = NewTableOptionAutoIncrementContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1623)
			p.Match(MySqlParserAUTO_INCREMENT)
		}
		p.SetState(1625)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1624)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1627)
			p.DecimalLiteral()
		}

	case 3:
		localctx = NewTableOptionAverageContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1628)
			p.Match(MySqlParserAVG_ROW_LENGTH)
		}
		p.SetState(1630)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1629)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1632)
			p.DecimalLiteral()
		}

	case 4:
		localctx = NewTableOptionCharsetContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1634)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(1633)
				p.Match(MySqlParserDEFAULT)
			}

		}
		p.SetState(1639)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCHARACTER:
			{
				p.SetState(1636)
				p.Match(MySqlParserCHARACTER)
			}
			{
				p.SetState(1637)
				p.Match(MySqlParserSET)
			}

		case MySqlParserCHARSET:
			{
				p.SetState(1638)
				p.Match(MySqlParserCHARSET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1642)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1641)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(1646)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserBINARY, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL:
			{
				p.SetState(1644)
				p.CharsetName()
			}

		case MySqlParserDEFAULT:
			{
				p.SetState(1645)
				p.Match(MySqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 5:
		localctx = NewTableOptionChecksumContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1648)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCHECKSUM || _la == MySqlParserPAGE_CHECKSUM) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1650)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1649)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1652)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionChecksumContext).boolValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionChecksumContext).boolValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 6:
		localctx = NewTableOptionCollateContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		p.SetState(1654)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(1653)
				p.Match(MySqlParserDEFAULT)
			}

		}
		{
			p.SetState(1656)
			p.Match(MySqlParserCOLLATE)
		}
		p.SetState(1658)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1657)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1660)
			p.CollationName()
		}

	case 7:
		localctx = NewTableOptionCommentContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1661)
			p.Match(MySqlParserCOMMENT)
		}
		p.SetState(1663)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1662)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1665)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 8:
		localctx = NewTableOptionCompressionContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1666)
			p.Match(MySqlParserCOMPRESSION)
		}
		p.SetState(1668)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1667)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1670)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserSTRING_LITERAL || _la == MySqlParserID) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 9:
		localctx = NewTableOptionConnectionContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1671)
			p.Match(MySqlParserCONNECTION)
		}
		p.SetState(1673)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1672)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1675)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 10:
		localctx = NewTableOptionDataDirectoryContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1676)
			p.Match(MySqlParserDATA)
		}
		{
			p.SetState(1677)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(1679)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1678)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1681)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 11:
		localctx = NewTableOptionDelayContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1682)
			p.Match(MySqlParserDELAY_KEY_WRITE)
		}
		p.SetState(1684)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1683)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1686)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionDelayContext).boolValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionDelayContext).boolValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 12:
		localctx = NewTableOptionEncryptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1687)
			p.Match(MySqlParserENCRYPTION)
		}
		p.SetState(1689)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1688)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1691)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 13:
		localctx = NewTableOptionIndexDirectoryContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1692)
			p.Match(MySqlParserINDEX)
		}
		{
			p.SetState(1693)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(1695)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1694)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1697)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 14:
		localctx = NewTableOptionInsertMethodContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1698)
			p.Match(MySqlParserINSERT_METHOD)
		}
		p.SetState(1700)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1699)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1702)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionInsertMethodContext).insertMethod = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFIRST || _la == MySqlParserLAST || _la == MySqlParserNO) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionInsertMethodContext).insertMethod = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 15:
		localctx = NewTableOptionKeyBlockSizeContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1703)
			p.Match(MySqlParserKEY_BLOCK_SIZE)
		}
		p.SetState(1705)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1704)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1707)
			p.FileSizeLiteral()
		}

	case 16:
		localctx = NewTableOptionMaxRowsContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1708)
			p.Match(MySqlParserMAX_ROWS)
		}
		p.SetState(1710)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1709)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1712)
			p.DecimalLiteral()
		}

	case 17:
		localctx = NewTableOptionMinRowsContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1713)
			p.Match(MySqlParserMIN_ROWS)
		}
		p.SetState(1715)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1714)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1717)
			p.DecimalLiteral()
		}

	case 18:
		localctx = NewTableOptionPackKeysContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1718)
			p.Match(MySqlParserPACK_KEYS)
		}
		p.SetState(1720)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1719)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1722)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionPackKeysContext).extBoolValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionPackKeysContext).extBoolValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 19:
		localctx = NewTableOptionPasswordContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1723)
			p.Match(MySqlParserPASSWORD)
		}
		p.SetState(1725)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1724)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1727)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 20:
		localctx = NewTableOptionRowFormatContext(p, localctx)
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1728)
			p.Match(MySqlParserROW_FORMAT)
		}
		p.SetState(1730)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1729)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1732)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionRowFormatContext).rowFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || (((_la-339)&-(0x1f+1)) == 0 && ((1<<uint((_la-339)))&((1<<(MySqlParserCOMPACT-339))|(1<<(MySqlParserCOMPRESSED-339))|(1<<(MySqlParserDYNAMIC-339)))) != 0) || _la == MySqlParserFIXED || _la == MySqlParserREDUNDANT || _la == MySqlParserID) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionRowFormatContext).rowFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 21:
		localctx = NewTableOptionRecalculationContext(p, localctx)
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1733)
			p.Match(MySqlParserSTATS_AUTO_RECALC)
		}
		p.SetState(1735)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1734)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1737)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionRecalculationContext).extBoolValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionRecalculationContext).extBoolValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 22:
		localctx = NewTableOptionPersistentContext(p, localctx)
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1738)
			p.Match(MySqlParserSTATS_PERSISTENT)
		}
		p.SetState(1740)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1739)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1742)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TableOptionPersistentContext).extBoolValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TableOptionPersistentContext).extBoolValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 23:
		localctx = NewTableOptionSamplePageContext(p, localctx)
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1743)
			p.Match(MySqlParserSTATS_SAMPLE_PAGES)
		}
		p.SetState(1745)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1744)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1747)
			p.DecimalLiteral()
		}

	case 24:
		localctx = NewTableOptionTablespaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(1748)
			p.Match(MySqlParserTABLESPACE)
		}
		{
			p.SetState(1749)
			p.Uid()
		}
		p.SetState(1751)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 197, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1750)
				p.TablespaceStorage()
			}

		}

	case 25:
		localctx = NewTableOptionTablespaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(1753)
			p.TablespaceStorage()
		}

	case 26:
		localctx = NewTableOptionUnionContext(p, localctx)
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(1754)
			p.Match(MySqlParserUNION)
		}
		p.SetState(1756)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1755)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1758)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1759)
			p.Tables()
		}
		{
			p.SetState(1760)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ITablespaceStorageContext is an interface to support dynamic dispatch.
type ITablespaceStorageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTablespaceStorageContext differentiates from other interfaces.
	IsTablespaceStorageContext()
}

type TablespaceStorageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTablespaceStorageContext() *TablespaceStorageContext {
	var p = new(TablespaceStorageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tablespaceStorage
	return p
}

func (*TablespaceStorageContext) IsTablespaceStorageContext() {}

func NewTablespaceStorageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TablespaceStorageContext {
	var p = new(TablespaceStorageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tablespaceStorage

	return p
}

func (s *TablespaceStorageContext) GetParser() antlr.Parser { return s.parser }

func (s *TablespaceStorageContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *TablespaceStorageContext) DISK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISK, 0)
}

func (s *TablespaceStorageContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *TablespaceStorageContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TablespaceStorageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TablespaceStorageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TablespaceStorageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTablespaceStorage(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TablespaceStorage() (localctx ITablespaceStorageContext) {
	localctx = NewTablespaceStorageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, MySqlParserRULE_tablespaceStorage)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1764)
		p.Match(MySqlParserSTORAGE)
	}
	{
		p.SetState(1765)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || _la == MySqlParserDISK || _la == MySqlParserMEMORY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPartitionDefinitionsContext is an interface to support dynamic dispatch.
type IPartitionDefinitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCount returns the count rule contexts.
	GetCount() IDecimalLiteralContext

	// GetSubCount returns the subCount rule contexts.
	GetSubCount() IDecimalLiteralContext

	// SetCount sets the count rule contexts.
	SetCount(IDecimalLiteralContext)

	// SetSubCount sets the subCount rule contexts.
	SetSubCount(IDecimalLiteralContext)

	// IsPartitionDefinitionsContext differentiates from other interfaces.
	IsPartitionDefinitionsContext()
}

type PartitionDefinitionsContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	count    IDecimalLiteralContext
	subCount IDecimalLiteralContext
}

func NewEmptyPartitionDefinitionsContext() *PartitionDefinitionsContext {
	var p = new(PartitionDefinitionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partitionDefinitions
	return p
}

func (*PartitionDefinitionsContext) IsPartitionDefinitionsContext() {}

func NewPartitionDefinitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionDefinitionsContext {
	var p = new(PartitionDefinitionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partitionDefinitions

	return p
}

func (s *PartitionDefinitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionDefinitionsContext) GetCount() IDecimalLiteralContext { return s.count }

func (s *PartitionDefinitionsContext) GetSubCount() IDecimalLiteralContext { return s.subCount }

func (s *PartitionDefinitionsContext) SetCount(v IDecimalLiteralContext) { s.count = v }

func (s *PartitionDefinitionsContext) SetSubCount(v IDecimalLiteralContext) { s.subCount = v }

func (s *PartitionDefinitionsContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *PartitionDefinitionsContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserBY)
}

func (s *PartitionDefinitionsContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, i)
}

func (s *PartitionDefinitionsContext) PartitionFunctionDefinition() IPartitionFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionFunctionDefinitionContext)
}

func (s *PartitionDefinitionsContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONS, 0)
}

func (s *PartitionDefinitionsContext) SUBPARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITION, 0)
}

func (s *PartitionDefinitionsContext) SubpartitionFunctionDefinition() ISubpartitionFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubpartitionFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubpartitionFunctionDefinitionContext)
}

func (s *PartitionDefinitionsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionDefinitionsContext) AllPartitionDefinition() []IPartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem())
	var tst = make([]IPartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinitionContext)
		}
	}

	return tst
}

func (s *PartitionDefinitionsContext) PartitionDefinition(i int) IPartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionContext)
}

func (s *PartitionDefinitionsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionDefinitionsContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *PartitionDefinitionsContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *PartitionDefinitionsContext) SUBPARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITIONS, 0)
}

func (s *PartitionDefinitionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *PartitionDefinitionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *PartitionDefinitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionDefinitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionDefinitionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionDefinitions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) PartitionDefinitions() (localctx IPartitionDefinitionsContext) {
	localctx = NewPartitionDefinitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, MySqlParserRULE_partitionDefinitions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1767)
		p.Match(MySqlParserPARTITION)
	}
	{
		p.SetState(1768)
		p.Match(MySqlParserBY)
	}
	{
		p.SetState(1769)
		p.PartitionFunctionDefinition()
	}
	p.SetState(1772)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITIONS {
		{
			p.SetState(1770)
			p.Match(MySqlParserPARTITIONS)
		}
		{
			p.SetState(1771)

			var _x = p.DecimalLiteral()

			localctx.(*PartitionDefinitionsContext).count = _x
		}

	}
	p.SetState(1781)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSUBPARTITION {
		{
			p.SetState(1774)
			p.Match(MySqlParserSUBPARTITION)
		}
		{
			p.SetState(1775)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(1776)
			p.SubpartitionFunctionDefinition()
		}
		p.SetState(1779)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSUBPARTITIONS {
			{
				p.SetState(1777)
				p.Match(MySqlParserSUBPARTITIONS)
			}
			{
				p.SetState(1778)

				var _x = p.DecimalLiteral()

				localctx.(*PartitionDefinitionsContext).subCount = _x
			}

		}

	}
	p.SetState(1794)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1783)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1784)
			p.PartitionDefinition()
		}
		p.SetState(1789)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(1785)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(1786)
				p.PartitionDefinition()
			}

			p.SetState(1791)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1792)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IPartitionFunctionDefinitionContext is an interface to support dynamic dispatch.
type IPartitionFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionFunctionDefinitionContext differentiates from other interfaces.
	IsPartitionFunctionDefinitionContext()
}

type PartitionFunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionFunctionDefinitionContext() *PartitionFunctionDefinitionContext {
	var p = new(PartitionFunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partitionFunctionDefinition
	return p
}

func (*PartitionFunctionDefinitionContext) IsPartitionFunctionDefinitionContext() {}

func NewPartitionFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionFunctionDefinitionContext {
	var p = new(PartitionFunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partitionFunctionDefinition

	return p
}

func (s *PartitionFunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionFunctionDefinitionContext) CopyFrom(ctx *PartitionFunctionDefinitionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PartitionFunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionFunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PartitionFunctionKeyContext struct {
	*PartitionFunctionDefinitionContext
	algType antlr.Token
}

func NewPartitionFunctionKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionFunctionKeyContext {
	var p = new(PartitionFunctionKeyContext)

	p.PartitionFunctionDefinitionContext = NewEmptyPartitionFunctionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionFunctionDefinitionContext))

	return p
}

func (s *PartitionFunctionKeyContext) GetAlgType() antlr.Token { return s.algType }

func (s *PartitionFunctionKeyContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *PartitionFunctionKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionFunctionKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *PartitionFunctionKeyContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionFunctionKeyContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *PartitionFunctionKeyContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionFunctionKeyContext) LINEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEAR, 0)
}

func (s *PartitionFunctionKeyContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *PartitionFunctionKeyContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionFunctionKeyContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *PartitionFunctionKeyContext) TWO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTWO_DECIMAL, 0)
}

func (s *PartitionFunctionKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionFunctionKey(s)

	default:
		return t.VisitChildren(s)
	}
}

type PartitionFunctionHashContext struct {
	*PartitionFunctionDefinitionContext
}

func NewPartitionFunctionHashContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionFunctionHashContext {
	var p = new(PartitionFunctionHashContext)

	p.PartitionFunctionDefinitionContext = NewEmptyPartitionFunctionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionFunctionDefinitionContext))

	return p
}

func (s *PartitionFunctionHashContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionFunctionHashContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySqlParserHASH, 0)
}

func (s *PartitionFunctionHashContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionFunctionHashContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PartitionFunctionHashContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionFunctionHashContext) LINEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEAR, 0)
}

func (s *PartitionFunctionHashContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionFunctionHash(s)

	default:
		return t.VisitChildren(s)
	}
}

type PartitionFunctionListContext struct {
	*PartitionFunctionDefinitionContext
}

func NewPartitionFunctionListContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionFunctionListContext {
	var p = new(PartitionFunctionListContext)

	p.PartitionFunctionDefinitionContext = NewEmptyPartitionFunctionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionFunctionDefinitionContext))

	return p
}

func (s *PartitionFunctionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionFunctionListContext) LIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIST, 0)
}

func (s *PartitionFunctionListContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionFunctionListContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PartitionFunctionListContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionFunctionListContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *PartitionFunctionListContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *PartitionFunctionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionFunctionList(s)

	default:
		return t.VisitChildren(s)
	}
}

type PartitionFunctionRangeContext struct {
	*PartitionFunctionDefinitionContext
}

func NewPartitionFunctionRangeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionFunctionRangeContext {
	var p = new(PartitionFunctionRangeContext)

	p.PartitionFunctionDefinitionContext = NewEmptyPartitionFunctionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionFunctionDefinitionContext))

	return p
}

func (s *PartitionFunctionRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionFunctionRangeContext) RANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRANGE, 0)
}

func (s *PartitionFunctionRangeContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionFunctionRangeContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PartitionFunctionRangeContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionFunctionRangeContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *PartitionFunctionRangeContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *PartitionFunctionRangeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionFunctionRange(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) PartitionFunctionDefinition() (localctx IPartitionFunctionDefinitionContext) {
	localctx = NewPartitionFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, MySqlParserRULE_partitionFunctionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1841)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 210, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPartitionFunctionHashContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1797)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLINEAR {
			{
				p.SetState(1796)
				p.Match(MySqlParserLINEAR)
			}

		}
		{
			p.SetState(1799)
			p.Match(MySqlParserHASH)
		}
		{
			p.SetState(1800)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1801)
			p.expression(0)
		}
		{
			p.SetState(1802)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 2:
		localctx = NewPartitionFunctionKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1805)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLINEAR {
			{
				p.SetState(1804)
				p.Match(MySqlParserLINEAR)
			}

		}
		{
			p.SetState(1807)
			p.Match(MySqlParserKEY)
		}
		p.SetState(1811)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserALGORITHM {
			{
				p.SetState(1808)
				p.Match(MySqlParserALGORITHM)
			}
			{
				p.SetState(1809)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}
			{
				p.SetState(1810)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*PartitionFunctionKeyContext).algType = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserONE_DECIMAL || _la == MySqlParserTWO_DECIMAL) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*PartitionFunctionKeyContext).algType = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1813)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1814)
			p.UidList()
		}
		{
			p.SetState(1815)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 3:
		localctx = NewPartitionFunctionRangeContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1817)
			p.Match(MySqlParserRANGE)
		}
		p.SetState(1827)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLR_BRACKET:
			{
				p.SetState(1818)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1819)
				p.expression(0)
			}
			{
				p.SetState(1820)
				p.Match(MySqlParserRR_BRACKET)
			}

		case MySqlParserCOLUMNS:
			{
				p.SetState(1822)
				p.Match(MySqlParserCOLUMNS)
			}
			{
				p.SetState(1823)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1824)
				p.UidList()
			}
			{
				p.SetState(1825)
				p.Match(MySqlParserRR_BRACKET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 4:
		localctx = NewPartitionFunctionListContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1829)
			p.Match(MySqlParserLIST)
		}
		p.SetState(1839)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLR_BRACKET:
			{
				p.SetState(1830)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1831)
				p.expression(0)
			}
			{
				p.SetState(1832)
				p.Match(MySqlParserRR_BRACKET)
			}

		case MySqlParserCOLUMNS:
			{
				p.SetState(1834)
				p.Match(MySqlParserCOLUMNS)
			}
			{
				p.SetState(1835)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1836)
				p.UidList()
			}
			{
				p.SetState(1837)
				p.Match(MySqlParserRR_BRACKET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// ISubpartitionFunctionDefinitionContext is an interface to support dynamic dispatch.
type ISubpartitionFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubpartitionFunctionDefinitionContext differentiates from other interfaces.
	IsSubpartitionFunctionDefinitionContext()
}

type SubpartitionFunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubpartitionFunctionDefinitionContext() *SubpartitionFunctionDefinitionContext {
	var p = new(SubpartitionFunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_subpartitionFunctionDefinition
	return p
}

func (*SubpartitionFunctionDefinitionContext) IsSubpartitionFunctionDefinitionContext() {}

func NewSubpartitionFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubpartitionFunctionDefinitionContext {
	var p = new(SubpartitionFunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_subpartitionFunctionDefinition

	return p
}

func (s *SubpartitionFunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *SubpartitionFunctionDefinitionContext) CopyFrom(ctx *SubpartitionFunctionDefinitionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SubpartitionFunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubpartitionFunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SubPartitionFunctionHashContext struct {
	*SubpartitionFunctionDefinitionContext
}

func NewSubPartitionFunctionHashContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubPartitionFunctionHashContext {
	var p = new(SubPartitionFunctionHashContext)

	p.SubpartitionFunctionDefinitionContext = NewEmptySubpartitionFunctionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SubpartitionFunctionDefinitionContext))

	return p
}

func (s *SubPartitionFunctionHashContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubPartitionFunctionHashContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySqlParserHASH, 0)
}

func (s *SubPartitionFunctionHashContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SubPartitionFunctionHashContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SubPartitionFunctionHashContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SubPartitionFunctionHashContext) LINEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEAR, 0)
}

func (s *SubPartitionFunctionHashContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSubPartitionFunctionHash(s)

	default:
		return t.VisitChildren(s)
	}
}

type SubPartitionFunctionKeyContext struct {
	*SubpartitionFunctionDefinitionContext
	algType antlr.Token
}

func NewSubPartitionFunctionKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubPartitionFunctionKeyContext {
	var p = new(SubPartitionFunctionKeyContext)

	p.SubpartitionFunctionDefinitionContext = NewEmptySubpartitionFunctionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SubpartitionFunctionDefinitionContext))

	return p
}

func (s *SubPartitionFunctionKeyContext) GetAlgType() antlr.Token { return s.algType }

func (s *SubPartitionFunctionKeyContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *SubPartitionFunctionKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubPartitionFunctionKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *SubPartitionFunctionKeyContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SubPartitionFunctionKeyContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *SubPartitionFunctionKeyContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SubPartitionFunctionKeyContext) LINEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEAR, 0)
}

func (s *SubPartitionFunctionKeyContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *SubPartitionFunctionKeyContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *SubPartitionFunctionKeyContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *SubPartitionFunctionKeyContext) TWO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTWO_DECIMAL, 0)
}

func (s *SubPartitionFunctionKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSubPartitionFunctionKey(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SubpartitionFunctionDefinition() (localctx ISubpartitionFunctionDefinitionContext) {
	localctx = NewSubpartitionFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, MySqlParserRULE_subpartitionFunctionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1864)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 214, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSubPartitionFunctionHashContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1844)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLINEAR {
			{
				p.SetState(1843)
				p.Match(MySqlParserLINEAR)
			}

		}
		{
			p.SetState(1846)
			p.Match(MySqlParserHASH)
		}
		{
			p.SetState(1847)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1848)
			p.expression(0)
		}
		{
			p.SetState(1849)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 2:
		localctx = NewSubPartitionFunctionKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1852)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLINEAR {
			{
				p.SetState(1851)
				p.Match(MySqlParserLINEAR)
			}

		}
		{
			p.SetState(1854)
			p.Match(MySqlParserKEY)
		}
		p.SetState(1858)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserALGORITHM {
			{
				p.SetState(1855)
				p.Match(MySqlParserALGORITHM)
			}
			{
				p.SetState(1856)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}
			{
				p.SetState(1857)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*SubPartitionFunctionKeyContext).algType = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserONE_DECIMAL || _la == MySqlParserTWO_DECIMAL) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*SubPartitionFunctionKeyContext).algType = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1860)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1861)
			p.UidList()
		}
		{
			p.SetState(1862)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IPartitionDefinitionContext is an interface to support dynamic dispatch.
type IPartitionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionDefinitionContext differentiates from other interfaces.
	IsPartitionDefinitionContext()
}

type PartitionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionDefinitionContext() *PartitionDefinitionContext {
	var p = new(PartitionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partitionDefinition
	return p
}

func (*PartitionDefinitionContext) IsPartitionDefinitionContext() {}

func NewPartitionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionDefinitionContext {
	var p = new(PartitionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partitionDefinition

	return p
}

func (s *PartitionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionDefinitionContext) CopyFrom(ctx *PartitionDefinitionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PartitionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PartitionComparisonContext struct {
	*PartitionDefinitionContext
}

func NewPartitionComparisonContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionComparisonContext {
	var p = new(PartitionComparisonContext)

	p.PartitionDefinitionContext = NewEmptyPartitionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionDefinitionContext))

	return p
}

func (s *PartitionComparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionComparisonContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *PartitionComparisonContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PartitionComparisonContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUES, 0)
}

func (s *PartitionComparisonContext) LESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLESS, 0)
}

func (s *PartitionComparisonContext) THAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHAN, 0)
}

func (s *PartitionComparisonContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *PartitionComparisonContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *PartitionComparisonContext) AllPartitionDefinerAtom() []IPartitionDefinerAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinerAtomContext)(nil)).Elem())
	var tst = make([]IPartitionDefinerAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinerAtomContext)
		}
	}

	return tst
}

func (s *PartitionComparisonContext) PartitionDefinerAtom(i int) IPartitionDefinerAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinerAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinerAtomContext)
}

func (s *PartitionComparisonContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *PartitionComparisonContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *PartitionComparisonContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *PartitionComparisonContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *PartitionComparisonContext) AllPartitionOption() []IPartitionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem())
	var tst = make([]IPartitionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionOptionContext)
		}
	}

	return tst
}

func (s *PartitionComparisonContext) PartitionOption(i int) IPartitionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionOptionContext)
}

func (s *PartitionComparisonContext) AllSubpartitionDefinition() []ISubpartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem())
	var tst = make([]ISubpartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISubpartitionDefinitionContext)
		}
	}

	return tst
}

func (s *PartitionComparisonContext) SubpartitionDefinition(i int) ISubpartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISubpartitionDefinitionContext)
}

func (s *PartitionComparisonContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionComparison(s)

	default:
		return t.VisitChildren(s)
	}
}

type PartitionListAtomContext struct {
	*PartitionDefinitionContext
}

func NewPartitionListAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionListAtomContext {
	var p = new(PartitionListAtomContext)

	p.PartitionDefinitionContext = NewEmptyPartitionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionDefinitionContext))

	return p
}

func (s *PartitionListAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionListAtomContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *PartitionListAtomContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PartitionListAtomContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUES, 0)
}

func (s *PartitionListAtomContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *PartitionListAtomContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *PartitionListAtomContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *PartitionListAtomContext) AllPartitionDefinerAtom() []IPartitionDefinerAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinerAtomContext)(nil)).Elem())
	var tst = make([]IPartitionDefinerAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinerAtomContext)
		}
	}

	return tst
}

func (s *PartitionListAtomContext) PartitionDefinerAtom(i int) IPartitionDefinerAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinerAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinerAtomContext)
}

func (s *PartitionListAtomContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *PartitionListAtomContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *PartitionListAtomContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *PartitionListAtomContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *PartitionListAtomContext) AllPartitionOption() []IPartitionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem())
	var tst = make([]IPartitionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionOptionContext)
		}
	}

	return tst
}

func (s *PartitionListAtomContext) PartitionOption(i int) IPartitionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionOptionContext)
}

func (s *PartitionListAtomContext) AllSubpartitionDefinition() []ISubpartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem())
	var tst = make([]ISubpartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISubpartitionDefinitionContext)
		}
	}

	return tst
}

func (s *PartitionListAtomContext) SubpartitionDefinition(i int) ISubpartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISubpartitionDefinitionContext)
}

func (s *PartitionListAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionListAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type PartitionListVectorContext struct {
	*PartitionDefinitionContext
}

func NewPartitionListVectorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionListVectorContext {
	var p = new(PartitionListVectorContext)

	p.PartitionDefinitionContext = NewEmptyPartitionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionDefinitionContext))

	return p
}

func (s *PartitionListVectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionListVectorContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *PartitionListVectorContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PartitionListVectorContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUES, 0)
}

func (s *PartitionListVectorContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *PartitionListVectorContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *PartitionListVectorContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *PartitionListVectorContext) AllPartitionDefinerVector() []IPartitionDefinerVectorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinerVectorContext)(nil)).Elem())
	var tst = make([]IPartitionDefinerVectorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinerVectorContext)
		}
	}

	return tst
}

func (s *PartitionListVectorContext) PartitionDefinerVector(i int) IPartitionDefinerVectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinerVectorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinerVectorContext)
}

func (s *PartitionListVectorContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *PartitionListVectorContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *PartitionListVectorContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *PartitionListVectorContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *PartitionListVectorContext) AllPartitionOption() []IPartitionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem())
	var tst = make([]IPartitionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionOptionContext)
		}
	}

	return tst
}

func (s *PartitionListVectorContext) PartitionOption(i int) IPartitionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionOptionContext)
}

func (s *PartitionListVectorContext) AllSubpartitionDefinition() []ISubpartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem())
	var tst = make([]ISubpartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISubpartitionDefinitionContext)
		}
	}

	return tst
}

func (s *PartitionListVectorContext) SubpartitionDefinition(i int) ISubpartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISubpartitionDefinitionContext)
}

func (s *PartitionListVectorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionListVector(s)

	default:
		return t.VisitChildren(s)
	}
}

type PartitionSimpleContext struct {
	*PartitionDefinitionContext
}

func NewPartitionSimpleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionSimpleContext {
	var p = new(PartitionSimpleContext)

	p.PartitionDefinitionContext = NewEmptyPartitionDefinitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionDefinitionContext))

	return p
}

func (s *PartitionSimpleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionSimpleContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *PartitionSimpleContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PartitionSimpleContext) AllPartitionOption() []IPartitionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem())
	var tst = make([]IPartitionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionOptionContext)
		}
	}

	return tst
}

func (s *PartitionSimpleContext) PartitionOption(i int) IPartitionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionOptionContext)
}

func (s *PartitionSimpleContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionSimpleContext) AllSubpartitionDefinition() []ISubpartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem())
	var tst = make([]ISubpartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISubpartitionDefinitionContext)
		}
	}

	return tst
}

func (s *PartitionSimpleContext) SubpartitionDefinition(i int) ISubpartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubpartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISubpartitionDefinitionContext)
}

func (s *PartitionSimpleContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionSimpleContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *PartitionSimpleContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *PartitionSimpleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionSimple(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) PartitionDefinition() (localctx IPartitionDefinitionContext) {
	localctx = NewPartitionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, MySqlParserRULE_partitionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2012)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 233, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPartitionComparisonContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1866)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(1867)
			p.Uid()
		}
		{
			p.SetState(1868)
			p.Match(MySqlParserVALUES)
		}
		{
			p.SetState(1869)
			p.Match(MySqlParserLESS)
		}
		{
			p.SetState(1870)
			p.Match(MySqlParserTHAN)
		}
		{
			p.SetState(1871)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1872)
			p.PartitionDefinerAtom()
		}
		p.SetState(1877)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(1873)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(1874)
				p.PartitionDefinerAtom()
			}

			p.SetState(1879)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1880)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(1884)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserINDEX || _la == MySqlParserCOMMENT || _la == MySqlParserDATA || _la == MySqlParserENGINE || (((_la-460)&-(0x1f+1)) == 0 && ((1<<uint((_la-460)))&((1<<(MySqlParserMAX_ROWS-460))|(1<<(MySqlParserMIN_ROWS-460))|(1<<(MySqlParserNODEGROUP-460)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE {
			{
				p.SetState(1881)
				p.PartitionOption()
			}

			p.SetState(1886)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1898)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(1887)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1888)
				p.SubpartitionDefinition()
			}
			p.SetState(1893)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(1889)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(1890)
					p.SubpartitionDefinition()
				}

				p.SetState(1895)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1896)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case 2:
		localctx = NewPartitionComparisonContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1900)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(1901)
			p.Uid()
		}
		{
			p.SetState(1902)
			p.Match(MySqlParserVALUES)
		}
		{
			p.SetState(1903)
			p.Match(MySqlParserLESS)
		}
		{
			p.SetState(1904)
			p.Match(MySqlParserTHAN)
		}
		{
			p.SetState(1905)
			p.PartitionDefinerAtom()
		}
		p.SetState(1909)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserINDEX || _la == MySqlParserCOMMENT || _la == MySqlParserDATA || _la == MySqlParserENGINE || (((_la-460)&-(0x1f+1)) == 0 && ((1<<uint((_la-460)))&((1<<(MySqlParserMAX_ROWS-460))|(1<<(MySqlParserMIN_ROWS-460))|(1<<(MySqlParserNODEGROUP-460)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE {
			{
				p.SetState(1906)
				p.PartitionOption()
			}

			p.SetState(1911)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1923)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(1912)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1913)
				p.SubpartitionDefinition()
			}
			p.SetState(1918)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(1914)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(1915)
					p.SubpartitionDefinition()
				}

				p.SetState(1920)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1921)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case 3:
		localctx = NewPartitionListAtomContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1925)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(1926)
			p.Uid()
		}
		{
			p.SetState(1927)
			p.Match(MySqlParserVALUES)
		}
		{
			p.SetState(1928)
			p.Match(MySqlParserIN)
		}
		{
			p.SetState(1929)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1930)
			p.PartitionDefinerAtom()
		}
		p.SetState(1935)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(1931)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(1932)
				p.PartitionDefinerAtom()
			}

			p.SetState(1937)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1938)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(1942)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserINDEX || _la == MySqlParserCOMMENT || _la == MySqlParserDATA || _la == MySqlParserENGINE || (((_la-460)&-(0x1f+1)) == 0 && ((1<<uint((_la-460)))&((1<<(MySqlParserMAX_ROWS-460))|(1<<(MySqlParserMIN_ROWS-460))|(1<<(MySqlParserNODEGROUP-460)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE {
			{
				p.SetState(1939)
				p.PartitionOption()
			}

			p.SetState(1944)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1956)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(1945)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1946)
				p.SubpartitionDefinition()
			}
			p.SetState(1951)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(1947)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(1948)
					p.SubpartitionDefinition()
				}

				p.SetState(1953)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1954)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case 4:
		localctx = NewPartitionListVectorContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1958)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(1959)
			p.Uid()
		}
		{
			p.SetState(1960)
			p.Match(MySqlParserVALUES)
		}
		{
			p.SetState(1961)
			p.Match(MySqlParserIN)
		}
		{
			p.SetState(1962)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1963)
			p.PartitionDefinerVector()
		}
		p.SetState(1968)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(1964)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(1965)
				p.PartitionDefinerVector()
			}

			p.SetState(1970)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1971)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(1975)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserINDEX || _la == MySqlParserCOMMENT || _la == MySqlParserDATA || _la == MySqlParserENGINE || (((_la-460)&-(0x1f+1)) == 0 && ((1<<uint((_la-460)))&((1<<(MySqlParserMAX_ROWS-460))|(1<<(MySqlParserMIN_ROWS-460))|(1<<(MySqlParserNODEGROUP-460)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE {
			{
				p.SetState(1972)
				p.PartitionOption()
			}

			p.SetState(1977)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1989)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(1978)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1979)
				p.SubpartitionDefinition()
			}
			p.SetState(1984)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(1980)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(1981)
					p.SubpartitionDefinition()
				}

				p.SetState(1986)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1987)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case 5:
		localctx = NewPartitionSimpleContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1991)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(1992)
			p.Uid()
		}
		p.SetState(1996)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserINDEX || _la == MySqlParserCOMMENT || _la == MySqlParserDATA || _la == MySqlParserENGINE || (((_la-460)&-(0x1f+1)) == 0 && ((1<<uint((_la-460)))&((1<<(MySqlParserMAX_ROWS-460))|(1<<(MySqlParserMIN_ROWS-460))|(1<<(MySqlParserNODEGROUP-460)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE {
			{
				p.SetState(1993)
				p.PartitionOption()
			}

			p.SetState(1998)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2010)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(1999)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(2000)
				p.SubpartitionDefinition()
			}
			p.SetState(2005)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(2001)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(2002)
					p.SubpartitionDefinition()
				}

				p.SetState(2007)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2008)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	}

	return localctx
}

// IPartitionDefinerAtomContext is an interface to support dynamic dispatch.
type IPartitionDefinerAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionDefinerAtomContext differentiates from other interfaces.
	IsPartitionDefinerAtomContext()
}

type PartitionDefinerAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionDefinerAtomContext() *PartitionDefinerAtomContext {
	var p = new(PartitionDefinerAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partitionDefinerAtom
	return p
}

func (*PartitionDefinerAtomContext) IsPartitionDefinerAtomContext() {}

func NewPartitionDefinerAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionDefinerAtomContext {
	var p = new(PartitionDefinerAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partitionDefinerAtom

	return p
}

func (s *PartitionDefinerAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionDefinerAtomContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *PartitionDefinerAtomContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PartitionDefinerAtomContext) MAXVALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAXVALUE, 0)
}

func (s *PartitionDefinerAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionDefinerAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionDefinerAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionDefinerAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) PartitionDefinerAtom() (localctx IPartitionDefinerAtomContext) {
	localctx = NewPartitionDefinerAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, MySqlParserRULE_partitionDefinerAtom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2017)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2014)
			p.Constant()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2015)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2016)
			p.Match(MySqlParserMAXVALUE)
		}

	}

	return localctx
}

// IPartitionDefinerVectorContext is an interface to support dynamic dispatch.
type IPartitionDefinerVectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionDefinerVectorContext differentiates from other interfaces.
	IsPartitionDefinerVectorContext()
}

type PartitionDefinerVectorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionDefinerVectorContext() *PartitionDefinerVectorContext {
	var p = new(PartitionDefinerVectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partitionDefinerVector
	return p
}

func (*PartitionDefinerVectorContext) IsPartitionDefinerVectorContext() {}

func NewPartitionDefinerVectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionDefinerVectorContext {
	var p = new(PartitionDefinerVectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partitionDefinerVector

	return p
}

func (s *PartitionDefinerVectorContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionDefinerVectorContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PartitionDefinerVectorContext) AllPartitionDefinerAtom() []IPartitionDefinerAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinerAtomContext)(nil)).Elem())
	var tst = make([]IPartitionDefinerAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinerAtomContext)
		}
	}

	return tst
}

func (s *PartitionDefinerVectorContext) PartitionDefinerAtom(i int) IPartitionDefinerAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinerAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinerAtomContext)
}

func (s *PartitionDefinerVectorContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PartitionDefinerVectorContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *PartitionDefinerVectorContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *PartitionDefinerVectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionDefinerVectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartitionDefinerVectorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionDefinerVector(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) PartitionDefinerVector() (localctx IPartitionDefinerVectorContext) {
	localctx = NewPartitionDefinerVectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, MySqlParserRULE_partitionDefinerVector)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2019)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(2020)
		p.PartitionDefinerAtom()
	}
	p.SetState(2023)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySqlParserCOMMA {
		{
			p.SetState(2021)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(2022)
			p.PartitionDefinerAtom()
		}

		p.SetState(2025)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2027)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// ISubpartitionDefinitionContext is an interface to support dynamic dispatch.
type ISubpartitionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubpartitionDefinitionContext differentiates from other interfaces.
	IsSubpartitionDefinitionContext()
}

type SubpartitionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubpartitionDefinitionContext() *SubpartitionDefinitionContext {
	var p = new(SubpartitionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_subpartitionDefinition
	return p
}

func (*SubpartitionDefinitionContext) IsSubpartitionDefinitionContext() {}

func NewSubpartitionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubpartitionDefinitionContext {
	var p = new(SubpartitionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_subpartitionDefinition

	return p
}

func (s *SubpartitionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *SubpartitionDefinitionContext) SUBPARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITION, 0)
}

func (s *SubpartitionDefinitionContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SubpartitionDefinitionContext) AllPartitionOption() []IPartitionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem())
	var tst = make([]IPartitionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionOptionContext)
		}
	}

	return tst
}

func (s *SubpartitionDefinitionContext) PartitionOption(i int) IPartitionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionOptionContext)
}

func (s *SubpartitionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubpartitionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubpartitionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSubpartitionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SubpartitionDefinition() (localctx ISubpartitionDefinitionContext) {
	localctx = NewSubpartitionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, MySqlParserRULE_subpartitionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2029)
		p.Match(MySqlParserSUBPARTITION)
	}
	{
		p.SetState(2030)
		p.Uid()
	}
	p.SetState(2034)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserINDEX || _la == MySqlParserCOMMENT || _la == MySqlParserDATA || _la == MySqlParserENGINE || (((_la-460)&-(0x1f+1)) == 0 && ((1<<uint((_la-460)))&((1<<(MySqlParserMAX_ROWS-460))|(1<<(MySqlParserMIN_ROWS-460))|(1<<(MySqlParserNODEGROUP-460)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserTABLESPACE {
		{
			p.SetState(2031)
			p.PartitionOption()
		}

		p.SetState(2036)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPartitionOptionContext is an interface to support dynamic dispatch.
type IPartitionOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartitionOptionContext differentiates from other interfaces.
	IsPartitionOptionContext()
}

type PartitionOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartitionOptionContext() *PartitionOptionContext {
	var p = new(PartitionOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partitionOption
	return p
}

func (*PartitionOptionContext) IsPartitionOptionContext() {}

func NewPartitionOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartitionOptionContext {
	var p = new(PartitionOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partitionOption

	return p
}

func (s *PartitionOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartitionOptionContext) CopyFrom(ctx *PartitionOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PartitionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PartitionOptionCommentContext struct {
	*PartitionOptionContext
	comment antlr.Token
}

func NewPartitionOptionCommentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionCommentContext {
	var p = new(PartitionOptionCommentContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionCommentContext) GetComment() antlr.Token { return s.comment }

func (s *PartitionOptionCommentContext) SetComment(v antlr.Token) { s.comment = v }

func (s *PartitionOptionCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionCommentContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *PartitionOptionCommentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PartitionOptionCommentContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionCommentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionOptionComment(s)

	default:
		return t.VisitChildren(s)
	}
}

type PartitionOptionNodeGroupContext struct {
	*PartitionOptionContext
	nodegroup IUidContext
}

func NewPartitionOptionNodeGroupContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionNodeGroupContext {
	var p = new(PartitionOptionNodeGroupContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionNodeGroupContext) GetNodegroup() IUidContext { return s.nodegroup }

func (s *PartitionOptionNodeGroupContext) SetNodegroup(v IUidContext) { s.nodegroup = v }

func (s *PartitionOptionNodeGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionNodeGroupContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserNODEGROUP, 0)
}

func (s *PartitionOptionNodeGroupContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PartitionOptionNodeGroupContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionNodeGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionOptionNodeGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

type PartitionOptionIndexDirectoryContext struct {
	*PartitionOptionContext
	indexDirectory antlr.Token
}

func NewPartitionOptionIndexDirectoryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionIndexDirectoryContext {
	var p = new(PartitionOptionIndexDirectoryContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionIndexDirectoryContext) GetIndexDirectory() antlr.Token {
	return s.indexDirectory
}

func (s *PartitionOptionIndexDirectoryContext) SetIndexDirectory(v antlr.Token) { s.indexDirectory = v }

func (s *PartitionOptionIndexDirectoryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionIndexDirectoryContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *PartitionOptionIndexDirectoryContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *PartitionOptionIndexDirectoryContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PartitionOptionIndexDirectoryContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionIndexDirectoryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionOptionIndexDirectory(s)

	default:
		return t.VisitChildren(s)
	}
}

type PartitionOptionMaxRowsContext struct {
	*PartitionOptionContext
	maxRows IDecimalLiteralContext
}

func NewPartitionOptionMaxRowsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionMaxRowsContext {
	var p = new(PartitionOptionMaxRowsContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionMaxRowsContext) GetMaxRows() IDecimalLiteralContext { return s.maxRows }

func (s *PartitionOptionMaxRowsContext) SetMaxRows(v IDecimalLiteralContext) { s.maxRows = v }

func (s *PartitionOptionMaxRowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionMaxRowsContext) MAX_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_ROWS, 0)
}

func (s *PartitionOptionMaxRowsContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *PartitionOptionMaxRowsContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionMaxRowsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionOptionMaxRows(s)

	default:
		return t.VisitChildren(s)
	}
}

type PartitionOptionTablespaceContext struct {
	*PartitionOptionContext
	tablespace IUidContext
}

func NewPartitionOptionTablespaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionTablespaceContext {
	var p = new(PartitionOptionTablespaceContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionTablespaceContext) GetTablespace() IUidContext { return s.tablespace }

func (s *PartitionOptionTablespaceContext) SetTablespace(v IUidContext) { s.tablespace = v }

func (s *PartitionOptionTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *PartitionOptionTablespaceContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PartitionOptionTablespaceContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionTablespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionOptionTablespace(s)

	default:
		return t.VisitChildren(s)
	}
}

type PartitionOptionEngineContext struct {
	*PartitionOptionContext
}

func NewPartitionOptionEngineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionEngineContext {
	var p = new(PartitionOptionEngineContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionEngineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionEngineContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *PartitionOptionEngineContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *PartitionOptionEngineContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *PartitionOptionEngineContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionEngineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionOptionEngine(s)

	default:
		return t.VisitChildren(s)
	}
}

type PartitionOptionMinRowsContext struct {
	*PartitionOptionContext
	minRows IDecimalLiteralContext
}

func NewPartitionOptionMinRowsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionMinRowsContext {
	var p = new(PartitionOptionMinRowsContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionMinRowsContext) GetMinRows() IDecimalLiteralContext { return s.minRows }

func (s *PartitionOptionMinRowsContext) SetMinRows(v IDecimalLiteralContext) { s.minRows = v }

func (s *PartitionOptionMinRowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionMinRowsContext) MIN_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN_ROWS, 0)
}

func (s *PartitionOptionMinRowsContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *PartitionOptionMinRowsContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionMinRowsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionOptionMinRows(s)

	default:
		return t.VisitChildren(s)
	}
}

type PartitionOptionDataDirectoryContext struct {
	*PartitionOptionContext
	dataDirectory antlr.Token
}

func NewPartitionOptionDataDirectoryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PartitionOptionDataDirectoryContext {
	var p = new(PartitionOptionDataDirectoryContext)

	p.PartitionOptionContext = NewEmptyPartitionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PartitionOptionContext))

	return p
}

func (s *PartitionOptionDataDirectoryContext) GetDataDirectory() antlr.Token { return s.dataDirectory }

func (s *PartitionOptionDataDirectoryContext) SetDataDirectory(v antlr.Token) { s.dataDirectory = v }

func (s *PartitionOptionDataDirectoryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartitionOptionDataDirectoryContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *PartitionOptionDataDirectoryContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *PartitionOptionDataDirectoryContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PartitionOptionDataDirectoryContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PartitionOptionDataDirectoryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartitionOptionDataDirectory(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) PartitionOption() (localctx IPartitionOptionContext) {
	localctx = NewPartitionOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, MySqlParserRULE_partitionOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2082)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserENGINE, MySqlParserSTORAGE:
		localctx = NewPartitionOptionEngineContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2038)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSTORAGE {
			{
				p.SetState(2037)
				p.Match(MySqlParserSTORAGE)
			}

		}
		{
			p.SetState(2040)
			p.Match(MySqlParserENGINE)
		}
		p.SetState(2042)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2041)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2044)
			p.EngineName()
		}

	case MySqlParserCOMMENT:
		localctx = NewPartitionOptionCommentContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2045)
			p.Match(MySqlParserCOMMENT)
		}
		p.SetState(2047)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2046)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2049)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PartitionOptionCommentContext).comment = _m
		}

	case MySqlParserDATA:
		localctx = NewPartitionOptionDataDirectoryContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2050)
			p.Match(MySqlParserDATA)
		}
		{
			p.SetState(2051)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(2053)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2052)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2055)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PartitionOptionDataDirectoryContext).dataDirectory = _m
		}

	case MySqlParserINDEX:
		localctx = NewPartitionOptionIndexDirectoryContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2056)
			p.Match(MySqlParserINDEX)
		}
		{
			p.SetState(2057)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(2059)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2058)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2061)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PartitionOptionIndexDirectoryContext).indexDirectory = _m
		}

	case MySqlParserMAX_ROWS:
		localctx = NewPartitionOptionMaxRowsContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2062)
			p.Match(MySqlParserMAX_ROWS)
		}
		p.SetState(2064)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2063)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2066)

			var _x = p.DecimalLiteral()

			localctx.(*PartitionOptionMaxRowsContext).maxRows = _x
		}

	case MySqlParserMIN_ROWS:
		localctx = NewPartitionOptionMinRowsContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2067)
			p.Match(MySqlParserMIN_ROWS)
		}
		p.SetState(2069)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2068)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2071)

			var _x = p.DecimalLiteral()

			localctx.(*PartitionOptionMinRowsContext).minRows = _x
		}

	case MySqlParserTABLESPACE:
		localctx = NewPartitionOptionTablespaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2072)
			p.Match(MySqlParserTABLESPACE)
		}
		p.SetState(2074)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2073)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2076)

			var _x = p.Uid()

			localctx.(*PartitionOptionTablespaceContext).tablespace = _x
		}

	case MySqlParserNODEGROUP:
		localctx = NewPartitionOptionNodeGroupContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2077)
			p.Match(MySqlParserNODEGROUP)
		}
		p.SetState(2079)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2078)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2081)

			var _x = p.Uid()

			localctx.(*PartitionOptionNodeGroupContext).nodegroup = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlterDatabaseContext is an interface to support dynamic dispatch.
type IAlterDatabaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterDatabaseContext differentiates from other interfaces.
	IsAlterDatabaseContext()
}

type AlterDatabaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterDatabaseContext() *AlterDatabaseContext {
	var p = new(AlterDatabaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterDatabase
	return p
}

func (*AlterDatabaseContext) IsAlterDatabaseContext() {}

func NewAlterDatabaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterDatabaseContext {
	var p = new(AlterDatabaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterDatabase

	return p
}

func (s *AlterDatabaseContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterDatabaseContext) CopyFrom(ctx *AlterDatabaseContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *AlterDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterDatabaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AlterUpgradeNameContext struct {
	*AlterDatabaseContext
	dbFormat antlr.Token
}

func NewAlterUpgradeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterUpgradeNameContext {
	var p = new(AlterUpgradeNameContext)

	p.AlterDatabaseContext = NewEmptyAlterDatabaseContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterDatabaseContext))

	return p
}

func (s *AlterUpgradeNameContext) GetDbFormat() antlr.Token { return s.dbFormat }

func (s *AlterUpgradeNameContext) SetDbFormat(v antlr.Token) { s.dbFormat = v }

func (s *AlterUpgradeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterUpgradeNameContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterUpgradeNameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterUpgradeNameContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPGRADE, 0)
}

func (s *AlterUpgradeNameContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *AlterUpgradeNameContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *AlterUpgradeNameContext) NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAME, 0)
}

func (s *AlterUpgradeNameContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *AlterUpgradeNameContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *AlterUpgradeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterUpgradeName(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterSimpleDatabaseContext struct {
	*AlterDatabaseContext
	dbFormat antlr.Token
}

func NewAlterSimpleDatabaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterSimpleDatabaseContext {
	var p = new(AlterSimpleDatabaseContext)

	p.AlterDatabaseContext = NewEmptyAlterDatabaseContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterDatabaseContext))

	return p
}

func (s *AlterSimpleDatabaseContext) GetDbFormat() antlr.Token { return s.dbFormat }

func (s *AlterSimpleDatabaseContext) SetDbFormat(v antlr.Token) { s.dbFormat = v }

func (s *AlterSimpleDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterSimpleDatabaseContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterSimpleDatabaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *AlterSimpleDatabaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *AlterSimpleDatabaseContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterSimpleDatabaseContext) AllCreateDatabaseOption() []ICreateDatabaseOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreateDatabaseOptionContext)(nil)).Elem())
	var tst = make([]ICreateDatabaseOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreateDatabaseOptionContext)
		}
	}

	return tst
}

func (s *AlterSimpleDatabaseContext) CreateDatabaseOption(i int) ICreateDatabaseOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateDatabaseOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreateDatabaseOptionContext)
}

func (s *AlterSimpleDatabaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterSimpleDatabase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AlterDatabase() (localctx IAlterDatabaseContext) {
	localctx = NewAlterDatabaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, MySqlParserRULE_alterDatabase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2102)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 249, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAlterSimpleDatabaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2084)
			p.Match(MySqlParserALTER)
		}
		{
			p.SetState(2085)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterSimpleDatabaseContext).dbFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterSimpleDatabaseContext).dbFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(2087)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 247, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2086)
				p.Uid()
			}

		}
		p.SetState(2090)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint((_la-22)))&((1<<(MySqlParserCHARACTER-22))|(1<<(MySqlParserCOLLATE-22))|(1<<(MySqlParserDEFAULT-22)))) != 0) || _la == MySqlParserCHARSET {
			{
				p.SetState(2089)
				p.CreateDatabaseOption()
			}

			p.SetState(2092)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewAlterUpgradeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2094)
			p.Match(MySqlParserALTER)
		}
		{
			p.SetState(2095)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterUpgradeNameContext).dbFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterUpgradeNameContext).dbFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2096)
			p.Uid()
		}
		{
			p.SetState(2097)
			p.Match(MySqlParserUPGRADE)
		}
		{
			p.SetState(2098)
			p.Match(MySqlParserDATA)
		}
		{
			p.SetState(2099)
			p.Match(MySqlParserDIRECTORY)
		}
		{
			p.SetState(2100)
			p.Match(MySqlParserNAME)
		}

	}

	return localctx
}

// IAlterEventContext is an interface to support dynamic dispatch.
type IAlterEventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterEventContext differentiates from other interfaces.
	IsAlterEventContext()
}

type AlterEventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterEventContext() *AlterEventContext {
	var p = new(AlterEventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterEvent
	return p
}

func (*AlterEventContext) IsAlterEventContext() {}

func NewAlterEventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterEventContext {
	var p = new(AlterEventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterEvent

	return p
}

func (s *AlterEventContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterEventContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterEventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *AlterEventContext) AllFullId() []IFullIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFullIdContext)(nil)).Elem())
	var tst = make([]IFullIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFullIdContext)
		}
	}

	return tst
}

func (s *AlterEventContext) FullId(i int) IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *AlterEventContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *AlterEventContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *AlterEventContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *AlterEventContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEDULE, 0)
}

func (s *AlterEventContext) ScheduleExpression() IScheduleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScheduleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScheduleExpressionContext)
}

func (s *AlterEventContext) COMPLETION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPLETION, 0)
}

func (s *AlterEventContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRESERVE, 0)
}

func (s *AlterEventContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *AlterEventContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *AlterEventContext) EnableType() IEnableTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnableTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnableTypeContext)
}

func (s *AlterEventContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *AlterEventContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *AlterEventContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *AlterEventContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *AlterEventContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *AlterEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterEventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterEventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterEvent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AlterEvent() (localctx IAlterEventContext) {
	localctx = NewAlterEventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, MySqlParserRULE_alterEvent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2104)
		p.Match(MySqlParserALTER)
	}
	p.SetState(2106)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(2105)
			p.OwnerStatement()
		}

	}
	{
		p.SetState(2108)
		p.Match(MySqlParserEVENT)
	}
	{
		p.SetState(2109)
		p.FullId()
	}
	p.SetState(2113)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2110)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(2111)
			p.Match(MySqlParserSCHEDULE)
		}
		{
			p.SetState(2112)
			p.ScheduleExpression()
		}

	}
	p.SetState(2121)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserON {
		{
			p.SetState(2115)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(2116)
			p.Match(MySqlParserCOMPLETION)
		}
		p.SetState(2118)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(2117)
				p.Match(MySqlParserNOT)
			}

		}
		{
			p.SetState(2120)
			p.Match(MySqlParserPRESERVE)
		}

	}
	p.SetState(2126)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2123)
			p.Match(MySqlParserRENAME)
		}
		{
			p.SetState(2124)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(2125)
			p.FullId()
		}

	}
	p.SetState(2129)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDISABLE || _la == MySqlParserENABLE {
		{
			p.SetState(2128)
			p.EnableType()
		}

	}
	p.SetState(2133)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(2131)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(2132)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	}
	p.SetState(2137)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2135)
			p.Match(MySqlParserDO)
		}
		{
			p.SetState(2136)
			p.RoutineBody()
		}

	}

	return localctx
}

// IAlterFunctionContext is an interface to support dynamic dispatch.
type IAlterFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterFunctionContext differentiates from other interfaces.
	IsAlterFunctionContext()
}

type AlterFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterFunctionContext() *AlterFunctionContext {
	var p = new(AlterFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterFunction
	return p
}

func (*AlterFunctionContext) IsAlterFunctionContext() {}

func NewAlterFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterFunctionContext {
	var p = new(AlterFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterFunction

	return p
}

func (s *AlterFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterFunctionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterFunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *AlterFunctionContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *AlterFunctionContext) AllRoutineOption() []IRoutineOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem())
	var tst = make([]IRoutineOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutineOptionContext)
		}
	}

	return tst
}

func (s *AlterFunctionContext) RoutineOption(i int) IRoutineOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutineOptionContext)
}

func (s *AlterFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AlterFunction() (localctx IAlterFunctionContext) {
	localctx = NewAlterFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, MySqlParserRULE_alterFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2139)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(2140)
		p.Match(MySqlParserFUNCTION)
	}
	{
		p.SetState(2141)
		p.FullId()
	}
	p.SetState(2145)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserDETERMINISTIC || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(MySqlParserMODIFIES-101))|(1<<(MySqlParserNOT-101))|(1<<(MySqlParserREADS-101)))) != 0) || _la == MySqlParserSQL || _la == MySqlParserCOMMENT || _la == MySqlParserCONTAINS || _la == MySqlParserLANGUAGE || _la == MySqlParserNO {
		{
			p.SetState(2142)
			p.RoutineOption()
		}

		p.SetState(2147)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlterInstanceContext is an interface to support dynamic dispatch.
type IAlterInstanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterInstanceContext differentiates from other interfaces.
	IsAlterInstanceContext()
}

type AlterInstanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterInstanceContext() *AlterInstanceContext {
	var p = new(AlterInstanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterInstance
	return p
}

func (*AlterInstanceContext) IsAlterInstanceContext() {}

func NewAlterInstanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterInstanceContext {
	var p = new(AlterInstanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterInstance

	return p
}

func (s *AlterInstanceContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterInstanceContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterInstanceContext) INSTANCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTANCE, 0)
}

func (s *AlterInstanceContext) ROTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROTATE, 0)
}

func (s *AlterInstanceContext) INNODB() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNODB, 0)
}

func (s *AlterInstanceContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *AlterInstanceContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterInstanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterInstanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterInstanceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterInstance(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AlterInstance() (localctx IAlterInstanceContext) {
	localctx = NewAlterInstanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, MySqlParserRULE_alterInstance)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2148)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(2149)
		p.Match(MySqlParserINSTANCE)
	}
	{
		p.SetState(2150)
		p.Match(MySqlParserROTATE)
	}
	{
		p.SetState(2151)
		p.Match(MySqlParserINNODB)
	}
	{
		p.SetState(2152)
		p.Match(MySqlParserMASTER)
	}
	{
		p.SetState(2153)
		p.Match(MySqlParserKEY)
	}

	return localctx
}

// IAlterLogfileGroupContext is an interface to support dynamic dispatch.
type IAlterLogfileGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterLogfileGroupContext differentiates from other interfaces.
	IsAlterLogfileGroupContext()
}

type AlterLogfileGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterLogfileGroupContext() *AlterLogfileGroupContext {
	var p = new(AlterLogfileGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterLogfileGroup
	return p
}

func (*AlterLogfileGroupContext) IsAlterLogfileGroupContext() {}

func NewAlterLogfileGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterLogfileGroupContext {
	var p = new(AlterLogfileGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterLogfileGroup

	return p
}

func (s *AlterLogfileGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterLogfileGroupContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterLogfileGroupContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *AlterLogfileGroupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *AlterLogfileGroupContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterLogfileGroupContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterLogfileGroupContext) UNDOFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDOFILE, 0)
}

func (s *AlterLogfileGroupContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *AlterLogfileGroupContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *AlterLogfileGroupContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *AlterLogfileGroupContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *AlterLogfileGroupContext) FileSizeLiteral() IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *AlterLogfileGroupContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *AlterLogfileGroupContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *AlterLogfileGroupContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *AlterLogfileGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterLogfileGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterLogfileGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterLogfileGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AlterLogfileGroup() (localctx IAlterLogfileGroupContext) {
	localctx = NewAlterLogfileGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, MySqlParserRULE_alterLogfileGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2155)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(2156)
		p.Match(MySqlParserLOGFILE)
	}
	{
		p.SetState(2157)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(2158)
		p.Uid()
	}
	{
		p.SetState(2159)
		p.Match(MySqlParserADD)
	}
	{
		p.SetState(2160)
		p.Match(MySqlParserUNDOFILE)
	}
	{
		p.SetState(2161)
		p.Match(MySqlParserSTRING_LITERAL)
	}
	p.SetState(2167)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINITIAL_SIZE {
		{
			p.SetState(2162)
			p.Match(MySqlParserINITIAL_SIZE)
		}
		p.SetState(2164)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2163)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2166)
			p.FileSizeLiteral()
		}

	}
	p.SetState(2170)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWAIT {
		{
			p.SetState(2169)
			p.Match(MySqlParserWAIT)
		}

	}
	{
		p.SetState(2172)
		p.Match(MySqlParserENGINE)
	}
	p.SetState(2174)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEQUAL_SYMBOL {
		{
			p.SetState(2173)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	}
	{
		p.SetState(2176)
		p.EngineName()
	}

	return localctx
}

// IAlterProcedureContext is an interface to support dynamic dispatch.
type IAlterProcedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterProcedureContext differentiates from other interfaces.
	IsAlterProcedureContext()
}

type AlterProcedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterProcedureContext() *AlterProcedureContext {
	var p = new(AlterProcedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterProcedure
	return p
}

func (*AlterProcedureContext) IsAlterProcedureContext() {}

func NewAlterProcedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterProcedureContext {
	var p = new(AlterProcedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterProcedure

	return p
}

func (s *AlterProcedureContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterProcedureContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterProcedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *AlterProcedureContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *AlterProcedureContext) AllRoutineOption() []IRoutineOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem())
	var tst = make([]IRoutineOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutineOptionContext)
		}
	}

	return tst
}

func (s *AlterProcedureContext) RoutineOption(i int) IRoutineOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutineOptionContext)
}

func (s *AlterProcedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterProcedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterProcedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterProcedure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AlterProcedure() (localctx IAlterProcedureContext) {
	localctx = NewAlterProcedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, MySqlParserRULE_alterProcedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2178)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(2179)
		p.Match(MySqlParserPROCEDURE)
	}
	{
		p.SetState(2180)
		p.FullId()
	}
	p.SetState(2184)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserDETERMINISTIC || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(MySqlParserMODIFIES-101))|(1<<(MySqlParserNOT-101))|(1<<(MySqlParserREADS-101)))) != 0) || _la == MySqlParserSQL || _la == MySqlParserCOMMENT || _la == MySqlParserCONTAINS || _la == MySqlParserLANGUAGE || _la == MySqlParserNO {
		{
			p.SetState(2181)
			p.RoutineOption()
		}

		p.SetState(2186)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlterServerContext is an interface to support dynamic dispatch.
type IAlterServerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterServerContext differentiates from other interfaces.
	IsAlterServerContext()
}

type AlterServerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterServerContext() *AlterServerContext {
	var p = new(AlterServerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterServer
	return p
}

func (*AlterServerContext) IsAlterServerContext() {}

func NewAlterServerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterServerContext {
	var p = new(AlterServerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterServer

	return p
}

func (s *AlterServerContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterServerContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterServerContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVER, 0)
}

func (s *AlterServerContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterServerContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONS, 0)
}

func (s *AlterServerContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AlterServerContext) AllServerOption() []IServerOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IServerOptionContext)(nil)).Elem())
	var tst = make([]IServerOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IServerOptionContext)
		}
	}

	return tst
}

func (s *AlterServerContext) ServerOption(i int) IServerOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IServerOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IServerOptionContext)
}

func (s *AlterServerContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AlterServerContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterServerContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterServerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterServerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterServerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterServer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AlterServer() (localctx IAlterServerContext) {
	localctx = NewAlterServerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, MySqlParserRULE_alterServer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2187)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(2188)
		p.Match(MySqlParserSERVER)
	}
	{
		p.SetState(2189)
		p.Uid()
	}
	{
		p.SetState(2190)
		p.Match(MySqlParserOPTIONS)
	}
	{
		p.SetState(2191)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(2192)
		p.ServerOption()
	}
	p.SetState(2197)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(2193)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(2194)
			p.ServerOption()
		}

		p.SetState(2199)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2200)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IAlterTableContext is an interface to support dynamic dispatch.
type IAlterTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIntimeAction returns the intimeAction token.
	GetIntimeAction() antlr.Token

	// SetIntimeAction sets the intimeAction token.
	SetIntimeAction(antlr.Token)

	// IsAlterTableContext differentiates from other interfaces.
	IsAlterTableContext()
}

type AlterTableContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	intimeAction antlr.Token
}

func NewEmptyAlterTableContext() *AlterTableContext {
	var p = new(AlterTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterTable
	return p
}

func (*AlterTableContext) IsAlterTableContext() {}

func NewAlterTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTableContext {
	var p = new(AlterTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterTable

	return p
}

func (s *AlterTableContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTableContext) GetIntimeAction() antlr.Token { return s.intimeAction }

func (s *AlterTableContext) SetIntimeAction(v antlr.Token) { s.intimeAction = v }

func (s *AlterTableContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *AlterTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AlterTableContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *AlterTableContext) AllAlterSpecification() []IAlterSpecificationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlterSpecificationContext)(nil)).Elem())
	var tst = make([]IAlterSpecificationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlterSpecificationContext)
		}
	}

	return tst
}

func (s *AlterTableContext) AlterSpecification(i int) IAlterSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlterSpecificationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlterSpecificationContext)
}

func (s *AlterTableContext) PartitionDefinitions() IPartitionDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionsContext)
}

func (s *AlterTableContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLINE, 0)
}

func (s *AlterTableContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFLINE, 0)
}

func (s *AlterTableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterTableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AlterTable() (localctx IAlterTableContext) {
	localctx = NewAlterTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, MySqlParserRULE_alterTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2202)
		p.Match(MySqlParserALTER)
	}
	p.SetState(2204)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserOFFLINE || _la == MySqlParserONLINE {
		{
			p.SetState(2203)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterTableContext).intimeAction = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserOFFLINE || _la == MySqlParserONLINE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterTableContext).intimeAction = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2207)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(2206)
			p.Match(MySqlParserIGNORE)
		}

	}
	{
		p.SetState(2209)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(2210)
		p.TableName()
	}
	p.SetState(2219)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 268, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2211)
			p.AlterSpecification()
		}
		p.SetState(2216)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2212)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2213)
				p.AlterSpecification()
			}

			p.SetState(2218)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(2222)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(2221)
			p.PartitionDefinitions()
		}

	}

	return localctx
}

// IAlterTablespaceContext is an interface to support dynamic dispatch.
type IAlterTablespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetObjectAction returns the objectAction token.
	GetObjectAction() antlr.Token

	// SetObjectAction sets the objectAction token.
	SetObjectAction(antlr.Token)

	// IsAlterTablespaceContext differentiates from other interfaces.
	IsAlterTablespaceContext()
}

type AlterTablespaceContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	objectAction antlr.Token
}

func NewEmptyAlterTablespaceContext() *AlterTablespaceContext {
	var p = new(AlterTablespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterTablespace
	return p
}

func (*AlterTablespaceContext) IsAlterTablespaceContext() {}

func NewAlterTablespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterTablespaceContext {
	var p = new(AlterTablespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterTablespace

	return p
}

func (s *AlterTablespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterTablespaceContext) GetObjectAction() antlr.Token { return s.objectAction }

func (s *AlterTablespaceContext) SetObjectAction(v antlr.Token) { s.objectAction = v }

func (s *AlterTablespaceContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AlterTablespaceContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterTablespaceContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATAFILE, 0)
}

func (s *AlterTablespaceContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *AlterTablespaceContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *AlterTablespaceContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *AlterTablespaceContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterTablespaceContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterTablespaceContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *AlterTablespaceContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *AlterTablespaceContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *AlterTablespaceContext) FileSizeLiteral() IFileSizeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileSizeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFileSizeLiteralContext)
}

func (s *AlterTablespaceContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *AlterTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterTablespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterTablespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterTablespace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AlterTablespace() (localctx IAlterTablespaceContext) {
	localctx = NewAlterTablespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, MySqlParserRULE_alterTablespace)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2224)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(2225)
		p.Match(MySqlParserTABLESPACE)
	}
	{
		p.SetState(2226)
		p.Uid()
	}
	{
		p.SetState(2227)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AlterTablespaceContext).objectAction = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserADD || _la == MySqlParserDROP) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AlterTablespaceContext).objectAction = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(2228)
		p.Match(MySqlParserDATAFILE)
	}
	{
		p.SetState(2229)
		p.Match(MySqlParserSTRING_LITERAL)
	}
	p.SetState(2233)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINITIAL_SIZE {
		{
			p.SetState(2230)
			p.Match(MySqlParserINITIAL_SIZE)
		}
		{
			p.SetState(2231)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(2232)
			p.FileSizeLiteral()
		}

	}
	p.SetState(2236)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWAIT {
		{
			p.SetState(2235)
			p.Match(MySqlParserWAIT)
		}

	}
	{
		p.SetState(2238)
		p.Match(MySqlParserENGINE)
	}
	p.SetState(2240)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEQUAL_SYMBOL {
		{
			p.SetState(2239)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	}
	{
		p.SetState(2242)
		p.EngineName()
	}

	return localctx
}

// IAlterViewContext is an interface to support dynamic dispatch.
type IAlterViewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlgType returns the algType token.
	GetAlgType() antlr.Token

	// GetSecContext returns the secContext token.
	GetSecContext() antlr.Token

	// GetCheckOpt returns the checkOpt token.
	GetCheckOpt() antlr.Token

	// SetAlgType sets the algType token.
	SetAlgType(antlr.Token)

	// SetSecContext sets the secContext token.
	SetSecContext(antlr.Token)

	// SetCheckOpt sets the checkOpt token.
	SetCheckOpt(antlr.Token)

	// IsAlterViewContext differentiates from other interfaces.
	IsAlterViewContext()
}

type AlterViewContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	algType    antlr.Token
	secContext antlr.Token
	checkOpt   antlr.Token
}

func NewEmptyAlterViewContext() *AlterViewContext {
	var p = new(AlterViewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterView
	return p
}

func (*AlterViewContext) IsAlterViewContext() {}

func NewAlterViewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterViewContext {
	var p = new(AlterViewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterView

	return p
}

func (s *AlterViewContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterViewContext) GetAlgType() antlr.Token { return s.algType }

func (s *AlterViewContext) GetSecContext() antlr.Token { return s.secContext }

func (s *AlterViewContext) GetCheckOpt() antlr.Token { return s.checkOpt }

func (s *AlterViewContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *AlterViewContext) SetSecContext(v antlr.Token) { s.secContext = v }

func (s *AlterViewContext) SetCheckOpt(v antlr.Token) { s.checkOpt = v }

func (s *AlterViewContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *AlterViewContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *AlterViewContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *AlterViewContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *AlterViewContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *AlterViewContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *AlterViewContext) OwnerStatement() IOwnerStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwnerStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwnerStatementContext)
}

func (s *AlterViewContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *AlterViewContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECURITY, 0)
}

func (s *AlterViewContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AlterViewContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterViewContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AlterViewContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *AlterViewContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *AlterViewContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *AlterViewContext) UNDEFINED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDEFINED, 0)
}

func (s *AlterViewContext) MERGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMERGE, 0)
}

func (s *AlterViewContext) TEMPTABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPTABLE, 0)
}

func (s *AlterViewContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *AlterViewContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVOKER, 0)
}

func (s *AlterViewContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADED, 0)
}

func (s *AlterViewContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *AlterViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterViewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlterViewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterView(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AlterView() (localctx IAlterViewContext) {
	localctx = NewAlterViewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, MySqlParserRULE_alterView)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2244)
		p.Match(MySqlParserALTER)
	}
	p.SetState(2248)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALGORITHM {
		{
			p.SetState(2245)
			p.Match(MySqlParserALGORITHM)
		}
		{
			p.SetState(2246)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(2247)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterViewContext).algType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserMERGE || _la == MySqlParserTEMPTABLE || _la == MySqlParserUNDEFINED) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterViewContext).algType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2251)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(2250)
			p.OwnerStatement()
		}

	}
	p.SetState(2256)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSQL {
		{
			p.SetState(2253)
			p.Match(MySqlParserSQL)
		}
		{
			p.SetState(2254)
			p.Match(MySqlParserSECURITY)
		}
		{
			p.SetState(2255)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterViewContext).secContext = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFINER || _la == MySqlParserINVOKER) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterViewContext).secContext = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(2258)
		p.Match(MySqlParserVIEW)
	}
	{
		p.SetState(2259)
		p.FullId()
	}
	p.SetState(2264)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(2260)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2261)
			p.UidList()
		}
		{
			p.SetState(2262)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	{
		p.SetState(2266)
		p.Match(MySqlParserAS)
	}
	{
		p.SetState(2267)
		p.SelectStatement()
	}
	p.SetState(2274)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWITH {
		{
			p.SetState(2268)
			p.Match(MySqlParserWITH)
		}
		p.SetState(2270)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCASCADED || _la == MySqlParserLOCAL {
			{
				p.SetState(2269)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*AlterViewContext).checkOpt = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserCASCADED || _la == MySqlParserLOCAL) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*AlterViewContext).checkOpt = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(2272)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(2273)
			p.Match(MySqlParserOPTION)
		}

	}

	return localctx
}

// IAlterSpecificationContext is an interface to support dynamic dispatch.
type IAlterSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterSpecificationContext differentiates from other interfaces.
	IsAlterSpecificationContext()
}

type AlterSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterSpecificationContext() *AlterSpecificationContext {
	var p = new(AlterSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterSpecification
	return p
}

func (*AlterSpecificationContext) IsAlterSpecificationContext() {}

func NewAlterSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterSpecificationContext {
	var p = new(AlterSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterSpecification

	return p
}

func (s *AlterSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterSpecificationContext) CopyFrom(ctx *AlterSpecificationContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *AlterSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AlterByDisableKeysContext struct {
	*AlterSpecificationContext
}

func NewAlterByDisableKeysContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDisableKeysContext {
	var p = new(AlterByDisableKeysContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDisableKeysContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDisableKeysContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISABLE, 0)
}

func (s *AlterByDisableKeysContext) KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEYS, 0)
}

func (s *AlterByDisableKeysContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByDisableKeys(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByDefaultCharsetContext struct {
	*AlterSpecificationContext
}

func NewAlterByDefaultCharsetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDefaultCharsetContext {
	var p = new(AlterByDefaultCharsetContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDefaultCharsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDefaultCharsetContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *AlterByDefaultCharsetContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *AlterByDefaultCharsetContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *AlterByDefaultCharsetContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *AlterByDefaultCharsetContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *AlterByDefaultCharsetContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *AlterByDefaultCharsetContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *AlterByDefaultCharsetContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *AlterByDefaultCharsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByDefaultCharset(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByRenameColumnContext struct {
	*AlterSpecificationContext
	oldColumn IUidContext
	newColumn IUidContext
}

func NewAlterByRenameColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByRenameColumnContext {
	var p = new(AlterByRenameColumnContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByRenameColumnContext) GetOldColumn() IUidContext { return s.oldColumn }

func (s *AlterByRenameColumnContext) GetNewColumn() IUidContext { return s.newColumn }

func (s *AlterByRenameColumnContext) SetOldColumn(v IUidContext) { s.oldColumn = v }

func (s *AlterByRenameColumnContext) SetNewColumn(v IUidContext) { s.newColumn = v }

func (s *AlterByRenameColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByRenameColumnContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *AlterByRenameColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByRenameColumnContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *AlterByRenameColumnContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByRenameColumnContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByRenameColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByRenameColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByConvertCharsetContext struct {
	*AlterSpecificationContext
}

func NewAlterByConvertCharsetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByConvertCharsetContext {
	var p = new(AlterByConvertCharsetContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByConvertCharsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByConvertCharsetContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONVERT, 0)
}

func (s *AlterByConvertCharsetContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *AlterByConvertCharsetContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *AlterByConvertCharsetContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *AlterByConvertCharsetContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *AlterByConvertCharsetContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *AlterByConvertCharsetContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *AlterByConvertCharsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByConvertCharset(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByAddPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByAddPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddPartitionContext {
	var p = new(AlterByAddPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddPartitionContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByAddPartitionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AlterByAddPartitionContext) AllPartitionDefinition() []IPartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem())
	var tst = make([]IPartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinitionContext)
		}
	}

	return tst
}

func (s *AlterByAddPartitionContext) PartitionDefinition(i int) IPartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionContext)
}

func (s *AlterByAddPartitionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AlterByAddPartitionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterByAddPartitionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterByAddPartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByAddPartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByAddForeignKeyContext struct {
	*AlterSpecificationContext
	name      IUidContext
	indexName IUidContext
}

func NewAlterByAddForeignKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddForeignKeyContext {
	var p = new(AlterByAddForeignKeyContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddForeignKeyContext) GetName() IUidContext { return s.name }

func (s *AlterByAddForeignKeyContext) GetIndexName() IUidContext { return s.indexName }

func (s *AlterByAddForeignKeyContext) SetName(v IUidContext) { s.name = v }

func (s *AlterByAddForeignKeyContext) SetIndexName(v IUidContext) { s.indexName = v }

func (s *AlterByAddForeignKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddForeignKeyContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddForeignKeyContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOREIGN, 0)
}

func (s *AlterByAddForeignKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByAddForeignKeyContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *AlterByAddForeignKeyContext) ReferenceDefinition() IReferenceDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReferenceDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReferenceDefinitionContext)
}

func (s *AlterByAddForeignKeyContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *AlterByAddForeignKeyContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByAddForeignKeyContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddForeignKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByAddForeignKey(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByRenameIndexContext struct {
	*AlterSpecificationContext
	indexFormat antlr.Token
}

func NewAlterByRenameIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByRenameIndexContext {
	var p = new(AlterByRenameIndexContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByRenameIndexContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *AlterByRenameIndexContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *AlterByRenameIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByRenameIndexContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *AlterByRenameIndexContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByRenameIndexContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByRenameIndexContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *AlterByRenameIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AlterByRenameIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByRenameIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByRenameIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByRemovePartitioningContext struct {
	*AlterSpecificationContext
}

func NewAlterByRemovePartitioningContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByRemovePartitioningContext {
	var p = new(AlterByRemovePartitioningContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByRemovePartitioningContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByRemovePartitioningContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREMOVE, 0)
}

func (s *AlterByRemovePartitioningContext) PARTITIONING() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONING, 0)
}

func (s *AlterByRemovePartitioningContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByRemovePartitioning(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByRenameContext struct {
	*AlterSpecificationContext
	renameFormat antlr.Token
}

func NewAlterByRenameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByRenameContext {
	var p = new(AlterByRenameContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByRenameContext) GetRenameFormat() antlr.Token { return s.renameFormat }

func (s *AlterByRenameContext) SetRenameFormat(v antlr.Token) { s.renameFormat = v }

func (s *AlterByRenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByRenameContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *AlterByRenameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByRenameContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *AlterByRenameContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *AlterByRenameContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *AlterByRenameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByRename(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByOptimizePartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByOptimizePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByOptimizePartitionContext {
	var p = new(AlterByOptimizePartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByOptimizePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByOptimizePartitionContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIMIZE, 0)
}

func (s *AlterByOptimizePartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByOptimizePartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByOptimizePartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByOptimizePartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByOptimizePartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByImportTablespaceContext struct {
	*AlterSpecificationContext
}

func NewAlterByImportTablespaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByImportTablespaceContext {
	var p = new(AlterByImportTablespaceContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByImportTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByImportTablespaceContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserIMPORT, 0)
}

func (s *AlterByImportTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AlterByImportTablespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByImportTablespace(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByCoalescePartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByCoalescePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByCoalescePartitionContext {
	var p = new(AlterByCoalescePartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByCoalescePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByCoalescePartitionContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOALESCE, 0)
}

func (s *AlterByCoalescePartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByCoalescePartitionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *AlterByCoalescePartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByCoalescePartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByDropConstraintCheckContext struct {
	*AlterSpecificationContext
}

func NewAlterByDropConstraintCheckContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDropConstraintCheckContext {
	var p = new(AlterByDropConstraintCheckContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDropConstraintCheckContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDropConstraintCheckContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByDropConstraintCheckContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByDropConstraintCheckContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *AlterByDropConstraintCheckContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *AlterByDropConstraintCheckContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByDropConstraintCheck(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByAddColumnsContext struct {
	*AlterSpecificationContext
}

func NewAlterByAddColumnsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddColumnsContext {
	var p = new(AlterByAddColumnsContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddColumnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddColumnsContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddColumnsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AlterByAddColumnsContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByAddColumnsContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddColumnsContext) AllColumnDefinition() []IColumnDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem())
	var tst = make([]IColumnDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumnDefinitionContext)
		}
	}

	return tst
}

func (s *AlterByAddColumnsContext) ColumnDefinition(i int) IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *AlterByAddColumnsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AlterByAddColumnsContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByAddColumnsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterByAddColumnsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterByAddColumnsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByAddColumns(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByAlterIndexVisibilityContext struct {
	*AlterSpecificationContext
}

func NewAlterByAlterIndexVisibilityContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAlterIndexVisibilityContext {
	var p = new(AlterByAlterIndexVisibilityContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAlterIndexVisibilityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAlterIndexVisibilityContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterByAlterIndexVisibilityContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AlterByAlterIndexVisibilityContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAlterIndexVisibilityContext) VISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVISIBLE, 0)
}

func (s *AlterByAlterIndexVisibilityContext) INVISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVISIBLE, 0)
}

func (s *AlterByAlterIndexVisibilityContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByAlterIndexVisibility(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByDropForeignKeyContext struct {
	*AlterSpecificationContext
}

func NewAlterByDropForeignKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDropForeignKeyContext {
	var p = new(AlterByDropForeignKeyContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDropForeignKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDropForeignKeyContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByDropForeignKeyContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOREIGN, 0)
}

func (s *AlterByDropForeignKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByDropForeignKeyContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByDropForeignKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByDropForeignKey(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByAddCheckTableConstraintContext struct {
	*AlterSpecificationContext
	name IUidContext
}

func NewAlterByAddCheckTableConstraintContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddCheckTableConstraintContext {
	var p = new(AlterByAddCheckTableConstraintContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddCheckTableConstraintContext) GetName() IUidContext { return s.name }

func (s *AlterByAddCheckTableConstraintContext) SetName(v IUidContext) { s.name = v }

func (s *AlterByAddCheckTableConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddCheckTableConstraintContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddCheckTableConstraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *AlterByAddCheckTableConstraintContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AlterByAddCheckTableConstraintContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AlterByAddCheckTableConstraintContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AlterByAddCheckTableConstraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *AlterByAddCheckTableConstraintContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddCheckTableConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByAddCheckTableConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByRebuildPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByRebuildPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByRebuildPartitionContext {
	var p = new(AlterByRebuildPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByRebuildPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByRebuildPartitionContext) REBUILD() antlr.TerminalNode {
	return s.GetToken(MySqlParserREBUILD, 0)
}

func (s *AlterByRebuildPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByRebuildPartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByRebuildPartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByRebuildPartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByRebuildPartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByUpgradePartitioningContext struct {
	*AlterSpecificationContext
}

func NewAlterByUpgradePartitioningContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByUpgradePartitioningContext {
	var p = new(AlterByUpgradePartitioningContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByUpgradePartitioningContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByUpgradePartitioningContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPGRADE, 0)
}

func (s *AlterByUpgradePartitioningContext) PARTITIONING() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONING, 0)
}

func (s *AlterByUpgradePartitioningContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByUpgradePartitioning(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByRepairPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByRepairPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByRepairPartitionContext {
	var p = new(AlterByRepairPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByRepairPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByRepairPartitionContext) REPAIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPAIR, 0)
}

func (s *AlterByRepairPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByRepairPartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByRepairPartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByRepairPartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByRepairPartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByExchangePartitionContext struct {
	*AlterSpecificationContext
	validationFormat antlr.Token
}

func NewAlterByExchangePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByExchangePartitionContext {
	var p = new(AlterByExchangePartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByExchangePartitionContext) GetValidationFormat() antlr.Token {
	return s.validationFormat
}

func (s *AlterByExchangePartitionContext) SetValidationFormat(v antlr.Token) { s.validationFormat = v }

func (s *AlterByExchangePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByExchangePartitionContext) EXCHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCHANGE, 0)
}

func (s *AlterByExchangePartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByExchangePartitionContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByExchangePartitionContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserWITH)
}

func (s *AlterByExchangePartitionContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, i)
}

func (s *AlterByExchangePartitionContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *AlterByExchangePartitionContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AlterByExchangePartitionContext) VALIDATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALIDATION, 0)
}

func (s *AlterByExchangePartitionContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITHOUT, 0)
}

func (s *AlterByExchangePartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByExchangePartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByAddIndexContext struct {
	*AlterSpecificationContext
	indexFormat antlr.Token
}

func NewAlterByAddIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddIndexContext {
	var p = new(AlterByAddIndexContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddIndexContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *AlterByAddIndexContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *AlterByAddIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddIndexContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddIndexContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *AlterByAddIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AlterByAddIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByAddIndexContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddIndexContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *AlterByAddIndexContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *AlterByAddIndexContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *AlterByAddIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByAddIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByDropColumnContext struct {
	*AlterSpecificationContext
}

func NewAlterByDropColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDropColumnContext {
	var p = new(AlterByDropColumnContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDropColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDropColumnContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByDropColumnContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByDropColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByDropColumnContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESTRICT, 0)
}

func (s *AlterByDropColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByDropColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByImportPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByImportPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByImportPartitionContext {
	var p = new(AlterByImportPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByImportPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByImportPartitionContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserIMPORT, 0)
}

func (s *AlterByImportPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByImportPartitionContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AlterByImportPartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByImportPartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByImportPartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByImportPartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByChangeDefaultContext struct {
	*AlterSpecificationContext
}

func NewAlterByChangeDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByChangeDefaultContext {
	var p = new(AlterByChangeDefaultContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByChangeDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByChangeDefaultContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterByChangeDefaultContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByChangeDefaultContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *AlterByChangeDefaultContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *AlterByChangeDefaultContext) DefaultValue() IDefaultValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultValueContext)
}

func (s *AlterByChangeDefaultContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByChangeDefaultContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByChangeDefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByChangeDefault(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByForceContext struct {
	*AlterSpecificationContext
}

func NewAlterByForceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByForceContext {
	var p = new(AlterByForceContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByForceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByForceContext) FORCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFORCE, 0)
}

func (s *AlterByForceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByForce(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByDropPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByDropPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDropPartitionContext {
	var p = new(AlterByDropPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDropPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDropPartitionContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByDropPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByDropPartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByDropPartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByDropPartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByAddSpecialIndexContext struct {
	*AlterSpecificationContext
	keyType     antlr.Token
	indexFormat antlr.Token
}

func NewAlterByAddSpecialIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddSpecialIndexContext {
	var p = new(AlterByAddSpecialIndexContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddSpecialIndexContext) GetKeyType() antlr.Token { return s.keyType }

func (s *AlterByAddSpecialIndexContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *AlterByAddSpecialIndexContext) SetKeyType(v antlr.Token) { s.keyType = v }

func (s *AlterByAddSpecialIndexContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *AlterByAddSpecialIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddSpecialIndexContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddSpecialIndexContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *AlterByAddSpecialIndexContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULLTEXT, 0)
}

func (s *AlterByAddSpecialIndexContext) SPATIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSPATIAL, 0)
}

func (s *AlterByAddSpecialIndexContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddSpecialIndexContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *AlterByAddSpecialIndexContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *AlterByAddSpecialIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AlterByAddSpecialIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByAddSpecialIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByAddSpecialIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByModifyColumnContext struct {
	*AlterSpecificationContext
}

func NewAlterByModifyColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByModifyColumnContext {
	var p = new(AlterByModifyColumnContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByModifyColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByModifyColumnContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODIFY, 0)
}

func (s *AlterByModifyColumnContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByModifyColumnContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByModifyColumnContext) ColumnDefinition() IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *AlterByModifyColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByModifyColumnContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *AlterByModifyColumnContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *AlterByModifyColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByModifyColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByTableOptionContext struct {
	*AlterSpecificationContext
}

func NewAlterByTableOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByTableOptionContext {
	var p = new(AlterByTableOptionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByTableOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByTableOptionContext) AllTableOption() []ITableOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableOptionContext)(nil)).Elem())
	var tst = make([]ITableOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableOptionContext)
		}
	}

	return tst
}

func (s *AlterByTableOptionContext) TableOption(i int) ITableOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableOptionContext)
}

func (s *AlterByTableOptionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterByTableOptionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterByTableOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByTableOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByDropPrimaryKeyContext struct {
	*AlterSpecificationContext
}

func NewAlterByDropPrimaryKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDropPrimaryKeyContext {
	var p = new(AlterByDropPrimaryKeyContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDropPrimaryKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDropPrimaryKeyContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByDropPrimaryKeyContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIMARY, 0)
}

func (s *AlterByDropPrimaryKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByDropPrimaryKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByDropPrimaryKey(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByLockContext struct {
	*AlterSpecificationContext
	lockType antlr.Token
}

func NewAlterByLockContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByLockContext {
	var p = new(AlterByLockContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByLockContext) GetLockType() antlr.Token { return s.lockType }

func (s *AlterByLockContext) SetLockType(v antlr.Token) { s.lockType = v }

func (s *AlterByLockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByLockContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *AlterByLockContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *AlterByLockContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *AlterByLockContext) SHARED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARED, 0)
}

func (s *AlterByLockContext) EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLUSIVE, 0)
}

func (s *AlterByLockContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *AlterByLockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByLock(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByDiscardPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByDiscardPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDiscardPartitionContext {
	var p = new(AlterByDiscardPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDiscardPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDiscardPartitionContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISCARD, 0)
}

func (s *AlterByDiscardPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByDiscardPartitionContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AlterByDiscardPartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByDiscardPartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByDiscardPartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByDiscardPartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByDiscardTablespaceContext struct {
	*AlterSpecificationContext
}

func NewAlterByDiscardTablespaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDiscardTablespaceContext {
	var p = new(AlterByDiscardTablespaceContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDiscardTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDiscardTablespaceContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISCARD, 0)
}

func (s *AlterByDiscardTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AlterByDiscardTablespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByDiscardTablespace(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByValidateContext struct {
	*AlterSpecificationContext
	validationFormat antlr.Token
}

func NewAlterByValidateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByValidateContext {
	var p = new(AlterByValidateContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByValidateContext) GetValidationFormat() antlr.Token { return s.validationFormat }

func (s *AlterByValidateContext) SetValidationFormat(v antlr.Token) { s.validationFormat = v }

func (s *AlterByValidateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByValidateContext) VALIDATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALIDATION, 0)
}

func (s *AlterByValidateContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITHOUT, 0)
}

func (s *AlterByValidateContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *AlterByValidateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByValidate(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByAddPrimaryKeyContext struct {
	*AlterSpecificationContext
	name  IUidContext
	index IUidContext
}

func NewAlterByAddPrimaryKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddPrimaryKeyContext {
	var p = new(AlterByAddPrimaryKeyContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddPrimaryKeyContext) GetName() IUidContext { return s.name }

func (s *AlterByAddPrimaryKeyContext) GetIndex() IUidContext { return s.index }

func (s *AlterByAddPrimaryKeyContext) SetName(v IUidContext) { s.name = v }

func (s *AlterByAddPrimaryKeyContext) SetIndex(v IUidContext) { s.index = v }

func (s *AlterByAddPrimaryKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddPrimaryKeyContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddPrimaryKeyContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIMARY, 0)
}

func (s *AlterByAddPrimaryKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByAddPrimaryKeyContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *AlterByAddPrimaryKeyContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *AlterByAddPrimaryKeyContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *AlterByAddPrimaryKeyContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *AlterByAddPrimaryKeyContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *AlterByAddPrimaryKeyContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByAddPrimaryKeyContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddPrimaryKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByAddPrimaryKey(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByCheckPartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByCheckPartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByCheckPartitionContext {
	var p = new(AlterByCheckPartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByCheckPartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByCheckPartitionContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *AlterByCheckPartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByCheckPartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByCheckPartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByCheckPartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByCheckPartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByEnableKeysContext struct {
	*AlterSpecificationContext
}

func NewAlterByEnableKeysContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByEnableKeysContext {
	var p = new(AlterByEnableKeysContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByEnableKeysContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByEnableKeysContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENABLE, 0)
}

func (s *AlterByEnableKeysContext) KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEYS, 0)
}

func (s *AlterByEnableKeysContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByEnableKeys(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByReorganizePartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByReorganizePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByReorganizePartitionContext {
	var p = new(AlterByReorganizePartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByReorganizePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByReorganizePartitionContext) REORGANIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREORGANIZE, 0)
}

func (s *AlterByReorganizePartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByReorganizePartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByReorganizePartitionContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *AlterByReorganizePartitionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AlterByReorganizePartitionContext) AllPartitionDefinition() []IPartitionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem())
	var tst = make([]IPartitionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartitionDefinitionContext)
		}
	}

	return tst
}

func (s *AlterByReorganizePartitionContext) PartitionDefinition(i int) IPartitionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartitionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartitionDefinitionContext)
}

func (s *AlterByReorganizePartitionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AlterByReorganizePartitionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterByReorganizePartitionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterByReorganizePartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByReorganizePartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterBySetAlgorithmContext struct {
	*AlterSpecificationContext
	algType antlr.Token
}

func NewAlterBySetAlgorithmContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterBySetAlgorithmContext {
	var p = new(AlterBySetAlgorithmContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterBySetAlgorithmContext) GetAlgType() antlr.Token { return s.algType }

func (s *AlterBySetAlgorithmContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *AlterBySetAlgorithmContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterBySetAlgorithmContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *AlterBySetAlgorithmContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *AlterBySetAlgorithmContext) INPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINPLACE, 0)
}

func (s *AlterBySetAlgorithmContext) COPY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOPY, 0)
}

func (s *AlterBySetAlgorithmContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *AlterBySetAlgorithmContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterBySetAlgorithm(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByAnalyzePartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByAnalyzePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAnalyzePartitionContext {
	var p = new(AlterByAnalyzePartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAnalyzePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAnalyzePartitionContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserANALYZE, 0)
}

func (s *AlterByAnalyzePartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByAnalyzePartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByAnalyzePartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByAnalyzePartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByAnalyzePartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByChangeColumnContext struct {
	*AlterSpecificationContext
	oldColumn   IUidContext
	newColumn   IUidContext
	afterColumn IUidContext
}

func NewAlterByChangeColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByChangeColumnContext {
	var p = new(AlterByChangeColumnContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByChangeColumnContext) GetOldColumn() IUidContext { return s.oldColumn }

func (s *AlterByChangeColumnContext) GetNewColumn() IUidContext { return s.newColumn }

func (s *AlterByChangeColumnContext) GetAfterColumn() IUidContext { return s.afterColumn }

func (s *AlterByChangeColumnContext) SetOldColumn(v IUidContext) { s.oldColumn = v }

func (s *AlterByChangeColumnContext) SetNewColumn(v IUidContext) { s.newColumn = v }

func (s *AlterByChangeColumnContext) SetAfterColumn(v IUidContext) { s.afterColumn = v }

func (s *AlterByChangeColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByChangeColumnContext) CHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGE, 0)
}

func (s *AlterByChangeColumnContext) ColumnDefinition() IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *AlterByChangeColumnContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByChangeColumnContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByChangeColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByChangeColumnContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *AlterByChangeColumnContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *AlterByChangeColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByChangeColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByAddUniqueKeyContext struct {
	*AlterSpecificationContext
	name        IUidContext
	indexFormat antlr.Token
	indexName   IUidContext
}

func NewAlterByAddUniqueKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddUniqueKeyContext {
	var p = new(AlterByAddUniqueKeyContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddUniqueKeyContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *AlterByAddUniqueKeyContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *AlterByAddUniqueKeyContext) GetName() IUidContext { return s.name }

func (s *AlterByAddUniqueKeyContext) GetIndexName() IUidContext { return s.indexName }

func (s *AlterByAddUniqueKeyContext) SetName(v IUidContext) { s.name = v }

func (s *AlterByAddUniqueKeyContext) SetIndexName(v IUidContext) { s.indexName = v }

func (s *AlterByAddUniqueKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddUniqueKeyContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddUniqueKeyContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIQUE, 0)
}

func (s *AlterByAddUniqueKeyContext) IndexColumnNames() IIndexColumnNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNamesContext)
}

func (s *AlterByAddUniqueKeyContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *AlterByAddUniqueKeyContext) IndexType() IIndexTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexTypeContext)
}

func (s *AlterByAddUniqueKeyContext) AllIndexOption() []IIndexOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem())
	var tst = make([]IIndexOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexOptionContext)
		}
	}

	return tst
}

func (s *AlterByAddUniqueKeyContext) IndexOption(i int) IIndexOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexOptionContext)
}

func (s *AlterByAddUniqueKeyContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByAddUniqueKeyContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddUniqueKeyContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AlterByAddUniqueKeyContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByAddUniqueKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByAddUniqueKey(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByTruncatePartitionContext struct {
	*AlterSpecificationContext
}

func NewAlterByTruncatePartitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByTruncatePartitionContext {
	var p = new(AlterByTruncatePartitionContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByTruncatePartitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByTruncatePartitionContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUNCATE, 0)
}

func (s *AlterByTruncatePartitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AlterByTruncatePartitionContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByTruncatePartitionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AlterByTruncatePartitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByTruncatePartition(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByDropIndexContext struct {
	*AlterSpecificationContext
	indexFormat antlr.Token
}

func NewAlterByDropIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByDropIndexContext {
	var p = new(AlterByDropIndexContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByDropIndexContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *AlterByDropIndexContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *AlterByDropIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByDropIndexContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AlterByDropIndexContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByDropIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AlterByDropIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AlterByDropIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByDropIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByAddColumnContext struct {
	*AlterSpecificationContext
}

func NewAlterByAddColumnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByAddColumnContext {
	var p = new(AlterByAddColumnContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByAddColumnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByAddColumnContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AlterByAddColumnContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *AlterByAddColumnContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AlterByAddColumnContext) ColumnDefinition() IColumnDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnDefinitionContext)
}

func (s *AlterByAddColumnContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AlterByAddColumnContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *AlterByAddColumnContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *AlterByAddColumnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByAddColumn(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterByOrderContext struct {
	*AlterSpecificationContext
}

func NewAlterByOrderContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterByOrderContext {
	var p = new(AlterByOrderContext)

	p.AlterSpecificationContext = NewEmptyAlterSpecificationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterSpecificationContext))

	return p
}

func (s *AlterByOrderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterByOrderContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *AlterByOrderContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *AlterByOrderContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AlterByOrderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterByOrder(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AlterSpecification() (localctx IAlterSpecificationContext) {
	localctx = NewAlterSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, MySqlParserRULE_alterSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2642)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 333, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAlterByTableOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2276)
			p.TableOption()
		}
		p.SetState(2283)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 280, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(2278)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserCOMMA {
					{
						p.SetState(2277)
						p.Match(MySqlParserCOMMA)
					}

				}
				{
					p.SetState(2280)
					p.TableOption()
				}

			}
			p.SetState(2285)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 280, p.GetParserRuleContext())
		}

	case 2:
		localctx = NewAlterByAddColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2286)
			p.Match(MySqlParserADD)
		}
		p.SetState(2288)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2287)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2290)
			p.Uid()
		}
		{
			p.SetState(2291)
			p.ColumnDefinition()
		}
		p.SetState(2295)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserFIRST:
			{
				p.SetState(2292)
				p.Match(MySqlParserFIRST)
			}

		case MySqlParserAFTER:
			{
				p.SetState(2293)
				p.Match(MySqlParserAFTER)
			}
			{
				p.SetState(2294)
				p.Uid()
			}

		case MySqlParserEOF, MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPARTITION, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserMINUSMINUS, MySqlParserLR_BRACKET, MySqlParserCOMMA, MySqlParserSEMI:

		default:
		}

	case 3:
		localctx = NewAlterByAddColumnsContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2297)
			p.Match(MySqlParserADD)
		}
		p.SetState(2299)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2298)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2301)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2302)
			p.Uid()
		}
		{
			p.SetState(2303)
			p.ColumnDefinition()
		}
		p.SetState(2310)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2304)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2305)
				p.Uid()
			}
			{
				p.SetState(2306)
				p.ColumnDefinition()
			}

			p.SetState(2312)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2313)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 4:
		localctx = NewAlterByAddIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2315)
			p.Match(MySqlParserADD)
		}
		{
			p.SetState(2316)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterByAddIndexContext).indexFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterByAddIndexContext).indexFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(2318)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(2317)
				p.Uid()
			}

		}
		p.SetState(2321)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(2320)
				p.IndexType()
			}

		}
		{
			p.SetState(2323)
			p.IndexColumnNames()
		}
		p.SetState(2327)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE {
			{
				p.SetState(2324)
				p.IndexOption()
			}

			p.SetState(2329)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 5:
		localctx = NewAlterByAddPrimaryKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2330)
			p.Match(MySqlParserADD)
		}
		p.SetState(2335)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(2331)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(2333)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(2332)

					var _x = p.Uid()

					localctx.(*AlterByAddPrimaryKeyContext).name = _x
				}

			}

		}
		{
			p.SetState(2337)
			p.Match(MySqlParserPRIMARY)
		}
		{
			p.SetState(2338)
			p.Match(MySqlParserKEY)
		}
		p.SetState(2340)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(2339)

				var _x = p.Uid()

				localctx.(*AlterByAddPrimaryKeyContext).index = _x
			}

		}
		p.SetState(2343)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(2342)
				p.IndexType()
			}

		}
		{
			p.SetState(2345)
			p.IndexColumnNames()
		}
		p.SetState(2349)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE {
			{
				p.SetState(2346)
				p.IndexOption()
			}

			p.SetState(2351)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 6:
		localctx = NewAlterByAddUniqueKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2352)
			p.Match(MySqlParserADD)
		}
		p.SetState(2357)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(2353)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(2355)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(2354)

					var _x = p.Uid()

					localctx.(*AlterByAddUniqueKeyContext).name = _x
				}

			}

		}
		{
			p.SetState(2359)
			p.Match(MySqlParserUNIQUE)
		}
		p.SetState(2361)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			{
				p.SetState(2360)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*AlterByAddUniqueKeyContext).indexFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*AlterByAddUniqueKeyContext).indexFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(2364)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(2363)

				var _x = p.Uid()

				localctx.(*AlterByAddUniqueKeyContext).indexName = _x
			}

		}
		p.SetState(2367)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(2366)
				p.IndexType()
			}

		}
		{
			p.SetState(2369)
			p.IndexColumnNames()
		}
		p.SetState(2373)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE {
			{
				p.SetState(2370)
				p.IndexOption()
			}

			p.SetState(2375)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 7:
		localctx = NewAlterByAddSpecialIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2376)
			p.Match(MySqlParserADD)
		}
		{
			p.SetState(2377)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterByAddSpecialIndexContext).keyType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFULLTEXT || _la == MySqlParserSPATIAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterByAddSpecialIndexContext).keyType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(2379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			{
				p.SetState(2378)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*AlterByAddSpecialIndexContext).indexFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*AlterByAddSpecialIndexContext).indexFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(2382)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(2381)
				p.Uid()
			}

		}
		{
			p.SetState(2384)
			p.IndexColumnNames()
		}
		p.SetState(2388)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserINVISIBLE || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserVISIBLE {
			{
				p.SetState(2385)
				p.IndexOption()
			}

			p.SetState(2390)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 8:
		localctx = NewAlterByAddForeignKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2391)
			p.Match(MySqlParserADD)
		}
		p.SetState(2396)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(2392)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(2394)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(2393)

					var _x = p.Uid()

					localctx.(*AlterByAddForeignKeyContext).name = _x
				}

			}

		}
		{
			p.SetState(2398)
			p.Match(MySqlParserFOREIGN)
		}
		{
			p.SetState(2399)
			p.Match(MySqlParserKEY)
		}
		p.SetState(2401)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(2400)

				var _x = p.Uid()

				localctx.(*AlterByAddForeignKeyContext).indexName = _x
			}

		}
		{
			p.SetState(2403)
			p.IndexColumnNames()
		}
		{
			p.SetState(2404)
			p.ReferenceDefinition()
		}

	case 9:
		localctx = NewAlterByAddCheckTableConstraintContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2406)
			p.Match(MySqlParserADD)
		}
		p.SetState(2411)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(2407)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(2409)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
				{
					p.SetState(2408)

					var _x = p.Uid()

					localctx.(*AlterByAddCheckTableConstraintContext).name = _x
				}

			}

		}
		{
			p.SetState(2413)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(2414)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2415)
			p.expression(0)
		}
		{
			p.SetState(2416)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 10:
		localctx = NewAlterBySetAlgorithmContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2418)
			p.Match(MySqlParserALGORITHM)
		}
		p.SetState(2420)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2419)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2422)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterBySetAlgorithmContext).algType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserCOPY || _la == MySqlParserINPLACE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterBySetAlgorithmContext).algType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 11:
		localctx = NewAlterByChangeDefaultContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2423)
			p.Match(MySqlParserALTER)
		}
		p.SetState(2425)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2424)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2427)
			p.Uid()
		}
		p.SetState(2433)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserSET:
			{
				p.SetState(2428)
				p.Match(MySqlParserSET)
			}
			{
				p.SetState(2429)
				p.Match(MySqlParserDEFAULT)
			}
			{
				p.SetState(2430)
				p.DefaultValue()
			}

		case MySqlParserDROP:
			{
				p.SetState(2431)
				p.Match(MySqlParserDROP)
			}
			{
				p.SetState(2432)
				p.Match(MySqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 12:
		localctx = NewAlterByChangeColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2435)
			p.Match(MySqlParserCHANGE)
		}
		p.SetState(2437)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2436)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2439)

			var _x = p.Uid()

			localctx.(*AlterByChangeColumnContext).oldColumn = _x
		}
		{
			p.SetState(2440)

			var _x = p.Uid()

			localctx.(*AlterByChangeColumnContext).newColumn = _x
		}
		{
			p.SetState(2441)
			p.ColumnDefinition()
		}
		p.SetState(2445)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserFIRST:
			{
				p.SetState(2442)
				p.Match(MySqlParserFIRST)
			}

		case MySqlParserAFTER:
			{
				p.SetState(2443)
				p.Match(MySqlParserAFTER)
			}
			{
				p.SetState(2444)

				var _x = p.Uid()

				localctx.(*AlterByChangeColumnContext).afterColumn = _x
			}

		case MySqlParserEOF, MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPARTITION, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserMINUSMINUS, MySqlParserLR_BRACKET, MySqlParserCOMMA, MySqlParserSEMI:

		default:
		}

	case 13:
		localctx = NewAlterByRenameColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2447)
			p.Match(MySqlParserRENAME)
		}
		{
			p.SetState(2448)
			p.Match(MySqlParserCOLUMN)
		}
		{
			p.SetState(2449)

			var _x = p.Uid()

			localctx.(*AlterByRenameColumnContext).oldColumn = _x
		}
		{
			p.SetState(2450)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(2451)

			var _x = p.Uid()

			localctx.(*AlterByRenameColumnContext).newColumn = _x
		}

	case 14:
		localctx = NewAlterByLockContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2453)
			p.Match(MySqlParserLOCK)
		}
		p.SetState(2455)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2454)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2457)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterByLockContext).lockType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserEXCLUSIVE || _la == MySqlParserNONE || _la == MySqlParserSHARED) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterByLockContext).lockType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 15:
		localctx = NewAlterByModifyColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2458)
			p.Match(MySqlParserMODIFY)
		}
		p.SetState(2460)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2459)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2462)
			p.Uid()
		}
		{
			p.SetState(2463)
			p.ColumnDefinition()
		}
		p.SetState(2467)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserFIRST:
			{
				p.SetState(2464)
				p.Match(MySqlParserFIRST)
			}

		case MySqlParserAFTER:
			{
				p.SetState(2465)
				p.Match(MySqlParserAFTER)
			}
			{
				p.SetState(2466)
				p.Uid()
			}

		case MySqlParserEOF, MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPARTITION, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserMINUSMINUS, MySqlParserLR_BRACKET, MySqlParserCOMMA, MySqlParserSEMI:

		default:
		}

	case 16:
		localctx = NewAlterByDropColumnContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2469)
			p.Match(MySqlParserDROP)
		}
		p.SetState(2471)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2470)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2473)
			p.Uid()
		}
		p.SetState(2475)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserRESTRICT {
			{
				p.SetState(2474)
				p.Match(MySqlParserRESTRICT)
			}

		}

	case 17:
		localctx = NewAlterByDropConstraintCheckContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2477)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(2478)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCHECK || _la == MySqlParserCONSTRAINT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2479)
			p.Uid()
		}

	case 18:
		localctx = NewAlterByDropPrimaryKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(2480)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(2481)
			p.Match(MySqlParserPRIMARY)
		}
		{
			p.SetState(2482)
			p.Match(MySqlParserKEY)
		}

	case 19:
		localctx = NewAlterByRenameIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(2483)
			p.Match(MySqlParserRENAME)
		}
		{
			p.SetState(2484)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterByRenameIndexContext).indexFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterByRenameIndexContext).indexFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2485)
			p.Uid()
		}
		{
			p.SetState(2486)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(2487)
			p.Uid()
		}

	case 20:
		localctx = NewAlterByAlterIndexVisibilityContext(p, localctx)
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(2489)
			p.Match(MySqlParserALTER)
		}
		{
			p.SetState(2490)
			p.Match(MySqlParserINDEX)
		}
		{
			p.SetState(2491)
			p.Uid()
		}
		{
			p.SetState(2492)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINVISIBLE || _la == MySqlParserVISIBLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 21:
		localctx = NewAlterByDropIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(2494)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(2495)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterByDropIndexContext).indexFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterByDropIndexContext).indexFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2496)
			p.Uid()
		}

	case 22:
		localctx = NewAlterByDropForeignKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(2497)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(2498)
			p.Match(MySqlParserFOREIGN)
		}
		{
			p.SetState(2499)
			p.Match(MySqlParserKEY)
		}
		{
			p.SetState(2500)
			p.Uid()
		}

	case 23:
		localctx = NewAlterByDisableKeysContext(p, localctx)
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(2501)
			p.Match(MySqlParserDISABLE)
		}
		{
			p.SetState(2502)
			p.Match(MySqlParserKEYS)
		}

	case 24:
		localctx = NewAlterByEnableKeysContext(p, localctx)
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(2503)
			p.Match(MySqlParserENABLE)
		}
		{
			p.SetState(2504)
			p.Match(MySqlParserKEYS)
		}

	case 25:
		localctx = NewAlterByRenameContext(p, localctx)
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(2505)
			p.Match(MySqlParserRENAME)
		}
		p.SetState(2507)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS || _la == MySqlParserTO {
			{
				p.SetState(2506)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*AlterByRenameContext).renameFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserAS || _la == MySqlParserTO) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*AlterByRenameContext).renameFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(2511)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 318, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(2509)
				p.Uid()
			}

		case 2:
			{
				p.SetState(2510)
				p.FullId()
			}

		}

	case 26:
		localctx = NewAlterByOrderContext(p, localctx)
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(2513)
			p.Match(MySqlParserORDER)
		}
		{
			p.SetState(2514)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(2515)
			p.UidList()
		}

	case 27:
		localctx = NewAlterByConvertCharsetContext(p, localctx)
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(2516)
			p.Match(MySqlParserCONVERT)
		}
		{
			p.SetState(2517)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(2518)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(2519)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2520)
			p.CharsetName()
		}
		p.SetState(2523)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLLATE {
			{
				p.SetState(2521)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(2522)
				p.CollationName()
			}

		}

	case 28:
		localctx = NewAlterByDefaultCharsetContext(p, localctx)
		p.EnterOuterAlt(localctx, 28)
		p.SetState(2526)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(2525)
				p.Match(MySqlParserDEFAULT)
			}

		}
		{
			p.SetState(2528)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(2529)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2530)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(2531)
			p.CharsetName()
		}
		p.SetState(2535)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLLATE {
			{
				p.SetState(2532)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(2533)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}
			{
				p.SetState(2534)
				p.CollationName()
			}

		}

	case 29:
		localctx = NewAlterByDiscardTablespaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(2537)
			p.Match(MySqlParserDISCARD)
		}
		{
			p.SetState(2538)
			p.Match(MySqlParserTABLESPACE)
		}

	case 30:
		localctx = NewAlterByImportTablespaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(2539)
			p.Match(MySqlParserIMPORT)
		}
		{
			p.SetState(2540)
			p.Match(MySqlParserTABLESPACE)
		}

	case 31:
		localctx = NewAlterByForceContext(p, localctx)
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(2541)
			p.Match(MySqlParserFORCE)
		}

	case 32:
		localctx = NewAlterByValidateContext(p, localctx)
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(2542)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AlterByValidateContext).validationFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserWITH || _la == MySqlParserWITHOUT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AlterByValidateContext).validationFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2543)
			p.Match(MySqlParserVALIDATION)
		}

	case 33:
		localctx = NewAlterByAddPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(2544)
			p.Match(MySqlParserADD)
		}
		{
			p.SetState(2545)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2546)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2547)
			p.PartitionDefinition()
		}
		p.SetState(2552)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2548)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2549)
				p.PartitionDefinition()
			}

			p.SetState(2554)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2555)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 34:
		localctx = NewAlterByDropPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(2557)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(2558)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2559)
			p.UidList()
		}

	case 35:
		localctx = NewAlterByDiscardPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(2560)
			p.Match(MySqlParserDISCARD)
		}
		{
			p.SetState(2561)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2564)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2562)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2563)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2566)
			p.Match(MySqlParserTABLESPACE)
		}

	case 36:
		localctx = NewAlterByImportPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(2567)
			p.Match(MySqlParserIMPORT)
		}
		{
			p.SetState(2568)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2571)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2569)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2570)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2573)
			p.Match(MySqlParserTABLESPACE)
		}

	case 37:
		localctx = NewAlterByTruncatePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(2574)
			p.Match(MySqlParserTRUNCATE)
		}
		{
			p.SetState(2575)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2578)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2576)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2577)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 38:
		localctx = NewAlterByCoalescePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(2580)
			p.Match(MySqlParserCOALESCE)
		}
		{
			p.SetState(2581)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2582)
			p.DecimalLiteral()
		}

	case 39:
		localctx = NewAlterByReorganizePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(2583)
			p.Match(MySqlParserREORGANIZE)
		}
		{
			p.SetState(2584)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2585)
			p.UidList()
		}
		{
			p.SetState(2586)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(2587)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2588)
			p.PartitionDefinition()
		}
		p.SetState(2593)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2589)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2590)
				p.PartitionDefinition()
			}

			p.SetState(2595)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2596)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 40:
		localctx = NewAlterByExchangePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(2598)
			p.Match(MySqlParserEXCHANGE)
		}
		{
			p.SetState(2599)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2600)
			p.Uid()
		}
		{
			p.SetState(2601)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(2602)
			p.Match(MySqlParserTABLE)
		}
		{
			p.SetState(2603)
			p.TableName()
		}
		p.SetState(2606)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH || _la == MySqlParserWITHOUT {
			{
				p.SetState(2604)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*AlterByExchangePartitionContext).validationFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserWITH || _la == MySqlParserWITHOUT) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*AlterByExchangePartitionContext).validationFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(2605)
				p.Match(MySqlParserVALIDATION)
			}

		}

	case 41:
		localctx = NewAlterByAnalyzePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(2608)
			p.Match(MySqlParserANALYZE)
		}
		{
			p.SetState(2609)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2612)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2610)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2611)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 42:
		localctx = NewAlterByCheckPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(2614)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(2615)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2618)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2616)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2617)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 43:
		localctx = NewAlterByOptimizePartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 43)
		{
			p.SetState(2620)
			p.Match(MySqlParserOPTIMIZE)
		}
		{
			p.SetState(2621)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2624)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2622)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2623)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 44:
		localctx = NewAlterByRebuildPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 44)
		{
			p.SetState(2626)
			p.Match(MySqlParserREBUILD)
		}
		{
			p.SetState(2627)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2630)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2628)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2629)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 45:
		localctx = NewAlterByRepairPartitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 45)
		{
			p.SetState(2632)
			p.Match(MySqlParserREPAIR)
		}
		{
			p.SetState(2633)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2636)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2634)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(2635)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 46:
		localctx = NewAlterByRemovePartitioningContext(p, localctx)
		p.EnterOuterAlt(localctx, 46)
		{
			p.SetState(2638)
			p.Match(MySqlParserREMOVE)
		}
		{
			p.SetState(2639)
			p.Match(MySqlParserPARTITIONING)
		}

	case 47:
		localctx = NewAlterByUpgradePartitioningContext(p, localctx)
		p.EnterOuterAlt(localctx, 47)
		{
			p.SetState(2640)
			p.Match(MySqlParserUPGRADE)
		}
		{
			p.SetState(2641)
			p.Match(MySqlParserPARTITIONING)
		}

	}

	return localctx
}

// IDropDatabaseContext is an interface to support dynamic dispatch.
type IDropDatabaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDbFormat returns the dbFormat token.
	GetDbFormat() antlr.Token

	// SetDbFormat sets the dbFormat token.
	SetDbFormat(antlr.Token)

	// IsDropDatabaseContext differentiates from other interfaces.
	IsDropDatabaseContext()
}

type DropDatabaseContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	dbFormat antlr.Token
}

func NewEmptyDropDatabaseContext() *DropDatabaseContext {
	var p = new(DropDatabaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropDatabase
	return p
}

func (*DropDatabaseContext) IsDropDatabaseContext() {}

func NewDropDatabaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropDatabaseContext {
	var p = new(DropDatabaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropDatabase

	return p
}

func (s *DropDatabaseContext) GetParser() antlr.Parser { return s.parser }

func (s *DropDatabaseContext) GetDbFormat() antlr.Token { return s.dbFormat }

func (s *DropDatabaseContext) SetDbFormat(v antlr.Token) { s.dbFormat = v }

func (s *DropDatabaseContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropDatabaseContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DropDatabaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *DropDatabaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *DropDatabaseContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropDatabaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropDatabaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropDatabaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDropDatabase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DropDatabase() (localctx IDropDatabaseContext) {
	localctx = NewDropDatabaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, MySqlParserRULE_dropDatabase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2644)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2645)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*DropDatabaseContext).dbFormat = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*DropDatabaseContext).dbFormat = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2647)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2646)
			p.IfExists()
		}

	}
	{
		p.SetState(2649)
		p.Uid()
	}

	return localctx
}

// IDropEventContext is an interface to support dynamic dispatch.
type IDropEventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropEventContext differentiates from other interfaces.
	IsDropEventContext()
}

type DropEventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropEventContext() *DropEventContext {
	var p = new(DropEventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropEvent
	return p
}

func (*DropEventContext) IsDropEventContext() {}

func NewDropEventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropEventContext {
	var p = new(DropEventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropEvent

	return p
}

func (s *DropEventContext) GetParser() antlr.Parser { return s.parser }

func (s *DropEventContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropEventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *DropEventContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *DropEventContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropEventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropEventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropEventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDropEvent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DropEvent() (localctx IDropEventContext) {
	localctx = NewDropEventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, MySqlParserRULE_dropEvent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2651)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2652)
		p.Match(MySqlParserEVENT)
	}
	p.SetState(2654)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2653)
			p.IfExists()
		}

	}
	{
		p.SetState(2656)
		p.FullId()
	}

	return localctx
}

// IDropIndexContext is an interface to support dynamic dispatch.
type IDropIndexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIntimeAction returns the intimeAction token.
	GetIntimeAction() antlr.Token

	// GetAlgType returns the algType token.
	GetAlgType() antlr.Token

	// GetLockType returns the lockType token.
	GetLockType() antlr.Token

	// SetIntimeAction sets the intimeAction token.
	SetIntimeAction(antlr.Token)

	// SetAlgType sets the algType token.
	SetAlgType(antlr.Token)

	// SetLockType sets the lockType token.
	SetLockType(antlr.Token)

	// IsDropIndexContext differentiates from other interfaces.
	IsDropIndexContext()
}

type DropIndexContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	intimeAction antlr.Token
	algType      antlr.Token
	lockType     antlr.Token
}

func NewEmptyDropIndexContext() *DropIndexContext {
	var p = new(DropIndexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropIndex
	return p
}

func (*DropIndexContext) IsDropIndexContext() {}

func NewDropIndexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropIndexContext {
	var p = new(DropIndexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropIndex

	return p
}

func (s *DropIndexContext) GetParser() antlr.Parser { return s.parser }

func (s *DropIndexContext) GetIntimeAction() antlr.Token { return s.intimeAction }

func (s *DropIndexContext) GetAlgType() antlr.Token { return s.algType }

func (s *DropIndexContext) GetLockType() antlr.Token { return s.lockType }

func (s *DropIndexContext) SetIntimeAction(v antlr.Token) { s.intimeAction = v }

func (s *DropIndexContext) SetAlgType(v antlr.Token) { s.algType = v }

func (s *DropIndexContext) SetLockType(v antlr.Token) { s.lockType = v }

func (s *DropIndexContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *DropIndexContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DropIndexContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *DropIndexContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *DropIndexContext) AllALGORITHM() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserALGORITHM)
}

func (s *DropIndexContext) ALGORITHM(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, i)
}

func (s *DropIndexContext) AllLOCK() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLOCK)
}

func (s *DropIndexContext) LOCK(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, i)
}

func (s *DropIndexContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLINE, 0)
}

func (s *DropIndexContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFLINE, 0)
}

func (s *DropIndexContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDEFAULT)
}

func (s *DropIndexContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, i)
}

func (s *DropIndexContext) AllINPLACE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserINPLACE)
}

func (s *DropIndexContext) INPLACE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserINPLACE, i)
}

func (s *DropIndexContext) AllCOPY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOPY)
}

func (s *DropIndexContext) COPY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOPY, i)
}

func (s *DropIndexContext) AllNONE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNONE)
}

func (s *DropIndexContext) NONE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, i)
}

func (s *DropIndexContext) AllSHARED() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSHARED)
}

func (s *DropIndexContext) SHARED(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARED, i)
}

func (s *DropIndexContext) AllEXCLUSIVE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEXCLUSIVE)
}

func (s *DropIndexContext) EXCLUSIVE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLUSIVE, i)
}

func (s *DropIndexContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *DropIndexContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *DropIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropIndexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDropIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DropIndex() (localctx IDropIndexContext) {
	localctx = NewDropIndexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, MySqlParserRULE_dropIndex)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2658)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2659)
		p.Match(MySqlParserINDEX)
	}
	p.SetState(2661)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 336, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2660)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DropIndexContext).intimeAction = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserOFFLINE || _la == MySqlParserONLINE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DropIndexContext).intimeAction = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(2663)
		p.Uid()
	}
	{
		p.SetState(2664)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(2665)
		p.TableName()
	}
	p.SetState(2678)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 340, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(2676)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserALGORITHM:
				{
					p.SetState(2666)
					p.Match(MySqlParserALGORITHM)
				}
				p.SetState(2668)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserEQUAL_SYMBOL {
					{
						p.SetState(2667)
						p.Match(MySqlParserEQUAL_SYMBOL)
					}

				}
				{
					p.SetState(2670)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*DropIndexContext).algType = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserDEFAULT || _la == MySqlParserCOPY || _la == MySqlParserINPLACE) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*DropIndexContext).algType = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case MySqlParserLOCK:
				{
					p.SetState(2671)
					p.Match(MySqlParserLOCK)
				}
				p.SetState(2673)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserEQUAL_SYMBOL {
					{
						p.SetState(2672)
						p.Match(MySqlParserEQUAL_SYMBOL)
					}

				}
				{
					p.SetState(2675)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*DropIndexContext).lockType = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserDEFAULT || _la == MySqlParserEXCLUSIVE || _la == MySqlParserNONE || _la == MySqlParserSHARED) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*DropIndexContext).lockType = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(2680)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 340, p.GetParserRuleContext())
	}

	return localctx
}

// IDropLogfileGroupContext is an interface to support dynamic dispatch.
type IDropLogfileGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropLogfileGroupContext differentiates from other interfaces.
	IsDropLogfileGroupContext()
}

type DropLogfileGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropLogfileGroupContext() *DropLogfileGroupContext {
	var p = new(DropLogfileGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropLogfileGroup
	return p
}

func (*DropLogfileGroupContext) IsDropLogfileGroupContext() {}

func NewDropLogfileGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropLogfileGroupContext {
	var p = new(DropLogfileGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropLogfileGroup

	return p
}

func (s *DropLogfileGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *DropLogfileGroupContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropLogfileGroupContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *DropLogfileGroupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *DropLogfileGroupContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DropLogfileGroupContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *DropLogfileGroupContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *DropLogfileGroupContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *DropLogfileGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropLogfileGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropLogfileGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDropLogfileGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DropLogfileGroup() (localctx IDropLogfileGroupContext) {
	localctx = NewDropLogfileGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, MySqlParserRULE_dropLogfileGroup)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2681)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2682)
		p.Match(MySqlParserLOGFILE)
	}
	{
		p.SetState(2683)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(2684)
		p.Uid()
	}
	{
		p.SetState(2685)
		p.Match(MySqlParserENGINE)
	}
	{
		p.SetState(2686)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	{
		p.SetState(2687)
		p.EngineName()
	}

	return localctx
}

// IDropProcedureContext is an interface to support dynamic dispatch.
type IDropProcedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropProcedureContext differentiates from other interfaces.
	IsDropProcedureContext()
}

type DropProcedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropProcedureContext() *DropProcedureContext {
	var p = new(DropProcedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropProcedure
	return p
}

func (*DropProcedureContext) IsDropProcedureContext() {}

func NewDropProcedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropProcedureContext {
	var p = new(DropProcedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropProcedure

	return p
}

func (s *DropProcedureContext) GetParser() antlr.Parser { return s.parser }

func (s *DropProcedureContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropProcedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *DropProcedureContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *DropProcedureContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropProcedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropProcedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropProcedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDropProcedure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DropProcedure() (localctx IDropProcedureContext) {
	localctx = NewDropProcedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, MySqlParserRULE_dropProcedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2689)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2690)
		p.Match(MySqlParserPROCEDURE)
	}
	p.SetState(2692)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2691)
			p.IfExists()
		}

	}
	{
		p.SetState(2694)
		p.FullId()
	}

	return localctx
}

// IDropFunctionContext is an interface to support dynamic dispatch.
type IDropFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropFunctionContext differentiates from other interfaces.
	IsDropFunctionContext()
}

type DropFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropFunctionContext() *DropFunctionContext {
	var p = new(DropFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropFunction
	return p
}

func (*DropFunctionContext) IsDropFunctionContext() {}

func NewDropFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropFunctionContext {
	var p = new(DropFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropFunction

	return p
}

func (s *DropFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *DropFunctionContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropFunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *DropFunctionContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *DropFunctionContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDropFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DropFunction() (localctx IDropFunctionContext) {
	localctx = NewDropFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, MySqlParserRULE_dropFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2696)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2697)
		p.Match(MySqlParserFUNCTION)
	}
	p.SetState(2699)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2698)
			p.IfExists()
		}

	}
	{
		p.SetState(2701)
		p.FullId()
	}

	return localctx
}

// IDropServerContext is an interface to support dynamic dispatch.
type IDropServerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropServerContext differentiates from other interfaces.
	IsDropServerContext()
}

type DropServerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropServerContext() *DropServerContext {
	var p = new(DropServerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropServer
	return p
}

func (*DropServerContext) IsDropServerContext() {}

func NewDropServerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropServerContext {
	var p = new(DropServerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropServer

	return p
}

func (s *DropServerContext) GetParser() antlr.Parser { return s.parser }

func (s *DropServerContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropServerContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVER, 0)
}

func (s *DropServerContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DropServerContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropServerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropServerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropServerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDropServer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DropServer() (localctx IDropServerContext) {
	localctx = NewDropServerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, MySqlParserRULE_dropServer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2703)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2704)
		p.Match(MySqlParserSERVER)
	}
	p.SetState(2706)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2705)
			p.IfExists()
		}

	}
	{
		p.SetState(2708)
		p.Uid()
	}

	return localctx
}

// IDropTableContext is an interface to support dynamic dispatch.
type IDropTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDropType returns the dropType token.
	GetDropType() antlr.Token

	// SetDropType sets the dropType token.
	SetDropType(antlr.Token)

	// IsDropTableContext differentiates from other interfaces.
	IsDropTableContext()
}

type DropTableContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	dropType antlr.Token
}

func NewEmptyDropTableContext() *DropTableContext {
	var p = new(DropTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropTable
	return p
}

func (*DropTableContext) IsDropTableContext() {}

func NewDropTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropTableContext {
	var p = new(DropTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropTable

	return p
}

func (s *DropTableContext) GetParser() antlr.Parser { return s.parser }

func (s *DropTableContext) GetDropType() antlr.Token { return s.dropType }

func (s *DropTableContext) SetDropType(v antlr.Token) { s.dropType = v }

func (s *DropTableContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *DropTableContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *DropTableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *DropTableContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropTableContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESTRICT, 0)
}

func (s *DropTableContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADE, 0)
}

func (s *DropTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDropTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DropTable() (localctx IDropTableContext) {
	localctx = NewDropTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, MySqlParserRULE_dropTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2710)
		p.Match(MySqlParserDROP)
	}
	p.SetState(2712)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserTEMPORARY {
		{
			p.SetState(2711)
			p.Match(MySqlParserTEMPORARY)
		}

	}
	{
		p.SetState(2714)
		p.Match(MySqlParserTABLE)
	}
	p.SetState(2716)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2715)
			p.IfExists()
		}

	}
	{
		p.SetState(2718)
		p.Tables()
	}
	p.SetState(2720)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCASCADE || _la == MySqlParserRESTRICT {
		{
			p.SetState(2719)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DropTableContext).dropType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCASCADE || _la == MySqlParserRESTRICT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DropTableContext).dropType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDropTablespaceContext is an interface to support dynamic dispatch.
type IDropTablespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropTablespaceContext differentiates from other interfaces.
	IsDropTablespaceContext()
}

type DropTablespaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropTablespaceContext() *DropTablespaceContext {
	var p = new(DropTablespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropTablespace
	return p
}

func (*DropTablespaceContext) IsDropTablespaceContext() {}

func NewDropTablespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropTablespaceContext {
	var p = new(DropTablespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropTablespace

	return p
}

func (s *DropTablespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *DropTablespaceContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *DropTablespaceContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DropTablespaceContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *DropTablespaceContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *DropTablespaceContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *DropTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTablespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropTablespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDropTablespace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DropTablespace() (localctx IDropTablespaceContext) {
	localctx = NewDropTablespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, MySqlParserRULE_dropTablespace)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2722)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2723)
		p.Match(MySqlParserTABLESPACE)
	}
	{
		p.SetState(2724)
		p.Uid()
	}
	p.SetState(2730)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserENGINE {
		{
			p.SetState(2725)
			p.Match(MySqlParserENGINE)
		}
		p.SetState(2727)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2726)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2729)
			p.EngineName()
		}

	}

	return localctx
}

// IDropTriggerContext is an interface to support dynamic dispatch.
type IDropTriggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropTriggerContext differentiates from other interfaces.
	IsDropTriggerContext()
}

type DropTriggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropTriggerContext() *DropTriggerContext {
	var p = new(DropTriggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropTrigger
	return p
}

func (*DropTriggerContext) IsDropTriggerContext() {}

func NewDropTriggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropTriggerContext {
	var p = new(DropTriggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropTrigger

	return p
}

func (s *DropTriggerContext) GetParser() antlr.Parser { return s.parser }

func (s *DropTriggerContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropTriggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGER, 0)
}

func (s *DropTriggerContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *DropTriggerContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropTriggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropTriggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropTriggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDropTrigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DropTrigger() (localctx IDropTriggerContext) {
	localctx = NewDropTriggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, MySqlParserRULE_dropTrigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2732)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2733)
		p.Match(MySqlParserTRIGGER)
	}
	p.SetState(2735)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2734)
			p.IfExists()
		}

	}
	{
		p.SetState(2737)
		p.FullId()
	}

	return localctx
}

// IDropViewContext is an interface to support dynamic dispatch.
type IDropViewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDropType returns the dropType token.
	GetDropType() antlr.Token

	// SetDropType sets the dropType token.
	SetDropType(antlr.Token)

	// IsDropViewContext differentiates from other interfaces.
	IsDropViewContext()
}

type DropViewContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	dropType antlr.Token
}

func NewEmptyDropViewContext() *DropViewContext {
	var p = new(DropViewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropView
	return p
}

func (*DropViewContext) IsDropViewContext() {}

func NewDropViewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropViewContext {
	var p = new(DropViewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropView

	return p
}

func (s *DropViewContext) GetParser() antlr.Parser { return s.parser }

func (s *DropViewContext) GetDropType() antlr.Token { return s.dropType }

func (s *DropViewContext) SetDropType(v antlr.Token) { s.dropType = v }

func (s *DropViewContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropViewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *DropViewContext) AllFullId() []IFullIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFullIdContext)(nil)).Elem())
	var tst = make([]IFullIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFullIdContext)
		}
	}

	return tst
}

func (s *DropViewContext) FullId(i int) IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *DropViewContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropViewContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *DropViewContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *DropViewContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESTRICT, 0)
}

func (s *DropViewContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADE, 0)
}

func (s *DropViewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropViewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropViewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDropView(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DropView() (localctx IDropViewContext) {
	localctx = NewDropViewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, MySqlParserRULE_dropView)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2739)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2740)
		p.Match(MySqlParserVIEW)
	}
	p.SetState(2742)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2741)
			p.IfExists()
		}

	}
	{
		p.SetState(2744)
		p.FullId()
	}
	p.SetState(2749)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(2745)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(2746)
			p.FullId()
		}

		p.SetState(2751)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2753)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCASCADE || _la == MySqlParserRESTRICT {
		{
			p.SetState(2752)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DropViewContext).dropType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCASCADE || _la == MySqlParserRESTRICT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DropViewContext).dropType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IRenameTableContext is an interface to support dynamic dispatch.
type IRenameTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRenameTableContext differentiates from other interfaces.
	IsRenameTableContext()
}

type RenameTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRenameTableContext() *RenameTableContext {
	var p = new(RenameTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_renameTable
	return p
}

func (*RenameTableContext) IsRenameTableContext() {}

func NewRenameTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RenameTableContext {
	var p = new(RenameTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_renameTable

	return p
}

func (s *RenameTableContext) GetParser() antlr.Parser { return s.parser }

func (s *RenameTableContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *RenameTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *RenameTableContext) AllRenameTableClause() []IRenameTableClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRenameTableClauseContext)(nil)).Elem())
	var tst = make([]IRenameTableClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRenameTableClauseContext)
		}
	}

	return tst
}

func (s *RenameTableContext) RenameTableClause(i int) IRenameTableClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRenameTableClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRenameTableClauseContext)
}

func (s *RenameTableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *RenameTableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *RenameTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RenameTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRenameTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) RenameTable() (localctx IRenameTableContext) {
	localctx = NewRenameTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, MySqlParserRULE_renameTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2755)
		p.Match(MySqlParserRENAME)
	}
	{
		p.SetState(2756)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(2757)
		p.RenameTableClause()
	}
	p.SetState(2762)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(2758)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(2759)
			p.RenameTableClause()
		}

		p.SetState(2764)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRenameTableClauseContext is an interface to support dynamic dispatch.
type IRenameTableClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRenameTableClauseContext differentiates from other interfaces.
	IsRenameTableClauseContext()
}

type RenameTableClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRenameTableClauseContext() *RenameTableClauseContext {
	var p = new(RenameTableClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_renameTableClause
	return p
}

func (*RenameTableClauseContext) IsRenameTableClauseContext() {}

func NewRenameTableClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RenameTableClauseContext {
	var p = new(RenameTableClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_renameTableClause

	return p
}

func (s *RenameTableClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *RenameTableClauseContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *RenameTableClauseContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *RenameTableClauseContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *RenameTableClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameTableClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RenameTableClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRenameTableClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) RenameTableClause() (localctx IRenameTableClauseContext) {
	localctx = NewRenameTableClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, MySqlParserRULE_renameTableClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2765)
		p.TableName()
	}
	{
		p.SetState(2766)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(2767)
		p.TableName()
	}

	return localctx
}

// ITruncateTableContext is an interface to support dynamic dispatch.
type ITruncateTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTruncateTableContext differentiates from other interfaces.
	IsTruncateTableContext()
}

type TruncateTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTruncateTableContext() *TruncateTableContext {
	var p = new(TruncateTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_truncateTable
	return p
}

func (*TruncateTableContext) IsTruncateTableContext() {}

func NewTruncateTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TruncateTableContext {
	var p = new(TruncateTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_truncateTable

	return p
}

func (s *TruncateTableContext) GetParser() antlr.Parser { return s.parser }

func (s *TruncateTableContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUNCATE, 0)
}

func (s *TruncateTableContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TruncateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *TruncateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TruncateTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TruncateTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTruncateTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TruncateTable() (localctx ITruncateTableContext) {
	localctx = NewTruncateTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, MySqlParserRULE_truncateTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2769)
		p.Match(MySqlParserTRUNCATE)
	}
	p.SetState(2771)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserTABLE {
		{
			p.SetState(2770)
			p.Match(MySqlParserTABLE)
		}

	}
	{
		p.SetState(2773)
		p.TableName()
	}

	return localctx
}

// ICallStatementContext is an interface to support dynamic dispatch.
type ICallStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallStatementContext differentiates from other interfaces.
	IsCallStatementContext()
}

type CallStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallStatementContext() *CallStatementContext {
	var p = new(CallStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_callStatement
	return p
}

func (*CallStatementContext) IsCallStatementContext() {}

func NewCallStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallStatementContext {
	var p = new(CallStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_callStatement

	return p
}

func (s *CallStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CallStatementContext) CALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCALL, 0)
}

func (s *CallStatementContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *CallStatementContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CallStatementContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CallStatementContext) Constants() IConstantsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantsContext)
}

func (s *CallStatementContext) Expressions() IExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsContext)
}

func (s *CallStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCallStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CallStatement() (localctx ICallStatementContext) {
	localctx = NewCallStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, MySqlParserRULE_callStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2775)
		p.Match(MySqlParserCALL)
	}
	{
		p.SetState(2776)
		p.FullId()
	}
	p.SetState(2783)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 356, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2777)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(2780)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 355, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2778)
				p.Constants()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 355, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(2779)
				p.Expressions()
			}

		}
		{
			p.SetState(2782)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IDeleteStatementContext is an interface to support dynamic dispatch.
type IDeleteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeleteStatementContext differentiates from other interfaces.
	IsDeleteStatementContext()
}

type DeleteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteStatementContext() *DeleteStatementContext {
	var p = new(DeleteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_deleteStatement
	return p
}

func (*DeleteStatementContext) IsDeleteStatementContext() {}

func NewDeleteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteStatementContext {
	var p = new(DeleteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_deleteStatement

	return p
}

func (s *DeleteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteStatementContext) SingleDeleteStatement() ISingleDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleDeleteStatementContext)
}

func (s *DeleteStatementContext) MultipleDeleteStatement() IMultipleDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultipleDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultipleDeleteStatementContext)
}

func (s *DeleteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDeleteStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DeleteStatement() (localctx IDeleteStatementContext) {
	localctx = NewDeleteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, MySqlParserRULE_deleteStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2787)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 357, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2785)
			p.SingleDeleteStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2786)
			p.MultipleDeleteStatement()
		}

	}

	return localctx
}

// IDoStatementContext is an interface to support dynamic dispatch.
type IDoStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDoStatementContext differentiates from other interfaces.
	IsDoStatementContext()
}

type DoStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDoStatementContext() *DoStatementContext {
	var p = new(DoStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_doStatement
	return p
}

func (*DoStatementContext) IsDoStatementContext() {}

func NewDoStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DoStatementContext {
	var p = new(DoStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_doStatement

	return p
}

func (s *DoStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DoStatementContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *DoStatementContext) Expressions() IExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsContext)
}

func (s *DoStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DoStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDoStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DoStatement() (localctx IDoStatementContext) {
	localctx = NewDoStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, MySqlParserRULE_doStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2789)
		p.Match(MySqlParserDO)
	}
	{
		p.SetState(2790)
		p.Expressions()
	}

	return localctx
}

// IHandlerStatementContext is an interface to support dynamic dispatch.
type IHandlerStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerStatementContext differentiates from other interfaces.
	IsHandlerStatementContext()
}

type HandlerStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerStatementContext() *HandlerStatementContext {
	var p = new(HandlerStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handlerStatement
	return p
}

func (*HandlerStatementContext) IsHandlerStatementContext() {}

func NewHandlerStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerStatementContext {
	var p = new(HandlerStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handlerStatement

	return p
}

func (s *HandlerStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerStatementContext) HandlerOpenStatement() IHandlerOpenStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerOpenStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerOpenStatementContext)
}

func (s *HandlerStatementContext) HandlerReadIndexStatement() IHandlerReadIndexStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerReadIndexStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerReadIndexStatementContext)
}

func (s *HandlerStatementContext) HandlerReadStatement() IHandlerReadStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerReadStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerReadStatementContext)
}

func (s *HandlerStatementContext) HandlerCloseStatement() IHandlerCloseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerCloseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerCloseStatementContext)
}

func (s *HandlerStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandlerStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) HandlerStatement() (localctx IHandlerStatementContext) {
	localctx = NewHandlerStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, MySqlParserRULE_handlerStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2796)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 358, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2792)
			p.HandlerOpenStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2793)
			p.HandlerReadIndexStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2794)
			p.HandlerReadStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2795)
			p.HandlerCloseStatement()
		}

	}

	return localctx
}

// IInsertStatementContext is an interface to support dynamic dispatch.
type IInsertStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// GetPartitions returns the partitions rule contexts.
	GetPartitions() IUidListContext

	// GetColumns returns the columns rule contexts.
	GetColumns() IUidListContext

	// GetSetFirst returns the setFirst rule contexts.
	GetSetFirst() IUpdatedElementContext

	// Get_updatedElement returns the _updatedElement rule contexts.
	Get_updatedElement() IUpdatedElementContext

	// GetDuplicatedFirst returns the duplicatedFirst rule contexts.
	GetDuplicatedFirst() IUpdatedElementContext

	// SetPartitions sets the partitions rule contexts.
	SetPartitions(IUidListContext)

	// SetColumns sets the columns rule contexts.
	SetColumns(IUidListContext)

	// SetSetFirst sets the setFirst rule contexts.
	SetSetFirst(IUpdatedElementContext)

	// Set_updatedElement sets the _updatedElement rule contexts.
	Set_updatedElement(IUpdatedElementContext)

	// SetDuplicatedFirst sets the duplicatedFirst rule contexts.
	SetDuplicatedFirst(IUpdatedElementContext)

	// GetSetElements returns the setElements rule context list.
	GetSetElements() []IUpdatedElementContext

	// GetDuplicatedElements returns the duplicatedElements rule context list.
	GetDuplicatedElements() []IUpdatedElementContext

	// SetSetElements sets the setElements rule context list.
	SetSetElements([]IUpdatedElementContext)

	// SetDuplicatedElements sets the duplicatedElements rule context list.
	SetDuplicatedElements([]IUpdatedElementContext)

	// IsInsertStatementContext differentiates from other interfaces.
	IsInsertStatementContext()
}

type InsertStatementContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	priority           antlr.Token
	partitions         IUidListContext
	columns            IUidListContext
	setFirst           IUpdatedElementContext
	_updatedElement    IUpdatedElementContext
	setElements        []IUpdatedElementContext
	duplicatedFirst    IUpdatedElementContext
	duplicatedElements []IUpdatedElementContext
}

func NewEmptyInsertStatementContext() *InsertStatementContext {
	var p = new(InsertStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_insertStatement
	return p
}

func (*InsertStatementContext) IsInsertStatementContext() {}

func NewInsertStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertStatementContext {
	var p = new(InsertStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_insertStatement

	return p
}

func (s *InsertStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *InsertStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *InsertStatementContext) GetPartitions() IUidListContext { return s.partitions }

func (s *InsertStatementContext) GetColumns() IUidListContext { return s.columns }

func (s *InsertStatementContext) GetSetFirst() IUpdatedElementContext { return s.setFirst }

func (s *InsertStatementContext) Get_updatedElement() IUpdatedElementContext {
	return s._updatedElement
}

func (s *InsertStatementContext) GetDuplicatedFirst() IUpdatedElementContext {
	return s.duplicatedFirst
}

func (s *InsertStatementContext) SetPartitions(v IUidListContext) { s.partitions = v }

func (s *InsertStatementContext) SetColumns(v IUidListContext) { s.columns = v }

func (s *InsertStatementContext) SetSetFirst(v IUpdatedElementContext) { s.setFirst = v }

func (s *InsertStatementContext) Set_updatedElement(v IUpdatedElementContext) { s._updatedElement = v }

func (s *InsertStatementContext) SetDuplicatedFirst(v IUpdatedElementContext) { s.duplicatedFirst = v }

func (s *InsertStatementContext) GetSetElements() []IUpdatedElementContext { return s.setElements }

func (s *InsertStatementContext) GetDuplicatedElements() []IUpdatedElementContext {
	return s.duplicatedElements
}

func (s *InsertStatementContext) SetSetElements(v []IUpdatedElementContext) { s.setElements = v }

func (s *InsertStatementContext) SetDuplicatedElements(v []IUpdatedElementContext) {
	s.duplicatedElements = v
}

func (s *InsertStatementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT, 0)
}

func (s *InsertStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *InsertStatementContext) InsertStatementValue() IInsertStatementValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertStatementValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertStatementValueContext)
}

func (s *InsertStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *InsertStatementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *InsertStatementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *InsertStatementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *InsertStatementContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *InsertStatementContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *InsertStatementContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *InsertStatementContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *InsertStatementContext) AllUpdatedElement() []IUpdatedElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem())
	var tst = make([]IUpdatedElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdatedElementContext)
		}
	}

	return tst
}

func (s *InsertStatementContext) UpdatedElement(i int) IUpdatedElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdatedElementContext)
}

func (s *InsertStatementContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *InsertStatementContext) DUPLICATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDUPLICATE, 0)
}

func (s *InsertStatementContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *InsertStatementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *InsertStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *InsertStatementContext) DELAYED() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELAYED, 0)
}

func (s *InsertStatementContext) HIGH_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserHIGH_PRIORITY, 0)
}

func (s *InsertStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *InsertStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *InsertStatementContext) AllUidList() []IUidListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidListContext)(nil)).Elem())
	var tst = make([]IUidListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidListContext)
		}
	}

	return tst
}

func (s *InsertStatementContext) UidList(i int) IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *InsertStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitInsertStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) InsertStatement() (localctx IInsertStatementContext) {
	localctx = NewInsertStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, MySqlParserRULE_insertStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2798)
		p.Match(MySqlParserINSERT)
	}
	p.SetState(2800)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDELAYED || _la == MySqlParserHIGH_PRIORITY || _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(2799)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*InsertStatementContext).priority = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDELAYED || _la == MySqlParserHIGH_PRIORITY || _la == MySqlParserLOW_PRIORITY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*InsertStatementContext).priority = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2803)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(2802)
			p.Match(MySqlParserIGNORE)
		}

	}
	p.SetState(2806)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINTO {
		{
			p.SetState(2805)
			p.Match(MySqlParserINTO)
		}

	}
	{
		p.SetState(2808)
		p.TableName()
	}
	p.SetState(2815)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(2809)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2810)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(2812)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(2811)

				var _x = p.UidList()

				localctx.(*InsertStatementContext).partitions = _x
			}

		}
		{
			p.SetState(2814)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(2833)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSELECT, MySqlParserVALUES, MySqlParserVALUE, MySqlParserLR_BRACKET:
		p.SetState(2821)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 364, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2817)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(2818)

				var _x = p.UidList()

				localctx.(*InsertStatementContext).columns = _x
			}
			{
				p.SetState(2819)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		{
			p.SetState(2823)
			p.InsertStatementValue()
		}

	case MySqlParserSET:
		{
			p.SetState(2824)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2825)

			var _x = p.UpdatedElement()

			localctx.(*InsertStatementContext).setFirst = _x
		}
		p.SetState(2830)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2826)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2827)

				var _x = p.UpdatedElement()

				localctx.(*InsertStatementContext)._updatedElement = _x
			}
			localctx.(*InsertStatementContext).setElements = append(localctx.(*InsertStatementContext).setElements, localctx.(*InsertStatementContext)._updatedElement)

			p.SetState(2832)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2847)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserON {
		{
			p.SetState(2835)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(2836)
			p.Match(MySqlParserDUPLICATE)
		}
		{
			p.SetState(2837)
			p.Match(MySqlParserKEY)
		}
		{
			p.SetState(2838)
			p.Match(MySqlParserUPDATE)
		}
		{
			p.SetState(2839)

			var _x = p.UpdatedElement()

			localctx.(*InsertStatementContext).duplicatedFirst = _x
		}
		p.SetState(2844)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2840)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2841)

				var _x = p.UpdatedElement()

				localctx.(*InsertStatementContext)._updatedElement = _x
			}
			localctx.(*InsertStatementContext).duplicatedElements = append(localctx.(*InsertStatementContext).duplicatedElements, localctx.(*InsertStatementContext)._updatedElement)

			p.SetState(2846)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ILoadDataStatementContext is an interface to support dynamic dispatch.
type ILoadDataStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// GetFilename returns the filename token.
	GetFilename() antlr.Token

	// GetViolation returns the violation token.
	GetViolation() antlr.Token

	// GetFieldsFormat returns the fieldsFormat token.
	GetFieldsFormat() antlr.Token

	// GetLinesFormat returns the linesFormat token.
	GetLinesFormat() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// SetFilename sets the filename token.
	SetFilename(antlr.Token)

	// SetViolation sets the violation token.
	SetViolation(antlr.Token)

	// SetFieldsFormat sets the fieldsFormat token.
	SetFieldsFormat(antlr.Token)

	// SetLinesFormat sets the linesFormat token.
	SetLinesFormat(antlr.Token)

	// GetCharset returns the charset rule contexts.
	GetCharset() ICharsetNameContext

	// SetCharset sets the charset rule contexts.
	SetCharset(ICharsetNameContext)

	// IsLoadDataStatementContext differentiates from other interfaces.
	IsLoadDataStatementContext()
}

type LoadDataStatementContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	priority     antlr.Token
	filename     antlr.Token
	violation    antlr.Token
	charset      ICharsetNameContext
	fieldsFormat antlr.Token
	linesFormat  antlr.Token
}

func NewEmptyLoadDataStatementContext() *LoadDataStatementContext {
	var p = new(LoadDataStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_loadDataStatement
	return p
}

func (*LoadDataStatementContext) IsLoadDataStatementContext() {}

func NewLoadDataStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadDataStatementContext {
	var p = new(LoadDataStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_loadDataStatement

	return p
}

func (s *LoadDataStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadDataStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *LoadDataStatementContext) GetFilename() antlr.Token { return s.filename }

func (s *LoadDataStatementContext) GetViolation() antlr.Token { return s.violation }

func (s *LoadDataStatementContext) GetFieldsFormat() antlr.Token { return s.fieldsFormat }

func (s *LoadDataStatementContext) GetLinesFormat() antlr.Token { return s.linesFormat }

func (s *LoadDataStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *LoadDataStatementContext) SetFilename(v antlr.Token) { s.filename = v }

func (s *LoadDataStatementContext) SetViolation(v antlr.Token) { s.violation = v }

func (s *LoadDataStatementContext) SetFieldsFormat(v antlr.Token) { s.fieldsFormat = v }

func (s *LoadDataStatementContext) SetLinesFormat(v antlr.Token) { s.linesFormat = v }

func (s *LoadDataStatementContext) GetCharset() ICharsetNameContext { return s.charset }

func (s *LoadDataStatementContext) SetCharset(v ICharsetNameContext) { s.charset = v }

func (s *LoadDataStatementContext) LOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOAD, 0)
}

func (s *LoadDataStatementContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *LoadDataStatementContext) INFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINFILE, 0)
}

func (s *LoadDataStatementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *LoadDataStatementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *LoadDataStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *LoadDataStatementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *LoadDataStatementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *LoadDataStatementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *LoadDataStatementContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *LoadDataStatementContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *LoadDataStatementContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *LoadDataStatementContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *LoadDataStatementContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *LoadDataStatementContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *LoadDataStatementContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSET)
}

func (s *LoadDataStatementContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, i)
}

func (s *LoadDataStatementContext) AllLINES() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLINES)
}

func (s *LoadDataStatementContext) LINES(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLINES, i)
}

func (s *LoadDataStatementContext) AllIGNORE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIGNORE)
}

func (s *LoadDataStatementContext) IGNORE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, i)
}

func (s *LoadDataStatementContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LoadDataStatementContext) AllAssignmentField() []IAssignmentFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentFieldContext)(nil)).Elem())
	var tst = make([]IAssignmentFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentFieldContext)
		}
	}

	return tst
}

func (s *LoadDataStatementContext) AssignmentField(i int) IAssignmentFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentFieldContext)
}

func (s *LoadDataStatementContext) AllUpdatedElement() []IUpdatedElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem())
	var tst = make([]IUpdatedElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdatedElementContext)
		}
	}

	return tst
}

func (s *LoadDataStatementContext) UpdatedElement(i int) IUpdatedElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdatedElementContext)
}

func (s *LoadDataStatementContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *LoadDataStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *LoadDataStatementContext) CONCURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCURRENT, 0)
}

func (s *LoadDataStatementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *LoadDataStatementContext) FIELDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELDS, 0)
}

func (s *LoadDataStatementContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *LoadDataStatementContext) ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserROWS, 0)
}

func (s *LoadDataStatementContext) AllSelectFieldsInto() []ISelectFieldsIntoContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectFieldsIntoContext)(nil)).Elem())
	var tst = make([]ISelectFieldsIntoContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectFieldsIntoContext)
		}
	}

	return tst
}

func (s *LoadDataStatementContext) SelectFieldsInto(i int) ISelectFieldsIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectFieldsIntoContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectFieldsIntoContext)
}

func (s *LoadDataStatementContext) AllSelectLinesInto() []ISelectLinesIntoContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectLinesIntoContext)(nil)).Elem())
	var tst = make([]ISelectLinesIntoContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectLinesIntoContext)
		}
	}

	return tst
}

func (s *LoadDataStatementContext) SelectLinesInto(i int) ISelectLinesIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectLinesIntoContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectLinesIntoContext)
}

func (s *LoadDataStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *LoadDataStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *LoadDataStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadDataStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadDataStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLoadDataStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LoadDataStatement() (localctx ILoadDataStatementContext) {
	localctx = NewLoadDataStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, MySqlParserRULE_loadDataStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2849)
		p.Match(MySqlParserLOAD)
	}
	{
		p.SetState(2850)
		p.Match(MySqlParserDATA)
	}
	p.SetState(2852)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY || _la == MySqlParserCONCURRENT {
		{
			p.SetState(2851)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadDataStatementContext).priority = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserLOW_PRIORITY || _la == MySqlParserCONCURRENT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadDataStatementContext).priority = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2855)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOCAL {
		{
			p.SetState(2854)
			p.Match(MySqlParserLOCAL)
		}

	}
	{
		p.SetState(2857)
		p.Match(MySqlParserINFILE)
	}
	{
		p.SetState(2858)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*LoadDataStatementContext).filename = _m
	}
	p.SetState(2860)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE || _la == MySqlParserREPLACE {
		{
			p.SetState(2859)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadDataStatementContext).violation = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserIGNORE || _la == MySqlParserREPLACE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadDataStatementContext).violation = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(2862)
		p.Match(MySqlParserINTO)
	}
	{
		p.SetState(2863)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(2864)
		p.TableName()
	}
	p.SetState(2870)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(2865)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2866)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2867)
			p.UidList()
		}
		{
			p.SetState(2868)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(2875)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCHARACTER {
		{
			p.SetState(2872)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(2873)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2874)

			var _x = p.CharsetName()

			localctx.(*LoadDataStatementContext).charset = _x
		}

	}
	p.SetState(2883)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOLUMNS || _la == MySqlParserFIELDS {
		{
			p.SetState(2877)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadDataStatementContext).fieldsFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCOLUMNS || _la == MySqlParserFIELDS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadDataStatementContext).fieldsFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(2879)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserENCLOSED || _la == MySqlParserESCAPED || _la == MySqlParserOPTIONALLY || _la == MySqlParserTERMINATED {
			{
				p.SetState(2878)
				p.SelectFieldsInto()
			}

			p.SetState(2881)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(2891)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLINES {
		{
			p.SetState(2885)
			p.Match(MySqlParserLINES)
		}
		p.SetState(2887)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserSTARTING || _la == MySqlParserTERMINATED {
			{
				p.SetState(2886)
				p.SelectLinesInto()
			}

			p.SetState(2889)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(2897)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(2893)
			p.Match(MySqlParserIGNORE)
		}
		{
			p.SetState(2894)
			p.DecimalLiteral()
		}
		{
			p.SetState(2895)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadDataStatementContext).linesFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserLINES || _la == MySqlParserROWS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadDataStatementContext).linesFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2910)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 380, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2899)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2900)
			p.AssignmentField()
		}
		p.SetState(2905)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2901)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2902)
				p.AssignmentField()
			}

			p.SetState(2907)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2908)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(2921)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 382, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2912)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2913)
			p.UpdatedElement()
		}
		p.SetState(2918)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2914)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2915)
				p.UpdatedElement()
			}

			p.SetState(2920)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ILoadXmlStatementContext is an interface to support dynamic dispatch.
type ILoadXmlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// GetFilename returns the filename token.
	GetFilename() antlr.Token

	// GetViolation returns the violation token.
	GetViolation() antlr.Token

	// GetTag returns the tag token.
	GetTag() antlr.Token

	// GetLinesFormat returns the linesFormat token.
	GetLinesFormat() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// SetFilename sets the filename token.
	SetFilename(antlr.Token)

	// SetViolation sets the violation token.
	SetViolation(antlr.Token)

	// SetTag sets the tag token.
	SetTag(antlr.Token)

	// SetLinesFormat sets the linesFormat token.
	SetLinesFormat(antlr.Token)

	// GetCharset returns the charset rule contexts.
	GetCharset() ICharsetNameContext

	// SetCharset sets the charset rule contexts.
	SetCharset(ICharsetNameContext)

	// IsLoadXmlStatementContext differentiates from other interfaces.
	IsLoadXmlStatementContext()
}

type LoadXmlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	priority    antlr.Token
	filename    antlr.Token
	violation   antlr.Token
	charset     ICharsetNameContext
	tag         antlr.Token
	linesFormat antlr.Token
}

func NewEmptyLoadXmlStatementContext() *LoadXmlStatementContext {
	var p = new(LoadXmlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_loadXmlStatement
	return p
}

func (*LoadXmlStatementContext) IsLoadXmlStatementContext() {}

func NewLoadXmlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadXmlStatementContext {
	var p = new(LoadXmlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_loadXmlStatement

	return p
}

func (s *LoadXmlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadXmlStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *LoadXmlStatementContext) GetFilename() antlr.Token { return s.filename }

func (s *LoadXmlStatementContext) GetViolation() antlr.Token { return s.violation }

func (s *LoadXmlStatementContext) GetTag() antlr.Token { return s.tag }

func (s *LoadXmlStatementContext) GetLinesFormat() antlr.Token { return s.linesFormat }

func (s *LoadXmlStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *LoadXmlStatementContext) SetFilename(v antlr.Token) { s.filename = v }

func (s *LoadXmlStatementContext) SetViolation(v antlr.Token) { s.violation = v }

func (s *LoadXmlStatementContext) SetTag(v antlr.Token) { s.tag = v }

func (s *LoadXmlStatementContext) SetLinesFormat(v antlr.Token) { s.linesFormat = v }

func (s *LoadXmlStatementContext) GetCharset() ICharsetNameContext { return s.charset }

func (s *LoadXmlStatementContext) SetCharset(v ICharsetNameContext) { s.charset = v }

func (s *LoadXmlStatementContext) LOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOAD, 0)
}

func (s *LoadXmlStatementContext) XML() antlr.TerminalNode {
	return s.GetToken(MySqlParserXML, 0)
}

func (s *LoadXmlStatementContext) INFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINFILE, 0)
}

func (s *LoadXmlStatementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *LoadXmlStatementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *LoadXmlStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *LoadXmlStatementContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *LoadXmlStatementContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *LoadXmlStatementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *LoadXmlStatementContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *LoadXmlStatementContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSET)
}

func (s *LoadXmlStatementContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, i)
}

func (s *LoadXmlStatementContext) AllROWS() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserROWS)
}

func (s *LoadXmlStatementContext) ROWS(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserROWS, i)
}

func (s *LoadXmlStatementContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *LoadXmlStatementContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *LoadXmlStatementContext) LESS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLESS_SYMBOL, 0)
}

func (s *LoadXmlStatementContext) GREATER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGREATER_SYMBOL, 0)
}

func (s *LoadXmlStatementContext) AllIGNORE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIGNORE)
}

func (s *LoadXmlStatementContext) IGNORE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, i)
}

func (s *LoadXmlStatementContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LoadXmlStatementContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *LoadXmlStatementContext) AllAssignmentField() []IAssignmentFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentFieldContext)(nil)).Elem())
	var tst = make([]IAssignmentFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentFieldContext)
		}
	}

	return tst
}

func (s *LoadXmlStatementContext) AssignmentField(i int) IAssignmentFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentFieldContext)
}

func (s *LoadXmlStatementContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *LoadXmlStatementContext) AllUpdatedElement() []IUpdatedElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem())
	var tst = make([]IUpdatedElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdatedElementContext)
		}
	}

	return tst
}

func (s *LoadXmlStatementContext) UpdatedElement(i int) IUpdatedElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdatedElementContext)
}

func (s *LoadXmlStatementContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *LoadXmlStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *LoadXmlStatementContext) CONCURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCURRENT, 0)
}

func (s *LoadXmlStatementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *LoadXmlStatementContext) LINES() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINES, 0)
}

func (s *LoadXmlStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *LoadXmlStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *LoadXmlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadXmlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadXmlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLoadXmlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LoadXmlStatement() (localctx ILoadXmlStatementContext) {
	localctx = NewLoadXmlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, MySqlParserRULE_loadXmlStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2923)
		p.Match(MySqlParserLOAD)
	}
	{
		p.SetState(2924)
		p.Match(MySqlParserXML)
	}
	p.SetState(2926)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY || _la == MySqlParserCONCURRENT {
		{
			p.SetState(2925)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadXmlStatementContext).priority = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserLOW_PRIORITY || _la == MySqlParserCONCURRENT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadXmlStatementContext).priority = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2929)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOCAL {
		{
			p.SetState(2928)
			p.Match(MySqlParserLOCAL)
		}

	}
	{
		p.SetState(2931)
		p.Match(MySqlParserINFILE)
	}
	{
		p.SetState(2932)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*LoadXmlStatementContext).filename = _m
	}
	p.SetState(2934)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE || _la == MySqlParserREPLACE {
		{
			p.SetState(2933)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadXmlStatementContext).violation = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserIGNORE || _la == MySqlParserREPLACE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadXmlStatementContext).violation = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(2936)
		p.Match(MySqlParserINTO)
	}
	{
		p.SetState(2937)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(2938)
		p.TableName()
	}
	p.SetState(2942)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCHARACTER {
		{
			p.SetState(2939)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(2940)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2941)

			var _x = p.CharsetName()

			localctx.(*LoadXmlStatementContext).charset = _x
		}

	}
	p.SetState(2950)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserROWS {
		{
			p.SetState(2944)
			p.Match(MySqlParserROWS)
		}
		{
			p.SetState(2945)
			p.Match(MySqlParserIDENTIFIED)
		}
		{
			p.SetState(2946)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(2947)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(2948)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*LoadXmlStatementContext).tag = _m
		}
		{
			p.SetState(2949)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	}
	p.SetState(2956)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(2952)
			p.Match(MySqlParserIGNORE)
		}
		{
			p.SetState(2953)
			p.DecimalLiteral()
		}
		{
			p.SetState(2954)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LoadXmlStatementContext).linesFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserLINES || _la == MySqlParserROWS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LoadXmlStatementContext).linesFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2969)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 390, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2958)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2959)
			p.AssignmentField()
		}
		p.SetState(2964)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2960)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2961)
				p.AssignmentField()
			}

			p.SetState(2966)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2967)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(2980)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 392, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2971)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2972)
			p.UpdatedElement()
		}
		p.SetState(2977)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2973)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2974)
				p.UpdatedElement()
			}

			p.SetState(2979)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IReplaceStatementContext is an interface to support dynamic dispatch.
type IReplaceStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// GetPartitions returns the partitions rule contexts.
	GetPartitions() IUidListContext

	// GetColumns returns the columns rule contexts.
	GetColumns() IUidListContext

	// GetSetFirst returns the setFirst rule contexts.
	GetSetFirst() IUpdatedElementContext

	// Get_updatedElement returns the _updatedElement rule contexts.
	Get_updatedElement() IUpdatedElementContext

	// SetPartitions sets the partitions rule contexts.
	SetPartitions(IUidListContext)

	// SetColumns sets the columns rule contexts.
	SetColumns(IUidListContext)

	// SetSetFirst sets the setFirst rule contexts.
	SetSetFirst(IUpdatedElementContext)

	// Set_updatedElement sets the _updatedElement rule contexts.
	Set_updatedElement(IUpdatedElementContext)

	// GetSetElements returns the setElements rule context list.
	GetSetElements() []IUpdatedElementContext

	// SetSetElements sets the setElements rule context list.
	SetSetElements([]IUpdatedElementContext)

	// IsReplaceStatementContext differentiates from other interfaces.
	IsReplaceStatementContext()
}

type ReplaceStatementContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	priority        antlr.Token
	partitions      IUidListContext
	columns         IUidListContext
	setFirst        IUpdatedElementContext
	_updatedElement IUpdatedElementContext
	setElements     []IUpdatedElementContext
}

func NewEmptyReplaceStatementContext() *ReplaceStatementContext {
	var p = new(ReplaceStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_replaceStatement
	return p
}

func (*ReplaceStatementContext) IsReplaceStatementContext() {}

func NewReplaceStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplaceStatementContext {
	var p = new(ReplaceStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_replaceStatement

	return p
}

func (s *ReplaceStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplaceStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *ReplaceStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *ReplaceStatementContext) GetPartitions() IUidListContext { return s.partitions }

func (s *ReplaceStatementContext) GetColumns() IUidListContext { return s.columns }

func (s *ReplaceStatementContext) GetSetFirst() IUpdatedElementContext { return s.setFirst }

func (s *ReplaceStatementContext) Get_updatedElement() IUpdatedElementContext {
	return s._updatedElement
}

func (s *ReplaceStatementContext) SetPartitions(v IUidListContext) { s.partitions = v }

func (s *ReplaceStatementContext) SetColumns(v IUidListContext) { s.columns = v }

func (s *ReplaceStatementContext) SetSetFirst(v IUpdatedElementContext) { s.setFirst = v }

func (s *ReplaceStatementContext) Set_updatedElement(v IUpdatedElementContext) { s._updatedElement = v }

func (s *ReplaceStatementContext) GetSetElements() []IUpdatedElementContext { return s.setElements }

func (s *ReplaceStatementContext) SetSetElements(v []IUpdatedElementContext) { s.setElements = v }

func (s *ReplaceStatementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *ReplaceStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ReplaceStatementContext) InsertStatementValue() IInsertStatementValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertStatementValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertStatementValueContext)
}

func (s *ReplaceStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *ReplaceStatementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *ReplaceStatementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *ReplaceStatementContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *ReplaceStatementContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *ReplaceStatementContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *ReplaceStatementContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *ReplaceStatementContext) AllUpdatedElement() []IUpdatedElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem())
	var tst = make([]IUpdatedElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdatedElementContext)
		}
	}

	return tst
}

func (s *ReplaceStatementContext) UpdatedElement(i int) IUpdatedElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdatedElementContext)
}

func (s *ReplaceStatementContext) AllUidList() []IUidListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidListContext)(nil)).Elem())
	var tst = make([]IUidListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidListContext)
		}
	}

	return tst
}

func (s *ReplaceStatementContext) UidList(i int) IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *ReplaceStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *ReplaceStatementContext) DELAYED() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELAYED, 0)
}

func (s *ReplaceStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ReplaceStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ReplaceStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplaceStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReplaceStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReplaceStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ReplaceStatement() (localctx IReplaceStatementContext) {
	localctx = NewReplaceStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, MySqlParserRULE_replaceStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2982)
		p.Match(MySqlParserREPLACE)
	}
	p.SetState(2984)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDELAYED || _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(2983)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ReplaceStatementContext).priority = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDELAYED || _la == MySqlParserLOW_PRIORITY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ReplaceStatementContext).priority = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(2987)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINTO {
		{
			p.SetState(2986)
			p.Match(MySqlParserINTO)
		}

	}
	{
		p.SetState(2989)
		p.TableName()
	}
	p.SetState(2995)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(2990)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2991)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2992)

			var _x = p.UidList()

			localctx.(*ReplaceStatementContext).partitions = _x
		}
		{
			p.SetState(2993)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(3013)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSELECT, MySqlParserVALUES, MySqlParserVALUE, MySqlParserLR_BRACKET:
		p.SetState(3001)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2997)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(2998)

				var _x = p.UidList()

				localctx.(*ReplaceStatementContext).columns = _x
			}
			{
				p.SetState(2999)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		{
			p.SetState(3003)
			p.InsertStatementValue()
		}

	case MySqlParserSET:
		{
			p.SetState(3004)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(3005)

			var _x = p.UpdatedElement()

			localctx.(*ReplaceStatementContext).setFirst = _x
		}
		p.SetState(3010)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3006)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3007)

				var _x = p.UpdatedElement()

				localctx.(*ReplaceStatementContext)._updatedElement = _x
			}
			localctx.(*ReplaceStatementContext).setElements = append(localctx.(*ReplaceStatementContext).setElements, localctx.(*ReplaceStatementContext)._updatedElement)

			p.SetState(3012)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectStatementContext is an interface to support dynamic dispatch.
type ISelectStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectStatementContext differentiates from other interfaces.
	IsSelectStatementContext()
}

type SelectStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStatementContext() *SelectStatementContext {
	var p = new(SelectStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectStatement
	return p
}

func (*SelectStatementContext) IsSelectStatementContext() {}

func NewSelectStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStatementContext {
	var p = new(SelectStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectStatement

	return p
}

func (s *SelectStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStatementContext) CopyFrom(ctx *SelectStatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SelectStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type UnionSelectContext struct {
	*SelectStatementContext
	unionType antlr.Token
}

func NewUnionSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnionSelectContext {
	var p = new(UnionSelectContext)

	p.SelectStatementContext = NewEmptySelectStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectStatementContext))

	return p
}

func (s *UnionSelectContext) GetUnionType() antlr.Token { return s.unionType }

func (s *UnionSelectContext) SetUnionType(v antlr.Token) { s.unionType = v }

func (s *UnionSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionSelectContext) QuerySpecificationNointo() IQuerySpecificationNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationNointoContext)
}

func (s *UnionSelectContext) AllUnionStatement() []IUnionStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnionStatementContext)(nil)).Elem())
	var tst = make([]IUnionStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnionStatementContext)
		}
	}

	return tst
}

func (s *UnionSelectContext) UnionStatement(i int) IUnionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnionStatementContext)
}

func (s *UnionSelectContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *UnionSelectContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *UnionSelectContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *UnionSelectContext) LockClause() ILockClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockClauseContext)
}

func (s *UnionSelectContext) QuerySpecification() IQuerySpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationContext)
}

func (s *UnionSelectContext) QueryExpression() IQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionContext)
}

func (s *UnionSelectContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *UnionSelectContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *UnionSelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnionSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnionParenthesisSelectContext struct {
	*SelectStatementContext
	unionType antlr.Token
}

func NewUnionParenthesisSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnionParenthesisSelectContext {
	var p = new(UnionParenthesisSelectContext)

	p.SelectStatementContext = NewEmptySelectStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectStatementContext))

	return p
}

func (s *UnionParenthesisSelectContext) GetUnionType() antlr.Token { return s.unionType }

func (s *UnionParenthesisSelectContext) SetUnionType(v antlr.Token) { s.unionType = v }

func (s *UnionParenthesisSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionParenthesisSelectContext) QueryExpressionNointo() IQueryExpressionNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionNointoContext)
}

func (s *UnionParenthesisSelectContext) AllUnionParenthesis() []IUnionParenthesisContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnionParenthesisContext)(nil)).Elem())
	var tst = make([]IUnionParenthesisContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnionParenthesisContext)
		}
	}

	return tst
}

func (s *UnionParenthesisSelectContext) UnionParenthesis(i int) IUnionParenthesisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionParenthesisContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnionParenthesisContext)
}

func (s *UnionParenthesisSelectContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *UnionParenthesisSelectContext) QueryExpression() IQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionContext)
}

func (s *UnionParenthesisSelectContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *UnionParenthesisSelectContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *UnionParenthesisSelectContext) LockClause() ILockClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockClauseContext)
}

func (s *UnionParenthesisSelectContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *UnionParenthesisSelectContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *UnionParenthesisSelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnionParenthesisSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

type SimpleSelectContext struct {
	*SelectStatementContext
}

func NewSimpleSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleSelectContext {
	var p = new(SimpleSelectContext)

	p.SelectStatementContext = NewEmptySelectStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectStatementContext))

	return p
}

func (s *SimpleSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleSelectContext) QuerySpecification() IQuerySpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationContext)
}

func (s *SimpleSelectContext) LockClause() ILockClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockClauseContext)
}

func (s *SimpleSelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimpleSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

type ParenthesisSelectContext struct {
	*SelectStatementContext
}

func NewParenthesisSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenthesisSelectContext {
	var p = new(ParenthesisSelectContext)

	p.SelectStatementContext = NewEmptySelectStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectStatementContext))

	return p
}

func (s *ParenthesisSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesisSelectContext) QueryExpression() IQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionContext)
}

func (s *ParenthesisSelectContext) LockClause() ILockClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockClauseContext)
}

func (s *ParenthesisSelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitParenthesisSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SelectStatement() (localctx ISelectStatementContext) {
	localctx = NewSelectStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, MySqlParserRULE_selectStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3070)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 414, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSimpleSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3015)
			p.QuerySpecification()
		}
		p.SetState(3017)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 399, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3016)
				p.LockClause()
			}

		}

	case 2:
		localctx = NewParenthesisSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3019)
			p.QueryExpression()
		}
		p.SetState(3021)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 400, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3020)
				p.LockClause()
			}

		}

	case 3:
		localctx = NewUnionSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3023)
			p.QuerySpecificationNointo()
		}
		p.SetState(3025)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(3024)
					p.UnionStatement()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3027)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 401, p.GetParserRuleContext())
		}
		p.SetState(3037)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUNION {
			{
				p.SetState(3029)
				p.Match(MySqlParserUNION)
			}
			p.SetState(3031)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserALL || _la == MySqlParserDISTINCT {
				{
					p.SetState(3030)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*UnionSelectContext).unionType = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*UnionSelectContext).unionType = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			p.SetState(3035)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserSELECT:
				{
					p.SetState(3033)
					p.QuerySpecification()
				}

			case MySqlParserLR_BRACKET:
				{
					p.SetState(3034)
					p.QueryExpression()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(3040)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 405, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3039)
				p.OrderByClause()
			}

		}
		p.SetState(3043)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIMIT {
			{
				p.SetState(3042)
				p.LimitClause()
			}

		}
		p.SetState(3046)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 407, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3045)
				p.LockClause()
			}

		}

	case 4:
		localctx = NewUnionParenthesisSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3048)
			p.QueryExpressionNointo()
		}
		p.SetState(3050)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(3049)
					p.UnionParenthesis()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3052)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 408, p.GetParserRuleContext())
		}
		p.SetState(3059)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUNION {
			{
				p.SetState(3054)
				p.Match(MySqlParserUNION)
			}
			p.SetState(3056)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserALL || _la == MySqlParserDISTINCT {
				{
					p.SetState(3055)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*UnionParenthesisSelectContext).unionType = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*UnionParenthesisSelectContext).unionType = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			{
				p.SetState(3058)
				p.QueryExpression()
			}

		}
		p.SetState(3062)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 411, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3061)
				p.OrderByClause()
			}

		}
		p.SetState(3065)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIMIT {
			{
				p.SetState(3064)
				p.LimitClause()
			}

		}
		p.SetState(3068)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 413, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3067)
				p.LockClause()
			}

		}

	}

	return localctx
}

// IUpdateStatementContext is an interface to support dynamic dispatch.
type IUpdateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateStatementContext differentiates from other interfaces.
	IsUpdateStatementContext()
}

type UpdateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateStatementContext() *UpdateStatementContext {
	var p = new(UpdateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_updateStatement
	return p
}

func (*UpdateStatementContext) IsUpdateStatementContext() {}

func NewUpdateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateStatementContext {
	var p = new(UpdateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_updateStatement

	return p
}

func (s *UpdateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateStatementContext) SingleUpdateStatement() ISingleUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleUpdateStatementContext)
}

func (s *UpdateStatementContext) MultipleUpdateStatement() IMultipleUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultipleUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultipleUpdateStatementContext)
}

func (s *UpdateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUpdateStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UpdateStatement() (localctx IUpdateStatementContext) {
	localctx = NewUpdateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, MySqlParserRULE_updateStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3074)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 415, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3072)
			p.SingleUpdateStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3073)
			p.MultipleUpdateStatement()
		}

	}

	return localctx
}

// IInsertStatementValueContext is an interface to support dynamic dispatch.
type IInsertStatementValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetInsertFormat returns the insertFormat token.
	GetInsertFormat() antlr.Token

	// SetInsertFormat sets the insertFormat token.
	SetInsertFormat(antlr.Token)

	// IsInsertStatementValueContext differentiates from other interfaces.
	IsInsertStatementValueContext()
}

type InsertStatementValueContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	insertFormat antlr.Token
}

func NewEmptyInsertStatementValueContext() *InsertStatementValueContext {
	var p = new(InsertStatementValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_insertStatementValue
	return p
}

func (*InsertStatementValueContext) IsInsertStatementValueContext() {}

func NewInsertStatementValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertStatementValueContext {
	var p = new(InsertStatementValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_insertStatementValue

	return p
}

func (s *InsertStatementValueContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertStatementValueContext) GetInsertFormat() antlr.Token { return s.insertFormat }

func (s *InsertStatementValueContext) SetInsertFormat(v antlr.Token) { s.insertFormat = v }

func (s *InsertStatementValueContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *InsertStatementValueContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *InsertStatementValueContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *InsertStatementValueContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *InsertStatementValueContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *InsertStatementValueContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUES, 0)
}

func (s *InsertStatementValueContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *InsertStatementValueContext) AllExpressionsWithDefaults() []IExpressionsWithDefaultsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionsWithDefaultsContext)(nil)).Elem())
	var tst = make([]IExpressionsWithDefaultsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionsWithDefaultsContext)
		}
	}

	return tst
}

func (s *InsertStatementValueContext) ExpressionsWithDefaults(i int) IExpressionsWithDefaultsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsWithDefaultsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionsWithDefaultsContext)
}

func (s *InsertStatementValueContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *InsertStatementValueContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *InsertStatementValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertStatementValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertStatementValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitInsertStatementValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) InsertStatementValue() (localctx IInsertStatementValueContext) {
	localctx = NewInsertStatementValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, MySqlParserRULE_insertStatementValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3094)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSELECT, MySqlParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3076)
			p.SelectStatement()
		}

	case MySqlParserVALUES, MySqlParserVALUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3077)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*InsertStatementValueContext).insertFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserVALUES || _la == MySqlParserVALUE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*InsertStatementValueContext).insertFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3078)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(3080)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 416, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3079)
				p.ExpressionsWithDefaults()
			}

		}
		{
			p.SetState(3082)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(3091)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3083)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3084)
				p.Match(MySqlParserLR_BRACKET)
			}
			p.SetState(3086)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 417, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(3085)
					p.ExpressionsWithDefaults()
				}

			}
			{
				p.SetState(3088)
				p.Match(MySqlParserRR_BRACKET)
			}

			p.SetState(3093)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUpdatedElementContext is an interface to support dynamic dispatch.
type IUpdatedElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdatedElementContext differentiates from other interfaces.
	IsUpdatedElementContext()
}

type UpdatedElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdatedElementContext() *UpdatedElementContext {
	var p = new(UpdatedElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_updatedElement
	return p
}

func (*UpdatedElementContext) IsUpdatedElementContext() {}

func NewUpdatedElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdatedElementContext {
	var p = new(UpdatedElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_updatedElement

	return p
}

func (s *UpdatedElementContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdatedElementContext) FullColumnName() IFullColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullColumnNameContext)
}

func (s *UpdatedElementContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *UpdatedElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UpdatedElementContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *UpdatedElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdatedElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdatedElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUpdatedElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UpdatedElement() (localctx IUpdatedElementContext) {
	localctx = NewUpdatedElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, MySqlParserRULE_updatedElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3096)
		p.FullColumnName()
	}
	{
		p.SetState(3097)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	p.SetState(3100)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 420, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3098)
			p.expression(0)
		}

	case 2:
		{
			p.SetState(3099)
			p.Match(MySqlParserDEFAULT)
		}

	}

	return localctx
}

// IAssignmentFieldContext is an interface to support dynamic dispatch.
type IAssignmentFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentFieldContext differentiates from other interfaces.
	IsAssignmentFieldContext()
}

type AssignmentFieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentFieldContext() *AssignmentFieldContext {
	var p = new(AssignmentFieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_assignmentField
	return p
}

func (*AssignmentFieldContext) IsAssignmentFieldContext() {}

func NewAssignmentFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentFieldContext {
	var p = new(AssignmentFieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_assignmentField

	return p
}

func (s *AssignmentFieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentFieldContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AssignmentFieldContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *AssignmentFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentFieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAssignmentField(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AssignmentField() (localctx IAssignmentFieldContext) {
	localctx = NewAssignmentFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, MySqlParserRULE_assignmentField)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3104)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3102)
			p.Uid()
		}

	case MySqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3103)
			p.Match(MySqlParserLOCAL_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILockClauseContext is an interface to support dynamic dispatch.
type ILockClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockClauseContext differentiates from other interfaces.
	IsLockClauseContext()
}

type LockClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockClauseContext() *LockClauseContext {
	var p = new(LockClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lockClause
	return p
}

func (*LockClauseContext) IsLockClauseContext() {}

func NewLockClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockClauseContext {
	var p = new(LockClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lockClause

	return p
}

func (s *LockClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LockClauseContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *LockClauseContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *LockClauseContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *LockClauseContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *LockClauseContext) SHARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARE, 0)
}

func (s *LockClauseContext) MODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODE, 0)
}

func (s *LockClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLockClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LockClause() (localctx ILockClauseContext) {
	localctx = NewLockClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, MySqlParserRULE_lockClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3112)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserFOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3106)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(3107)
			p.Match(MySqlParserUPDATE)
		}

	case MySqlParserLOCK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3108)
			p.Match(MySqlParserLOCK)
		}
		{
			p.SetState(3109)
			p.Match(MySqlParserIN)
		}
		{
			p.SetState(3110)
			p.Match(MySqlParserSHARE)
		}
		{
			p.SetState(3111)
			p.Match(MySqlParserMODE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISingleDeleteStatementContext is an interface to support dynamic dispatch.
type ISingleDeleteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// IsSingleDeleteStatementContext differentiates from other interfaces.
	IsSingleDeleteStatementContext()
}

type SingleDeleteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	priority antlr.Token
}

func NewEmptySingleDeleteStatementContext() *SingleDeleteStatementContext {
	var p = new(SingleDeleteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_singleDeleteStatement
	return p
}

func (*SingleDeleteStatementContext) IsSingleDeleteStatementContext() {}

func NewSingleDeleteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleDeleteStatementContext {
	var p = new(SingleDeleteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_singleDeleteStatement

	return p
}

func (s *SingleDeleteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleDeleteStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *SingleDeleteStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *SingleDeleteStatementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *SingleDeleteStatementContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *SingleDeleteStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *SingleDeleteStatementContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *SingleDeleteStatementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *SingleDeleteStatementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *SingleDeleteStatementContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SingleDeleteStatementContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *SingleDeleteStatementContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SingleDeleteStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *SingleDeleteStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SingleDeleteStatementContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *SingleDeleteStatementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *SingleDeleteStatementContext) LimitClauseAtom() ILimitClauseAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseAtomContext)
}

func (s *SingleDeleteStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *SingleDeleteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleDeleteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleDeleteStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSingleDeleteStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SingleDeleteStatement() (localctx ISingleDeleteStatementContext) {
	localctx = NewSingleDeleteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, MySqlParserRULE_singleDeleteStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3114)
		p.Match(MySqlParserDELETE)
	}
	p.SetState(3116)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(3115)

			var _m = p.Match(MySqlParserLOW_PRIORITY)

			localctx.(*SingleDeleteStatementContext).priority = _m
		}

	}
	p.SetState(3119)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserQUICK {
		{
			p.SetState(3118)
			p.Match(MySqlParserQUICK)
		}

	}
	p.SetState(3122)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(3121)
			p.Match(MySqlParserIGNORE)
		}

	}
	{
		p.SetState(3124)
		p.Match(MySqlParserFROM)
	}
	{
		p.SetState(3125)
		p.TableName()
	}
	p.SetState(3131)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(3126)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(3127)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3128)
			p.UidList()
		}
		{
			p.SetState(3129)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(3135)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3133)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3134)
			p.expression(0)
		}

	}
	p.SetState(3138)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserORDER {
		{
			p.SetState(3137)
			p.OrderByClause()
		}

	}
	p.SetState(3142)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLIMIT {
		{
			p.SetState(3140)
			p.Match(MySqlParserLIMIT)
		}
		{
			p.SetState(3141)
			p.LimitClauseAtom()
		}

	}

	return localctx
}

// IMultipleDeleteStatementContext is an interface to support dynamic dispatch.
type IMultipleDeleteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// IsMultipleDeleteStatementContext differentiates from other interfaces.
	IsMultipleDeleteStatementContext()
}

type MultipleDeleteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	priority antlr.Token
}

func NewEmptyMultipleDeleteStatementContext() *MultipleDeleteStatementContext {
	var p = new(MultipleDeleteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_multipleDeleteStatement
	return p
}

func (*MultipleDeleteStatementContext) IsMultipleDeleteStatementContext() {}

func NewMultipleDeleteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultipleDeleteStatementContext {
	var p = new(MultipleDeleteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_multipleDeleteStatement

	return p
}

func (s *MultipleDeleteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *MultipleDeleteStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *MultipleDeleteStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *MultipleDeleteStatementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *MultipleDeleteStatementContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *MultipleDeleteStatementContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *MultipleDeleteStatementContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *MultipleDeleteStatementContext) TableSources() ITableSourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourcesContext)
}

func (s *MultipleDeleteStatementContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *MultipleDeleteStatementContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *MultipleDeleteStatementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *MultipleDeleteStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *MultipleDeleteStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MultipleDeleteStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *MultipleDeleteStatementContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDOT)
}

func (s *MultipleDeleteStatementContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, i)
}

func (s *MultipleDeleteStatementContext) AllSTAR() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTAR)
}

func (s *MultipleDeleteStatementContext) STAR(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, i)
}

func (s *MultipleDeleteStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *MultipleDeleteStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *MultipleDeleteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultipleDeleteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultipleDeleteStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMultipleDeleteStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) MultipleDeleteStatement() (localctx IMultipleDeleteStatementContext) {
	localctx = NewMultipleDeleteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, MySqlParserRULE_multipleDeleteStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3144)
		p.Match(MySqlParserDELETE)
	}
	p.SetState(3146)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(3145)

			var _m = p.Match(MySqlParserLOW_PRIORITY)

			localctx.(*MultipleDeleteStatementContext).priority = _m
		}

	}
	p.SetState(3149)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 431, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3148)
			p.Match(MySqlParserQUICK)
		}

	}
	p.SetState(3152)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(3151)
			p.Match(MySqlParserIGNORE)
		}

	}
	p.SetState(3193)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		{
			p.SetState(3154)
			p.TableName()
		}
		p.SetState(3157)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDOT {
			{
				p.SetState(3155)
				p.Match(MySqlParserDOT)
			}
			{
				p.SetState(3156)
				p.Match(MySqlParserSTAR)
			}

		}
		p.SetState(3167)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3159)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3160)
				p.TableName()
			}
			p.SetState(3163)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserDOT {
				{
					p.SetState(3161)
					p.Match(MySqlParserDOT)
				}
				{
					p.SetState(3162)
					p.Match(MySqlParserSTAR)
				}

			}

			p.SetState(3169)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3170)
			p.Match(MySqlParserFROM)
		}
		{
			p.SetState(3171)
			p.TableSources()
		}

	case MySqlParserFROM:
		{
			p.SetState(3173)
			p.Match(MySqlParserFROM)
		}
		{
			p.SetState(3174)
			p.TableName()
		}
		p.SetState(3177)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDOT {
			{
				p.SetState(3175)
				p.Match(MySqlParserDOT)
			}
			{
				p.SetState(3176)
				p.Match(MySqlParserSTAR)
			}

		}
		p.SetState(3187)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3179)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3180)
				p.TableName()
			}
			p.SetState(3183)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserDOT {
				{
					p.SetState(3181)
					p.Match(MySqlParserDOT)
				}
				{
					p.SetState(3182)
					p.Match(MySqlParserSTAR)
				}

			}

			p.SetState(3189)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3190)
			p.Match(MySqlParserUSING)
		}
		{
			p.SetState(3191)
			p.TableSources()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3197)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3195)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3196)
			p.expression(0)
		}

	}

	return localctx
}

// IHandlerOpenStatementContext is an interface to support dynamic dispatch.
type IHandlerOpenStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerOpenStatementContext differentiates from other interfaces.
	IsHandlerOpenStatementContext()
}

type HandlerOpenStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerOpenStatementContext() *HandlerOpenStatementContext {
	var p = new(HandlerOpenStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handlerOpenStatement
	return p
}

func (*HandlerOpenStatementContext) IsHandlerOpenStatementContext() {}

func NewHandlerOpenStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerOpenStatementContext {
	var p = new(HandlerOpenStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handlerOpenStatement

	return p
}

func (s *HandlerOpenStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerOpenStatementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *HandlerOpenStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *HandlerOpenStatementContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPEN, 0)
}

func (s *HandlerOpenStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *HandlerOpenStatementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *HandlerOpenStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerOpenStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerOpenStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandlerOpenStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) HandlerOpenStatement() (localctx IHandlerOpenStatementContext) {
	localctx = NewHandlerOpenStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, MySqlParserRULE_handlerOpenStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3199)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(3200)
		p.TableName()
	}
	{
		p.SetState(3201)
		p.Match(MySqlParserOPEN)
	}
	p.SetState(3206)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 442, p.GetParserRuleContext()) == 1 {
		p.SetState(3203)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(3202)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(3205)
			p.Uid()
		}

	}

	return localctx
}

// IHandlerReadIndexStatementContext is an interface to support dynamic dispatch.
type IHandlerReadIndexStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMoveOrder returns the moveOrder token.
	GetMoveOrder() antlr.Token

	// SetMoveOrder sets the moveOrder token.
	SetMoveOrder(antlr.Token)

	// GetIndex returns the index rule contexts.
	GetIndex() IUidContext

	// SetIndex sets the index rule contexts.
	SetIndex(IUidContext)

	// IsHandlerReadIndexStatementContext differentiates from other interfaces.
	IsHandlerReadIndexStatementContext()
}

type HandlerReadIndexStatementContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	index     IUidContext
	moveOrder antlr.Token
}

func NewEmptyHandlerReadIndexStatementContext() *HandlerReadIndexStatementContext {
	var p = new(HandlerReadIndexStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handlerReadIndexStatement
	return p
}

func (*HandlerReadIndexStatementContext) IsHandlerReadIndexStatementContext() {}

func NewHandlerReadIndexStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerReadIndexStatementContext {
	var p = new(HandlerReadIndexStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handlerReadIndexStatement

	return p
}

func (s *HandlerReadIndexStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerReadIndexStatementContext) GetMoveOrder() antlr.Token { return s.moveOrder }

func (s *HandlerReadIndexStatementContext) SetMoveOrder(v antlr.Token) { s.moveOrder = v }

func (s *HandlerReadIndexStatementContext) GetIndex() IUidContext { return s.index }

func (s *HandlerReadIndexStatementContext) SetIndex(v IUidContext) { s.index = v }

func (s *HandlerReadIndexStatementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *HandlerReadIndexStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *HandlerReadIndexStatementContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *HandlerReadIndexStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *HandlerReadIndexStatementContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *HandlerReadIndexStatementContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *HandlerReadIndexStatementContext) Constants() IConstantsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantsContext)
}

func (s *HandlerReadIndexStatementContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *HandlerReadIndexStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *HandlerReadIndexStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *HandlerReadIndexStatementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *HandlerReadIndexStatementContext) LimitClauseAtom() ILimitClauseAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseAtomContext)
}

func (s *HandlerReadIndexStatementContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *HandlerReadIndexStatementContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEXT, 0)
}

func (s *HandlerReadIndexStatementContext) PREV() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREV, 0)
}

func (s *HandlerReadIndexStatementContext) LAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST, 0)
}

func (s *HandlerReadIndexStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerReadIndexStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerReadIndexStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandlerReadIndexStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) HandlerReadIndexStatement() (localctx IHandlerReadIndexStatementContext) {
	localctx = NewHandlerReadIndexStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, MySqlParserRULE_handlerReadIndexStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3208)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(3209)
		p.TableName()
	}
	{
		p.SetState(3210)
		p.Match(MySqlParserREAD)
	}
	{
		p.SetState(3211)

		var _x = p.Uid()

		localctx.(*HandlerReadIndexStatementContext).index = _x
	}
	p.SetState(3218)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserEQUAL_SYMBOL, MySqlParserGREATER_SYMBOL, MySqlParserLESS_SYMBOL, MySqlParserEXCLAMATION_SYMBOL:
		{
			p.SetState(3212)
			p.ComparisonOperator()
		}
		{
			p.SetState(3213)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3214)
			p.Constants()
		}
		{
			p.SetState(3215)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserFIRST, MySqlParserLAST, MySqlParserNEXT, MySqlParserPREV:
		{
			p.SetState(3217)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*HandlerReadIndexStatementContext).moveOrder = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFIRST || _la == MySqlParserLAST || _la == MySqlParserNEXT || _la == MySqlParserPREV) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*HandlerReadIndexStatementContext).moveOrder = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3222)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3220)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3221)
			p.expression(0)
		}

	}
	p.SetState(3226)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLIMIT {
		{
			p.SetState(3224)
			p.Match(MySqlParserLIMIT)
		}
		{
			p.SetState(3225)
			p.LimitClauseAtom()
		}

	}

	return localctx
}

// IHandlerReadStatementContext is an interface to support dynamic dispatch.
type IHandlerReadStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMoveOrder returns the moveOrder token.
	GetMoveOrder() antlr.Token

	// SetMoveOrder sets the moveOrder token.
	SetMoveOrder(antlr.Token)

	// IsHandlerReadStatementContext differentiates from other interfaces.
	IsHandlerReadStatementContext()
}

type HandlerReadStatementContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	moveOrder antlr.Token
}

func NewEmptyHandlerReadStatementContext() *HandlerReadStatementContext {
	var p = new(HandlerReadStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handlerReadStatement
	return p
}

func (*HandlerReadStatementContext) IsHandlerReadStatementContext() {}

func NewHandlerReadStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerReadStatementContext {
	var p = new(HandlerReadStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handlerReadStatement

	return p
}

func (s *HandlerReadStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerReadStatementContext) GetMoveOrder() antlr.Token { return s.moveOrder }

func (s *HandlerReadStatementContext) SetMoveOrder(v antlr.Token) { s.moveOrder = v }

func (s *HandlerReadStatementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *HandlerReadStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *HandlerReadStatementContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *HandlerReadStatementContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *HandlerReadStatementContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEXT, 0)
}

func (s *HandlerReadStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *HandlerReadStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *HandlerReadStatementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *HandlerReadStatementContext) LimitClauseAtom() ILimitClauseAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseAtomContext)
}

func (s *HandlerReadStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerReadStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerReadStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandlerReadStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) HandlerReadStatement() (localctx IHandlerReadStatementContext) {
	localctx = NewHandlerReadStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, MySqlParserRULE_handlerReadStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3228)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(3229)
		p.TableName()
	}
	{
		p.SetState(3230)
		p.Match(MySqlParserREAD)
	}
	{
		p.SetState(3231)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*HandlerReadStatementContext).moveOrder = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFIRST || _la == MySqlParserNEXT) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*HandlerReadStatementContext).moveOrder = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(3234)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3232)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3233)
			p.expression(0)
		}

	}
	p.SetState(3238)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLIMIT {
		{
			p.SetState(3236)
			p.Match(MySqlParserLIMIT)
		}
		{
			p.SetState(3237)
			p.LimitClauseAtom()
		}

	}

	return localctx
}

// IHandlerCloseStatementContext is an interface to support dynamic dispatch.
type IHandlerCloseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerCloseStatementContext differentiates from other interfaces.
	IsHandlerCloseStatementContext()
}

type HandlerCloseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerCloseStatementContext() *HandlerCloseStatementContext {
	var p = new(HandlerCloseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handlerCloseStatement
	return p
}

func (*HandlerCloseStatementContext) IsHandlerCloseStatementContext() {}

func NewHandlerCloseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerCloseStatementContext {
	var p = new(HandlerCloseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handlerCloseStatement

	return p
}

func (s *HandlerCloseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerCloseStatementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *HandlerCloseStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *HandlerCloseStatementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLOSE, 0)
}

func (s *HandlerCloseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerCloseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerCloseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandlerCloseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) HandlerCloseStatement() (localctx IHandlerCloseStatementContext) {
	localctx = NewHandlerCloseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, MySqlParserRULE_handlerCloseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3240)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(3241)
		p.TableName()
	}
	{
		p.SetState(3242)
		p.Match(MySqlParserCLOSE)
	}

	return localctx
}

// ISingleUpdateStatementContext is an interface to support dynamic dispatch.
type ISingleUpdateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// IsSingleUpdateStatementContext differentiates from other interfaces.
	IsSingleUpdateStatementContext()
}

type SingleUpdateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	priority antlr.Token
}

func NewEmptySingleUpdateStatementContext() *SingleUpdateStatementContext {
	var p = new(SingleUpdateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_singleUpdateStatement
	return p
}

func (*SingleUpdateStatementContext) IsSingleUpdateStatementContext() {}

func NewSingleUpdateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleUpdateStatementContext {
	var p = new(SingleUpdateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_singleUpdateStatement

	return p
}

func (s *SingleUpdateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleUpdateStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *SingleUpdateStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *SingleUpdateStatementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *SingleUpdateStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *SingleUpdateStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SingleUpdateStatementContext) AllUpdatedElement() []IUpdatedElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem())
	var tst = make([]IUpdatedElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdatedElementContext)
		}
	}

	return tst
}

func (s *SingleUpdateStatementContext) UpdatedElement(i int) IUpdatedElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdatedElementContext)
}

func (s *SingleUpdateStatementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *SingleUpdateStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SingleUpdateStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SingleUpdateStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SingleUpdateStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *SingleUpdateStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SingleUpdateStatementContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *SingleUpdateStatementContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *SingleUpdateStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *SingleUpdateStatementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SingleUpdateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleUpdateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleUpdateStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSingleUpdateStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SingleUpdateStatement() (localctx ISingleUpdateStatementContext) {
	localctx = NewSingleUpdateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, MySqlParserRULE_singleUpdateStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3244)
		p.Match(MySqlParserUPDATE)
	}
	p.SetState(3246)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(3245)

			var _m = p.Match(MySqlParserLOW_PRIORITY)

			localctx.(*SingleUpdateStatementContext).priority = _m
		}

	}
	p.SetState(3249)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(3248)
			p.Match(MySqlParserIGNORE)
		}

	}
	{
		p.SetState(3251)
		p.TableName()
	}
	p.SetState(3256)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-11)&-(0x1f+1)) == 0 && ((1<<uint((_la-11)))&((1<<(MySqlParserAS-11))|(1<<(MySqlParserCURRENT-11))|(1<<(MySqlParserDATABASE-11)))) != 0) || _la == MySqlParserDIAGNOSTICS || _la == MySqlParserGROUP || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(MySqlParserLEFT-88))|(1<<(MySqlParserNUMBER-88))|(1<<(MySqlParserORDER-88)))) != 0) || (((_la-135)&-(0x1f+1)) == 0 && ((1<<uint((_la-135)))&((1<<(MySqlParserRIGHT-135))|(1<<(MySqlParserSCHEMA-135))|(1<<(MySqlParserSTACKED-135)))) != 0) || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		p.SetState(3253)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(3252)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(3255)
			p.Uid()
		}

	}
	{
		p.SetState(3258)
		p.Match(MySqlParserSET)
	}
	{
		p.SetState(3259)
		p.UpdatedElement()
	}
	p.SetState(3264)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3260)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3261)
			p.UpdatedElement()
		}

		p.SetState(3266)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3269)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3267)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3268)
			p.expression(0)
		}

	}
	p.SetState(3272)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserORDER {
		{
			p.SetState(3271)
			p.OrderByClause()
		}

	}
	p.SetState(3275)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLIMIT {
		{
			p.SetState(3274)
			p.LimitClause()
		}

	}

	return localctx
}

// IMultipleUpdateStatementContext is an interface to support dynamic dispatch.
type IMultipleUpdateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// IsMultipleUpdateStatementContext differentiates from other interfaces.
	IsMultipleUpdateStatementContext()
}

type MultipleUpdateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	priority antlr.Token
}

func NewEmptyMultipleUpdateStatementContext() *MultipleUpdateStatementContext {
	var p = new(MultipleUpdateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_multipleUpdateStatement
	return p
}

func (*MultipleUpdateStatementContext) IsMultipleUpdateStatementContext() {}

func NewMultipleUpdateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultipleUpdateStatementContext {
	var p = new(MultipleUpdateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_multipleUpdateStatement

	return p
}

func (s *MultipleUpdateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *MultipleUpdateStatementContext) GetPriority() antlr.Token { return s.priority }

func (s *MultipleUpdateStatementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *MultipleUpdateStatementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *MultipleUpdateStatementContext) TableSources() ITableSourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourcesContext)
}

func (s *MultipleUpdateStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *MultipleUpdateStatementContext) AllUpdatedElement() []IUpdatedElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem())
	var tst = make([]IUpdatedElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdatedElementContext)
		}
	}

	return tst
}

func (s *MultipleUpdateStatementContext) UpdatedElement(i int) IUpdatedElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdatedElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdatedElementContext)
}

func (s *MultipleUpdateStatementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *MultipleUpdateStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *MultipleUpdateStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *MultipleUpdateStatementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *MultipleUpdateStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MultipleUpdateStatementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *MultipleUpdateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultipleUpdateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultipleUpdateStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMultipleUpdateStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) MultipleUpdateStatement() (localctx IMultipleUpdateStatementContext) {
	localctx = NewMultipleUpdateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, MySqlParserRULE_multipleUpdateStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3277)
		p.Match(MySqlParserUPDATE)
	}
	p.SetState(3279)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(3278)

			var _m = p.Match(MySqlParserLOW_PRIORITY)

			localctx.(*MultipleUpdateStatementContext).priority = _m
		}

	}
	p.SetState(3282)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(3281)
			p.Match(MySqlParserIGNORE)
		}

	}
	{
		p.SetState(3284)
		p.TableSources()
	}
	{
		p.SetState(3285)
		p.Match(MySqlParserSET)
	}
	{
		p.SetState(3286)
		p.UpdatedElement()
	}
	p.SetState(3291)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3287)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3288)
			p.UpdatedElement()
		}

		p.SetState(3293)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3296)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3294)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3295)
			p.expression(0)
		}

	}

	return localctx
}

// IOrderByClauseContext is an interface to support dynamic dispatch.
type IOrderByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrderByClauseContext differentiates from other interfaces.
	IsOrderByClauseContext()
}

type OrderByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderByClauseContext() *OrderByClauseContext {
	var p = new(OrderByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_orderByClause
	return p
}

func (*OrderByClauseContext) IsOrderByClauseContext() {}

func NewOrderByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderByClauseContext {
	var p = new(OrderByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_orderByClause

	return p
}

func (s *OrderByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderByClauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *OrderByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *OrderByClauseContext) AllOrderByExpression() []IOrderByExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrderByExpressionContext)(nil)).Elem())
	var tst = make([]IOrderByExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrderByExpressionContext)
		}
	}

	return tst
}

func (s *OrderByClauseContext) OrderByExpression(i int) IOrderByExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrderByExpressionContext)
}

func (s *OrderByClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *OrderByClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *OrderByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitOrderByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) OrderByClause() (localctx IOrderByClauseContext) {
	localctx = NewOrderByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, MySqlParserRULE_orderByClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3298)
		p.Match(MySqlParserORDER)
	}
	{
		p.SetState(3299)
		p.Match(MySqlParserBY)
	}
	{
		p.SetState(3300)
		p.OrderByExpression()
	}
	p.SetState(3305)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3301)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3302)
			p.OrderByExpression()
		}

		p.SetState(3307)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IOrderByExpressionContext is an interface to support dynamic dispatch.
type IOrderByExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOrder returns the order token.
	GetOrder() antlr.Token

	// SetOrder sets the order token.
	SetOrder(antlr.Token)

	// IsOrderByExpressionContext differentiates from other interfaces.
	IsOrderByExpressionContext()
}

type OrderByExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	order  antlr.Token
}

func NewEmptyOrderByExpressionContext() *OrderByExpressionContext {
	var p = new(OrderByExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_orderByExpression
	return p
}

func (*OrderByExpressionContext) IsOrderByExpressionContext() {}

func NewOrderByExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderByExpressionContext {
	var p = new(OrderByExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_orderByExpression

	return p
}

func (s *OrderByExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderByExpressionContext) GetOrder() antlr.Token { return s.order }

func (s *OrderByExpressionContext) SetOrder(v antlr.Token) { s.order = v }

func (s *OrderByExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OrderByExpressionContext) ASC() antlr.TerminalNode {
	return s.GetToken(MySqlParserASC, 0)
}

func (s *OrderByExpressionContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *OrderByExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderByExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderByExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitOrderByExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) OrderByExpression() (localctx IOrderByExpressionContext) {
	localctx = NewOrderByExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, MySqlParserRULE_orderByExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3308)
		p.expression(0)
	}
	p.SetState(3310)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 461, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3309)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*OrderByExpressionContext).order = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserASC || _la == MySqlParserDESC) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*OrderByExpressionContext).order = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// ITableSourcesContext is an interface to support dynamic dispatch.
type ITableSourcesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableSourcesContext differentiates from other interfaces.
	IsTableSourcesContext()
}

type TableSourcesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableSourcesContext() *TableSourcesContext {
	var p = new(TableSourcesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableSources
	return p
}

func (*TableSourcesContext) IsTableSourcesContext() {}

func NewTableSourcesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableSourcesContext {
	var p = new(TableSourcesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableSources

	return p
}

func (s *TableSourcesContext) GetParser() antlr.Parser { return s.parser }

func (s *TableSourcesContext) AllTableSource() []ITableSourceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableSourceContext)(nil)).Elem())
	var tst = make([]ITableSourceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableSourceContext)
		}
	}

	return tst
}

func (s *TableSourcesContext) TableSource(i int) ITableSourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableSourceContext)
}

func (s *TableSourcesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *TableSourcesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *TableSourcesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourcesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableSourcesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableSources(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TableSources() (localctx ITableSourcesContext) {
	localctx = NewTableSourcesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, MySqlParserRULE_tableSources)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3312)
		p.TableSource()
	}
	p.SetState(3317)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3313)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3314)
			p.TableSource()
		}

		p.SetState(3319)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITableSourceContext is an interface to support dynamic dispatch.
type ITableSourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableSourceContext differentiates from other interfaces.
	IsTableSourceContext()
}

type TableSourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableSourceContext() *TableSourceContext {
	var p = new(TableSourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableSource
	return p
}

func (*TableSourceContext) IsTableSourceContext() {}

func NewTableSourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableSourceContext {
	var p = new(TableSourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableSource

	return p
}

func (s *TableSourceContext) GetParser() antlr.Parser { return s.parser }

func (s *TableSourceContext) CopyFrom(ctx *TableSourceContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TableSourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TableSourceNestedContext struct {
	*TableSourceContext
}

func NewTableSourceNestedContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableSourceNestedContext {
	var p = new(TableSourceNestedContext)

	p.TableSourceContext = NewEmptyTableSourceContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableSourceContext))

	return p
}

func (s *TableSourceNestedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourceNestedContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *TableSourceNestedContext) TableSourceItem() ITableSourceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceItemContext)
}

func (s *TableSourceNestedContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *TableSourceNestedContext) AllJoinPart() []IJoinPartContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoinPartContext)(nil)).Elem())
	var tst = make([]IJoinPartContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoinPartContext)
		}
	}

	return tst
}

func (s *TableSourceNestedContext) JoinPart(i int) IJoinPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinPartContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoinPartContext)
}

func (s *TableSourceNestedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableSourceNested(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableSourceBaseContext struct {
	*TableSourceContext
}

func NewTableSourceBaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableSourceBaseContext {
	var p = new(TableSourceBaseContext)

	p.TableSourceContext = NewEmptyTableSourceContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableSourceContext))

	return p
}

func (s *TableSourceBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourceBaseContext) TableSourceItem() ITableSourceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceItemContext)
}

func (s *TableSourceBaseContext) AllJoinPart() []IJoinPartContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoinPartContext)(nil)).Elem())
	var tst = make([]IJoinPartContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoinPartContext)
		}
	}

	return tst
}

func (s *TableSourceBaseContext) JoinPart(i int) IJoinPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinPartContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoinPartContext)
}

func (s *TableSourceBaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableSourceBase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TableSource() (localctx ITableSourceContext) {
	localctx = NewTableSourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, MySqlParserRULE_tableSource)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3337)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 465, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTableSourceBaseContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3320)
			p.TableSourceItem()
		}
		p.SetState(3324)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 463, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3321)
					p.JoinPart()
				}

			}
			p.SetState(3326)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 463, p.GetParserRuleContext())
		}

	case 2:
		localctx = NewTableSourceNestedContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3327)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3328)
			p.TableSourceItem()
		}
		p.SetState(3332)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCROSS || (((_la-75)&-(0x1f+1)) == 0 && ((1<<uint((_la-75)))&((1<<(MySqlParserINNER-75))|(1<<(MySqlParserJOIN-75))|(1<<(MySqlParserLEFT-75))|(1<<(MySqlParserNATURAL-75)))) != 0) || _la == MySqlParserRIGHT || _la == MySqlParserSTRAIGHT_JOIN {
			{
				p.SetState(3329)
				p.JoinPart()
			}

			p.SetState(3334)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3335)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ITableSourceItemContext is an interface to support dynamic dispatch.
type ITableSourceItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableSourceItemContext differentiates from other interfaces.
	IsTableSourceItemContext()
}

type TableSourceItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableSourceItemContext() *TableSourceItemContext {
	var p = new(TableSourceItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableSourceItem
	return p
}

func (*TableSourceItemContext) IsTableSourceItemContext() {}

func NewTableSourceItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableSourceItemContext {
	var p = new(TableSourceItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableSourceItem

	return p
}

func (s *TableSourceItemContext) GetParser() antlr.Parser { return s.parser }

func (s *TableSourceItemContext) CopyFrom(ctx *TableSourceItemContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TableSourceItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourceItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SubqueryTableItemContext struct {
	*TableSourceItemContext
	parenthesisSubquery ISelectStatementContext
	alias               IUidContext
}

func NewSubqueryTableItemContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryTableItemContext {
	var p = new(SubqueryTableItemContext)

	p.TableSourceItemContext = NewEmptyTableSourceItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableSourceItemContext))

	return p
}

func (s *SubqueryTableItemContext) GetParenthesisSubquery() ISelectStatementContext {
	return s.parenthesisSubquery
}

func (s *SubqueryTableItemContext) GetAlias() IUidContext { return s.alias }

func (s *SubqueryTableItemContext) SetParenthesisSubquery(v ISelectStatementContext) {
	s.parenthesisSubquery = v
}

func (s *SubqueryTableItemContext) SetAlias(v IUidContext) { s.alias = v }

func (s *SubqueryTableItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryTableItemContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SubqueryTableItemContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *SubqueryTableItemContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SubqueryTableItemContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SubqueryTableItemContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SubqueryTableItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSubqueryTableItem(s)

	default:
		return t.VisitChildren(s)
	}
}

type AtomTableItemContext struct {
	*TableSourceItemContext
	alias IUidContext
}

func NewAtomTableItemContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AtomTableItemContext {
	var p = new(AtomTableItemContext)

	p.TableSourceItemContext = NewEmptyTableSourceItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableSourceItemContext))

	return p
}

func (s *AtomTableItemContext) GetAlias() IUidContext { return s.alias }

func (s *AtomTableItemContext) SetAlias(v IUidContext) { s.alias = v }

func (s *AtomTableItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtomTableItemContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *AtomTableItemContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AtomTableItemContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AtomTableItemContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *AtomTableItemContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AtomTableItemContext) AllIndexHint() []IIndexHintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexHintContext)(nil)).Elem())
	var tst = make([]IIndexHintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexHintContext)
		}
	}

	return tst
}

func (s *AtomTableItemContext) IndexHint(i int) IIndexHintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexHintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexHintContext)
}

func (s *AtomTableItemContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AtomTableItemContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *AtomTableItemContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AtomTableItemContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AtomTableItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAtomTableItem(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableSourcesItemContext struct {
	*TableSourceItemContext
}

func NewTableSourcesItemContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableSourcesItemContext {
	var p = new(TableSourcesItemContext)

	p.TableSourceItemContext = NewEmptyTableSourceItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TableSourceItemContext))

	return p
}

func (s *TableSourcesItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourcesItemContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *TableSourcesItemContext) TableSources() ITableSourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourcesContext)
}

func (s *TableSourcesItemContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *TableSourcesItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableSourcesItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TableSourceItem() (localctx ITableSourceItemContext) {
	localctx = NewTableSourceItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, MySqlParserRULE_tableSourceItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3379)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 473, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAtomTableItemContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3339)
			p.TableName()
		}
		p.SetState(3345)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPARTITION {
			{
				p.SetState(3340)
				p.Match(MySqlParserPARTITION)
			}
			{
				p.SetState(3341)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(3342)
				p.UidList()
			}
			{
				p.SetState(3343)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		p.SetState(3351)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 468, p.GetParserRuleContext()) == 1 {
			p.SetState(3348)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAS {
				{
					p.SetState(3347)
					p.Match(MySqlParserAS)
				}

			}
			{
				p.SetState(3350)

				var _x = p.Uid()

				localctx.(*AtomTableItemContext).alias = _x
			}

		}
		p.SetState(3361)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 470, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3353)
				p.IndexHint()
			}
			p.SetState(3358)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 469, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(3354)
						p.Match(MySqlParserCOMMA)
					}
					{
						p.SetState(3355)
						p.IndexHint()
					}

				}
				p.SetState(3360)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 469, p.GetParserRuleContext())
			}

		}

	case 2:
		localctx = NewSubqueryTableItemContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3368)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 471, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3363)
				p.SelectStatement()
			}

		case 2:
			{
				p.SetState(3364)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(3365)

				var _x = p.SelectStatement()

				localctx.(*SubqueryTableItemContext).parenthesisSubquery = _x
			}
			{
				p.SetState(3366)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		p.SetState(3371)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(3370)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(3373)

			var _x = p.Uid()

			localctx.(*SubqueryTableItemContext).alias = _x
		}

	case 3:
		localctx = NewTableSourcesItemContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3375)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3376)
			p.TableSources()
		}
		{
			p.SetState(3377)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IIndexHintContext is an interface to support dynamic dispatch.
type IIndexHintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndexHintAction returns the indexHintAction token.
	GetIndexHintAction() antlr.Token

	// GetKeyFormat returns the keyFormat token.
	GetKeyFormat() antlr.Token

	// SetIndexHintAction sets the indexHintAction token.
	SetIndexHintAction(antlr.Token)

	// SetKeyFormat sets the keyFormat token.
	SetKeyFormat(antlr.Token)

	// IsIndexHintContext differentiates from other interfaces.
	IsIndexHintContext()
}

type IndexHintContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	indexHintAction antlr.Token
	keyFormat       antlr.Token
}

func NewEmptyIndexHintContext() *IndexHintContext {
	var p = new(IndexHintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexHint
	return p
}

func (*IndexHintContext) IsIndexHintContext() {}

func NewIndexHintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexHintContext {
	var p = new(IndexHintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexHint

	return p
}

func (s *IndexHintContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexHintContext) GetIndexHintAction() antlr.Token { return s.indexHintAction }

func (s *IndexHintContext) GetKeyFormat() antlr.Token { return s.keyFormat }

func (s *IndexHintContext) SetIndexHintAction(v antlr.Token) { s.indexHintAction = v }

func (s *IndexHintContext) SetKeyFormat(v antlr.Token) { s.keyFormat = v }

func (s *IndexHintContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *IndexHintContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *IndexHintContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *IndexHintContext) USE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE, 0)
}

func (s *IndexHintContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *IndexHintContext) FORCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFORCE, 0)
}

func (s *IndexHintContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *IndexHintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *IndexHintContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *IndexHintContext) IndexHintType() IIndexHintTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexHintTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexHintTypeContext)
}

func (s *IndexHintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexHintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexHintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIndexHint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IndexHint() (localctx IIndexHintContext) {
	localctx = NewIndexHintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, MySqlParserRULE_indexHint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3381)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*IndexHintContext).indexHintAction = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFORCE || _la == MySqlParserIGNORE || _la == MySqlParserUSE) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*IndexHintContext).indexHintAction = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(3382)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*IndexHintContext).keyFormat = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*IndexHintContext).keyFormat = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(3385)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(3383)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(3384)
			p.IndexHintType()
		}

	}
	{
		p.SetState(3387)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(3388)
		p.UidList()
	}
	{
		p.SetState(3389)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IIndexHintTypeContext is an interface to support dynamic dispatch.
type IIndexHintTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexHintTypeContext differentiates from other interfaces.
	IsIndexHintTypeContext()
}

type IndexHintTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexHintTypeContext() *IndexHintTypeContext {
	var p = new(IndexHintTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexHintType
	return p
}

func (*IndexHintTypeContext) IsIndexHintTypeContext() {}

func NewIndexHintTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexHintTypeContext {
	var p = new(IndexHintTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexHintType

	return p
}

func (s *IndexHintTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexHintTypeContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *IndexHintTypeContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *IndexHintTypeContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *IndexHintTypeContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *IndexHintTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexHintTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexHintTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIndexHintType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IndexHintType() (localctx IIndexHintTypeContext) {
	localctx = NewIndexHintTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, MySqlParserRULE_indexHintType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3396)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserJOIN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3391)
			p.Match(MySqlParserJOIN)
		}

	case MySqlParserORDER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3392)
			p.Match(MySqlParserORDER)
		}
		{
			p.SetState(3393)
			p.Match(MySqlParserBY)
		}

	case MySqlParserGROUP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3394)
			p.Match(MySqlParserGROUP)
		}
		{
			p.SetState(3395)
			p.Match(MySqlParserBY)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IJoinPartContext is an interface to support dynamic dispatch.
type IJoinPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoinPartContext differentiates from other interfaces.
	IsJoinPartContext()
}

type JoinPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinPartContext() *JoinPartContext {
	var p = new(JoinPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_joinPart
	return p
}

func (*JoinPartContext) IsJoinPartContext() {}

func NewJoinPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinPartContext {
	var p = new(JoinPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_joinPart

	return p
}

func (s *JoinPartContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinPartContext) CopyFrom(ctx *JoinPartContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *JoinPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InnerJoinContext struct {
	*JoinPartContext
}

func NewInnerJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InnerJoinContext {
	var p = new(InnerJoinContext)

	p.JoinPartContext = NewEmptyJoinPartContext()
	p.parser = parser
	p.CopyFrom(ctx.(*JoinPartContext))

	return p
}

func (s *InnerJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InnerJoinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *InnerJoinContext) TableSourceItem() ITableSourceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceItemContext)
}

func (s *InnerJoinContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *InnerJoinContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InnerJoinContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *InnerJoinContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *InnerJoinContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *InnerJoinContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *InnerJoinContext) INNER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNER, 0)
}

func (s *InnerJoinContext) CROSS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCROSS, 0)
}

func (s *InnerJoinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitInnerJoin(s)

	default:
		return t.VisitChildren(s)
	}
}

type NaturalJoinContext struct {
	*JoinPartContext
}

func NewNaturalJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NaturalJoinContext {
	var p = new(NaturalJoinContext)

	p.JoinPartContext = NewEmptyJoinPartContext()
	p.parser = parser
	p.CopyFrom(ctx.(*JoinPartContext))

	return p
}

func (s *NaturalJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NaturalJoinContext) NATURAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNATURAL, 0)
}

func (s *NaturalJoinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *NaturalJoinContext) TableSourceItem() ITableSourceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceItemContext)
}

func (s *NaturalJoinContext) LEFT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEFT, 0)
}

func (s *NaturalJoinContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRIGHT, 0)
}

func (s *NaturalJoinContext) OUTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserOUTER, 0)
}

func (s *NaturalJoinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitNaturalJoin(s)

	default:
		return t.VisitChildren(s)
	}
}

type OuterJoinContext struct {
	*JoinPartContext
}

func NewOuterJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OuterJoinContext {
	var p = new(OuterJoinContext)

	p.JoinPartContext = NewEmptyJoinPartContext()
	p.parser = parser
	p.CopyFrom(ctx.(*JoinPartContext))

	return p
}

func (s *OuterJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OuterJoinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *OuterJoinContext) TableSourceItem() ITableSourceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceItemContext)
}

func (s *OuterJoinContext) LEFT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEFT, 0)
}

func (s *OuterJoinContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRIGHT, 0)
}

func (s *OuterJoinContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *OuterJoinContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OuterJoinContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *OuterJoinContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *OuterJoinContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *OuterJoinContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *OuterJoinContext) OUTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserOUTER, 0)
}

func (s *OuterJoinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitOuterJoin(s)

	default:
		return t.VisitChildren(s)
	}
}

type StraightJoinContext struct {
	*JoinPartContext
}

func NewStraightJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StraightJoinContext {
	var p = new(StraightJoinContext)

	p.JoinPartContext = NewEmptyJoinPartContext()
	p.parser = parser
	p.CopyFrom(ctx.(*JoinPartContext))

	return p
}

func (s *StraightJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StraightJoinContext) STRAIGHT_JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRAIGHT_JOIN, 0)
}

func (s *StraightJoinContext) TableSourceItem() ITableSourceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourceItemContext)
}

func (s *StraightJoinContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *StraightJoinContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StraightJoinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStraightJoin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) JoinPart() (localctx IJoinPartContext) {
	localctx = NewJoinPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, MySqlParserRULE_joinPart)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3442)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCROSS, MySqlParserINNER, MySqlParserJOIN:
		localctx = NewInnerJoinContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3399)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCROSS || _la == MySqlParserINNER {
			{
				p.SetState(3398)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserCROSS || _la == MySqlParserINNER) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(3401)
			p.Match(MySqlParserJOIN)
		}
		{
			p.SetState(3402)
			p.TableSourceItem()
		}
		p.SetState(3410)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 477, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3403)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(3404)
				p.expression(0)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 477, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(3405)
				p.Match(MySqlParserUSING)
			}
			{
				p.SetState(3406)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(3407)
				p.UidList()
			}
			{
				p.SetState(3408)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case MySqlParserSTRAIGHT_JOIN:
		localctx = NewStraightJoinContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3412)
			p.Match(MySqlParserSTRAIGHT_JOIN)
		}
		{
			p.SetState(3413)
			p.TableSourceItem()
		}
		p.SetState(3416)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 478, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3414)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(3415)
				p.expression(0)
			}

		}

	case MySqlParserLEFT, MySqlParserRIGHT:
		localctx = NewOuterJoinContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3418)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserLEFT || _la == MySqlParserRIGHT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(3420)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserOUTER {
			{
				p.SetState(3419)
				p.Match(MySqlParserOUTER)
			}

		}
		{
			p.SetState(3422)
			p.Match(MySqlParserJOIN)
		}
		{
			p.SetState(3423)
			p.TableSourceItem()
		}
		p.SetState(3431)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserON:
			{
				p.SetState(3424)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(3425)
				p.expression(0)
			}

		case MySqlParserUSING:
			{
				p.SetState(3426)
				p.Match(MySqlParserUSING)
			}
			{
				p.SetState(3427)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(3428)
				p.UidList()
			}
			{
				p.SetState(3429)
				p.Match(MySqlParserRR_BRACKET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySqlParserNATURAL:
		localctx = NewNaturalJoinContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3433)
			p.Match(MySqlParserNATURAL)
		}
		p.SetState(3438)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEFT || _la == MySqlParserRIGHT {
			{
				p.SetState(3434)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserLEFT || _la == MySqlParserRIGHT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(3436)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserOUTER {
				{
					p.SetState(3435)
					p.Match(MySqlParserOUTER)
				}

			}

		}
		{
			p.SetState(3440)
			p.Match(MySqlParserJOIN)
		}
		{
			p.SetState(3441)
			p.TableSourceItem()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQueryExpressionContext is an interface to support dynamic dispatch.
type IQueryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryExpressionContext differentiates from other interfaces.
	IsQueryExpressionContext()
}

type QueryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryExpressionContext() *QueryExpressionContext {
	var p = new(QueryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_queryExpression
	return p
}

func (*QueryExpressionContext) IsQueryExpressionContext() {}

func NewQueryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryExpressionContext {
	var p = new(QueryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_queryExpression

	return p
}

func (s *QueryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryExpressionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *QueryExpressionContext) QuerySpecification() IQuerySpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationContext)
}

func (s *QueryExpressionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *QueryExpressionContext) QueryExpression() IQueryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionContext)
}

func (s *QueryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitQueryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) QueryExpression() (localctx IQueryExpressionContext) {
	localctx = NewQueryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, MySqlParserRULE_queryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3452)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 484, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3444)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3445)
			p.QuerySpecification()
		}
		{
			p.SetState(3446)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3448)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3449)
			p.QueryExpression()
		}
		{
			p.SetState(3450)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IQueryExpressionNointoContext is an interface to support dynamic dispatch.
type IQueryExpressionNointoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryExpressionNointoContext differentiates from other interfaces.
	IsQueryExpressionNointoContext()
}

type QueryExpressionNointoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryExpressionNointoContext() *QueryExpressionNointoContext {
	var p = new(QueryExpressionNointoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_queryExpressionNointo
	return p
}

func (*QueryExpressionNointoContext) IsQueryExpressionNointoContext() {}

func NewQueryExpressionNointoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryExpressionNointoContext {
	var p = new(QueryExpressionNointoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_queryExpressionNointo

	return p
}

func (s *QueryExpressionNointoContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryExpressionNointoContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *QueryExpressionNointoContext) QuerySpecificationNointo() IQuerySpecificationNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationNointoContext)
}

func (s *QueryExpressionNointoContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *QueryExpressionNointoContext) QueryExpressionNointo() IQueryExpressionNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionNointoContext)
}

func (s *QueryExpressionNointoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryExpressionNointoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryExpressionNointoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitQueryExpressionNointo(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) QueryExpressionNointo() (localctx IQueryExpressionNointoContext) {
	localctx = NewQueryExpressionNointoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, MySqlParserRULE_queryExpressionNointo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3462)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 485, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3454)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3455)
			p.QuerySpecificationNointo()
		}
		{
			p.SetState(3456)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3458)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3459)
			p.QueryExpressionNointo()
		}
		{
			p.SetState(3460)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IQuerySpecificationContext is an interface to support dynamic dispatch.
type IQuerySpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuerySpecificationContext differentiates from other interfaces.
	IsQuerySpecificationContext()
}

type QuerySpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuerySpecificationContext() *QuerySpecificationContext {
	var p = new(QuerySpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_querySpecification
	return p
}

func (*QuerySpecificationContext) IsQuerySpecificationContext() {}

func NewQuerySpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QuerySpecificationContext {
	var p = new(QuerySpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_querySpecification

	return p
}

func (s *QuerySpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *QuerySpecificationContext) SELECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSELECT, 0)
}

func (s *QuerySpecificationContext) SelectElements() ISelectElementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectElementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectElementsContext)
}

func (s *QuerySpecificationContext) AllSelectSpec() []ISelectSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectSpecContext)(nil)).Elem())
	var tst = make([]ISelectSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectSpecContext)
		}
	}

	return tst
}

func (s *QuerySpecificationContext) SelectSpec(i int) ISelectSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectSpecContext)
}

func (s *QuerySpecificationContext) SelectIntoExpression() ISelectIntoExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectIntoExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectIntoExpressionContext)
}

func (s *QuerySpecificationContext) FromClause() IFromClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromClauseContext)
}

func (s *QuerySpecificationContext) GroupByClause() IGroupByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupByClauseContext)
}

func (s *QuerySpecificationContext) HavingClause() IHavingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHavingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHavingClauseContext)
}

func (s *QuerySpecificationContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *QuerySpecificationContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *QuerySpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuerySpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QuerySpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitQuerySpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) QuerySpecification() (localctx IQuerySpecificationContext) {
	localctx = NewQuerySpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, MySqlParserRULE_querySpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3516)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 500, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3464)
			p.Match(MySqlParserSELECT)
		}
		p.SetState(3468)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 486, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3465)
					p.SelectSpec()
				}

			}
			p.SetState(3470)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 486, p.GetParserRuleContext())
		}
		{
			p.SetState(3471)
			p.SelectElements()
		}
		p.SetState(3473)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINTO {
			{
				p.SetState(3472)
				p.SelectIntoExpression()
			}

		}
		p.SetState(3476)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM {
			{
				p.SetState(3475)
				p.FromClause()
			}

		}
		p.SetState(3479)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 489, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3478)
				p.GroupByClause()
			}

		}
		p.SetState(3482)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserHAVING {
			{
				p.SetState(3481)
				p.HavingClause()
			}

		}
		p.SetState(3485)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 491, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3484)
				p.OrderByClause()
			}

		}
		p.SetState(3488)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 492, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3487)
				p.LimitClause()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3490)
			p.Match(MySqlParserSELECT)
		}
		p.SetState(3494)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 493, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3491)
					p.SelectSpec()
				}

			}
			p.SetState(3496)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 493, p.GetParserRuleContext())
		}
		{
			p.SetState(3497)
			p.SelectElements()
		}
		p.SetState(3499)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM {
			{
				p.SetState(3498)
				p.FromClause()
			}

		}
		p.SetState(3502)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 495, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3501)
				p.GroupByClause()
			}

		}
		p.SetState(3505)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserHAVING {
			{
				p.SetState(3504)
				p.HavingClause()
			}

		}
		p.SetState(3508)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 497, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3507)
				p.OrderByClause()
			}

		}
		p.SetState(3511)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 498, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3510)
				p.LimitClause()
			}

		}
		p.SetState(3514)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINTO {
			{
				p.SetState(3513)
				p.SelectIntoExpression()
			}

		}

	}

	return localctx
}

// IQuerySpecificationNointoContext is an interface to support dynamic dispatch.
type IQuerySpecificationNointoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuerySpecificationNointoContext differentiates from other interfaces.
	IsQuerySpecificationNointoContext()
}

type QuerySpecificationNointoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuerySpecificationNointoContext() *QuerySpecificationNointoContext {
	var p = new(QuerySpecificationNointoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_querySpecificationNointo
	return p
}

func (*QuerySpecificationNointoContext) IsQuerySpecificationNointoContext() {}

func NewQuerySpecificationNointoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QuerySpecificationNointoContext {
	var p = new(QuerySpecificationNointoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_querySpecificationNointo

	return p
}

func (s *QuerySpecificationNointoContext) GetParser() antlr.Parser { return s.parser }

func (s *QuerySpecificationNointoContext) SELECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSELECT, 0)
}

func (s *QuerySpecificationNointoContext) SelectElements() ISelectElementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectElementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectElementsContext)
}

func (s *QuerySpecificationNointoContext) AllSelectSpec() []ISelectSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectSpecContext)(nil)).Elem())
	var tst = make([]ISelectSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectSpecContext)
		}
	}

	return tst
}

func (s *QuerySpecificationNointoContext) SelectSpec(i int) ISelectSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectSpecContext)
}

func (s *QuerySpecificationNointoContext) FromClause() IFromClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFromClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFromClauseContext)
}

func (s *QuerySpecificationNointoContext) GroupByClause() IGroupByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupByClauseContext)
}

func (s *QuerySpecificationNointoContext) HavingClause() IHavingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHavingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHavingClauseContext)
}

func (s *QuerySpecificationNointoContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *QuerySpecificationNointoContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *QuerySpecificationNointoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuerySpecificationNointoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QuerySpecificationNointoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitQuerySpecificationNointo(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) QuerySpecificationNointo() (localctx IQuerySpecificationNointoContext) {
	localctx = NewQuerySpecificationNointoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, MySqlParserRULE_querySpecificationNointo)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3518)
		p.Match(MySqlParserSELECT)
	}
	p.SetState(3522)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 501, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3519)
				p.SelectSpec()
			}

		}
		p.SetState(3524)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 501, p.GetParserRuleContext())
	}
	{
		p.SetState(3525)
		p.SelectElements()
	}
	p.SetState(3527)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFROM {
		{
			p.SetState(3526)
			p.FromClause()
		}

	}
	p.SetState(3530)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 503, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3529)
			p.GroupByClause()
		}

	}
	p.SetState(3533)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserHAVING {
		{
			p.SetState(3532)
			p.HavingClause()
		}

	}
	p.SetState(3536)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 505, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3535)
			p.OrderByClause()
		}

	}
	p.SetState(3539)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 506, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3538)
			p.LimitClause()
		}

	}

	return localctx
}

// IUnionParenthesisContext is an interface to support dynamic dispatch.
type IUnionParenthesisContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUnionType returns the unionType token.
	GetUnionType() antlr.Token

	// SetUnionType sets the unionType token.
	SetUnionType(antlr.Token)

	// IsUnionParenthesisContext differentiates from other interfaces.
	IsUnionParenthesisContext()
}

type UnionParenthesisContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	unionType antlr.Token
}

func NewEmptyUnionParenthesisContext() *UnionParenthesisContext {
	var p = new(UnionParenthesisContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_unionParenthesis
	return p
}

func (*UnionParenthesisContext) IsUnionParenthesisContext() {}

func NewUnionParenthesisContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionParenthesisContext {
	var p = new(UnionParenthesisContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_unionParenthesis

	return p
}

func (s *UnionParenthesisContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionParenthesisContext) GetUnionType() antlr.Token { return s.unionType }

func (s *UnionParenthesisContext) SetUnionType(v antlr.Token) { s.unionType = v }

func (s *UnionParenthesisContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *UnionParenthesisContext) QueryExpressionNointo() IQueryExpressionNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionNointoContext)
}

func (s *UnionParenthesisContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *UnionParenthesisContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *UnionParenthesisContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionParenthesisContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionParenthesisContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnionParenthesis(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UnionParenthesis() (localctx IUnionParenthesisContext) {
	localctx = NewUnionParenthesisContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, MySqlParserRULE_unionParenthesis)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3541)
		p.Match(MySqlParserUNION)
	}
	p.SetState(3543)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALL || _la == MySqlParserDISTINCT {
		{
			p.SetState(3542)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*UnionParenthesisContext).unionType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*UnionParenthesisContext).unionType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(3545)
		p.QueryExpressionNointo()
	}

	return localctx
}

// IUnionStatementContext is an interface to support dynamic dispatch.
type IUnionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUnionType returns the unionType token.
	GetUnionType() antlr.Token

	// SetUnionType sets the unionType token.
	SetUnionType(antlr.Token)

	// IsUnionStatementContext differentiates from other interfaces.
	IsUnionStatementContext()
}

type UnionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	unionType antlr.Token
}

func NewEmptyUnionStatementContext() *UnionStatementContext {
	var p = new(UnionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_unionStatement
	return p
}

func (*UnionStatementContext) IsUnionStatementContext() {}

func NewUnionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionStatementContext {
	var p = new(UnionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_unionStatement

	return p
}

func (s *UnionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionStatementContext) GetUnionType() antlr.Token { return s.unionType }

func (s *UnionStatementContext) SetUnionType(v antlr.Token) { s.unionType = v }

func (s *UnionStatementContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *UnionStatementContext) QuerySpecificationNointo() IQuerySpecificationNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationNointoContext)
}

func (s *UnionStatementContext) QueryExpressionNointo() IQueryExpressionNointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryExpressionNointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryExpressionNointoContext)
}

func (s *UnionStatementContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *UnionStatementContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *UnionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UnionStatement() (localctx IUnionStatementContext) {
	localctx = NewUnionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, MySqlParserRULE_unionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3547)
		p.Match(MySqlParserUNION)
	}
	p.SetState(3549)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALL || _la == MySqlParserDISTINCT {
		{
			p.SetState(3548)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*UnionStatementContext).unionType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*UnionStatementContext).unionType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(3553)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSELECT:
		{
			p.SetState(3551)
			p.QuerySpecificationNointo()
		}

	case MySqlParserLR_BRACKET:
		{
			p.SetState(3552)
			p.QueryExpressionNointo()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectSpecContext is an interface to support dynamic dispatch.
type ISelectSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectSpecContext differentiates from other interfaces.
	IsSelectSpecContext()
}

type SelectSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectSpecContext() *SelectSpecContext {
	var p = new(SelectSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectSpec
	return p
}

func (*SelectSpecContext) IsSelectSpecContext() {}

func NewSelectSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectSpecContext {
	var p = new(SelectSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectSpec

	return p
}

func (s *SelectSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectSpecContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *SelectSpecContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *SelectSpecContext) DISTINCTROW() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCTROW, 0)
}

func (s *SelectSpecContext) HIGH_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserHIGH_PRIORITY, 0)
}

func (s *SelectSpecContext) STRAIGHT_JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRAIGHT_JOIN, 0)
}

func (s *SelectSpecContext) SQL_SMALL_RESULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_SMALL_RESULT, 0)
}

func (s *SelectSpecContext) SQL_BIG_RESULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BIG_RESULT, 0)
}

func (s *SelectSpecContext) SQL_BUFFER_RESULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BUFFER_RESULT, 0)
}

func (s *SelectSpecContext) SQL_CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_CACHE, 0)
}

func (s *SelectSpecContext) SQL_NO_CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_NO_CACHE, 0)
}

func (s *SelectSpecContext) SQL_CALC_FOUND_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_CALC_FOUND_ROWS, 0)
}

func (s *SelectSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectSpecContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectSpec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SelectSpec() (localctx ISelectSpecContext) {
	localctx = NewSelectSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, MySqlParserRULE_selectSpec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3563)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALL, MySqlParserDISTINCT, MySqlParserDISTINCTROW:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3555)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT || _la == MySqlParserDISTINCTROW) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserHIGH_PRIORITY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3556)
			p.Match(MySqlParserHIGH_PRIORITY)
		}

	case MySqlParserSTRAIGHT_JOIN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3557)
			p.Match(MySqlParserSTRAIGHT_JOIN)
		}

	case MySqlParserSQL_SMALL_RESULT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3558)
			p.Match(MySqlParserSQL_SMALL_RESULT)
		}

	case MySqlParserSQL_BIG_RESULT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3559)
			p.Match(MySqlParserSQL_BIG_RESULT)
		}

	case MySqlParserSQL_BUFFER_RESULT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3560)
			p.Match(MySqlParserSQL_BUFFER_RESULT)
		}

	case MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3561)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserSQL_CACHE || _la == MySqlParserSQL_NO_CACHE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserSQL_CALC_FOUND_ROWS:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3562)
			p.Match(MySqlParserSQL_CALC_FOUND_ROWS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectElementsContext is an interface to support dynamic dispatch.
type ISelectElementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStar returns the star token.
	GetStar() antlr.Token

	// SetStar sets the star token.
	SetStar(antlr.Token)

	// IsSelectElementsContext differentiates from other interfaces.
	IsSelectElementsContext()
}

type SelectElementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	star   antlr.Token
}

func NewEmptySelectElementsContext() *SelectElementsContext {
	var p = new(SelectElementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectElements
	return p
}

func (*SelectElementsContext) IsSelectElementsContext() {}

func NewSelectElementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectElementsContext {
	var p = new(SelectElementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectElements

	return p
}

func (s *SelectElementsContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectElementsContext) GetStar() antlr.Token { return s.star }

func (s *SelectElementsContext) SetStar(v antlr.Token) { s.star = v }

func (s *SelectElementsContext) AllSelectElement() []ISelectElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectElementContext)(nil)).Elem())
	var tst = make([]ISelectElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectElementContext)
		}
	}

	return tst
}

func (s *SelectElementsContext) SelectElement(i int) ISelectElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectElementContext)
}

func (s *SelectElementsContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *SelectElementsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SelectElementsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SelectElementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectElementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectElementsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectElements(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SelectElements() (localctx ISelectElementsContext) {
	localctx = NewSelectElementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, MySqlParserRULE_selectElements)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3567)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 511, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3565)

			var _m = p.Match(MySqlParserSTAR)

			localctx.(*SelectElementsContext).star = _m
		}

	case 2:
		{
			p.SetState(3566)
			p.SelectElement()
		}

	}
	p.SetState(3573)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3569)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3570)
			p.SelectElement()
		}

		p.SetState(3575)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISelectElementContext is an interface to support dynamic dispatch.
type ISelectElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectElementContext differentiates from other interfaces.
	IsSelectElementContext()
}

type SelectElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectElementContext() *SelectElementContext {
	var p = new(SelectElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectElement
	return p
}

func (*SelectElementContext) IsSelectElementContext() {}

func NewSelectElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectElementContext {
	var p = new(SelectElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectElement

	return p
}

func (s *SelectElementContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectElementContext) CopyFrom(ctx *SelectElementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SelectElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SelectExpressionElementContext struct {
	*SelectElementContext
}

func NewSelectExpressionElementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectExpressionElementContext {
	var p = new(SelectExpressionElementContext)

	p.SelectElementContext = NewEmptySelectElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectElementContext))

	return p
}

func (s *SelectExpressionElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectExpressionElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SelectExpressionElementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *SelectExpressionElementContext) VAR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_ASSIGN, 0)
}

func (s *SelectExpressionElementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SelectExpressionElementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SelectExpressionElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectExpressionElement(s)

	default:
		return t.VisitChildren(s)
	}
}

type SelectFunctionElementContext struct {
	*SelectElementContext
}

func NewSelectFunctionElementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectFunctionElementContext {
	var p = new(SelectFunctionElementContext)

	p.SelectElementContext = NewEmptySelectElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectElementContext))

	return p
}

func (s *SelectFunctionElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectFunctionElementContext) FunctionCall() IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *SelectFunctionElementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SelectFunctionElementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SelectFunctionElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectFunctionElement(s)

	default:
		return t.VisitChildren(s)
	}
}

type SelectStarElementContext struct {
	*SelectElementContext
}

func NewSelectStarElementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectStarElementContext {
	var p = new(SelectStarElementContext)

	p.SelectElementContext = NewEmptySelectElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectElementContext))

	return p
}

func (s *SelectStarElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStarElementContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *SelectStarElementContext) DOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, 0)
}

func (s *SelectStarElementContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *SelectStarElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectStarElement(s)

	default:
		return t.VisitChildren(s)
	}
}

type SelectColumnElementContext struct {
	*SelectElementContext
}

func NewSelectColumnElementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectColumnElementContext {
	var p = new(SelectColumnElementContext)

	p.SelectElementContext = NewEmptySelectElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectElementContext))

	return p
}

func (s *SelectColumnElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectColumnElementContext) FullColumnName() IFullColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullColumnNameContext)
}

func (s *SelectColumnElementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SelectColumnElementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SelectColumnElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectColumnElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SelectElement() (localctx ISelectElementContext) {
	localctx = NewSelectElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, MySqlParserRULE_selectElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3605)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 520, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSelectStarElementContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3576)
			p.FullId()
		}
		{
			p.SetState(3577)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(3578)
			p.Match(MySqlParserSTAR)
		}

	case 2:
		localctx = NewSelectColumnElementContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3580)
			p.FullColumnName()
		}
		p.SetState(3585)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 514, p.GetParserRuleContext()) == 1 {
			p.SetState(3582)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAS {
				{
					p.SetState(3581)
					p.Match(MySqlParserAS)
				}

			}
			{
				p.SetState(3584)
				p.Uid()
			}

		}

	case 3:
		localctx = NewSelectFunctionElementContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3587)
			p.FunctionCall()
		}
		p.SetState(3592)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 516, p.GetParserRuleContext()) == 1 {
			p.SetState(3589)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAS {
				{
					p.SetState(3588)
					p.Match(MySqlParserAS)
				}

			}
			{
				p.SetState(3591)
				p.Uid()
			}

		}

	case 4:
		localctx = NewSelectExpressionElementContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(3596)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 517, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3594)
				p.Match(MySqlParserLOCAL_ID)
			}
			{
				p.SetState(3595)
				p.Match(MySqlParserVAR_ASSIGN)
			}

		}
		{
			p.SetState(3598)
			p.expression(0)
		}
		p.SetState(3603)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 519, p.GetParserRuleContext()) == 1 {
			p.SetState(3600)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAS {
				{
					p.SetState(3599)
					p.Match(MySqlParserAS)
				}

			}
			{
				p.SetState(3602)
				p.Uid()
			}

		}

	}

	return localctx
}

// ISelectIntoExpressionContext is an interface to support dynamic dispatch.
type ISelectIntoExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectIntoExpressionContext differentiates from other interfaces.
	IsSelectIntoExpressionContext()
}

type SelectIntoExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectIntoExpressionContext() *SelectIntoExpressionContext {
	var p = new(SelectIntoExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectIntoExpression
	return p
}

func (*SelectIntoExpressionContext) IsSelectIntoExpressionContext() {}

func NewSelectIntoExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectIntoExpressionContext {
	var p = new(SelectIntoExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectIntoExpression

	return p
}

func (s *SelectIntoExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectIntoExpressionContext) CopyFrom(ctx *SelectIntoExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SelectIntoExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectIntoExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SelectIntoVariablesContext struct {
	*SelectIntoExpressionContext
}

func NewSelectIntoVariablesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectIntoVariablesContext {
	var p = new(SelectIntoVariablesContext)

	p.SelectIntoExpressionContext = NewEmptySelectIntoExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectIntoExpressionContext))

	return p
}

func (s *SelectIntoVariablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectIntoVariablesContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *SelectIntoVariablesContext) AllAssignmentField() []IAssignmentFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentFieldContext)(nil)).Elem())
	var tst = make([]IAssignmentFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentFieldContext)
		}
	}

	return tst
}

func (s *SelectIntoVariablesContext) AssignmentField(i int) IAssignmentFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentFieldContext)
}

func (s *SelectIntoVariablesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SelectIntoVariablesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SelectIntoVariablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectIntoVariables(s)

	default:
		return t.VisitChildren(s)
	}
}

type SelectIntoTextFileContext struct {
	*SelectIntoExpressionContext
	filename     antlr.Token
	charset      ICharsetNameContext
	fieldsFormat antlr.Token
}

func NewSelectIntoTextFileContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectIntoTextFileContext {
	var p = new(SelectIntoTextFileContext)

	p.SelectIntoExpressionContext = NewEmptySelectIntoExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectIntoExpressionContext))

	return p
}

func (s *SelectIntoTextFileContext) GetFilename() antlr.Token { return s.filename }

func (s *SelectIntoTextFileContext) GetFieldsFormat() antlr.Token { return s.fieldsFormat }

func (s *SelectIntoTextFileContext) SetFilename(v antlr.Token) { s.filename = v }

func (s *SelectIntoTextFileContext) SetFieldsFormat(v antlr.Token) { s.fieldsFormat = v }

func (s *SelectIntoTextFileContext) GetCharset() ICharsetNameContext { return s.charset }

func (s *SelectIntoTextFileContext) SetCharset(v ICharsetNameContext) { s.charset = v }

func (s *SelectIntoTextFileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectIntoTextFileContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *SelectIntoTextFileContext) OUTFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOUTFILE, 0)
}

func (s *SelectIntoTextFileContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *SelectIntoTextFileContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *SelectIntoTextFileContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SelectIntoTextFileContext) LINES() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINES, 0)
}

func (s *SelectIntoTextFileContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *SelectIntoTextFileContext) FIELDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELDS, 0)
}

func (s *SelectIntoTextFileContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *SelectIntoTextFileContext) AllSelectFieldsInto() []ISelectFieldsIntoContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectFieldsIntoContext)(nil)).Elem())
	var tst = make([]ISelectFieldsIntoContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectFieldsIntoContext)
		}
	}

	return tst
}

func (s *SelectIntoTextFileContext) SelectFieldsInto(i int) ISelectFieldsIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectFieldsIntoContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectFieldsIntoContext)
}

func (s *SelectIntoTextFileContext) AllSelectLinesInto() []ISelectLinesIntoContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectLinesIntoContext)(nil)).Elem())
	var tst = make([]ISelectLinesIntoContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectLinesIntoContext)
		}
	}

	return tst
}

func (s *SelectIntoTextFileContext) SelectLinesInto(i int) ISelectLinesIntoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectLinesIntoContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectLinesIntoContext)
}

func (s *SelectIntoTextFileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectIntoTextFile(s)

	default:
		return t.VisitChildren(s)
	}
}

type SelectIntoDumpFileContext struct {
	*SelectIntoExpressionContext
}

func NewSelectIntoDumpFileContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectIntoDumpFileContext {
	var p = new(SelectIntoDumpFileContext)

	p.SelectIntoExpressionContext = NewEmptySelectIntoExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectIntoExpressionContext))

	return p
}

func (s *SelectIntoDumpFileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectIntoDumpFileContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *SelectIntoDumpFileContext) DUMPFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDUMPFILE, 0)
}

func (s *SelectIntoDumpFileContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *SelectIntoDumpFileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectIntoDumpFile(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SelectIntoExpression() (localctx ISelectIntoExpressionContext) {
	localctx = NewSelectIntoExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, MySqlParserRULE_selectIntoExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3643)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 527, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSelectIntoVariablesContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3607)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(3608)
			p.AssignmentField()
		}
		p.SetState(3613)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3609)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3610)
				p.AssignmentField()
			}

			p.SetState(3615)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewSelectIntoDumpFileContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3616)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(3617)
			p.Match(MySqlParserDUMPFILE)
		}
		{
			p.SetState(3618)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 3:
		localctx = NewSelectIntoTextFileContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3619)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(3620)
			p.Match(MySqlParserOUTFILE)
		}
		{
			p.SetState(3621)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SelectIntoTextFileContext).filename = _m
		}
		p.SetState(3625)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCHARACTER {
			{
				p.SetState(3622)
				p.Match(MySqlParserCHARACTER)
			}
			{
				p.SetState(3623)
				p.Match(MySqlParserSET)
			}
			{
				p.SetState(3624)

				var _x = p.CharsetName()

				localctx.(*SelectIntoTextFileContext).charset = _x
			}

		}
		p.SetState(3633)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 524, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3627)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*SelectIntoTextFileContext).fieldsFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserCOLUMNS || _la == MySqlParserFIELDS) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*SelectIntoTextFileContext).fieldsFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(3629)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == MySqlParserENCLOSED || _la == MySqlParserESCAPED || _la == MySqlParserOPTIONALLY || _la == MySqlParserTERMINATED {
				{
					p.SetState(3628)
					p.SelectFieldsInto()
				}

				p.SetState(3631)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(3641)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLINES {
			{
				p.SetState(3635)
				p.Match(MySqlParserLINES)
			}
			p.SetState(3637)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == MySqlParserSTARTING || _la == MySqlParserTERMINATED {
				{
					p.SetState(3636)
					p.SelectLinesInto()
				}

				p.SetState(3639)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	}

	return localctx
}

// ISelectFieldsIntoContext is an interface to support dynamic dispatch.
type ISelectFieldsIntoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTerminationField returns the terminationField token.
	GetTerminationField() antlr.Token

	// GetEnclosion returns the enclosion token.
	GetEnclosion() antlr.Token

	// GetEscaping returns the escaping token.
	GetEscaping() antlr.Token

	// SetTerminationField sets the terminationField token.
	SetTerminationField(antlr.Token)

	// SetEnclosion sets the enclosion token.
	SetEnclosion(antlr.Token)

	// SetEscaping sets the escaping token.
	SetEscaping(antlr.Token)

	// IsSelectFieldsIntoContext differentiates from other interfaces.
	IsSelectFieldsIntoContext()
}

type SelectFieldsIntoContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	terminationField antlr.Token
	enclosion        antlr.Token
	escaping         antlr.Token
}

func NewEmptySelectFieldsIntoContext() *SelectFieldsIntoContext {
	var p = new(SelectFieldsIntoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectFieldsInto
	return p
}

func (*SelectFieldsIntoContext) IsSelectFieldsIntoContext() {}

func NewSelectFieldsIntoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectFieldsIntoContext {
	var p = new(SelectFieldsIntoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectFieldsInto

	return p
}

func (s *SelectFieldsIntoContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectFieldsIntoContext) GetTerminationField() antlr.Token { return s.terminationField }

func (s *SelectFieldsIntoContext) GetEnclosion() antlr.Token { return s.enclosion }

func (s *SelectFieldsIntoContext) GetEscaping() antlr.Token { return s.escaping }

func (s *SelectFieldsIntoContext) SetTerminationField(v antlr.Token) { s.terminationField = v }

func (s *SelectFieldsIntoContext) SetEnclosion(v antlr.Token) { s.enclosion = v }

func (s *SelectFieldsIntoContext) SetEscaping(v antlr.Token) { s.escaping = v }

func (s *SelectFieldsIntoContext) TERMINATED() antlr.TerminalNode {
	return s.GetToken(MySqlParserTERMINATED, 0)
}

func (s *SelectFieldsIntoContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *SelectFieldsIntoContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *SelectFieldsIntoContext) ENCLOSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCLOSED, 0)
}

func (s *SelectFieldsIntoContext) OPTIONALLY() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONALLY, 0)
}

func (s *SelectFieldsIntoContext) ESCAPED() antlr.TerminalNode {
	return s.GetToken(MySqlParserESCAPED, 0)
}

func (s *SelectFieldsIntoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectFieldsIntoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectFieldsIntoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectFieldsInto(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SelectFieldsInto() (localctx ISelectFieldsIntoContext) {
	localctx = NewSelectFieldsIntoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, MySqlParserRULE_selectFieldsInto)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3657)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserTERMINATED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3645)
			p.Match(MySqlParserTERMINATED)
		}
		{
			p.SetState(3646)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(3647)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SelectFieldsIntoContext).terminationField = _m
		}

	case MySqlParserENCLOSED, MySqlParserOPTIONALLY:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3649)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserOPTIONALLY {
			{
				p.SetState(3648)
				p.Match(MySqlParserOPTIONALLY)
			}

		}
		{
			p.SetState(3651)
			p.Match(MySqlParserENCLOSED)
		}
		{
			p.SetState(3652)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(3653)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SelectFieldsIntoContext).enclosion = _m
		}

	case MySqlParserESCAPED:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3654)
			p.Match(MySqlParserESCAPED)
		}
		{
			p.SetState(3655)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(3656)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SelectFieldsIntoContext).escaping = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectLinesIntoContext is an interface to support dynamic dispatch.
type ISelectLinesIntoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStarting returns the starting token.
	GetStarting() antlr.Token

	// GetTerminationLine returns the terminationLine token.
	GetTerminationLine() antlr.Token

	// SetStarting sets the starting token.
	SetStarting(antlr.Token)

	// SetTerminationLine sets the terminationLine token.
	SetTerminationLine(antlr.Token)

	// IsSelectLinesIntoContext differentiates from other interfaces.
	IsSelectLinesIntoContext()
}

type SelectLinesIntoContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	starting        antlr.Token
	terminationLine antlr.Token
}

func NewEmptySelectLinesIntoContext() *SelectLinesIntoContext {
	var p = new(SelectLinesIntoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_selectLinesInto
	return p
}

func (*SelectLinesIntoContext) IsSelectLinesIntoContext() {}

func NewSelectLinesIntoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectLinesIntoContext {
	var p = new(SelectLinesIntoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_selectLinesInto

	return p
}

func (s *SelectLinesIntoContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectLinesIntoContext) GetStarting() antlr.Token { return s.starting }

func (s *SelectLinesIntoContext) GetTerminationLine() antlr.Token { return s.terminationLine }

func (s *SelectLinesIntoContext) SetStarting(v antlr.Token) { s.starting = v }

func (s *SelectLinesIntoContext) SetTerminationLine(v antlr.Token) { s.terminationLine = v }

func (s *SelectLinesIntoContext) STARTING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTARTING, 0)
}

func (s *SelectLinesIntoContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *SelectLinesIntoContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *SelectLinesIntoContext) TERMINATED() antlr.TerminalNode {
	return s.GetToken(MySqlParserTERMINATED, 0)
}

func (s *SelectLinesIntoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectLinesIntoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectLinesIntoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectLinesInto(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SelectLinesInto() (localctx ISelectLinesIntoContext) {
	localctx = NewSelectLinesIntoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, MySqlParserRULE_selectLinesInto)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3665)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSTARTING:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3659)
			p.Match(MySqlParserSTARTING)
		}
		{
			p.SetState(3660)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(3661)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SelectLinesIntoContext).starting = _m
		}

	case MySqlParserTERMINATED:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3662)
			p.Match(MySqlParserTERMINATED)
		}
		{
			p.SetState(3663)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(3664)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SelectLinesIntoContext).terminationLine = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFromClauseContext is an interface to support dynamic dispatch.
type IFromClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhereExpr returns the whereExpr rule contexts.
	GetWhereExpr() IExpressionContext

	// SetWhereExpr sets the whereExpr rule contexts.
	SetWhereExpr(IExpressionContext)

	// IsFromClauseContext differentiates from other interfaces.
	IsFromClauseContext()
}

type FromClauseContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	whereExpr IExpressionContext
}

func NewEmptyFromClauseContext() *FromClauseContext {
	var p = new(FromClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_fromClause
	return p
}

func (*FromClauseContext) IsFromClauseContext() {}

func NewFromClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromClauseContext {
	var p = new(FromClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_fromClause

	return p
}

func (s *FromClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FromClauseContext) GetWhereExpr() IExpressionContext { return s.whereExpr }

func (s *FromClauseContext) SetWhereExpr(v IExpressionContext) { s.whereExpr = v }

func (s *FromClauseContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *FromClauseContext) TableSources() ITableSourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableSourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableSourcesContext)
}

func (s *FromClauseContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *FromClauseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FromClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFromClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) FromClause() (localctx IFromClauseContext) {
	localctx = NewFromClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, MySqlParserRULE_fromClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3667)
		p.Match(MySqlParserFROM)
	}
	{
		p.SetState(3668)
		p.TableSources()
	}
	p.SetState(3671)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3669)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3670)

			var _x = p.expression(0)

			localctx.(*FromClauseContext).whereExpr = _x
		}

	}

	return localctx
}

// IGroupByClauseContext is an interface to support dynamic dispatch.
type IGroupByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupByClauseContext differentiates from other interfaces.
	IsGroupByClauseContext()
}

type GroupByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupByClauseContext() *GroupByClauseContext {
	var p = new(GroupByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_groupByClause
	return p
}

func (*GroupByClauseContext) IsGroupByClauseContext() {}

func NewGroupByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByClauseContext {
	var p = new(GroupByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_groupByClause

	return p
}

func (s *GroupByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByClauseContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *GroupByClauseContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *GroupByClauseContext) AllGroupByItem() []IGroupByItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGroupByItemContext)(nil)).Elem())
	var tst = make([]IGroupByItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGroupByItemContext)
		}
	}

	return tst
}

func (s *GroupByClauseContext) GroupByItem(i int) IGroupByItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGroupByItemContext)
}

func (s *GroupByClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *GroupByClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *GroupByClauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *GroupByClauseContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLUP, 0)
}

func (s *GroupByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGroupByClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) GroupByClause() (localctx IGroupByClauseContext) {
	localctx = NewGroupByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, MySqlParserRULE_groupByClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3673)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(3674)
		p.Match(MySqlParserBY)
	}
	{
		p.SetState(3675)
		p.GroupByItem()
	}
	p.SetState(3680)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3676)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3677)
			p.GroupByItem()
		}

		p.SetState(3682)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3685)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 533, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3683)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(3684)
			p.Match(MySqlParserROLLUP)
		}

	}

	return localctx
}

// IHavingClauseContext is an interface to support dynamic dispatch.
type IHavingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetHavingExpr returns the havingExpr rule contexts.
	GetHavingExpr() IExpressionContext

	// SetHavingExpr sets the havingExpr rule contexts.
	SetHavingExpr(IExpressionContext)

	// IsHavingClauseContext differentiates from other interfaces.
	IsHavingClauseContext()
}

type HavingClauseContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	havingExpr IExpressionContext
}

func NewEmptyHavingClauseContext() *HavingClauseContext {
	var p = new(HavingClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_havingClause
	return p
}

func (*HavingClauseContext) IsHavingClauseContext() {}

func NewHavingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HavingClauseContext {
	var p = new(HavingClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_havingClause

	return p
}

func (s *HavingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *HavingClauseContext) GetHavingExpr() IExpressionContext { return s.havingExpr }

func (s *HavingClauseContext) SetHavingExpr(v IExpressionContext) { s.havingExpr = v }

func (s *HavingClauseContext) HAVING() antlr.TerminalNode {
	return s.GetToken(MySqlParserHAVING, 0)
}

func (s *HavingClauseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *HavingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HavingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HavingClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHavingClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) HavingClause() (localctx IHavingClauseContext) {
	localctx = NewHavingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, MySqlParserRULE_havingClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3687)
		p.Match(MySqlParserHAVING)
	}
	{
		p.SetState(3688)

		var _x = p.expression(0)

		localctx.(*HavingClauseContext).havingExpr = _x
	}

	return localctx
}

// IGroupByItemContext is an interface to support dynamic dispatch.
type IGroupByItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOrder returns the order token.
	GetOrder() antlr.Token

	// SetOrder sets the order token.
	SetOrder(antlr.Token)

	// IsGroupByItemContext differentiates from other interfaces.
	IsGroupByItemContext()
}

type GroupByItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	order  antlr.Token
}

func NewEmptyGroupByItemContext() *GroupByItemContext {
	var p = new(GroupByItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_groupByItem
	return p
}

func (*GroupByItemContext) IsGroupByItemContext() {}

func NewGroupByItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByItemContext {
	var p = new(GroupByItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_groupByItem

	return p
}

func (s *GroupByItemContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByItemContext) GetOrder() antlr.Token { return s.order }

func (s *GroupByItemContext) SetOrder(v antlr.Token) { s.order = v }

func (s *GroupByItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GroupByItemContext) ASC() antlr.TerminalNode {
	return s.GetToken(MySqlParserASC, 0)
}

func (s *GroupByItemContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *GroupByItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGroupByItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) GroupByItem() (localctx IGroupByItemContext) {
	localctx = NewGroupByItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, MySqlParserRULE_groupByItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3690)
		p.expression(0)
	}
	p.SetState(3692)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 534, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3691)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*GroupByItemContext).order = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserASC || _la == MySqlParserDESC) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*GroupByItemContext).order = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// ILimitClauseContext is an interface to support dynamic dispatch.
type ILimitClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOffset returns the offset rule contexts.
	GetOffset() ILimitClauseAtomContext

	// GetLimit returns the limit rule contexts.
	GetLimit() ILimitClauseAtomContext

	// SetOffset sets the offset rule contexts.
	SetOffset(ILimitClauseAtomContext)

	// SetLimit sets the limit rule contexts.
	SetLimit(ILimitClauseAtomContext)

	// IsLimitClauseContext differentiates from other interfaces.
	IsLimitClauseContext()
}

type LimitClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	offset ILimitClauseAtomContext
	limit  ILimitClauseAtomContext
}

func NewEmptyLimitClauseContext() *LimitClauseContext {
	var p = new(LimitClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_limitClause
	return p
}

func (*LimitClauseContext) IsLimitClauseContext() {}

func NewLimitClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitClauseContext {
	var p = new(LimitClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_limitClause

	return p
}

func (s *LimitClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitClauseContext) GetOffset() ILimitClauseAtomContext { return s.offset }

func (s *LimitClauseContext) GetLimit() ILimitClauseAtomContext { return s.limit }

func (s *LimitClauseContext) SetOffset(v ILimitClauseAtomContext) { s.offset = v }

func (s *LimitClauseContext) SetLimit(v ILimitClauseAtomContext) { s.limit = v }

func (s *LimitClauseContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *LimitClauseContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFSET, 0)
}

func (s *LimitClauseContext) AllLimitClauseAtom() []ILimitClauseAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILimitClauseAtomContext)(nil)).Elem())
	var tst = make([]ILimitClauseAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILimitClauseAtomContext)
		}
	}

	return tst
}

func (s *LimitClauseContext) LimitClauseAtom(i int) ILimitClauseAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseAtomContext)
}

func (s *LimitClauseContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *LimitClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLimitClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LimitClause() (localctx ILimitClauseContext) {
	localctx = NewLimitClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, MySqlParserRULE_limitClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3694)
		p.Match(MySqlParserLIMIT)
	}
	p.SetState(3705)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 536, p.GetParserRuleContext()) {
	case 1:
		p.SetState(3698)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 535, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3695)

				var _x = p.LimitClauseAtom()

				localctx.(*LimitClauseContext).offset = _x
			}
			{
				p.SetState(3696)
				p.Match(MySqlParserCOMMA)
			}

		}
		{
			p.SetState(3700)

			var _x = p.LimitClauseAtom()

			localctx.(*LimitClauseContext).limit = _x
		}

	case 2:
		{
			p.SetState(3701)

			var _x = p.LimitClauseAtom()

			localctx.(*LimitClauseContext).limit = _x
		}
		{
			p.SetState(3702)
			p.Match(MySqlParserOFFSET)
		}
		{
			p.SetState(3703)

			var _x = p.LimitClauseAtom()

			localctx.(*LimitClauseContext).offset = _x
		}

	}

	return localctx
}

// ILimitClauseAtomContext is an interface to support dynamic dispatch.
type ILimitClauseAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLimitClauseAtomContext differentiates from other interfaces.
	IsLimitClauseAtomContext()
}

type LimitClauseAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitClauseAtomContext() *LimitClauseAtomContext {
	var p = new(LimitClauseAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_limitClauseAtom
	return p
}

func (*LimitClauseAtomContext) IsLimitClauseAtomContext() {}

func NewLimitClauseAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitClauseAtomContext {
	var p = new(LimitClauseAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_limitClauseAtom

	return p
}

func (s *LimitClauseAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitClauseAtomContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LimitClauseAtomContext) MysqlVariable() IMysqlVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMysqlVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMysqlVariableContext)
}

func (s *LimitClauseAtomContext) SimpleId() ISimpleIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdContext)
}

func (s *LimitClauseAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitClauseAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitClauseAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLimitClauseAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LimitClauseAtom() (localctx ILimitClauseAtomContext) {
	localctx = NewLimitClauseAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, MySqlParserRULE_limitClauseAtom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3710)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3707)
			p.DecimalLiteral()
		}

	case MySqlParserLOCAL_ID, MySqlParserGLOBAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3708)
			p.MysqlVariable()
		}

	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3709)
			p.SimpleId()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStartTransactionContext is an interface to support dynamic dispatch.
type IStartTransactionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStartTransactionContext differentiates from other interfaces.
	IsStartTransactionContext()
}

type StartTransactionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStartTransactionContext() *StartTransactionContext {
	var p = new(StartTransactionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_startTransaction
	return p
}

func (*StartTransactionContext) IsStartTransactionContext() {}

func NewStartTransactionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartTransactionContext {
	var p = new(StartTransactionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_startTransaction

	return p
}

func (s *StartTransactionContext) GetParser() antlr.Parser { return s.parser }

func (s *StartTransactionContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *StartTransactionContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRANSACTION, 0)
}

func (s *StartTransactionContext) AllTransactionMode() []ITransactionModeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITransactionModeContext)(nil)).Elem())
	var tst = make([]ITransactionModeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITransactionModeContext)
		}
	}

	return tst
}

func (s *StartTransactionContext) TransactionMode(i int) ITransactionModeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionModeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITransactionModeContext)
}

func (s *StartTransactionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *StartTransactionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *StartTransactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartTransactionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartTransactionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStartTransaction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) StartTransaction() (localctx IStartTransactionContext) {
	localctx = NewStartTransactionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, MySqlParserRULE_startTransaction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3712)
		p.Match(MySqlParserSTART)
	}
	{
		p.SetState(3713)
		p.Match(MySqlParserTRANSACTION)
	}
	p.SetState(3722)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserREAD || _la == MySqlParserWITH {
		{
			p.SetState(3714)
			p.TransactionMode()
		}
		p.SetState(3719)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3715)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3716)
				p.TransactionMode()
			}

			p.SetState(3721)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IBeginWorkContext is an interface to support dynamic dispatch.
type IBeginWorkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBeginWorkContext differentiates from other interfaces.
	IsBeginWorkContext()
}

type BeginWorkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBeginWorkContext() *BeginWorkContext {
	var p = new(BeginWorkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_beginWork
	return p
}

func (*BeginWorkContext) IsBeginWorkContext() {}

func NewBeginWorkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BeginWorkContext {
	var p = new(BeginWorkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_beginWork

	return p
}

func (s *BeginWorkContext) GetParser() antlr.Parser { return s.parser }

func (s *BeginWorkContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEGIN, 0)
}

func (s *BeginWorkContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *BeginWorkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BeginWorkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BeginWorkContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBeginWork(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) BeginWork() (localctx IBeginWorkContext) {
	localctx = NewBeginWorkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, MySqlParserRULE_beginWork)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3724)
		p.Match(MySqlParserBEGIN)
	}
	p.SetState(3726)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWORK {
		{
			p.SetState(3725)
			p.Match(MySqlParserWORK)
		}

	}

	return localctx
}

// ICommitWorkContext is an interface to support dynamic dispatch.
type ICommitWorkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNochain returns the nochain token.
	GetNochain() antlr.Token

	// GetNorelease returns the norelease token.
	GetNorelease() antlr.Token

	// SetNochain sets the nochain token.
	SetNochain(antlr.Token)

	// SetNorelease sets the norelease token.
	SetNorelease(antlr.Token)

	// IsCommitWorkContext differentiates from other interfaces.
	IsCommitWorkContext()
}

type CommitWorkContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	nochain   antlr.Token
	norelease antlr.Token
}

func NewEmptyCommitWorkContext() *CommitWorkContext {
	var p = new(CommitWorkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_commitWork
	return p
}

func (*CommitWorkContext) IsCommitWorkContext() {}

func NewCommitWorkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommitWorkContext {
	var p = new(CommitWorkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_commitWork

	return p
}

func (s *CommitWorkContext) GetParser() antlr.Parser { return s.parser }

func (s *CommitWorkContext) GetNochain() antlr.Token { return s.nochain }

func (s *CommitWorkContext) GetNorelease() antlr.Token { return s.norelease }

func (s *CommitWorkContext) SetNochain(v antlr.Token) { s.nochain = v }

func (s *CommitWorkContext) SetNorelease(v antlr.Token) { s.norelease = v }

func (s *CommitWorkContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMIT, 0)
}

func (s *CommitWorkContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *CommitWorkContext) AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, 0)
}

func (s *CommitWorkContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAIN, 0)
}

func (s *CommitWorkContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELEASE, 0)
}

func (s *CommitWorkContext) AllNO() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNO)
}

func (s *CommitWorkContext) NO(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, i)
}

func (s *CommitWorkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommitWorkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CommitWorkContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCommitWork(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CommitWork() (localctx ICommitWorkContext) {
	localctx = NewCommitWorkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, MySqlParserRULE_commitWork)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3728)
		p.Match(MySqlParserCOMMIT)
	}
	p.SetState(3730)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWORK {
		{
			p.SetState(3729)
			p.Match(MySqlParserWORK)
		}

	}
	p.SetState(3737)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAND {
		{
			p.SetState(3732)
			p.Match(MySqlParserAND)
		}
		p.SetState(3734)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNO {
			{
				p.SetState(3733)

				var _m = p.Match(MySqlParserNO)

				localctx.(*CommitWorkContext).nochain = _m
			}

		}
		{
			p.SetState(3736)
			p.Match(MySqlParserCHAIN)
		}

	}
	p.SetState(3743)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 545, p.GetParserRuleContext()) == 1 {
		p.SetState(3740)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNO {
			{
				p.SetState(3739)

				var _m = p.Match(MySqlParserNO)

				localctx.(*CommitWorkContext).norelease = _m
			}

		}
		{
			p.SetState(3742)
			p.Match(MySqlParserRELEASE)
		}

	}

	return localctx
}

// IRollbackWorkContext is an interface to support dynamic dispatch.
type IRollbackWorkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNochain returns the nochain token.
	GetNochain() antlr.Token

	// GetNorelease returns the norelease token.
	GetNorelease() antlr.Token

	// SetNochain sets the nochain token.
	SetNochain(antlr.Token)

	// SetNorelease sets the norelease token.
	SetNorelease(antlr.Token)

	// IsRollbackWorkContext differentiates from other interfaces.
	IsRollbackWorkContext()
}

type RollbackWorkContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	nochain   antlr.Token
	norelease antlr.Token
}

func NewEmptyRollbackWorkContext() *RollbackWorkContext {
	var p = new(RollbackWorkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_rollbackWork
	return p
}

func (*RollbackWorkContext) IsRollbackWorkContext() {}

func NewRollbackWorkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RollbackWorkContext {
	var p = new(RollbackWorkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_rollbackWork

	return p
}

func (s *RollbackWorkContext) GetParser() antlr.Parser { return s.parser }

func (s *RollbackWorkContext) GetNochain() antlr.Token { return s.nochain }

func (s *RollbackWorkContext) GetNorelease() antlr.Token { return s.norelease }

func (s *RollbackWorkContext) SetNochain(v antlr.Token) { s.nochain = v }

func (s *RollbackWorkContext) SetNorelease(v antlr.Token) { s.norelease = v }

func (s *RollbackWorkContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLBACK, 0)
}

func (s *RollbackWorkContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *RollbackWorkContext) AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, 0)
}

func (s *RollbackWorkContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAIN, 0)
}

func (s *RollbackWorkContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELEASE, 0)
}

func (s *RollbackWorkContext) AllNO() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNO)
}

func (s *RollbackWorkContext) NO(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, i)
}

func (s *RollbackWorkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RollbackWorkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RollbackWorkContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRollbackWork(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) RollbackWork() (localctx IRollbackWorkContext) {
	localctx = NewRollbackWorkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, MySqlParserRULE_rollbackWork)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3745)
		p.Match(MySqlParserROLLBACK)
	}
	p.SetState(3747)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWORK {
		{
			p.SetState(3746)
			p.Match(MySqlParserWORK)
		}

	}
	p.SetState(3754)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAND {
		{
			p.SetState(3749)
			p.Match(MySqlParserAND)
		}
		p.SetState(3751)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNO {
			{
				p.SetState(3750)

				var _m = p.Match(MySqlParserNO)

				localctx.(*RollbackWorkContext).nochain = _m
			}

		}
		{
			p.SetState(3753)
			p.Match(MySqlParserCHAIN)
		}

	}
	p.SetState(3760)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 550, p.GetParserRuleContext()) == 1 {
		p.SetState(3757)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNO {
			{
				p.SetState(3756)

				var _m = p.Match(MySqlParserNO)

				localctx.(*RollbackWorkContext).norelease = _m
			}

		}
		{
			p.SetState(3759)
			p.Match(MySqlParserRELEASE)
		}

	}

	return localctx
}

// ISavepointStatementContext is an interface to support dynamic dispatch.
type ISavepointStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSavepointStatementContext differentiates from other interfaces.
	IsSavepointStatementContext()
}

type SavepointStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepointStatementContext() *SavepointStatementContext {
	var p = new(SavepointStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_savepointStatement
	return p
}

func (*SavepointStatementContext) IsSavepointStatementContext() {}

func NewSavepointStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SavepointStatementContext {
	var p = new(SavepointStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_savepointStatement

	return p
}

func (s *SavepointStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SavepointStatementContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSAVEPOINT, 0)
}

func (s *SavepointStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SavepointStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SavepointStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SavepointStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSavepointStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SavepointStatement() (localctx ISavepointStatementContext) {
	localctx = NewSavepointStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, MySqlParserRULE_savepointStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3762)
		p.Match(MySqlParserSAVEPOINT)
	}
	{
		p.SetState(3763)
		p.Uid()
	}

	return localctx
}

// IRollbackStatementContext is an interface to support dynamic dispatch.
type IRollbackStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRollbackStatementContext differentiates from other interfaces.
	IsRollbackStatementContext()
}

type RollbackStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollbackStatementContext() *RollbackStatementContext {
	var p = new(RollbackStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_rollbackStatement
	return p
}

func (*RollbackStatementContext) IsRollbackStatementContext() {}

func NewRollbackStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RollbackStatementContext {
	var p = new(RollbackStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_rollbackStatement

	return p
}

func (s *RollbackStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *RollbackStatementContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLBACK, 0)
}

func (s *RollbackStatementContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *RollbackStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *RollbackStatementContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *RollbackStatementContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSAVEPOINT, 0)
}

func (s *RollbackStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RollbackStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RollbackStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRollbackStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) RollbackStatement() (localctx IRollbackStatementContext) {
	localctx = NewRollbackStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, MySqlParserRULE_rollbackStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3765)
		p.Match(MySqlParserROLLBACK)
	}
	p.SetState(3767)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWORK {
		{
			p.SetState(3766)
			p.Match(MySqlParserWORK)
		}

	}
	{
		p.SetState(3769)
		p.Match(MySqlParserTO)
	}
	p.SetState(3771)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 552, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3770)
			p.Match(MySqlParserSAVEPOINT)
		}

	}
	{
		p.SetState(3773)
		p.Uid()
	}

	return localctx
}

// IReleaseStatementContext is an interface to support dynamic dispatch.
type IReleaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReleaseStatementContext differentiates from other interfaces.
	IsReleaseStatementContext()
}

type ReleaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReleaseStatementContext() *ReleaseStatementContext {
	var p = new(ReleaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_releaseStatement
	return p
}

func (*ReleaseStatementContext) IsReleaseStatementContext() {}

func NewReleaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReleaseStatementContext {
	var p = new(ReleaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_releaseStatement

	return p
}

func (s *ReleaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReleaseStatementContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELEASE, 0)
}

func (s *ReleaseStatementContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSAVEPOINT, 0)
}

func (s *ReleaseStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ReleaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReleaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReleaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReleaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ReleaseStatement() (localctx IReleaseStatementContext) {
	localctx = NewReleaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, MySqlParserRULE_releaseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3775)
		p.Match(MySqlParserRELEASE)
	}
	{
		p.SetState(3776)
		p.Match(MySqlParserSAVEPOINT)
	}
	{
		p.SetState(3777)
		p.Uid()
	}

	return localctx
}

// ILockTablesContext is an interface to support dynamic dispatch.
type ILockTablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockTablesContext differentiates from other interfaces.
	IsLockTablesContext()
}

type LockTablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockTablesContext() *LockTablesContext {
	var p = new(LockTablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lockTables
	return p
}

func (*LockTablesContext) IsLockTablesContext() {}

func NewLockTablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockTablesContext {
	var p = new(LockTablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lockTables

	return p
}

func (s *LockTablesContext) GetParser() antlr.Parser { return s.parser }

func (s *LockTablesContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *LockTablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *LockTablesContext) AllLockTableElement() []ILockTableElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILockTableElementContext)(nil)).Elem())
	var tst = make([]ILockTableElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILockTableElementContext)
		}
	}

	return tst
}

func (s *LockTablesContext) LockTableElement(i int) ILockTableElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockTableElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILockTableElementContext)
}

func (s *LockTablesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *LockTablesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *LockTablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockTablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockTablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLockTables(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LockTables() (localctx ILockTablesContext) {
	localctx = NewLockTablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, MySqlParserRULE_lockTables)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3779)
		p.Match(MySqlParserLOCK)
	}
	{
		p.SetState(3780)
		p.Match(MySqlParserTABLES)
	}
	{
		p.SetState(3781)
		p.LockTableElement()
	}
	p.SetState(3786)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3782)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3783)
			p.LockTableElement()
		}

		p.SetState(3788)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUnlockTablesContext is an interface to support dynamic dispatch.
type IUnlockTablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnlockTablesContext differentiates from other interfaces.
	IsUnlockTablesContext()
}

type UnlockTablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnlockTablesContext() *UnlockTablesContext {
	var p = new(UnlockTablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_unlockTables
	return p
}

func (*UnlockTablesContext) IsUnlockTablesContext() {}

func NewUnlockTablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnlockTablesContext {
	var p = new(UnlockTablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_unlockTables

	return p
}

func (s *UnlockTablesContext) GetParser() antlr.Parser { return s.parser }

func (s *UnlockTablesContext) UNLOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNLOCK, 0)
}

func (s *UnlockTablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *UnlockTablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnlockTablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnlockTablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnlockTables(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UnlockTables() (localctx IUnlockTablesContext) {
	localctx = NewUnlockTablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, MySqlParserRULE_unlockTables)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3789)
		p.Match(MySqlParserUNLOCK)
	}
	{
		p.SetState(3790)
		p.Match(MySqlParserTABLES)
	}

	return localctx
}

// ISetAutocommitStatementContext is an interface to support dynamic dispatch.
type ISetAutocommitStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAutocommitValue returns the autocommitValue token.
	GetAutocommitValue() antlr.Token

	// SetAutocommitValue sets the autocommitValue token.
	SetAutocommitValue(antlr.Token)

	// IsSetAutocommitStatementContext differentiates from other interfaces.
	IsSetAutocommitStatementContext()
}

type SetAutocommitStatementContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	autocommitValue antlr.Token
}

func NewEmptySetAutocommitStatementContext() *SetAutocommitStatementContext {
	var p = new(SetAutocommitStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_setAutocommitStatement
	return p
}

func (*SetAutocommitStatementContext) IsSetAutocommitStatementContext() {}

func NewSetAutocommitStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetAutocommitStatementContext {
	var p = new(SetAutocommitStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_setAutocommitStatement

	return p
}

func (s *SetAutocommitStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SetAutocommitStatementContext) GetAutocommitValue() antlr.Token { return s.autocommitValue }

func (s *SetAutocommitStatementContext) SetAutocommitValue(v antlr.Token) { s.autocommitValue = v }

func (s *SetAutocommitStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetAutocommitStatementContext) AUTOCOMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTOCOMMIT, 0)
}

func (s *SetAutocommitStatementContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *SetAutocommitStatementContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *SetAutocommitStatementContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *SetAutocommitStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetAutocommitStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetAutocommitStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetAutocommitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SetAutocommitStatement() (localctx ISetAutocommitStatementContext) {
	localctx = NewSetAutocommitStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, MySqlParserRULE_setAutocommitStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3792)
		p.Match(MySqlParserSET)
	}
	{
		p.SetState(3793)
		p.Match(MySqlParserAUTOCOMMIT)
	}
	{
		p.SetState(3794)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	{
		p.SetState(3795)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SetAutocommitStatementContext).autocommitValue = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SetAutocommitStatementContext).autocommitValue = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISetTransactionStatementContext is an interface to support dynamic dispatch.
type ISetTransactionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTransactionContext returns the transactionContext token.
	GetTransactionContext() antlr.Token

	// SetTransactionContext sets the transactionContext token.
	SetTransactionContext(antlr.Token)

	// IsSetTransactionStatementContext differentiates from other interfaces.
	IsSetTransactionStatementContext()
}

type SetTransactionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	transactionContext antlr.Token
}

func NewEmptySetTransactionStatementContext() *SetTransactionStatementContext {
	var p = new(SetTransactionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_setTransactionStatement
	return p
}

func (*SetTransactionStatementContext) IsSetTransactionStatementContext() {}

func NewSetTransactionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetTransactionStatementContext {
	var p = new(SetTransactionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_setTransactionStatement

	return p
}

func (s *SetTransactionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SetTransactionStatementContext) GetTransactionContext() antlr.Token {
	return s.transactionContext
}

func (s *SetTransactionStatementContext) SetTransactionContext(v antlr.Token) {
	s.transactionContext = v
}

func (s *SetTransactionStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetTransactionStatementContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRANSACTION, 0)
}

func (s *SetTransactionStatementContext) AllTransactionOption() []ITransactionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITransactionOptionContext)(nil)).Elem())
	var tst = make([]ITransactionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITransactionOptionContext)
		}
	}

	return tst
}

func (s *SetTransactionStatementContext) TransactionOption(i int) ITransactionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITransactionOptionContext)
}

func (s *SetTransactionStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SetTransactionStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SetTransactionStatementContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL, 0)
}

func (s *SetTransactionStatementContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION, 0)
}

func (s *SetTransactionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetTransactionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetTransactionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetTransactionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SetTransactionStatement() (localctx ISetTransactionStatementContext) {
	localctx = NewSetTransactionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, MySqlParserRULE_setTransactionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3797)
		p.Match(MySqlParserSET)
	}
	p.SetState(3799)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserGLOBAL || _la == MySqlParserSESSION {
		{
			p.SetState(3798)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SetTransactionStatementContext).transactionContext = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserGLOBAL || _la == MySqlParserSESSION) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SetTransactionStatementContext).transactionContext = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(3801)
		p.Match(MySqlParserTRANSACTION)
	}
	{
		p.SetState(3802)
		p.TransactionOption()
	}
	p.SetState(3807)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3803)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3804)
			p.TransactionOption()
		}

		p.SetState(3809)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITransactionModeContext is an interface to support dynamic dispatch.
type ITransactionModeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionModeContext differentiates from other interfaces.
	IsTransactionModeContext()
}

type TransactionModeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionModeContext() *TransactionModeContext {
	var p = new(TransactionModeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transactionMode
	return p
}

func (*TransactionModeContext) IsTransactionModeContext() {}

func NewTransactionModeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionModeContext {
	var p = new(TransactionModeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transactionMode

	return p
}

func (s *TransactionModeContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionModeContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *TransactionModeContext) CONSISTENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSISTENT, 0)
}

func (s *TransactionModeContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSNAPSHOT, 0)
}

func (s *TransactionModeContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *TransactionModeContext) WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRITE, 0)
}

func (s *TransactionModeContext) ONLY() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLY, 0)
}

func (s *TransactionModeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionModeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionModeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTransactionMode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TransactionMode() (localctx ITransactionModeContext) {
	localctx = NewTransactionModeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, MySqlParserRULE_transactionMode)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3817)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 556, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3810)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(3811)
			p.Match(MySqlParserCONSISTENT)
		}
		{
			p.SetState(3812)
			p.Match(MySqlParserSNAPSHOT)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3813)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3814)
			p.Match(MySqlParserWRITE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3815)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3816)
			p.Match(MySqlParserONLY)
		}

	}

	return localctx
}

// ILockTableElementContext is an interface to support dynamic dispatch.
type ILockTableElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockTableElementContext differentiates from other interfaces.
	IsLockTableElementContext()
}

type LockTableElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockTableElementContext() *LockTableElementContext {
	var p = new(LockTableElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lockTableElement
	return p
}

func (*LockTableElementContext) IsLockTableElementContext() {}

func NewLockTableElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockTableElementContext {
	var p = new(LockTableElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lockTableElement

	return p
}

func (s *LockTableElementContext) GetParser() antlr.Parser { return s.parser }

func (s *LockTableElementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *LockTableElementContext) LockAction() ILockActionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILockActionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILockActionContext)
}

func (s *LockTableElementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *LockTableElementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *LockTableElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockTableElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockTableElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLockTableElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LockTableElement() (localctx ILockTableElementContext) {
	localctx = NewLockTableElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, MySqlParserRULE_lockTableElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3819)
		p.TableName()
	}
	p.SetState(3824)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-11)&-(0x1f+1)) == 0 && ((1<<uint((_la-11)))&((1<<(MySqlParserAS-11))|(1<<(MySqlParserCURRENT-11))|(1<<(MySqlParserDATABASE-11)))) != 0) || _la == MySqlParserDIAGNOSTICS || _la == MySqlParserGROUP || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(MySqlParserLEFT-88))|(1<<(MySqlParserNUMBER-88))|(1<<(MySqlParserORDER-88)))) != 0) || (((_la-135)&-(0x1f+1)) == 0 && ((1<<uint((_la-135)))&((1<<(MySqlParserRIGHT-135))|(1<<(MySqlParserSCHEMA-135))|(1<<(MySqlParserSTACKED-135)))) != 0) || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		p.SetState(3821)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(3820)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(3823)
			p.Uid()
		}

	}
	{
		p.SetState(3826)
		p.LockAction()
	}

	return localctx
}

// ILockActionContext is an interface to support dynamic dispatch.
type ILockActionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLockActionContext differentiates from other interfaces.
	IsLockActionContext()
}

type LockActionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLockActionContext() *LockActionContext {
	var p = new(LockActionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lockAction
	return p
}

func (*LockActionContext) IsLockActionContext() {}

func NewLockActionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LockActionContext {
	var p = new(LockActionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lockAction

	return p
}

func (s *LockActionContext) GetParser() antlr.Parser { return s.parser }

func (s *LockActionContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *LockActionContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *LockActionContext) WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRITE, 0)
}

func (s *LockActionContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *LockActionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LockActionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LockActionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLockAction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LockAction() (localctx ILockActionContext) {
	localctx = NewLockActionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, MySqlParserRULE_lockAction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3836)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserREAD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3828)
			p.Match(MySqlParserREAD)
		}
		p.SetState(3830)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLOCAL {
			{
				p.SetState(3829)
				p.Match(MySqlParserLOCAL)
			}

		}

	case MySqlParserLOW_PRIORITY, MySqlParserWRITE:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3833)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLOW_PRIORITY {
			{
				p.SetState(3832)
				p.Match(MySqlParserLOW_PRIORITY)
			}

		}
		{
			p.SetState(3835)
			p.Match(MySqlParserWRITE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITransactionOptionContext is an interface to support dynamic dispatch.
type ITransactionOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionOptionContext differentiates from other interfaces.
	IsTransactionOptionContext()
}

type TransactionOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionOptionContext() *TransactionOptionContext {
	var p = new(TransactionOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transactionOption
	return p
}

func (*TransactionOptionContext) IsTransactionOptionContext() {}

func NewTransactionOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionOptionContext {
	var p = new(TransactionOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transactionOption

	return p
}

func (s *TransactionOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionOptionContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserISOLATION, 0)
}

func (s *TransactionOptionContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEVEL, 0)
}

func (s *TransactionOptionContext) TransactionLevel() ITransactionLevelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionLevelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransactionLevelContext)
}

func (s *TransactionOptionContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *TransactionOptionContext) WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRITE, 0)
}

func (s *TransactionOptionContext) ONLY() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLY, 0)
}

func (s *TransactionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTransactionOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TransactionOption() (localctx ITransactionOptionContext) {
	localctx = NewTransactionOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, MySqlParserRULE_transactionOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3845)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 562, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3838)
			p.Match(MySqlParserISOLATION)
		}
		{
			p.SetState(3839)
			p.Match(MySqlParserLEVEL)
		}
		{
			p.SetState(3840)
			p.TransactionLevel()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3841)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3842)
			p.Match(MySqlParserWRITE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3843)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3844)
			p.Match(MySqlParserONLY)
		}

	}

	return localctx
}

// ITransactionLevelContext is an interface to support dynamic dispatch.
type ITransactionLevelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionLevelContext differentiates from other interfaces.
	IsTransactionLevelContext()
}

type TransactionLevelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionLevelContext() *TransactionLevelContext {
	var p = new(TransactionLevelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transactionLevel
	return p
}

func (*TransactionLevelContext) IsTransactionLevelContext() {}

func NewTransactionLevelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionLevelContext {
	var p = new(TransactionLevelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transactionLevel

	return p
}

func (s *TransactionLevelContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionLevelContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPEATABLE, 0)
}

func (s *TransactionLevelContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *TransactionLevelContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMITTED, 0)
}

func (s *TransactionLevelContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNCOMMITTED, 0)
}

func (s *TransactionLevelContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERIALIZABLE, 0)
}

func (s *TransactionLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionLevelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionLevelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTransactionLevel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TransactionLevel() (localctx ITransactionLevelContext) {
	localctx = NewTransactionLevelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, MySqlParserRULE_transactionLevel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3854)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 563, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3847)
			p.Match(MySqlParserREPEATABLE)
		}
		{
			p.SetState(3848)
			p.Match(MySqlParserREAD)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3849)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3850)
			p.Match(MySqlParserCOMMITTED)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3851)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3852)
			p.Match(MySqlParserUNCOMMITTED)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3853)
			p.Match(MySqlParserSERIALIZABLE)
		}

	}

	return localctx
}

// IChangeMasterContext is an interface to support dynamic dispatch.
type IChangeMasterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChangeMasterContext differentiates from other interfaces.
	IsChangeMasterContext()
}

type ChangeMasterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChangeMasterContext() *ChangeMasterContext {
	var p = new(ChangeMasterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_changeMaster
	return p
}

func (*ChangeMasterContext) IsChangeMasterContext() {}

func NewChangeMasterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChangeMasterContext {
	var p = new(ChangeMasterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_changeMaster

	return p
}

func (s *ChangeMasterContext) GetParser() antlr.Parser { return s.parser }

func (s *ChangeMasterContext) CHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGE, 0)
}

func (s *ChangeMasterContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *ChangeMasterContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *ChangeMasterContext) AllMasterOption() []IMasterOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMasterOptionContext)(nil)).Elem())
	var tst = make([]IMasterOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMasterOptionContext)
		}
	}

	return tst
}

func (s *ChangeMasterContext) MasterOption(i int) IMasterOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMasterOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMasterOptionContext)
}

func (s *ChangeMasterContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ChangeMasterContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ChangeMasterContext) ChannelOption() IChannelOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelOptionContext)
}

func (s *ChangeMasterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChangeMasterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChangeMasterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitChangeMaster(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ChangeMaster() (localctx IChangeMasterContext) {
	localctx = NewChangeMasterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, MySqlParserRULE_changeMaster)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3856)
		p.Match(MySqlParserCHANGE)
	}
	{
		p.SetState(3857)
		p.Match(MySqlParserMASTER)
	}
	{
		p.SetState(3858)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(3859)
		p.MasterOption()
	}
	p.SetState(3864)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3860)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3861)
			p.MasterOption()
		}

		p.SetState(3866)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3868)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(3867)
			p.ChannelOption()
		}

	}

	return localctx
}

// IChangeReplicationFilterContext is an interface to support dynamic dispatch.
type IChangeReplicationFilterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChangeReplicationFilterContext differentiates from other interfaces.
	IsChangeReplicationFilterContext()
}

type ChangeReplicationFilterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChangeReplicationFilterContext() *ChangeReplicationFilterContext {
	var p = new(ChangeReplicationFilterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_changeReplicationFilter
	return p
}

func (*ChangeReplicationFilterContext) IsChangeReplicationFilterContext() {}

func NewChangeReplicationFilterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChangeReplicationFilterContext {
	var p = new(ChangeReplicationFilterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_changeReplicationFilter

	return p
}

func (s *ChangeReplicationFilterContext) GetParser() antlr.Parser { return s.parser }

func (s *ChangeReplicationFilterContext) CHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGE, 0)
}

func (s *ChangeReplicationFilterContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION, 0)
}

func (s *ChangeReplicationFilterContext) FILTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILTER, 0)
}

func (s *ChangeReplicationFilterContext) AllReplicationFilter() []IReplicationFilterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReplicationFilterContext)(nil)).Elem())
	var tst = make([]IReplicationFilterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReplicationFilterContext)
		}
	}

	return tst
}

func (s *ChangeReplicationFilterContext) ReplicationFilter(i int) IReplicationFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplicationFilterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReplicationFilterContext)
}

func (s *ChangeReplicationFilterContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ChangeReplicationFilterContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ChangeReplicationFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChangeReplicationFilterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChangeReplicationFilterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitChangeReplicationFilter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ChangeReplicationFilter() (localctx IChangeReplicationFilterContext) {
	localctx = NewChangeReplicationFilterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, MySqlParserRULE_changeReplicationFilter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3870)
		p.Match(MySqlParserCHANGE)
	}
	{
		p.SetState(3871)
		p.Match(MySqlParserREPLICATION)
	}
	{
		p.SetState(3872)
		p.Match(MySqlParserFILTER)
	}
	{
		p.SetState(3873)
		p.ReplicationFilter()
	}
	p.SetState(3878)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3874)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3875)
			p.ReplicationFilter()
		}

		p.SetState(3880)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPurgeBinaryLogsContext is an interface to support dynamic dispatch.
type IPurgeBinaryLogsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPurgeFormat returns the purgeFormat token.
	GetPurgeFormat() antlr.Token

	// GetFileName returns the fileName token.
	GetFileName() antlr.Token

	// GetTimeValue returns the timeValue token.
	GetTimeValue() antlr.Token

	// SetPurgeFormat sets the purgeFormat token.
	SetPurgeFormat(antlr.Token)

	// SetFileName sets the fileName token.
	SetFileName(antlr.Token)

	// SetTimeValue sets the timeValue token.
	SetTimeValue(antlr.Token)

	// IsPurgeBinaryLogsContext differentiates from other interfaces.
	IsPurgeBinaryLogsContext()
}

type PurgeBinaryLogsContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	purgeFormat antlr.Token
	fileName    antlr.Token
	timeValue   antlr.Token
}

func NewEmptyPurgeBinaryLogsContext() *PurgeBinaryLogsContext {
	var p = new(PurgeBinaryLogsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_purgeBinaryLogs
	return p
}

func (*PurgeBinaryLogsContext) IsPurgeBinaryLogsContext() {}

func NewPurgeBinaryLogsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PurgeBinaryLogsContext {
	var p = new(PurgeBinaryLogsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_purgeBinaryLogs

	return p
}

func (s *PurgeBinaryLogsContext) GetParser() antlr.Parser { return s.parser }

func (s *PurgeBinaryLogsContext) GetPurgeFormat() antlr.Token { return s.purgeFormat }

func (s *PurgeBinaryLogsContext) GetFileName() antlr.Token { return s.fileName }

func (s *PurgeBinaryLogsContext) GetTimeValue() antlr.Token { return s.timeValue }

func (s *PurgeBinaryLogsContext) SetPurgeFormat(v antlr.Token) { s.purgeFormat = v }

func (s *PurgeBinaryLogsContext) SetFileName(v antlr.Token) { s.fileName = v }

func (s *PurgeBinaryLogsContext) SetTimeValue(v antlr.Token) { s.timeValue = v }

func (s *PurgeBinaryLogsContext) PURGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPURGE, 0)
}

func (s *PurgeBinaryLogsContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *PurgeBinaryLogsContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *PurgeBinaryLogsContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *PurgeBinaryLogsContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *PurgeBinaryLogsContext) BEFORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEFORE, 0)
}

func (s *PurgeBinaryLogsContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PurgeBinaryLogsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PurgeBinaryLogsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PurgeBinaryLogsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPurgeBinaryLogs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) PurgeBinaryLogs() (localctx IPurgeBinaryLogsContext) {
	localctx = NewPurgeBinaryLogsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, MySqlParserRULE_purgeBinaryLogs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3881)
		p.Match(MySqlParserPURGE)
	}
	{
		p.SetState(3882)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PurgeBinaryLogsContext).purgeFormat = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserBINARY || _la == MySqlParserMASTER) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PurgeBinaryLogsContext).purgeFormat = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(3883)
		p.Match(MySqlParserLOGS)
	}
	p.SetState(3888)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserTO:
		{
			p.SetState(3884)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(3885)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PurgeBinaryLogsContext).fileName = _m
		}

	case MySqlParserBEFORE:
		{
			p.SetState(3886)
			p.Match(MySqlParserBEFORE)
		}
		{
			p.SetState(3887)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PurgeBinaryLogsContext).timeValue = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IResetMasterContext is an interface to support dynamic dispatch.
type IResetMasterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResetMasterContext differentiates from other interfaces.
	IsResetMasterContext()
}

type ResetMasterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResetMasterContext() *ResetMasterContext {
	var p = new(ResetMasterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_resetMaster
	return p
}

func (*ResetMasterContext) IsResetMasterContext() {}

func NewResetMasterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResetMasterContext {
	var p = new(ResetMasterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_resetMaster

	return p
}

func (s *ResetMasterContext) GetParser() antlr.Parser { return s.parser }

func (s *ResetMasterContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESET, 0)
}

func (s *ResetMasterContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *ResetMasterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResetMasterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResetMasterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitResetMaster(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ResetMaster() (localctx IResetMasterContext) {
	localctx = NewResetMasterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, MySqlParserRULE_resetMaster)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3890)
		p.Match(MySqlParserRESET)
	}
	{
		p.SetState(3891)
		p.Match(MySqlParserMASTER)
	}

	return localctx
}

// IResetSlaveContext is an interface to support dynamic dispatch.
type IResetSlaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResetSlaveContext differentiates from other interfaces.
	IsResetSlaveContext()
}

type ResetSlaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResetSlaveContext() *ResetSlaveContext {
	var p = new(ResetSlaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_resetSlave
	return p
}

func (*ResetSlaveContext) IsResetSlaveContext() {}

func NewResetSlaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResetSlaveContext {
	var p = new(ResetSlaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_resetSlave

	return p
}

func (s *ResetSlaveContext) GetParser() antlr.Parser { return s.parser }

func (s *ResetSlaveContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESET, 0)
}

func (s *ResetSlaveContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *ResetSlaveContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *ResetSlaveContext) ChannelOption() IChannelOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelOptionContext)
}

func (s *ResetSlaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResetSlaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResetSlaveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitResetSlave(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ResetSlave() (localctx IResetSlaveContext) {
	localctx = NewResetSlaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, MySqlParserRULE_resetSlave)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3893)
		p.Match(MySqlParserRESET)
	}
	{
		p.SetState(3894)
		p.Match(MySqlParserSLAVE)
	}
	p.SetState(3896)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALL {
		{
			p.SetState(3895)
			p.Match(MySqlParserALL)
		}

	}
	p.SetState(3899)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(3898)
			p.ChannelOption()
		}

	}

	return localctx
}

// IStartSlaveContext is an interface to support dynamic dispatch.
type IStartSlaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStartSlaveContext differentiates from other interfaces.
	IsStartSlaveContext()
}

type StartSlaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStartSlaveContext() *StartSlaveContext {
	var p = new(StartSlaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_startSlave
	return p
}

func (*StartSlaveContext) IsStartSlaveContext() {}

func NewStartSlaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartSlaveContext {
	var p = new(StartSlaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_startSlave

	return p
}

func (s *StartSlaveContext) GetParser() antlr.Parser { return s.parser }

func (s *StartSlaveContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *StartSlaveContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *StartSlaveContext) AllThreadType() []IThreadTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IThreadTypeContext)(nil)).Elem())
	var tst = make([]IThreadTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IThreadTypeContext)
		}
	}

	return tst
}

func (s *StartSlaveContext) ThreadType(i int) IThreadTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThreadTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IThreadTypeContext)
}

func (s *StartSlaveContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNTIL, 0)
}

func (s *StartSlaveContext) UntilOption() IUntilOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUntilOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUntilOptionContext)
}

func (s *StartSlaveContext) AllConnectionOption() []IConnectionOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConnectionOptionContext)(nil)).Elem())
	var tst = make([]IConnectionOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConnectionOptionContext)
		}
	}

	return tst
}

func (s *StartSlaveContext) ConnectionOption(i int) IConnectionOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConnectionOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConnectionOptionContext)
}

func (s *StartSlaveContext) ChannelOption() IChannelOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelOptionContext)
}

func (s *StartSlaveContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *StartSlaveContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *StartSlaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartSlaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartSlaveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStartSlave(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) StartSlave() (localctx IStartSlaveContext) {
	localctx = NewStartSlaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, MySqlParserRULE_startSlave)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3901)
		p.Match(MySqlParserSTART)
	}
	{
		p.SetState(3902)
		p.Match(MySqlParserSLAVE)
	}
	p.SetState(3911)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIO_THREAD || _la == MySqlParserSQL_THREAD {
		{
			p.SetState(3903)
			p.ThreadType()
		}
		p.SetState(3908)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3904)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3905)
				p.ThreadType()
			}

			p.SetState(3910)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(3915)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUNTIL {
		{
			p.SetState(3913)
			p.Match(MySqlParserUNTIL)
		}
		{
			p.SetState(3914)
			p.UntilOption()
		}

	}
	p.SetState(3920)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserDEFAULT_AUTH || _la == MySqlParserPASSWORD || _la == MySqlParserPLUGIN_DIR || _la == MySqlParserUSER {
		{
			p.SetState(3917)
			p.ConnectionOption()
		}

		p.SetState(3922)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3924)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(3923)
			p.ChannelOption()
		}

	}

	return localctx
}

// IStopSlaveContext is an interface to support dynamic dispatch.
type IStopSlaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStopSlaveContext differentiates from other interfaces.
	IsStopSlaveContext()
}

type StopSlaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStopSlaveContext() *StopSlaveContext {
	var p = new(StopSlaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_stopSlave
	return p
}

func (*StopSlaveContext) IsStopSlaveContext() {}

func NewStopSlaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StopSlaveContext {
	var p = new(StopSlaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_stopSlave

	return p
}

func (s *StopSlaveContext) GetParser() antlr.Parser { return s.parser }

func (s *StopSlaveContext) STOP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTOP, 0)
}

func (s *StopSlaveContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *StopSlaveContext) AllThreadType() []IThreadTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IThreadTypeContext)(nil)).Elem())
	var tst = make([]IThreadTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IThreadTypeContext)
		}
	}

	return tst
}

func (s *StopSlaveContext) ThreadType(i int) IThreadTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThreadTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IThreadTypeContext)
}

func (s *StopSlaveContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *StopSlaveContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *StopSlaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StopSlaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StopSlaveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStopSlave(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) StopSlave() (localctx IStopSlaveContext) {
	localctx = NewStopSlaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, MySqlParserRULE_stopSlave)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3926)
		p.Match(MySqlParserSTOP)
	}
	{
		p.SetState(3927)
		p.Match(MySqlParserSLAVE)
	}
	p.SetState(3936)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIO_THREAD || _la == MySqlParserSQL_THREAD {
		{
			p.SetState(3928)
			p.ThreadType()
		}
		p.SetState(3933)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3929)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3930)
				p.ThreadType()
			}

			p.SetState(3935)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IStartGroupReplicationContext is an interface to support dynamic dispatch.
type IStartGroupReplicationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStartGroupReplicationContext differentiates from other interfaces.
	IsStartGroupReplicationContext()
}

type StartGroupReplicationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStartGroupReplicationContext() *StartGroupReplicationContext {
	var p = new(StartGroupReplicationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_startGroupReplication
	return p
}

func (*StartGroupReplicationContext) IsStartGroupReplicationContext() {}

func NewStartGroupReplicationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartGroupReplicationContext {
	var p = new(StartGroupReplicationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_startGroupReplication

	return p
}

func (s *StartGroupReplicationContext) GetParser() antlr.Parser { return s.parser }

func (s *StartGroupReplicationContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *StartGroupReplicationContext) GROUP_REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_REPLICATION, 0)
}

func (s *StartGroupReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartGroupReplicationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartGroupReplicationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStartGroupReplication(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) StartGroupReplication() (localctx IStartGroupReplicationContext) {
	localctx = NewStartGroupReplicationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, MySqlParserRULE_startGroupReplication)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3938)
		p.Match(MySqlParserSTART)
	}
	{
		p.SetState(3939)
		p.Match(MySqlParserGROUP_REPLICATION)
	}

	return localctx
}

// IStopGroupReplicationContext is an interface to support dynamic dispatch.
type IStopGroupReplicationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStopGroupReplicationContext differentiates from other interfaces.
	IsStopGroupReplicationContext()
}

type StopGroupReplicationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStopGroupReplicationContext() *StopGroupReplicationContext {
	var p = new(StopGroupReplicationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_stopGroupReplication
	return p
}

func (*StopGroupReplicationContext) IsStopGroupReplicationContext() {}

func NewStopGroupReplicationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StopGroupReplicationContext {
	var p = new(StopGroupReplicationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_stopGroupReplication

	return p
}

func (s *StopGroupReplicationContext) GetParser() antlr.Parser { return s.parser }

func (s *StopGroupReplicationContext) STOP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTOP, 0)
}

func (s *StopGroupReplicationContext) GROUP_REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_REPLICATION, 0)
}

func (s *StopGroupReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StopGroupReplicationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StopGroupReplicationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStopGroupReplication(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) StopGroupReplication() (localctx IStopGroupReplicationContext) {
	localctx = NewStopGroupReplicationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, MySqlParserRULE_stopGroupReplication)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3941)
		p.Match(MySqlParserSTOP)
	}
	{
		p.SetState(3942)
		p.Match(MySqlParserGROUP_REPLICATION)
	}

	return localctx
}

// IMasterOptionContext is an interface to support dynamic dispatch.
type IMasterOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMasterOptionContext differentiates from other interfaces.
	IsMasterOptionContext()
}

type MasterOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMasterOptionContext() *MasterOptionContext {
	var p = new(MasterOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_masterOption
	return p
}

func (*MasterOptionContext) IsMasterOptionContext() {}

func NewMasterOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MasterOptionContext {
	var p = new(MasterOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_masterOption

	return p
}

func (s *MasterOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *MasterOptionContext) CopyFrom(ctx *MasterOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *MasterOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type MasterStringOptionContext struct {
	*MasterOptionContext
}

func NewMasterStringOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterStringOptionContext {
	var p = new(MasterStringOptionContext)

	p.MasterOptionContext = NewEmptyMasterOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MasterOptionContext))

	return p
}

func (s *MasterStringOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterStringOptionContext) StringMasterOption() IStringMasterOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringMasterOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringMasterOptionContext)
}

func (s *MasterStringOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *MasterStringOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *MasterStringOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMasterStringOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type MasterRealOptionContext struct {
	*MasterOptionContext
}

func NewMasterRealOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterRealOptionContext {
	var p = new(MasterRealOptionContext)

	p.MasterOptionContext = NewEmptyMasterOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MasterOptionContext))

	return p
}

func (s *MasterRealOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterRealOptionContext) MASTER_HEARTBEAT_PERIOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_HEARTBEAT_PERIOD, 0)
}

func (s *MasterRealOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *MasterRealOptionContext) REAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAL_LITERAL, 0)
}

func (s *MasterRealOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMasterRealOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type MasterBoolOptionContext struct {
	*MasterOptionContext
	boolVal antlr.Token
}

func NewMasterBoolOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterBoolOptionContext {
	var p = new(MasterBoolOptionContext)

	p.MasterOptionContext = NewEmptyMasterOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MasterOptionContext))

	return p
}

func (s *MasterBoolOptionContext) GetBoolVal() antlr.Token { return s.boolVal }

func (s *MasterBoolOptionContext) SetBoolVal(v antlr.Token) { s.boolVal = v }

func (s *MasterBoolOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterBoolOptionContext) BoolMasterOption() IBoolMasterOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolMasterOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolMasterOptionContext)
}

func (s *MasterBoolOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *MasterBoolOptionContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *MasterBoolOptionContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *MasterBoolOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMasterBoolOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type MasterUidListOptionContext struct {
	*MasterOptionContext
}

func NewMasterUidListOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterUidListOptionContext {
	var p = new(MasterUidListOptionContext)

	p.MasterOptionContext = NewEmptyMasterOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MasterOptionContext))

	return p
}

func (s *MasterUidListOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterUidListOptionContext) IGNORE_SERVER_IDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE_SERVER_IDS, 0)
}

func (s *MasterUidListOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *MasterUidListOptionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *MasterUidListOptionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *MasterUidListOptionContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *MasterUidListOptionContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *MasterUidListOptionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *MasterUidListOptionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *MasterUidListOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMasterUidListOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type MasterDecimalOptionContext struct {
	*MasterOptionContext
}

func NewMasterDecimalOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterDecimalOptionContext {
	var p = new(MasterDecimalOptionContext)

	p.MasterOptionContext = NewEmptyMasterOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*MasterOptionContext))

	return p
}

func (s *MasterDecimalOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterDecimalOptionContext) DecimalMasterOption() IDecimalMasterOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalMasterOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalMasterOptionContext)
}

func (s *MasterDecimalOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *MasterDecimalOptionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *MasterDecimalOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMasterDecimalOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) MasterOption() (localctx IMasterOptionContext) {
	localctx = NewMasterOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, MySqlParserRULE_masterOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3973)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserMASTER_BIND, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserRELAY_LOG_FILE:
		localctx = NewMasterStringOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3944)
			p.StringMasterOption()
		}
		{
			p.SetState(3945)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3946)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserRELAY_LOG_POS:
		localctx = NewMasterDecimalOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3948)
			p.DecimalMasterOption()
		}
		{
			p.SetState(3949)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3950)
			p.DecimalLiteral()
		}

	case MySqlParserMASTER_SSL_VERIFY_SERVER_CERT, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_SSL:
		localctx = NewMasterBoolOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3952)
			p.BoolMasterOption()
		}
		{
			p.SetState(3953)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3954)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*MasterBoolOptionContext).boolVal = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*MasterBoolOptionContext).boolVal = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserMASTER_HEARTBEAT_PERIOD:
		localctx = NewMasterRealOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3956)
			p.Match(MySqlParserMASTER_HEARTBEAT_PERIOD)
		}
		{
			p.SetState(3957)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3958)
			p.Match(MySqlParserREAL_LITERAL)
		}

	case MySqlParserIGNORE_SERVER_IDS:
		localctx = NewMasterUidListOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3959)
			p.Match(MySqlParserIGNORE_SERVER_IDS)
		}
		{
			p.SetState(3960)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3961)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(3970)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
			{
				p.SetState(3962)
				p.Uid()
			}
			p.SetState(3967)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(3963)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(3964)
					p.Uid()
				}

				p.SetState(3969)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(3972)
			p.Match(MySqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStringMasterOptionContext is an interface to support dynamic dispatch.
type IStringMasterOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringMasterOptionContext differentiates from other interfaces.
	IsStringMasterOptionContext()
}

type StringMasterOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringMasterOptionContext() *StringMasterOptionContext {
	var p = new(StringMasterOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_stringMasterOption
	return p
}

func (*StringMasterOptionContext) IsStringMasterOptionContext() {}

func NewStringMasterOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringMasterOptionContext {
	var p = new(StringMasterOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_stringMasterOption

	return p
}

func (s *StringMasterOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *StringMasterOptionContext) MASTER_BIND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_BIND, 0)
}

func (s *StringMasterOptionContext) MASTER_HOST() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_HOST, 0)
}

func (s *StringMasterOptionContext) MASTER_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_USER, 0)
}

func (s *StringMasterOptionContext) MASTER_PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_PASSWORD, 0)
}

func (s *StringMasterOptionContext) MASTER_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_FILE, 0)
}

func (s *StringMasterOptionContext) RELAY_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_FILE, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_CA() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CA, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_CAPATH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CAPATH, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_CERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CERT, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_CRL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CRL, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_CRLPATH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CRLPATH, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_KEY, 0)
}

func (s *StringMasterOptionContext) MASTER_SSL_CIPHER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CIPHER, 0)
}

func (s *StringMasterOptionContext) MASTER_TLS_VERSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_TLS_VERSION, 0)
}

func (s *StringMasterOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringMasterOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringMasterOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStringMasterOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) StringMasterOption() (localctx IStringMasterOptionContext) {
	localctx = NewStringMasterOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, MySqlParserRULE_stringMasterOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3975)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserMASTER_BIND || (((_la-442)&-(0x1f+1)) == 0 && ((1<<uint((_la-442)))&((1<<(MySqlParserMASTER_HOST-442))|(1<<(MySqlParserMASTER_LOG_FILE-442))|(1<<(MySqlParserMASTER_PASSWORD-442))|(1<<(MySqlParserMASTER_SSL_CA-442))|(1<<(MySqlParserMASTER_SSL_CAPATH-442))|(1<<(MySqlParserMASTER_SSL_CERT-442))|(1<<(MySqlParserMASTER_SSL_CIPHER-442))|(1<<(MySqlParserMASTER_SSL_CRL-442))|(1<<(MySqlParserMASTER_SSL_CRLPATH-442))|(1<<(MySqlParserMASTER_SSL_KEY-442))|(1<<(MySqlParserMASTER_TLS_VERSION-442))|(1<<(MySqlParserMASTER_USER-442)))) != 0) || _la == MySqlParserRELAY_LOG_FILE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDecimalMasterOptionContext is an interface to support dynamic dispatch.
type IDecimalMasterOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecimalMasterOptionContext differentiates from other interfaces.
	IsDecimalMasterOptionContext()
}

type DecimalMasterOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecimalMasterOptionContext() *DecimalMasterOptionContext {
	var p = new(DecimalMasterOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_decimalMasterOption
	return p
}

func (*DecimalMasterOptionContext) IsDecimalMasterOptionContext() {}

func NewDecimalMasterOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecimalMasterOptionContext {
	var p = new(DecimalMasterOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_decimalMasterOption

	return p
}

func (s *DecimalMasterOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *DecimalMasterOptionContext) MASTER_PORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_PORT, 0)
}

func (s *DecimalMasterOptionContext) MASTER_CONNECT_RETRY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_CONNECT_RETRY, 0)
}

func (s *DecimalMasterOptionContext) MASTER_RETRY_COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_RETRY_COUNT, 0)
}

func (s *DecimalMasterOptionContext) MASTER_DELAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_DELAY, 0)
}

func (s *DecimalMasterOptionContext) MASTER_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_POS, 0)
}

func (s *DecimalMasterOptionContext) RELAY_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_POS, 0)
}

func (s *DecimalMasterOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecimalMasterOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecimalMasterOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDecimalMasterOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DecimalMasterOption() (localctx IDecimalMasterOptionContext) {
	localctx = NewDecimalMasterOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, MySqlParserRULE_decimalMasterOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3977)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-439)&-(0x1f+1)) == 0 && ((1<<uint((_la-439)))&((1<<(MySqlParserMASTER_CONNECT_RETRY-439))|(1<<(MySqlParserMASTER_DELAY-439))|(1<<(MySqlParserMASTER_LOG_POS-439))|(1<<(MySqlParserMASTER_PORT-439))|(1<<(MySqlParserMASTER_RETRY_COUNT-439)))) != 0) || _la == MySqlParserRELAY_LOG_POS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBoolMasterOptionContext is an interface to support dynamic dispatch.
type IBoolMasterOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBoolMasterOptionContext differentiates from other interfaces.
	IsBoolMasterOptionContext()
}

type BoolMasterOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolMasterOptionContext() *BoolMasterOptionContext {
	var p = new(BoolMasterOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_boolMasterOption
	return p
}

func (*BoolMasterOptionContext) IsBoolMasterOptionContext() {}

func NewBoolMasterOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BoolMasterOptionContext {
	var p = new(BoolMasterOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_boolMasterOption

	return p
}

func (s *BoolMasterOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *BoolMasterOptionContext) MASTER_AUTO_POSITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_AUTO_POSITION, 0)
}

func (s *BoolMasterOptionContext) MASTER_SSL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL, 0)
}

func (s *BoolMasterOptionContext) MASTER_SSL_VERIFY_SERVER_CERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_VERIFY_SERVER_CERT, 0)
}

func (s *BoolMasterOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoolMasterOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BoolMasterOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBoolMasterOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) BoolMasterOption() (localctx IBoolMasterOptionContext) {
	localctx = NewBoolMasterOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, MySqlParserRULE_boolMasterOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3979)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserMASTER_SSL_VERIFY_SERVER_CERT || _la == MySqlParserMASTER_AUTO_POSITION || _la == MySqlParserMASTER_SSL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IChannelOptionContext is an interface to support dynamic dispatch.
type IChannelOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChannelOptionContext differentiates from other interfaces.
	IsChannelOptionContext()
}

type ChannelOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChannelOptionContext() *ChannelOptionContext {
	var p = new(ChannelOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_channelOption
	return p
}

func (*ChannelOptionContext) IsChannelOptionContext() {}

func NewChannelOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChannelOptionContext {
	var p = new(ChannelOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_channelOption

	return p
}

func (s *ChannelOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ChannelOptionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *ChannelOptionContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANNEL, 0)
}

func (s *ChannelOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *ChannelOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChannelOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChannelOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitChannelOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ChannelOption() (localctx IChannelOptionContext) {
	localctx = NewChannelOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, MySqlParserRULE_channelOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3981)
		p.Match(MySqlParserFOR)
	}
	{
		p.SetState(3982)
		p.Match(MySqlParserCHANNEL)
	}
	{
		p.SetState(3983)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// IReplicationFilterContext is an interface to support dynamic dispatch.
type IReplicationFilterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplicationFilterContext differentiates from other interfaces.
	IsReplicationFilterContext()
}

type ReplicationFilterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplicationFilterContext() *ReplicationFilterContext {
	var p = new(ReplicationFilterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_replicationFilter
	return p
}

func (*ReplicationFilterContext) IsReplicationFilterContext() {}

func NewReplicationFilterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReplicationFilterContext {
	var p = new(ReplicationFilterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_replicationFilter

	return p
}

func (s *ReplicationFilterContext) GetParser() antlr.Parser { return s.parser }

func (s *ReplicationFilterContext) CopyFrom(ctx *ReplicationFilterContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ReplicationFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplicationFilterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type WildIgnoreTableReplicationContext struct {
	*ReplicationFilterContext
}

func NewWildIgnoreTableReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WildIgnoreTableReplicationContext {
	var p = new(WildIgnoreTableReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *WildIgnoreTableReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildIgnoreTableReplicationContext) REPLICATE_WILD_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_WILD_IGNORE_TABLE, 0)
}

func (s *WildIgnoreTableReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *WildIgnoreTableReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *WildIgnoreTableReplicationContext) SimpleStrings() ISimpleStringsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStringsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStringsContext)
}

func (s *WildIgnoreTableReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *WildIgnoreTableReplicationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitWildIgnoreTableReplication(s)

	default:
		return t.VisitChildren(s)
	}
}

type DoTableReplicationContext struct {
	*ReplicationFilterContext
}

func NewDoTableReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DoTableReplicationContext {
	var p = new(DoTableReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *DoTableReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoTableReplicationContext) REPLICATE_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_DO_TABLE, 0)
}

func (s *DoTableReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *DoTableReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *DoTableReplicationContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *DoTableReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *DoTableReplicationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDoTableReplication(s)

	default:
		return t.VisitChildren(s)
	}
}

type IgnoreTableReplicationContext struct {
	*ReplicationFilterContext
}

func NewIgnoreTableReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IgnoreTableReplicationContext {
	var p = new(IgnoreTableReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *IgnoreTableReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IgnoreTableReplicationContext) REPLICATE_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_IGNORE_TABLE, 0)
}

func (s *IgnoreTableReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *IgnoreTableReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *IgnoreTableReplicationContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *IgnoreTableReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *IgnoreTableReplicationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIgnoreTableReplication(s)

	default:
		return t.VisitChildren(s)
	}
}

type RewriteDbReplicationContext struct {
	*ReplicationFilterContext
}

func NewRewriteDbReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RewriteDbReplicationContext {
	var p = new(RewriteDbReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *RewriteDbReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RewriteDbReplicationContext) REPLICATE_REWRITE_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_REWRITE_DB, 0)
}

func (s *RewriteDbReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *RewriteDbReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *RewriteDbReplicationContext) AllTablePair() []ITablePairContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITablePairContext)(nil)).Elem())
	var tst = make([]ITablePairContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITablePairContext)
		}
	}

	return tst
}

func (s *RewriteDbReplicationContext) TablePair(i int) ITablePairContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablePairContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITablePairContext)
}

func (s *RewriteDbReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *RewriteDbReplicationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *RewriteDbReplicationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *RewriteDbReplicationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRewriteDbReplication(s)

	default:
		return t.VisitChildren(s)
	}
}

type DoDbReplicationContext struct {
	*ReplicationFilterContext
}

func NewDoDbReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DoDbReplicationContext {
	var p = new(DoDbReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *DoDbReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoDbReplicationContext) REPLICATE_DO_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_DO_DB, 0)
}

func (s *DoDbReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *DoDbReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *DoDbReplicationContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *DoDbReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *DoDbReplicationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDoDbReplication(s)

	default:
		return t.VisitChildren(s)
	}
}

type IgnoreDbReplicationContext struct {
	*ReplicationFilterContext
}

func NewIgnoreDbReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IgnoreDbReplicationContext {
	var p = new(IgnoreDbReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *IgnoreDbReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IgnoreDbReplicationContext) REPLICATE_IGNORE_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_IGNORE_DB, 0)
}

func (s *IgnoreDbReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *IgnoreDbReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *IgnoreDbReplicationContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *IgnoreDbReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *IgnoreDbReplicationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIgnoreDbReplication(s)

	default:
		return t.VisitChildren(s)
	}
}

type WildDoTableReplicationContext struct {
	*ReplicationFilterContext
}

func NewWildDoTableReplicationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WildDoTableReplicationContext {
	var p = new(WildDoTableReplicationContext)

	p.ReplicationFilterContext = NewEmptyReplicationFilterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ReplicationFilterContext))

	return p
}

func (s *WildDoTableReplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildDoTableReplicationContext) REPLICATE_WILD_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_WILD_DO_TABLE, 0)
}

func (s *WildDoTableReplicationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *WildDoTableReplicationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *WildDoTableReplicationContext) SimpleStrings() ISimpleStringsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStringsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStringsContext)
}

func (s *WildDoTableReplicationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *WildDoTableReplicationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitWildDoTableReplication(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ReplicationFilter() (localctx IReplicationFilterContext) {
	localctx = NewReplicationFilterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, MySqlParserRULE_replicationFilter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4034)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserREPLICATE_DO_DB:
		localctx = NewDoDbReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3985)
			p.Match(MySqlParserREPLICATE_DO_DB)
		}
		{
			p.SetState(3986)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3987)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3988)
			p.UidList()
		}
		{
			p.SetState(3989)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_IGNORE_DB:
		localctx = NewIgnoreDbReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3991)
			p.Match(MySqlParserREPLICATE_IGNORE_DB)
		}
		{
			p.SetState(3992)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3993)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3994)
			p.UidList()
		}
		{
			p.SetState(3995)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_DO_TABLE:
		localctx = NewDoTableReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3997)
			p.Match(MySqlParserREPLICATE_DO_TABLE)
		}
		{
			p.SetState(3998)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3999)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4000)
			p.Tables()
		}
		{
			p.SetState(4001)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_IGNORE_TABLE:
		localctx = NewIgnoreTableReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4003)
			p.Match(MySqlParserREPLICATE_IGNORE_TABLE)
		}
		{
			p.SetState(4004)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4005)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4006)
			p.Tables()
		}
		{
			p.SetState(4007)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_WILD_DO_TABLE:
		localctx = NewWildDoTableReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4009)
			p.Match(MySqlParserREPLICATE_WILD_DO_TABLE)
		}
		{
			p.SetState(4010)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4011)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4012)
			p.SimpleStrings()
		}
		{
			p.SetState(4013)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_WILD_IGNORE_TABLE:
		localctx = NewWildIgnoreTableReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4015)
			p.Match(MySqlParserREPLICATE_WILD_IGNORE_TABLE)
		}
		{
			p.SetState(4016)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4017)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4018)
			p.SimpleStrings()
		}
		{
			p.SetState(4019)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_REWRITE_DB:
		localctx = NewRewriteDbReplicationContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4021)
			p.Match(MySqlParserREPLICATE_REWRITE_DB)
		}
		{
			p.SetState(4022)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4023)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4024)
			p.TablePair()
		}
		p.SetState(4029)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4025)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4026)
				p.TablePair()
			}

			p.SetState(4031)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4032)
			p.Match(MySqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITablePairContext is an interface to support dynamic dispatch.
type ITablePairContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFirstTable returns the firstTable rule contexts.
	GetFirstTable() ITableNameContext

	// GetSecondTable returns the secondTable rule contexts.
	GetSecondTable() ITableNameContext

	// SetFirstTable sets the firstTable rule contexts.
	SetFirstTable(ITableNameContext)

	// SetSecondTable sets the secondTable rule contexts.
	SetSecondTable(ITableNameContext)

	// IsTablePairContext differentiates from other interfaces.
	IsTablePairContext()
}

type TablePairContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	firstTable  ITableNameContext
	secondTable ITableNameContext
}

func NewEmptyTablePairContext() *TablePairContext {
	var p = new(TablePairContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tablePair
	return p
}

func (*TablePairContext) IsTablePairContext() {}

func NewTablePairContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TablePairContext {
	var p = new(TablePairContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tablePair

	return p
}

func (s *TablePairContext) GetParser() antlr.Parser { return s.parser }

func (s *TablePairContext) GetFirstTable() ITableNameContext { return s.firstTable }

func (s *TablePairContext) GetSecondTable() ITableNameContext { return s.secondTable }

func (s *TablePairContext) SetFirstTable(v ITableNameContext) { s.firstTable = v }

func (s *TablePairContext) SetSecondTable(v ITableNameContext) { s.secondTable = v }

func (s *TablePairContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *TablePairContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *TablePairContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *TablePairContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *TablePairContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TablePairContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TablePairContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TablePairContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTablePair(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TablePair() (localctx ITablePairContext) {
	localctx = NewTablePairContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, MySqlParserRULE_tablePair)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4036)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(4037)

		var _x = p.TableName()

		localctx.(*TablePairContext).firstTable = _x
	}
	{
		p.SetState(4038)
		p.Match(MySqlParserCOMMA)
	}
	{
		p.SetState(4039)

		var _x = p.TableName()

		localctx.(*TablePairContext).secondTable = _x
	}
	{
		p.SetState(4040)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IThreadTypeContext is an interface to support dynamic dispatch.
type IThreadTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThreadTypeContext differentiates from other interfaces.
	IsThreadTypeContext()
}

type ThreadTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThreadTypeContext() *ThreadTypeContext {
	var p = new(ThreadTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_threadType
	return p
}

func (*ThreadTypeContext) IsThreadTypeContext() {}

func NewThreadTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThreadTypeContext {
	var p = new(ThreadTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_threadType

	return p
}

func (s *ThreadTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ThreadTypeContext) IO_THREAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserIO_THREAD, 0)
}

func (s *ThreadTypeContext) SQL_THREAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_THREAD, 0)
}

func (s *ThreadTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThreadTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThreadTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitThreadType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ThreadType() (localctx IThreadTypeContext) {
	localctx = NewThreadTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, MySqlParserRULE_threadType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4042)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserIO_THREAD || _la == MySqlParserSQL_THREAD) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IUntilOptionContext is an interface to support dynamic dispatch.
type IUntilOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUntilOptionContext differentiates from other interfaces.
	IsUntilOptionContext()
}

type UntilOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUntilOptionContext() *UntilOptionContext {
	var p = new(UntilOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_untilOption
	return p
}

func (*UntilOptionContext) IsUntilOptionContext() {}

func NewUntilOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UntilOptionContext {
	var p = new(UntilOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_untilOption

	return p
}

func (s *UntilOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UntilOptionContext) CopyFrom(ctx *UntilOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *UntilOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UntilOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type GtidsUntilOptionContext struct {
	*UntilOptionContext
	gtids antlr.Token
}

func NewGtidsUntilOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GtidsUntilOptionContext {
	var p = new(GtidsUntilOptionContext)

	p.UntilOptionContext = NewEmptyUntilOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UntilOptionContext))

	return p
}

func (s *GtidsUntilOptionContext) GetGtids() antlr.Token { return s.gtids }

func (s *GtidsUntilOptionContext) SetGtids(v antlr.Token) { s.gtids = v }

func (s *GtidsUntilOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GtidsUntilOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *GtidsUntilOptionContext) GtuidSet() IGtuidSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGtuidSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGtuidSetContext)
}

func (s *GtidsUntilOptionContext) SQL_BEFORE_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BEFORE_GTIDS, 0)
}

func (s *GtidsUntilOptionContext) SQL_AFTER_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_AFTER_GTIDS, 0)
}

func (s *GtidsUntilOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGtidsUntilOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type SqlGapsUntilOptionContext struct {
	*UntilOptionContext
}

func NewSqlGapsUntilOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SqlGapsUntilOptionContext {
	var p = new(SqlGapsUntilOptionContext)

	p.UntilOptionContext = NewEmptyUntilOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UntilOptionContext))

	return p
}

func (s *SqlGapsUntilOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlGapsUntilOptionContext) SQL_AFTER_MTS_GAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_AFTER_MTS_GAPS, 0)
}

func (s *SqlGapsUntilOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSqlGapsUntilOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type MasterLogUntilOptionContext struct {
	*UntilOptionContext
}

func NewMasterLogUntilOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterLogUntilOptionContext {
	var p = new(MasterLogUntilOptionContext)

	p.UntilOptionContext = NewEmptyUntilOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UntilOptionContext))

	return p
}

func (s *MasterLogUntilOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterLogUntilOptionContext) MASTER_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_FILE, 0)
}

func (s *MasterLogUntilOptionContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *MasterLogUntilOptionContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *MasterLogUntilOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *MasterLogUntilOptionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *MasterLogUntilOptionContext) MASTER_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_POS, 0)
}

func (s *MasterLogUntilOptionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *MasterLogUntilOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMasterLogUntilOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type RelayLogUntilOptionContext struct {
	*UntilOptionContext
}

func NewRelayLogUntilOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RelayLogUntilOptionContext {
	var p = new(RelayLogUntilOptionContext)

	p.UntilOptionContext = NewEmptyUntilOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UntilOptionContext))

	return p
}

func (s *RelayLogUntilOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelayLogUntilOptionContext) RELAY_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_FILE, 0)
}

func (s *RelayLogUntilOptionContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *RelayLogUntilOptionContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *RelayLogUntilOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *RelayLogUntilOptionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *RelayLogUntilOptionContext) RELAY_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_POS, 0)
}

func (s *RelayLogUntilOptionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *RelayLogUntilOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRelayLogUntilOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UntilOption() (localctx IUntilOptionContext) {
	localctx = NewUntilOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, MySqlParserRULE_untilOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4062)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_BEFORE_GTIDS:
		localctx = NewGtidsUntilOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4044)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*GtidsUntilOptionContext).gtids = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserSQL_AFTER_GTIDS || _la == MySqlParserSQL_BEFORE_GTIDS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*GtidsUntilOptionContext).gtids = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4045)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4046)
			p.GtuidSet()
		}

	case MySqlParserMASTER_LOG_FILE:
		localctx = NewMasterLogUntilOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4047)
			p.Match(MySqlParserMASTER_LOG_FILE)
		}
		{
			p.SetState(4048)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4049)
			p.Match(MySqlParserSTRING_LITERAL)
		}
		{
			p.SetState(4050)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4051)
			p.Match(MySqlParserMASTER_LOG_POS)
		}
		{
			p.SetState(4052)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4053)
			p.DecimalLiteral()
		}

	case MySqlParserRELAY_LOG_FILE:
		localctx = NewRelayLogUntilOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4054)
			p.Match(MySqlParserRELAY_LOG_FILE)
		}
		{
			p.SetState(4055)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4056)
			p.Match(MySqlParserSTRING_LITERAL)
		}
		{
			p.SetState(4057)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4058)
			p.Match(MySqlParserRELAY_LOG_POS)
		}
		{
			p.SetState(4059)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4060)
			p.DecimalLiteral()
		}

	case MySqlParserSQL_AFTER_MTS_GAPS:
		localctx = NewSqlGapsUntilOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4061)
			p.Match(MySqlParserSQL_AFTER_MTS_GAPS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConnectionOptionContext is an interface to support dynamic dispatch.
type IConnectionOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConnectionOptionContext differentiates from other interfaces.
	IsConnectionOptionContext()
}

type ConnectionOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConnectionOptionContext() *ConnectionOptionContext {
	var p = new(ConnectionOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_connectionOption
	return p
}

func (*ConnectionOptionContext) IsConnectionOptionContext() {}

func NewConnectionOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConnectionOptionContext {
	var p = new(ConnectionOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_connectionOption

	return p
}

func (s *ConnectionOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConnectionOptionContext) CopyFrom(ctx *ConnectionOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ConnectionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConnectionOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PluginDirConnectionOptionContext struct {
	*ConnectionOptionContext
	conOptPluginDir antlr.Token
}

func NewPluginDirConnectionOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PluginDirConnectionOptionContext {
	var p = new(PluginDirConnectionOptionContext)

	p.ConnectionOptionContext = NewEmptyConnectionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConnectionOptionContext))

	return p
}

func (s *PluginDirConnectionOptionContext) GetConOptPluginDir() antlr.Token { return s.conOptPluginDir }

func (s *PluginDirConnectionOptionContext) SetConOptPluginDir(v antlr.Token) { s.conOptPluginDir = v }

func (s *PluginDirConnectionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PluginDirConnectionOptionContext) PLUGIN_DIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGIN_DIR, 0)
}

func (s *PluginDirConnectionOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PluginDirConnectionOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PluginDirConnectionOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPluginDirConnectionOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type UserConnectionOptionContext struct {
	*ConnectionOptionContext
	conOptUser antlr.Token
}

func NewUserConnectionOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UserConnectionOptionContext {
	var p = new(UserConnectionOptionContext)

	p.ConnectionOptionContext = NewEmptyConnectionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConnectionOptionContext))

	return p
}

func (s *UserConnectionOptionContext) GetConOptUser() antlr.Token { return s.conOptUser }

func (s *UserConnectionOptionContext) SetConOptUser(v antlr.Token) { s.conOptUser = v }

func (s *UserConnectionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserConnectionOptionContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *UserConnectionOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *UserConnectionOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *UserConnectionOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUserConnectionOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type DefaultAuthConnectionOptionContext struct {
	*ConnectionOptionContext
	conOptDefAuth antlr.Token
}

func NewDefaultAuthConnectionOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefaultAuthConnectionOptionContext {
	var p = new(DefaultAuthConnectionOptionContext)

	p.ConnectionOptionContext = NewEmptyConnectionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConnectionOptionContext))

	return p
}

func (s *DefaultAuthConnectionOptionContext) GetConOptDefAuth() antlr.Token { return s.conOptDefAuth }

func (s *DefaultAuthConnectionOptionContext) SetConOptDefAuth(v antlr.Token) { s.conOptDefAuth = v }

func (s *DefaultAuthConnectionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultAuthConnectionOptionContext) DEFAULT_AUTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT_AUTH, 0)
}

func (s *DefaultAuthConnectionOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *DefaultAuthConnectionOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *DefaultAuthConnectionOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDefaultAuthConnectionOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type PasswordConnectionOptionContext struct {
	*ConnectionOptionContext
	conOptPassword antlr.Token
}

func NewPasswordConnectionOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PasswordConnectionOptionContext {
	var p = new(PasswordConnectionOptionContext)

	p.ConnectionOptionContext = NewEmptyConnectionOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ConnectionOptionContext))

	return p
}

func (s *PasswordConnectionOptionContext) GetConOptPassword() antlr.Token { return s.conOptPassword }

func (s *PasswordConnectionOptionContext) SetConOptPassword(v antlr.Token) { s.conOptPassword = v }

func (s *PasswordConnectionOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PasswordConnectionOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *PasswordConnectionOptionContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *PasswordConnectionOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PasswordConnectionOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPasswordConnectionOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ConnectionOption() (localctx IConnectionOptionContext) {
	localctx = NewConnectionOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, MySqlParserRULE_connectionOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4076)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserUSER:
		localctx = NewUserConnectionOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4064)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(4065)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4066)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*UserConnectionOptionContext).conOptUser = _m
		}

	case MySqlParserPASSWORD:
		localctx = NewPasswordConnectionOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4067)
			p.Match(MySqlParserPASSWORD)
		}
		{
			p.SetState(4068)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4069)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PasswordConnectionOptionContext).conOptPassword = _m
		}

	case MySqlParserDEFAULT_AUTH:
		localctx = NewDefaultAuthConnectionOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4070)
			p.Match(MySqlParserDEFAULT_AUTH)
		}
		{
			p.SetState(4071)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4072)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*DefaultAuthConnectionOptionContext).conOptDefAuth = _m
		}

	case MySqlParserPLUGIN_DIR:
		localctx = NewPluginDirConnectionOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4073)
			p.Match(MySqlParserPLUGIN_DIR)
		}
		{
			p.SetState(4074)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4075)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PluginDirConnectionOptionContext).conOptPluginDir = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGtuidSetContext is an interface to support dynamic dispatch.
type IGtuidSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGtuidSetContext differentiates from other interfaces.
	IsGtuidSetContext()
}

type GtuidSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGtuidSetContext() *GtuidSetContext {
	var p = new(GtuidSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_gtuidSet
	return p
}

func (*GtuidSetContext) IsGtuidSetContext() {}

func NewGtuidSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GtuidSetContext {
	var p = new(GtuidSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_gtuidSet

	return p
}

func (s *GtuidSetContext) GetParser() antlr.Parser { return s.parser }

func (s *GtuidSetContext) AllUuidSet() []IUuidSetContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUuidSetContext)(nil)).Elem())
	var tst = make([]IUuidSetContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUuidSetContext)
		}
	}

	return tst
}

func (s *GtuidSetContext) UuidSet(i int) IUuidSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUuidSetContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUuidSetContext)
}

func (s *GtuidSetContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *GtuidSetContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *GtuidSetContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *GtuidSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GtuidSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GtuidSetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGtuidSet(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) GtuidSet() (localctx IGtuidSetContext) {
	localctx = NewGtuidSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, MySqlParserRULE_gtuidSet)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4087)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4078)
			p.UuidSet()
		}
		p.SetState(4083)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4079)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4080)
				p.UuidSet()
			}

			p.SetState(4085)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySqlParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4086)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IXaStartTransactionContext is an interface to support dynamic dispatch.
type IXaStartTransactionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetXaStart returns the xaStart token.
	GetXaStart() antlr.Token

	// GetXaAction returns the xaAction token.
	GetXaAction() antlr.Token

	// SetXaStart sets the xaStart token.
	SetXaStart(antlr.Token)

	// SetXaAction sets the xaAction token.
	SetXaAction(antlr.Token)

	// IsXaStartTransactionContext differentiates from other interfaces.
	IsXaStartTransactionContext()
}

type XaStartTransactionContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	xaStart  antlr.Token
	xaAction antlr.Token
}

func NewEmptyXaStartTransactionContext() *XaStartTransactionContext {
	var p = new(XaStartTransactionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xaStartTransaction
	return p
}

func (*XaStartTransactionContext) IsXaStartTransactionContext() {}

func NewXaStartTransactionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XaStartTransactionContext {
	var p = new(XaStartTransactionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xaStartTransaction

	return p
}

func (s *XaStartTransactionContext) GetParser() antlr.Parser { return s.parser }

func (s *XaStartTransactionContext) GetXaStart() antlr.Token { return s.xaStart }

func (s *XaStartTransactionContext) GetXaAction() antlr.Token { return s.xaAction }

func (s *XaStartTransactionContext) SetXaStart(v antlr.Token) { s.xaStart = v }

func (s *XaStartTransactionContext) SetXaAction(v antlr.Token) { s.xaAction = v }

func (s *XaStartTransactionContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *XaStartTransactionContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *XaStartTransactionContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *XaStartTransactionContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEGIN, 0)
}

func (s *XaStartTransactionContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *XaStartTransactionContext) RESUME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESUME, 0)
}

func (s *XaStartTransactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XaStartTransactionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XaStartTransactionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXaStartTransaction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) XaStartTransaction() (localctx IXaStartTransactionContext) {
	localctx = NewXaStartTransactionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, MySqlParserRULE_xaStartTransaction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4089)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(4090)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*XaStartTransactionContext).xaStart = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserBEGIN || _la == MySqlParserSTART) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*XaStartTransactionContext).xaStart = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4091)
		p.Xid()
	}
	p.SetState(4093)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserJOIN || _la == MySqlParserRESUME {
		{
			p.SetState(4092)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*XaStartTransactionContext).xaAction = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserJOIN || _la == MySqlParserRESUME) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*XaStartTransactionContext).xaAction = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IXaEndTransactionContext is an interface to support dynamic dispatch.
type IXaEndTransactionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXaEndTransactionContext differentiates from other interfaces.
	IsXaEndTransactionContext()
}

type XaEndTransactionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXaEndTransactionContext() *XaEndTransactionContext {
	var p = new(XaEndTransactionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xaEndTransaction
	return p
}

func (*XaEndTransactionContext) IsXaEndTransactionContext() {}

func NewXaEndTransactionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XaEndTransactionContext {
	var p = new(XaEndTransactionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xaEndTransaction

	return p
}

func (s *XaEndTransactionContext) GetParser() antlr.Parser { return s.parser }

func (s *XaEndTransactionContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *XaEndTransactionContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *XaEndTransactionContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *XaEndTransactionContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUSPEND, 0)
}

func (s *XaEndTransactionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *XaEndTransactionContext) MIGRATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIGRATE, 0)
}

func (s *XaEndTransactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XaEndTransactionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XaEndTransactionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXaEndTransaction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) XaEndTransaction() (localctx IXaEndTransactionContext) {
	localctx = NewXaEndTransactionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, MySqlParserRULE_xaEndTransaction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4095)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(4096)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(4097)
		p.Xid()
	}
	p.SetState(4103)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSUSPEND {
		{
			p.SetState(4098)
			p.Match(MySqlParserSUSPEND)
		}
		p.SetState(4101)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(4099)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(4100)
				p.Match(MySqlParserMIGRATE)
			}

		}

	}

	return localctx
}

// IXaPrepareStatementContext is an interface to support dynamic dispatch.
type IXaPrepareStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXaPrepareStatementContext differentiates from other interfaces.
	IsXaPrepareStatementContext()
}

type XaPrepareStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXaPrepareStatementContext() *XaPrepareStatementContext {
	var p = new(XaPrepareStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xaPrepareStatement
	return p
}

func (*XaPrepareStatementContext) IsXaPrepareStatementContext() {}

func NewXaPrepareStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XaPrepareStatementContext {
	var p = new(XaPrepareStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xaPrepareStatement

	return p
}

func (s *XaPrepareStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *XaPrepareStatementContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *XaPrepareStatementContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREPARE, 0)
}

func (s *XaPrepareStatementContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *XaPrepareStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XaPrepareStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XaPrepareStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXaPrepareStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) XaPrepareStatement() (localctx IXaPrepareStatementContext) {
	localctx = NewXaPrepareStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, MySqlParserRULE_xaPrepareStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4105)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(4106)
		p.Match(MySqlParserPREPARE)
	}
	{
		p.SetState(4107)
		p.Xid()
	}

	return localctx
}

// IXaCommitWorkContext is an interface to support dynamic dispatch.
type IXaCommitWorkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXaCommitWorkContext differentiates from other interfaces.
	IsXaCommitWorkContext()
}

type XaCommitWorkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXaCommitWorkContext() *XaCommitWorkContext {
	var p = new(XaCommitWorkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xaCommitWork
	return p
}

func (*XaCommitWorkContext) IsXaCommitWorkContext() {}

func NewXaCommitWorkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XaCommitWorkContext {
	var p = new(XaCommitWorkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xaCommitWork

	return p
}

func (s *XaCommitWorkContext) GetParser() antlr.Parser { return s.parser }

func (s *XaCommitWorkContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *XaCommitWorkContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMIT, 0)
}

func (s *XaCommitWorkContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *XaCommitWorkContext) ONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE, 0)
}

func (s *XaCommitWorkContext) PHASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPHASE, 0)
}

func (s *XaCommitWorkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XaCommitWorkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XaCommitWorkContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXaCommitWork(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) XaCommitWork() (localctx IXaCommitWorkContext) {
	localctx = NewXaCommitWorkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, MySqlParserRULE_xaCommitWork)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4109)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(4110)
		p.Match(MySqlParserCOMMIT)
	}
	{
		p.SetState(4111)
		p.Xid()
	}
	p.SetState(4114)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserONE {
		{
			p.SetState(4112)
			p.Match(MySqlParserONE)
		}
		{
			p.SetState(4113)
			p.Match(MySqlParserPHASE)
		}

	}

	return localctx
}

// IXaRollbackWorkContext is an interface to support dynamic dispatch.
type IXaRollbackWorkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXaRollbackWorkContext differentiates from other interfaces.
	IsXaRollbackWorkContext()
}

type XaRollbackWorkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXaRollbackWorkContext() *XaRollbackWorkContext {
	var p = new(XaRollbackWorkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xaRollbackWork
	return p
}

func (*XaRollbackWorkContext) IsXaRollbackWorkContext() {}

func NewXaRollbackWorkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XaRollbackWorkContext {
	var p = new(XaRollbackWorkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xaRollbackWork

	return p
}

func (s *XaRollbackWorkContext) GetParser() antlr.Parser { return s.parser }

func (s *XaRollbackWorkContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *XaRollbackWorkContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLBACK, 0)
}

func (s *XaRollbackWorkContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *XaRollbackWorkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XaRollbackWorkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XaRollbackWorkContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXaRollbackWork(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) XaRollbackWork() (localctx IXaRollbackWorkContext) {
	localctx = NewXaRollbackWorkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, MySqlParserRULE_xaRollbackWork)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4116)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(4117)
		p.Match(MySqlParserROLLBACK)
	}
	{
		p.SetState(4118)
		p.Xid()
	}

	return localctx
}

// IXaRecoverWorkContext is an interface to support dynamic dispatch.
type IXaRecoverWorkContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXaRecoverWorkContext differentiates from other interfaces.
	IsXaRecoverWorkContext()
}

type XaRecoverWorkContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXaRecoverWorkContext() *XaRecoverWorkContext {
	var p = new(XaRecoverWorkContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xaRecoverWork
	return p
}

func (*XaRecoverWorkContext) IsXaRecoverWorkContext() {}

func NewXaRecoverWorkContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XaRecoverWorkContext {
	var p = new(XaRecoverWorkContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xaRecoverWork

	return p
}

func (s *XaRecoverWorkContext) GetParser() antlr.Parser { return s.parser }

func (s *XaRecoverWorkContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *XaRecoverWorkContext) RECOVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserRECOVER, 0)
}

func (s *XaRecoverWorkContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONVERT, 0)
}

func (s *XaRecoverWorkContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *XaRecoverWorkContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XaRecoverWorkContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XaRecoverWorkContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXaRecoverWork(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) XaRecoverWork() (localctx IXaRecoverWorkContext) {
	localctx = NewXaRecoverWorkContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, MySqlParserRULE_xaRecoverWork)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4120)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(4121)
		p.Match(MySqlParserRECOVER)
	}
	p.SetState(4124)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCONVERT {
		{
			p.SetState(4122)
			p.Match(MySqlParserCONVERT)
		}
		{
			p.SetState(4123)
			p.Xid()
		}

	}

	return localctx
}

// IPrepareStatementContext is an interface to support dynamic dispatch.
type IPrepareStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetQuery returns the query token.
	GetQuery() antlr.Token

	// GetVariable returns the variable token.
	GetVariable() antlr.Token

	// SetQuery sets the query token.
	SetQuery(antlr.Token)

	// SetVariable sets the variable token.
	SetVariable(antlr.Token)

	// IsPrepareStatementContext differentiates from other interfaces.
	IsPrepareStatementContext()
}

type PrepareStatementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	query    antlr.Token
	variable antlr.Token
}

func NewEmptyPrepareStatementContext() *PrepareStatementContext {
	var p = new(PrepareStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_prepareStatement
	return p
}

func (*PrepareStatementContext) IsPrepareStatementContext() {}

func NewPrepareStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrepareStatementContext {
	var p = new(PrepareStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_prepareStatement

	return p
}

func (s *PrepareStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PrepareStatementContext) GetQuery() antlr.Token { return s.query }

func (s *PrepareStatementContext) GetVariable() antlr.Token { return s.variable }

func (s *PrepareStatementContext) SetQuery(v antlr.Token) { s.query = v }

func (s *PrepareStatementContext) SetVariable(v antlr.Token) { s.variable = v }

func (s *PrepareStatementContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREPARE, 0)
}

func (s *PrepareStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *PrepareStatementContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *PrepareStatementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PrepareStatementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *PrepareStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrepareStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrepareStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPrepareStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) PrepareStatement() (localctx IPrepareStatementContext) {
	localctx = NewPrepareStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, MySqlParserRULE_prepareStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4126)
		p.Match(MySqlParserPREPARE)
	}
	{
		p.SetState(4127)
		p.Uid()
	}
	{
		p.SetState(4128)
		p.Match(MySqlParserFROM)
	}
	p.SetState(4131)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSTRING_LITERAL:
		{
			p.SetState(4129)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PrepareStatementContext).query = _m
		}

	case MySqlParserLOCAL_ID:
		{
			p.SetState(4130)

			var _m = p.Match(MySqlParserLOCAL_ID)

			localctx.(*PrepareStatementContext).variable = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExecuteStatementContext is an interface to support dynamic dispatch.
type IExecuteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecuteStatementContext differentiates from other interfaces.
	IsExecuteStatementContext()
}

type ExecuteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecuteStatementContext() *ExecuteStatementContext {
	var p = new(ExecuteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_executeStatement
	return p
}

func (*ExecuteStatementContext) IsExecuteStatementContext() {}

func NewExecuteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExecuteStatementContext {
	var p = new(ExecuteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_executeStatement

	return p
}

func (s *ExecuteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExecuteStatementContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXECUTE, 0)
}

func (s *ExecuteStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ExecuteStatementContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *ExecuteStatementContext) UserVariables() IUserVariablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserVariablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserVariablesContext)
}

func (s *ExecuteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExecuteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExecuteStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitExecuteStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ExecuteStatement() (localctx IExecuteStatementContext) {
	localctx = NewExecuteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, MySqlParserRULE_executeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4133)
		p.Match(MySqlParserEXECUTE)
	}
	{
		p.SetState(4134)
		p.Uid()
	}
	p.SetState(4137)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUSING {
		{
			p.SetState(4135)
			p.Match(MySqlParserUSING)
		}
		{
			p.SetState(4136)
			p.UserVariables()
		}

	}

	return localctx
}

// IDeallocatePrepareContext is an interface to support dynamic dispatch.
type IDeallocatePrepareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDropFormat returns the dropFormat token.
	GetDropFormat() antlr.Token

	// SetDropFormat sets the dropFormat token.
	SetDropFormat(antlr.Token)

	// IsDeallocatePrepareContext differentiates from other interfaces.
	IsDeallocatePrepareContext()
}

type DeallocatePrepareContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	dropFormat antlr.Token
}

func NewEmptyDeallocatePrepareContext() *DeallocatePrepareContext {
	var p = new(DeallocatePrepareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_deallocatePrepare
	return p
}

func (*DeallocatePrepareContext) IsDeallocatePrepareContext() {}

func NewDeallocatePrepareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeallocatePrepareContext {
	var p = new(DeallocatePrepareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_deallocatePrepare

	return p
}

func (s *DeallocatePrepareContext) GetParser() antlr.Parser { return s.parser }

func (s *DeallocatePrepareContext) GetDropFormat() antlr.Token { return s.dropFormat }

func (s *DeallocatePrepareContext) SetDropFormat(v antlr.Token) { s.dropFormat = v }

func (s *DeallocatePrepareContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREPARE, 0)
}

func (s *DeallocatePrepareContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DeallocatePrepareContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEALLOCATE, 0)
}

func (s *DeallocatePrepareContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DeallocatePrepareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeallocatePrepareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeallocatePrepareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDeallocatePrepare(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DeallocatePrepare() (localctx IDeallocatePrepareContext) {
	localctx = NewDeallocatePrepareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, MySqlParserRULE_deallocatePrepare)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4139)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*DeallocatePrepareContext).dropFormat = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDROP || _la == MySqlParserDEALLOCATE) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*DeallocatePrepareContext).dropFormat = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4140)
		p.Match(MySqlParserPREPARE)
	}
	{
		p.SetState(4141)
		p.Uid()
	}

	return localctx
}

// IRoutineBodyContext is an interface to support dynamic dispatch.
type IRoutineBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoutineBodyContext differentiates from other interfaces.
	IsRoutineBodyContext()
}

type RoutineBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoutineBodyContext() *RoutineBodyContext {
	var p = new(RoutineBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_routineBody
	return p
}

func (*RoutineBodyContext) IsRoutineBodyContext() {}

func NewRoutineBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RoutineBodyContext {
	var p = new(RoutineBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_routineBody

	return p
}

func (s *RoutineBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *RoutineBodyContext) BlockStatement() IBlockStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *RoutineBodyContext) SqlStatement() ISqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISqlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISqlStatementContext)
}

func (s *RoutineBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RoutineBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RoutineBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRoutineBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) RoutineBody() (localctx IRoutineBodyContext) {
	localctx = NewRoutineBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, MySqlParserRULE_routineBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4145)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 593, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4143)
			p.BlockStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4144)
			p.SqlStatement()
		}

	}

	return localctx
}

// IBlockStatementContext is an interface to support dynamic dispatch.
type IBlockStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockStatementContext differentiates from other interfaces.
	IsBlockStatementContext()
}

type BlockStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatementContext() *BlockStatementContext {
	var p = new(BlockStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_blockStatement
	return p
}

func (*BlockStatementContext) IsBlockStatementContext() {}

func NewBlockStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatementContext {
	var p = new(BlockStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_blockStatement

	return p
}

func (s *BlockStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEGIN, 0)
}

func (s *BlockStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *BlockStatementContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *BlockStatementContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *BlockStatementContext) COLON_SYMB() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLON_SYMB, 0)
}

func (s *BlockStatementContext) AllDeclareVariable() []IDeclareVariableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclareVariableContext)(nil)).Elem())
	var tst = make([]IDeclareVariableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclareVariableContext)
		}
	}

	return tst
}

func (s *BlockStatementContext) DeclareVariable(i int) IDeclareVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclareVariableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclareVariableContext)
}

func (s *BlockStatementContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSEMI)
}

func (s *BlockStatementContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSEMI, i)
}

func (s *BlockStatementContext) AllDeclareCondition() []IDeclareConditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclareConditionContext)(nil)).Elem())
	var tst = make([]IDeclareConditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclareConditionContext)
		}
	}

	return tst
}

func (s *BlockStatementContext) DeclareCondition(i int) IDeclareConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclareConditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclareConditionContext)
}

func (s *BlockStatementContext) AllDeclareCursor() []IDeclareCursorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclareCursorContext)(nil)).Elem())
	var tst = make([]IDeclareCursorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclareCursorContext)
		}
	}

	return tst
}

func (s *BlockStatementContext) DeclareCursor(i int) IDeclareCursorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclareCursorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclareCursorContext)
}

func (s *BlockStatementContext) AllDeclareHandler() []IDeclareHandlerContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclareHandlerContext)(nil)).Elem())
	var tst = make([]IDeclareHandlerContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclareHandlerContext)
		}
	}

	return tst
}

func (s *BlockStatementContext) DeclareHandler(i int) IDeclareHandlerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclareHandlerContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclareHandlerContext)
}

func (s *BlockStatementContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *BlockStatementContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *BlockStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBlockStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) BlockStatement() (localctx IBlockStatementContext) {
	localctx = NewBlockStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, MySqlParserRULE_blockStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4150)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 594, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4147)
			p.Uid()
		}
		{
			p.SetState(4148)
			p.Match(MySqlParserCOLON_SYMB)
		}

	}
	{
		p.SetState(4152)
		p.Match(MySqlParserBEGIN)
	}
	p.SetState(4191)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 600, p.GetParserRuleContext()) == 1 {
		p.SetState(4158)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 595, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4153)
					p.DeclareVariable()
				}
				{
					p.SetState(4154)
					p.Match(MySqlParserSEMI)
				}

			}
			p.SetState(4160)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 595, p.GetParserRuleContext())
		}
		p.SetState(4166)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 596, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4161)
					p.DeclareCondition()
				}
				{
					p.SetState(4162)
					p.Match(MySqlParserSEMI)
				}

			}
			p.SetState(4168)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 596, p.GetParserRuleContext())
		}
		p.SetState(4174)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 597, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4169)
					p.DeclareCursor()
				}
				{
					p.SetState(4170)
					p.Match(MySqlParserSEMI)
				}

			}
			p.SetState(4176)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 597, p.GetParserRuleContext())
		}
		p.SetState(4182)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserDECLARE {
			{
				p.SetState(4177)
				p.DeclareHandler()
			}
			{
				p.SetState(4178)
				p.Match(MySqlParserSEMI)
			}

			p.SetState(4184)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4188)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 599, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4185)
					p.ProcedureSqlStatement()
				}

			}
			p.SetState(4190)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 599, p.GetParserRuleContext())
		}

	}
	{
		p.SetState(4193)
		p.Match(MySqlParserEND)
	}
	p.SetState(4195)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 601, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4194)
			p.Uid()
		}

	}

	return localctx
}

// ICaseStatementContext is an interface to support dynamic dispatch.
type ICaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseStatementContext differentiates from other interfaces.
	IsCaseStatementContext()
}

type CaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseStatementContext() *CaseStatementContext {
	var p = new(CaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_caseStatement
	return p
}

func (*CaseStatementContext) IsCaseStatementContext() {}

func NewCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseStatementContext {
	var p = new(CaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_caseStatement

	return p
}

func (s *CaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseStatementContext) AllCASE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCASE)
}

func (s *CaseStatementContext) CASE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCASE, i)
}

func (s *CaseStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *CaseStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CaseStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CaseStatementContext) AllCaseAlternative() []ICaseAlternativeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseAlternativeContext)(nil)).Elem())
	var tst = make([]ICaseAlternativeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseAlternativeContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) CaseAlternative(i int) ICaseAlternativeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseAlternativeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseAlternativeContext)
}

func (s *CaseStatementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserELSE, 0)
}

func (s *CaseStatementContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *CaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CaseStatement() (localctx ICaseStatementContext) {
	localctx = NewCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, MySqlParserRULE_caseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4197)
		p.Match(MySqlParserCASE)
	}
	p.SetState(4200)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 602, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4198)
			p.Uid()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 602, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4199)
			p.expression(0)
		}

	}
	p.SetState(4203)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySqlParserWHEN {
		{
			p.SetState(4202)
			p.CaseAlternative()
		}

		p.SetState(4205)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4213)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserELSE {
		{
			p.SetState(4207)
			p.Match(MySqlParserELSE)
		}
		p.SetState(4209)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(4208)
					p.ProcedureSqlStatement()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4211)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 604, p.GetParserRuleContext())
		}

	}
	{
		p.SetState(4215)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(4216)
		p.Match(MySqlParserCASE)
	}

	return localctx
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_procedureSqlStatement returns the _procedureSqlStatement rule contexts.
	Get_procedureSqlStatement() IProcedureSqlStatementContext

	// Set_procedureSqlStatement sets the _procedureSqlStatement rule contexts.
	Set_procedureSqlStatement(IProcedureSqlStatementContext)

	// GetThenStatements returns the thenStatements rule context list.
	GetThenStatements() []IProcedureSqlStatementContext

	// GetElseStatements returns the elseStatements rule context list.
	GetElseStatements() []IProcedureSqlStatementContext

	// SetThenStatements sets the thenStatements rule context list.
	SetThenStatements([]IProcedureSqlStatementContext)

	// SetElseStatements sets the elseStatements rule context list.
	SetElseStatements([]IProcedureSqlStatementContext)

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	_procedureSqlStatement IProcedureSqlStatementContext
	thenStatements         []IProcedureSqlStatementContext
	elseStatements         []IProcedureSqlStatementContext
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_ifStatement
	return p
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) Get_procedureSqlStatement() IProcedureSqlStatementContext {
	return s._procedureSqlStatement
}

func (s *IfStatementContext) Set_procedureSqlStatement(v IProcedureSqlStatementContext) {
	s._procedureSqlStatement = v
}

func (s *IfStatementContext) GetThenStatements() []IProcedureSqlStatementContext {
	return s.thenStatements
}

func (s *IfStatementContext) GetElseStatements() []IProcedureSqlStatementContext {
	return s.elseStatements
}

func (s *IfStatementContext) SetThenStatements(v []IProcedureSqlStatementContext) {
	s.thenStatements = v
}

func (s *IfStatementContext) SetElseStatements(v []IProcedureSqlStatementContext) {
	s.elseStatements = v
}

func (s *IfStatementContext) AllIF() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIF)
}

func (s *IfStatementContext) IF(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIF, i)
}

func (s *IfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfStatementContext) THEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHEN, 0)
}

func (s *IfStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *IfStatementContext) AllElifAlternative() []IElifAlternativeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElifAlternativeContext)(nil)).Elem())
	var tst = make([]IElifAlternativeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElifAlternativeContext)
		}
	}

	return tst
}

func (s *IfStatementContext) ElifAlternative(i int) IElifAlternativeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElifAlternativeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElifAlternativeContext)
}

func (s *IfStatementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserELSE, 0)
}

func (s *IfStatementContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *IfStatementContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IfStatement() (localctx IIfStatementContext) {
	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, MySqlParserRULE_ifStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4218)
		p.Match(MySqlParserIF)
	}
	{
		p.SetState(4219)
		p.expression(0)
	}
	{
		p.SetState(4220)
		p.Match(MySqlParserTHEN)
	}
	p.SetState(4222)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(4221)

				var _x = p.ProcedureSqlStatement()

				localctx.(*IfStatementContext)._procedureSqlStatement = _x
			}
			localctx.(*IfStatementContext).thenStatements = append(localctx.(*IfStatementContext).thenStatements, localctx.(*IfStatementContext)._procedureSqlStatement)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4224)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 606, p.GetParserRuleContext())
	}
	p.SetState(4229)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserELSEIF {
		{
			p.SetState(4226)
			p.ElifAlternative()
		}

		p.SetState(4231)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4238)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserELSE {
		{
			p.SetState(4232)
			p.Match(MySqlParserELSE)
		}
		p.SetState(4234)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(4233)

					var _x = p.ProcedureSqlStatement()

					localctx.(*IfStatementContext)._procedureSqlStatement = _x
				}
				localctx.(*IfStatementContext).elseStatements = append(localctx.(*IfStatementContext).elseStatements, localctx.(*IfStatementContext)._procedureSqlStatement)

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4236)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 608, p.GetParserRuleContext())
		}

	}
	{
		p.SetState(4240)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(4241)
		p.Match(MySqlParserIF)
	}

	return localctx
}

// IIterateStatementContext is an interface to support dynamic dispatch.
type IIterateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterateStatementContext differentiates from other interfaces.
	IsIterateStatementContext()
}

type IterateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterateStatementContext() *IterateStatementContext {
	var p = new(IterateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_iterateStatement
	return p
}

func (*IterateStatementContext) IsIterateStatementContext() {}

func NewIterateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterateStatementContext {
	var p = new(IterateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_iterateStatement

	return p
}

func (s *IterateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IterateStatementContext) ITERATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserITERATE, 0)
}

func (s *IterateStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *IterateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterateStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIterateStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IterateStatement() (localctx IIterateStatementContext) {
	localctx = NewIterateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, MySqlParserRULE_iterateStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4243)
		p.Match(MySqlParserITERATE)
	}
	{
		p.SetState(4244)
		p.Uid()
	}

	return localctx
}

// ILeaveStatementContext is an interface to support dynamic dispatch.
type ILeaveStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeaveStatementContext differentiates from other interfaces.
	IsLeaveStatementContext()
}

type LeaveStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeaveStatementContext() *LeaveStatementContext {
	var p = new(LeaveStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_leaveStatement
	return p
}

func (*LeaveStatementContext) IsLeaveStatementContext() {}

func NewLeaveStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LeaveStatementContext {
	var p = new(LeaveStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_leaveStatement

	return p
}

func (s *LeaveStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LeaveStatementContext) LEAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEAVE, 0)
}

func (s *LeaveStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *LeaveStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LeaveStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LeaveStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLeaveStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LeaveStatement() (localctx ILeaveStatementContext) {
	localctx = NewLeaveStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, MySqlParserRULE_leaveStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4246)
		p.Match(MySqlParserLEAVE)
	}
	{
		p.SetState(4247)
		p.Uid()
	}

	return localctx
}

// ILoopStatementContext is an interface to support dynamic dispatch.
type ILoopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopStatementContext differentiates from other interfaces.
	IsLoopStatementContext()
}

type LoopStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopStatementContext() *LoopStatementContext {
	var p = new(LoopStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_loopStatement
	return p
}

func (*LoopStatementContext) IsLoopStatementContext() {}

func NewLoopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopStatementContext {
	var p = new(LoopStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_loopStatement

	return p
}

func (s *LoopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopStatementContext) AllLOOP() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLOOP)
}

func (s *LoopStatementContext) LOOP(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLOOP, i)
}

func (s *LoopStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *LoopStatementContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *LoopStatementContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *LoopStatementContext) COLON_SYMB() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLON_SYMB, 0)
}

func (s *LoopStatementContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *LoopStatementContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *LoopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLoopStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LoopStatement() (localctx ILoopStatementContext) {
	localctx = NewLoopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, MySqlParserRULE_loopStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4252)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(4249)
			p.Uid()
		}
		{
			p.SetState(4250)
			p.Match(MySqlParserCOLON_SYMB)
		}

	}
	{
		p.SetState(4254)
		p.Match(MySqlParserLOOP)
	}
	p.SetState(4256)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(4255)
				p.ProcedureSqlStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4258)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 611, p.GetParserRuleContext())
	}
	{
		p.SetState(4260)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(4261)
		p.Match(MySqlParserLOOP)
	}
	p.SetState(4263)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(4262)
			p.Uid()
		}

	}

	return localctx
}

// IRepeatStatementContext is an interface to support dynamic dispatch.
type IRepeatStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRepeatStatementContext differentiates from other interfaces.
	IsRepeatStatementContext()
}

type RepeatStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepeatStatementContext() *RepeatStatementContext {
	var p = new(RepeatStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_repeatStatement
	return p
}

func (*RepeatStatementContext) IsRepeatStatementContext() {}

func NewRepeatStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RepeatStatementContext {
	var p = new(RepeatStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_repeatStatement

	return p
}

func (s *RepeatStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *RepeatStatementContext) AllREPEAT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserREPEAT)
}

func (s *RepeatStatementContext) REPEAT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserREPEAT, i)
}

func (s *RepeatStatementContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNTIL, 0)
}

func (s *RepeatStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RepeatStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *RepeatStatementContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *RepeatStatementContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *RepeatStatementContext) COLON_SYMB() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLON_SYMB, 0)
}

func (s *RepeatStatementContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *RepeatStatementContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *RepeatStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RepeatStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RepeatStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRepeatStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) RepeatStatement() (localctx IRepeatStatementContext) {
	localctx = NewRepeatStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, MySqlParserRULE_repeatStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4268)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(4265)
			p.Uid()
		}
		{
			p.SetState(4266)
			p.Match(MySqlParserCOLON_SYMB)
		}

	}
	{
		p.SetState(4270)
		p.Match(MySqlParserREPEAT)
	}
	p.SetState(4272)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(4271)
				p.ProcedureSqlStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4274)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 614, p.GetParserRuleContext())
	}
	{
		p.SetState(4276)
		p.Match(MySqlParserUNTIL)
	}
	{
		p.SetState(4277)
		p.expression(0)
	}
	{
		p.SetState(4278)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(4279)
		p.Match(MySqlParserREPEAT)
	}
	p.SetState(4281)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(4280)
			p.Uid()
		}

	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) RETURN() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURN, 0)
}

func (s *ReturnStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, MySqlParserRULE_returnStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4283)
		p.Match(MySqlParserRETURN)
	}
	{
		p.SetState(4284)
		p.expression(0)
	}

	return localctx
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_whileStatement
	return p
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) AllWHILE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserWHILE)
}

func (s *WhileStatementContext) WHILE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserWHILE, i)
}

func (s *WhileStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhileStatementContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *WhileStatementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *WhileStatementContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *WhileStatementContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *WhileStatementContext) COLON_SYMB() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLON_SYMB, 0)
}

func (s *WhileStatementContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *WhileStatementContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitWhileStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) WhileStatement() (localctx IWhileStatementContext) {
	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, MySqlParserRULE_whileStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4289)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(4286)
			p.Uid()
		}
		{
			p.SetState(4287)
			p.Match(MySqlParserCOLON_SYMB)
		}

	}
	{
		p.SetState(4291)
		p.Match(MySqlParserWHILE)
	}
	{
		p.SetState(4292)
		p.expression(0)
	}
	{
		p.SetState(4293)
		p.Match(MySqlParserDO)
	}
	p.SetState(4295)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(4294)
				p.ProcedureSqlStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4297)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 617, p.GetParserRuleContext())
	}
	{
		p.SetState(4299)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(4300)
		p.Match(MySqlParserWHILE)
	}
	p.SetState(4302)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MySqlParserCURRENT-32))|(1<<(MySqlParserDATABASE-32))|(1<<(MySqlParserDIAGNOSTICS-32)))) != 0) || _la == MySqlParserGROUP || _la == MySqlParserLEFT || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(MySqlParserNUMBER-107))|(1<<(MySqlParserORDER-107))|(1<<(MySqlParserRIGHT-107))|(1<<(MySqlParserSCHEMA-107)))) != 0) || _la == MySqlParserSTACKED || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267))|(1<<(MySqlParserPOSITION-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVISIBLE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserVISIBLE-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserQUARTER-622))|(1<<(MySqlParserMONTH-622))|(1<<(MySqlParserDAY-622))|(1<<(MySqlParserHOUR-622))|(1<<(MySqlParserMINUTE-622))|(1<<(MySqlParserWEEK-622))|(1<<(MySqlParserSECOND-622))|(1<<(MySqlParserMICROSECOND-622))|(1<<(MySqlParserTABLES-622))|(1<<(MySqlParserROUTINE-622))|(1<<(MySqlParserEXECUTE-622))|(1<<(MySqlParserFILE-622))|(1<<(MySqlParserPROCESS-622))|(1<<(MySqlParserRELOAD-622))|(1<<(MySqlParserSHUTDOWN-622))|(1<<(MySqlParserSUPER-622))|(1<<(MySqlParserPRIVILEGES-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654))|(1<<(MySqlParserARMSCII8-654))|(1<<(MySqlParserASCII-654))|(1<<(MySqlParserBIG5-654))|(1<<(MySqlParserCP1250-654))|(1<<(MySqlParserCP1251-654))|(1<<(MySqlParserCP1256-654))|(1<<(MySqlParserCP1257-654))|(1<<(MySqlParserCP850-654)))) != 0) || (((_la-686)&-(0x1f+1)) == 0 && ((1<<uint((_la-686)))&((1<<(MySqlParserCP852-686))|(1<<(MySqlParserCP866-686))|(1<<(MySqlParserCP932-686))|(1<<(MySqlParserDEC8-686))|(1<<(MySqlParserEUCJPMS-686))|(1<<(MySqlParserEUCKR-686))|(1<<(MySqlParserGB2312-686))|(1<<(MySqlParserGBK-686))|(1<<(MySqlParserGEOSTD8-686))|(1<<(MySqlParserGREEK-686))|(1<<(MySqlParserHEBREW-686))|(1<<(MySqlParserHP8-686))|(1<<(MySqlParserKEYBCS2-686))|(1<<(MySqlParserKOI8R-686))|(1<<(MySqlParserKOI8U-686))|(1<<(MySqlParserLATIN1-686))|(1<<(MySqlParserLATIN2-686))|(1<<(MySqlParserLATIN5-686))|(1<<(MySqlParserLATIN7-686))|(1<<(MySqlParserMACCE-686))|(1<<(MySqlParserMACROMAN-686))|(1<<(MySqlParserSJIS-686))|(1<<(MySqlParserSWE7-686))|(1<<(MySqlParserTIS620-686))|(1<<(MySqlParserUCS2-686))|(1<<(MySqlParserUJIS-686))|(1<<(MySqlParserUTF16-686))|(1<<(MySqlParserUTF16LE-686))|(1<<(MySqlParserUTF32-686))|(1<<(MySqlParserUTF8-686))|(1<<(MySqlParserUTF8MB3-686))|(1<<(MySqlParserUTF8MB4-686)))) != 0) || (((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718))|(1<<(MySqlParserREPEATABLE-718))|(1<<(MySqlParserCOMMITTED-718))|(1<<(MySqlParserUNCOMMITTED-718))|(1<<(MySqlParserSERIALIZABLE-718))|(1<<(MySqlParserGEOMETRYCOLLECTION-718))|(1<<(MySqlParserLINESTRING-718))|(1<<(MySqlParserMULTILINESTRING-718))|(1<<(MySqlParserMULTIPOINT-718))|(1<<(MySqlParserMULTIPOLYGON-718))|(1<<(MySqlParserPOINT-718))|(1<<(MySqlParserPOLYGON-718))|(1<<(MySqlParserABS-718))|(1<<(MySqlParserACOS-718))|(1<<(MySqlParserADDDATE-718))|(1<<(MySqlParserADDTIME-718))|(1<<(MySqlParserAES_DECRYPT-718))|(1<<(MySqlParserAES_ENCRYPT-718))|(1<<(MySqlParserAREA-718)))) != 0) || (((_la-750)&-(0x1f+1)) == 0 && ((1<<uint((_la-750)))&((1<<(MySqlParserASBINARY-750))|(1<<(MySqlParserASIN-750))|(1<<(MySqlParserASTEXT-750))|(1<<(MySqlParserASWKB-750))|(1<<(MySqlParserASWKT-750))|(1<<(MySqlParserASYMMETRIC_DECRYPT-750))|(1<<(MySqlParserASYMMETRIC_DERIVE-750))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-750))|(1<<(MySqlParserASYMMETRIC_SIGN-750))|(1<<(MySqlParserASYMMETRIC_VERIFY-750))|(1<<(MySqlParserATAN-750))|(1<<(MySqlParserATAN2-750))|(1<<(MySqlParserBENCHMARK-750))|(1<<(MySqlParserBIN-750))|(1<<(MySqlParserBIT_COUNT-750))|(1<<(MySqlParserBIT_LENGTH-750))|(1<<(MySqlParserBUFFER-750))|(1<<(MySqlParserCATALOG_NAME-750))|(1<<(MySqlParserCEIL-750))|(1<<(MySqlParserCEILING-750))|(1<<(MySqlParserCENTROID-750))|(1<<(MySqlParserCHARACTER_LENGTH-750))|(1<<(MySqlParserCHARSET-750))|(1<<(MySqlParserCHAR_LENGTH-750))|(1<<(MySqlParserCOERCIBILITY-750))|(1<<(MySqlParserCOLLATION-750))|(1<<(MySqlParserCOMPRESS-750))|(1<<(MySqlParserCONCAT-750))|(1<<(MySqlParserCONCAT_WS-750))|(1<<(MySqlParserCONNECTION_ID-750))|(1<<(MySqlParserCONV-750))|(1<<(MySqlParserCONVERT_TZ-750)))) != 0) || (((_la-782)&-(0x1f+1)) == 0 && ((1<<uint((_la-782)))&((1<<(MySqlParserCOS-782))|(1<<(MySqlParserCOT-782))|(1<<(MySqlParserCRC32-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-782))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-782))|(1<<(MySqlParserCREATE_DH_PARAMETERS-782))|(1<<(MySqlParserCREATE_DIGEST-782))|(1<<(MySqlParserCROSSES-782))|(1<<(MySqlParserDATEDIFF-782))|(1<<(MySqlParserDATE_FORMAT-782))|(1<<(MySqlParserDAYNAME-782))|(1<<(MySqlParserDAYOFMONTH-782))|(1<<(MySqlParserDAYOFWEEK-782))|(1<<(MySqlParserDAYOFYEAR-782))|(1<<(MySqlParserDECODE-782))|(1<<(MySqlParserDEGREES-782))|(1<<(MySqlParserDES_DECRYPT-782))|(1<<(MySqlParserDES_ENCRYPT-782))|(1<<(MySqlParserDIMENSION-782))|(1<<(MySqlParserDISJOINT-782))|(1<<(MySqlParserELT-782))|(1<<(MySqlParserENCODE-782))|(1<<(MySqlParserENCRYPT-782))|(1<<(MySqlParserENDPOINT-782))|(1<<(MySqlParserENVELOPE-782))|(1<<(MySqlParserEQUALS-782))|(1<<(MySqlParserEXP-782))|(1<<(MySqlParserEXPORT_SET-782))|(1<<(MySqlParserEXTERIORRING-782))|(1<<(MySqlParserEXTRACTVALUE-782))|(1<<(MySqlParserFIELD-782))|(1<<(MySqlParserFIND_IN_SET-782)))) != 0) || (((_la-814)&-(0x1f+1)) == 0 && ((1<<uint((_la-814)))&((1<<(MySqlParserFLOOR-814))|(1<<(MySqlParserFORMAT-814))|(1<<(MySqlParserFOUND_ROWS-814))|(1<<(MySqlParserFROM_BASE64-814))|(1<<(MySqlParserFROM_DAYS-814))|(1<<(MySqlParserFROM_UNIXTIME-814))|(1<<(MySqlParserGEOMCOLLFROMTEXT-814))|(1<<(MySqlParserGEOMCOLLFROMWKB-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-814))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-814))|(1<<(MySqlParserGEOMETRYFROMTEXT-814))|(1<<(MySqlParserGEOMETRYFROMWKB-814))|(1<<(MySqlParserGEOMETRYN-814))|(1<<(MySqlParserGEOMETRYTYPE-814))|(1<<(MySqlParserGEOMFROMTEXT-814))|(1<<(MySqlParserGEOMFROMWKB-814))|(1<<(MySqlParserGET_FORMAT-814))|(1<<(MySqlParserGET_LOCK-814))|(1<<(MySqlParserGLENGTH-814))|(1<<(MySqlParserGREATEST-814))|(1<<(MySqlParserGTID_SUBSET-814))|(1<<(MySqlParserGTID_SUBTRACT-814))|(1<<(MySqlParserHEX-814))|(1<<(MySqlParserIFNULL-814))|(1<<(MySqlParserINET6_ATON-814))|(1<<(MySqlParserINET6_NTOA-814))|(1<<(MySqlParserINET_ATON-814))|(1<<(MySqlParserINET_NTOA-814))|(1<<(MySqlParserINSTR-814))|(1<<(MySqlParserINTERIORRINGN-814))|(1<<(MySqlParserINTERSECTS-814))|(1<<(MySqlParserISCLOSED-814)))) != 0) || (((_la-846)&-(0x1f+1)) == 0 && ((1<<uint((_la-846)))&((1<<(MySqlParserISEMPTY-846))|(1<<(MySqlParserISNULL-846))|(1<<(MySqlParserISSIMPLE-846))|(1<<(MySqlParserIS_FREE_LOCK-846))|(1<<(MySqlParserIS_IPV4-846))|(1<<(MySqlParserIS_IPV4_COMPAT-846))|(1<<(MySqlParserIS_IPV4_MAPPED-846))|(1<<(MySqlParserIS_IPV6-846))|(1<<(MySqlParserIS_USED_LOCK-846))|(1<<(MySqlParserLAST_INSERT_ID-846))|(1<<(MySqlParserLCASE-846))|(1<<(MySqlParserLEAST-846))|(1<<(MySqlParserLENGTH-846))|(1<<(MySqlParserLINEFROMTEXT-846))|(1<<(MySqlParserLINEFROMWKB-846))|(1<<(MySqlParserLINESTRINGFROMTEXT-846))|(1<<(MySqlParserLINESTRINGFROMWKB-846))|(1<<(MySqlParserLN-846))|(1<<(MySqlParserLOAD_FILE-846))|(1<<(MySqlParserLOCATE-846))|(1<<(MySqlParserLOG-846))|(1<<(MySqlParserLOG10-846))|(1<<(MySqlParserLOG2-846))|(1<<(MySqlParserLOWER-846))|(1<<(MySqlParserLPAD-846))|(1<<(MySqlParserLTRIM-846))|(1<<(MySqlParserMAKEDATE-846))|(1<<(MySqlParserMAKETIME-846))|(1<<(MySqlParserMAKE_SET-846))|(1<<(MySqlParserMASTER_POS_WAIT-846))|(1<<(MySqlParserMBRCONTAINS-846))|(1<<(MySqlParserMBRDISJOINT-846)))) != 0) || (((_la-878)&-(0x1f+1)) == 0 && ((1<<uint((_la-878)))&((1<<(MySqlParserMBREQUAL-878))|(1<<(MySqlParserMBRINTERSECTS-878))|(1<<(MySqlParserMBROVERLAPS-878))|(1<<(MySqlParserMBRTOUCHES-878))|(1<<(MySqlParserMBRWITHIN-878))|(1<<(MySqlParserMD5-878))|(1<<(MySqlParserMLINEFROMTEXT-878))|(1<<(MySqlParserMLINEFROMWKB-878))|(1<<(MySqlParserMONTHNAME-878))|(1<<(MySqlParserMPOINTFROMTEXT-878))|(1<<(MySqlParserMPOINTFROMWKB-878))|(1<<(MySqlParserMPOLYFROMTEXT-878))|(1<<(MySqlParserMPOLYFROMWKB-878))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-878))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-878))|(1<<(MySqlParserMULTIPOINTFROMTEXT-878))|(1<<(MySqlParserMULTIPOINTFROMWKB-878))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-878))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-878))|(1<<(MySqlParserNAME_CONST-878))|(1<<(MySqlParserNULLIF-878))|(1<<(MySqlParserNUMGEOMETRIES-878))|(1<<(MySqlParserNUMINTERIORRINGS-878))|(1<<(MySqlParserNUMPOINTS-878))|(1<<(MySqlParserOCT-878))|(1<<(MySqlParserOCTET_LENGTH-878))|(1<<(MySqlParserORD-878))|(1<<(MySqlParserOVERLAPS-878))|(1<<(MySqlParserPERIOD_ADD-878))|(1<<(MySqlParserPERIOD_DIFF-878))|(1<<(MySqlParserPI-878))|(1<<(MySqlParserPOINTFROMTEXT-878)))) != 0) || (((_la-910)&-(0x1f+1)) == 0 && ((1<<uint((_la-910)))&((1<<(MySqlParserPOINTFROMWKB-910))|(1<<(MySqlParserPOINTN-910))|(1<<(MySqlParserPOLYFROMTEXT-910))|(1<<(MySqlParserPOLYFROMWKB-910))|(1<<(MySqlParserPOLYGONFROMTEXT-910))|(1<<(MySqlParserPOLYGONFROMWKB-910))|(1<<(MySqlParserPOW-910))|(1<<(MySqlParserPOWER-910))|(1<<(MySqlParserQUOTE-910))|(1<<(MySqlParserRADIANS-910))|(1<<(MySqlParserRAND-910))|(1<<(MySqlParserRANDOM_BYTES-910))|(1<<(MySqlParserRELEASE_LOCK-910))|(1<<(MySqlParserREVERSE-910))|(1<<(MySqlParserROUND-910))|(1<<(MySqlParserROW_COUNT-910))|(1<<(MySqlParserRPAD-910))|(1<<(MySqlParserRTRIM-910))|(1<<(MySqlParserSEC_TO_TIME-910))|(1<<(MySqlParserSESSION_USER-910))|(1<<(MySqlParserSHA-910))|(1<<(MySqlParserSHA1-910))|(1<<(MySqlParserSHA2-910))|(1<<(MySqlParserSCHEMA_NAME-910))|(1<<(MySqlParserSIGN-910))|(1<<(MySqlParserSIN-910))|(1<<(MySqlParserSLEEP-910))|(1<<(MySqlParserSOUNDEX-910))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-910))|(1<<(MySqlParserSQRT-910))|(1<<(MySqlParserSRID-910))|(1<<(MySqlParserSTARTPOINT-910)))) != 0) || (((_la-942)&-(0x1f+1)) == 0 && ((1<<uint((_la-942)))&((1<<(MySqlParserSTRCMP-942))|(1<<(MySqlParserSTR_TO_DATE-942))|(1<<(MySqlParserST_AREA-942))|(1<<(MySqlParserST_ASBINARY-942))|(1<<(MySqlParserST_ASTEXT-942))|(1<<(MySqlParserST_ASWKB-942))|(1<<(MySqlParserST_ASWKT-942))|(1<<(MySqlParserST_BUFFER-942))|(1<<(MySqlParserST_CENTROID-942))|(1<<(MySqlParserST_CONTAINS-942))|(1<<(MySqlParserST_CROSSES-942))|(1<<(MySqlParserST_DIFFERENCE-942))|(1<<(MySqlParserST_DIMENSION-942))|(1<<(MySqlParserST_DISJOINT-942))|(1<<(MySqlParserST_DISTANCE-942))|(1<<(MySqlParserST_ENDPOINT-942))|(1<<(MySqlParserST_ENVELOPE-942))|(1<<(MySqlParserST_EQUALS-942))|(1<<(MySqlParserST_EXTERIORRING-942))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-942))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-942))|(1<<(MySqlParserST_GEOMETRYFROMWKB-942))|(1<<(MySqlParserST_GEOMETRYN-942))|(1<<(MySqlParserST_GEOMETRYTYPE-942))|(1<<(MySqlParserST_GEOMFROMTEXT-942))|(1<<(MySqlParserST_GEOMFROMWKB-942))|(1<<(MySqlParserST_INTERIORRINGN-942))|(1<<(MySqlParserST_INTERSECTION-942)))) != 0) || (((_la-974)&-(0x1f+1)) == 0 && ((1<<uint((_la-974)))&((1<<(MySqlParserST_INTERSECTS-974))|(1<<(MySqlParserST_ISCLOSED-974))|(1<<(MySqlParserST_ISEMPTY-974))|(1<<(MySqlParserST_ISSIMPLE-974))|(1<<(MySqlParserST_LINEFROMTEXT-974))|(1<<(MySqlParserST_LINEFROMWKB-974))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-974))|(1<<(MySqlParserST_LINESTRINGFROMWKB-974))|(1<<(MySqlParserST_NUMGEOMETRIES-974))|(1<<(MySqlParserST_NUMINTERIORRING-974))|(1<<(MySqlParserST_NUMINTERIORRINGS-974))|(1<<(MySqlParserST_NUMPOINTS-974))|(1<<(MySqlParserST_OVERLAPS-974))|(1<<(MySqlParserST_POINTFROMTEXT-974))|(1<<(MySqlParserST_POINTFROMWKB-974))|(1<<(MySqlParserST_POINTN-974))|(1<<(MySqlParserST_POLYFROMTEXT-974))|(1<<(MySqlParserST_POLYFROMWKB-974))|(1<<(MySqlParserST_POLYGONFROMTEXT-974))|(1<<(MySqlParserST_POLYGONFROMWKB-974))|(1<<(MySqlParserST_SRID-974))|(1<<(MySqlParserST_STARTPOINT-974))|(1<<(MySqlParserST_SYMDIFFERENCE-974))|(1<<(MySqlParserST_TOUCHES-974))|(1<<(MySqlParserST_UNION-974))|(1<<(MySqlParserST_WITHIN-974))|(1<<(MySqlParserST_X-974))|(1<<(MySqlParserST_Y-974))|(1<<(MySqlParserSUBDATE-974))|(1<<(MySqlParserSUBSTRING_INDEX-974))|(1<<(MySqlParserSUBTIME-974))|(1<<(MySqlParserSYSTEM_USER-974)))) != 0) || (((_la-1006)&-(0x1f+1)) == 0 && ((1<<uint((_la-1006)))&((1<<(MySqlParserTAN-1006))|(1<<(MySqlParserTIMEDIFF-1006))|(1<<(MySqlParserTIMESTAMPADD-1006))|(1<<(MySqlParserTIMESTAMPDIFF-1006))|(1<<(MySqlParserTIME_FORMAT-1006))|(1<<(MySqlParserTIME_TO_SEC-1006))|(1<<(MySqlParserTOUCHES-1006))|(1<<(MySqlParserTO_BASE64-1006))|(1<<(MySqlParserTO_DAYS-1006))|(1<<(MySqlParserTO_SECONDS-1006))|(1<<(MySqlParserUCASE-1006))|(1<<(MySqlParserUNCOMPRESS-1006))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-1006))|(1<<(MySqlParserUNHEX-1006))|(1<<(MySqlParserUNIX_TIMESTAMP-1006))|(1<<(MySqlParserUPDATEXML-1006))|(1<<(MySqlParserUPPER-1006))|(1<<(MySqlParserUUID-1006))|(1<<(MySqlParserUUID_SHORT-1006))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1006))|(1<<(MySqlParserVERSION-1006))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1006))|(1<<(MySqlParserWEEKDAY-1006))|(1<<(MySqlParserWEEKOFYEAR-1006))|(1<<(MySqlParserWEIGHT_STRING-1006))|(1<<(MySqlParserWITHIN-1006))|(1<<(MySqlParserYEARWEEK-1006))|(1<<(MySqlParserY_FUNCTION-1006))|(1<<(MySqlParserX_FUNCTION-1006)))) != 0) || (((_la-1051)&-(0x1f+1)) == 0 && ((1<<uint((_la-1051)))&((1<<(MySqlParserMOD-1051))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-1051))|(1<<(MySqlParserSTRING_LITERAL-1051)))) != 0) || _la == MySqlParserID || _la == MySqlParserREVERSE_QUOTE_ID {
		{
			p.SetState(4301)
			p.Uid()
		}

	}

	return localctx
}

// ICursorStatementContext is an interface to support dynamic dispatch.
type ICursorStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursorStatementContext differentiates from other interfaces.
	IsCursorStatementContext()
}

type CursorStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursorStatementContext() *CursorStatementContext {
	var p = new(CursorStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_cursorStatement
	return p
}

func (*CursorStatementContext) IsCursorStatementContext() {}

func NewCursorStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CursorStatementContext {
	var p = new(CursorStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_cursorStatement

	return p
}

func (s *CursorStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CursorStatementContext) CopyFrom(ctx *CursorStatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *CursorStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CursorStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type CloseCursorContext struct {
	*CursorStatementContext
}

func NewCloseCursorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CloseCursorContext {
	var p = new(CloseCursorContext)

	p.CursorStatementContext = NewEmptyCursorStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CursorStatementContext))

	return p
}

func (s *CloseCursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CloseCursorContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLOSE, 0)
}

func (s *CloseCursorContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CloseCursorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCloseCursor(s)

	default:
		return t.VisitChildren(s)
	}
}

type OpenCursorContext struct {
	*CursorStatementContext
}

func NewOpenCursorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OpenCursorContext {
	var p = new(OpenCursorContext)

	p.CursorStatementContext = NewEmptyCursorStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CursorStatementContext))

	return p
}

func (s *OpenCursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpenCursorContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPEN, 0)
}

func (s *OpenCursorContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *OpenCursorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitOpenCursor(s)

	default:
		return t.VisitChildren(s)
	}
}

type FetchCursorContext struct {
	*CursorStatementContext
}

func NewFetchCursorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FetchCursorContext {
	var p = new(FetchCursorContext)

	p.CursorStatementContext = NewEmptyCursorStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CursorStatementContext))

	return p
}

func (s *FetchCursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FetchCursorContext) FETCH() antlr.TerminalNode {
	return s.GetToken(MySqlParserFETCH, 0)
}

func (s *FetchCursorContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *FetchCursorContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *FetchCursorContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *FetchCursorContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *FetchCursorContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEXT, 0)
}

func (s *FetchCursorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFetchCursor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CursorStatement() (localctx ICursorStatementContext) {
	localctx = NewCursorStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, MySqlParserRULE_cursorStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4319)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCLOSE:
		localctx = NewCloseCursorContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4304)
			p.Match(MySqlParserCLOSE)
		}
		{
			p.SetState(4305)
			p.Uid()
		}

	case MySqlParserFETCH:
		localctx = NewFetchCursorContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4306)
			p.Match(MySqlParserFETCH)
		}
		p.SetState(4311)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 620, p.GetParserRuleContext()) == 1 {
			p.SetState(4308)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserNEXT {
				{
					p.SetState(4307)
					p.Match(MySqlParserNEXT)
				}

			}
			{
				p.SetState(4310)
				p.Match(MySqlParserFROM)
			}

		}
		{
			p.SetState(4313)
			p.Uid()
		}
		{
			p.SetState(4314)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(4315)
			p.UidList()
		}

	case MySqlParserOPEN:
		localctx = NewOpenCursorContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4317)
			p.Match(MySqlParserOPEN)
		}
		{
			p.SetState(4318)
			p.Uid()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclareVariableContext is an interface to support dynamic dispatch.
type IDeclareVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareVariableContext differentiates from other interfaces.
	IsDeclareVariableContext()
}

type DeclareVariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareVariableContext() *DeclareVariableContext {
	var p = new(DeclareVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_declareVariable
	return p
}

func (*DeclareVariableContext) IsDeclareVariableContext() {}

func NewDeclareVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareVariableContext {
	var p = new(DeclareVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_declareVariable

	return p
}

func (s *DeclareVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareVariableContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECLARE, 0)
}

func (s *DeclareVariableContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *DeclareVariableContext) DataType() IDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeContext)
}

func (s *DeclareVariableContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *DeclareVariableContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DeclareVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDeclareVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DeclareVariable() (localctx IDeclareVariableContext) {
	localctx = NewDeclareVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, MySqlParserRULE_declareVariable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4321)
		p.Match(MySqlParserDECLARE)
	}
	{
		p.SetState(4322)
		p.UidList()
	}
	{
		p.SetState(4323)
		p.DataType()
	}
	p.SetState(4326)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFAULT {
		{
			p.SetState(4324)
			p.Match(MySqlParserDEFAULT)
		}
		{
			p.SetState(4325)
			p.expression(0)
		}

	}

	return localctx
}

// IDeclareConditionContext is an interface to support dynamic dispatch.
type IDeclareConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareConditionContext differentiates from other interfaces.
	IsDeclareConditionContext()
}

type DeclareConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareConditionContext() *DeclareConditionContext {
	var p = new(DeclareConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_declareCondition
	return p
}

func (*DeclareConditionContext) IsDeclareConditionContext() {}

func NewDeclareConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareConditionContext {
	var p = new(DeclareConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_declareCondition

	return p
}

func (s *DeclareConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareConditionContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECLARE, 0)
}

func (s *DeclareConditionContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DeclareConditionContext) CONDITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONDITION, 0)
}

func (s *DeclareConditionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *DeclareConditionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *DeclareConditionContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLSTATE, 0)
}

func (s *DeclareConditionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *DeclareConditionContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *DeclareConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareConditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDeclareCondition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DeclareCondition() (localctx IDeclareConditionContext) {
	localctx = NewDeclareConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, MySqlParserRULE_declareCondition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4328)
		p.Match(MySqlParserDECLARE)
	}
	{
		p.SetState(4329)
		p.Uid()
	}
	{
		p.SetState(4330)
		p.Match(MySqlParserCONDITION)
	}
	{
		p.SetState(4331)
		p.Match(MySqlParserFOR)
	}
	p.SetState(4338)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL:
		{
			p.SetState(4332)
			p.DecimalLiteral()
		}

	case MySqlParserSQLSTATE:
		{
			p.SetState(4333)
			p.Match(MySqlParserSQLSTATE)
		}
		p.SetState(4335)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVALUE {
			{
				p.SetState(4334)
				p.Match(MySqlParserVALUE)
			}

		}
		{
			p.SetState(4337)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclareCursorContext is an interface to support dynamic dispatch.
type IDeclareCursorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclareCursorContext differentiates from other interfaces.
	IsDeclareCursorContext()
}

type DeclareCursorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareCursorContext() *DeclareCursorContext {
	var p = new(DeclareCursorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_declareCursor
	return p
}

func (*DeclareCursorContext) IsDeclareCursorContext() {}

func NewDeclareCursorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareCursorContext {
	var p = new(DeclareCursorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_declareCursor

	return p
}

func (s *DeclareCursorContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareCursorContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECLARE, 0)
}

func (s *DeclareCursorContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DeclareCursorContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURSOR, 0)
}

func (s *DeclareCursorContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *DeclareCursorContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *DeclareCursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareCursorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareCursorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDeclareCursor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DeclareCursor() (localctx IDeclareCursorContext) {
	localctx = NewDeclareCursorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, MySqlParserRULE_declareCursor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4340)
		p.Match(MySqlParserDECLARE)
	}
	{
		p.SetState(4341)
		p.Uid()
	}
	{
		p.SetState(4342)
		p.Match(MySqlParserCURSOR)
	}
	{
		p.SetState(4343)
		p.Match(MySqlParserFOR)
	}
	{
		p.SetState(4344)
		p.SelectStatement()
	}

	return localctx
}

// IDeclareHandlerContext is an interface to support dynamic dispatch.
type IDeclareHandlerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetHandlerAction returns the handlerAction token.
	GetHandlerAction() antlr.Token

	// SetHandlerAction sets the handlerAction token.
	SetHandlerAction(antlr.Token)

	// IsDeclareHandlerContext differentiates from other interfaces.
	IsDeclareHandlerContext()
}

type DeclareHandlerContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	handlerAction antlr.Token
}

func NewEmptyDeclareHandlerContext() *DeclareHandlerContext {
	var p = new(DeclareHandlerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_declareHandler
	return p
}

func (*DeclareHandlerContext) IsDeclareHandlerContext() {}

func NewDeclareHandlerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareHandlerContext {
	var p = new(DeclareHandlerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_declareHandler

	return p
}

func (s *DeclareHandlerContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareHandlerContext) GetHandlerAction() antlr.Token { return s.handlerAction }

func (s *DeclareHandlerContext) SetHandlerAction(v antlr.Token) { s.handlerAction = v }

func (s *DeclareHandlerContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECLARE, 0)
}

func (s *DeclareHandlerContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *DeclareHandlerContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *DeclareHandlerContext) AllHandlerConditionValue() []IHandlerConditionValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IHandlerConditionValueContext)(nil)).Elem())
	var tst = make([]IHandlerConditionValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IHandlerConditionValueContext)
		}
	}

	return tst
}

func (s *DeclareHandlerContext) HandlerConditionValue(i int) IHandlerConditionValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerConditionValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IHandlerConditionValueContext)
}

func (s *DeclareHandlerContext) RoutineBody() IRoutineBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutineBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutineBodyContext)
}

func (s *DeclareHandlerContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTINUE, 0)
}

func (s *DeclareHandlerContext) EXIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXIT, 0)
}

func (s *DeclareHandlerContext) UNDO() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDO, 0)
}

func (s *DeclareHandlerContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *DeclareHandlerContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *DeclareHandlerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareHandlerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareHandlerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDeclareHandler(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DeclareHandler() (localctx IDeclareHandlerContext) {
	localctx = NewDeclareHandlerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, MySqlParserRULE_declareHandler)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4346)
		p.Match(MySqlParserDECLARE)
	}
	{
		p.SetState(4347)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*DeclareHandlerContext).handlerAction = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserCONTINUE || _la == MySqlParserEXIT || _la == MySqlParserUNDO) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*DeclareHandlerContext).handlerAction = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4348)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(4349)
		p.Match(MySqlParserFOR)
	}
	{
		p.SetState(4350)
		p.HandlerConditionValue()
	}
	p.SetState(4355)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4351)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4352)
			p.HandlerConditionValue()
		}

		p.SetState(4357)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4358)
		p.RoutineBody()
	}

	return localctx
}

// IHandlerConditionValueContext is an interface to support dynamic dispatch.
type IHandlerConditionValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerConditionValueContext differentiates from other interfaces.
	IsHandlerConditionValueContext()
}

type HandlerConditionValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerConditionValueContext() *HandlerConditionValueContext {
	var p = new(HandlerConditionValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handlerConditionValue
	return p
}

func (*HandlerConditionValueContext) IsHandlerConditionValueContext() {}

func NewHandlerConditionValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerConditionValueContext {
	var p = new(HandlerConditionValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handlerConditionValue

	return p
}

func (s *HandlerConditionValueContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerConditionValueContext) CopyFrom(ctx *HandlerConditionValueContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *HandlerConditionValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type HandlerConditionWarningContext struct {
	*HandlerConditionValueContext
}

func NewHandlerConditionWarningContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HandlerConditionWarningContext {
	var p = new(HandlerConditionWarningContext)

	p.HandlerConditionValueContext = NewEmptyHandlerConditionValueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*HandlerConditionValueContext))

	return p
}

func (s *HandlerConditionWarningContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionWarningContext) SQLWARNING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLWARNING, 0)
}

func (s *HandlerConditionWarningContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandlerConditionWarning(s)

	default:
		return t.VisitChildren(s)
	}
}

type HandlerConditionCodeContext struct {
	*HandlerConditionValueContext
}

func NewHandlerConditionCodeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HandlerConditionCodeContext {
	var p = new(HandlerConditionCodeContext)

	p.HandlerConditionValueContext = NewEmptyHandlerConditionValueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*HandlerConditionValueContext))

	return p
}

func (s *HandlerConditionCodeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionCodeContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *HandlerConditionCodeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandlerConditionCode(s)

	default:
		return t.VisitChildren(s)
	}
}

type HandlerConditionNotfoundContext struct {
	*HandlerConditionValueContext
}

func NewHandlerConditionNotfoundContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HandlerConditionNotfoundContext {
	var p = new(HandlerConditionNotfoundContext)

	p.HandlerConditionValueContext = NewEmptyHandlerConditionValueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*HandlerConditionValueContext))

	return p
}

func (s *HandlerConditionNotfoundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionNotfoundContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *HandlerConditionNotfoundContext) FOUND() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOUND, 0)
}

func (s *HandlerConditionNotfoundContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandlerConditionNotfound(s)

	default:
		return t.VisitChildren(s)
	}
}

type HandlerConditionStateContext struct {
	*HandlerConditionValueContext
}

func NewHandlerConditionStateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HandlerConditionStateContext {
	var p = new(HandlerConditionStateContext)

	p.HandlerConditionValueContext = NewEmptyHandlerConditionValueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*HandlerConditionValueContext))

	return p
}

func (s *HandlerConditionStateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionStateContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLSTATE, 0)
}

func (s *HandlerConditionStateContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *HandlerConditionStateContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *HandlerConditionStateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandlerConditionState(s)

	default:
		return t.VisitChildren(s)
	}
}

type HandlerConditionExceptionContext struct {
	*HandlerConditionValueContext
}

func NewHandlerConditionExceptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HandlerConditionExceptionContext {
	var p = new(HandlerConditionExceptionContext)

	p.HandlerConditionValueContext = NewEmptyHandlerConditionValueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*HandlerConditionValueContext))

	return p
}

func (s *HandlerConditionExceptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionExceptionContext) SQLEXCEPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLEXCEPTION, 0)
}

func (s *HandlerConditionExceptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandlerConditionException(s)

	default:
		return t.VisitChildren(s)
	}
}

type HandlerConditionNameContext struct {
	*HandlerConditionValueContext
}

func NewHandlerConditionNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HandlerConditionNameContext {
	var p = new(HandlerConditionNameContext)

	p.HandlerConditionValueContext = NewEmptyHandlerConditionValueContext()
	p.parser = parser
	p.CopyFrom(ctx.(*HandlerConditionValueContext))

	return p
}

func (s *HandlerConditionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerConditionNameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *HandlerConditionNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandlerConditionName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) HandlerConditionValue() (localctx IHandlerConditionValueContext) {
	localctx = NewHandlerConditionValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, MySqlParserRULE_handlerConditionValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4371)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL:
		localctx = NewHandlerConditionCodeContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4360)
			p.DecimalLiteral()
		}

	case MySqlParserSQLSTATE:
		localctx = NewHandlerConditionStateContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4361)
			p.Match(MySqlParserSQLSTATE)
		}
		p.SetState(4363)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVALUE {
			{
				p.SetState(4362)
				p.Match(MySqlParserVALUE)
			}

		}
		{
			p.SetState(4365)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		localctx = NewHandlerConditionNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4366)
			p.Uid()
		}

	case MySqlParserSQLWARNING:
		localctx = NewHandlerConditionWarningContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4367)
			p.Match(MySqlParserSQLWARNING)
		}

	case MySqlParserNOT:
		localctx = NewHandlerConditionNotfoundContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4368)
			p.Match(MySqlParserNOT)
		}
		{
			p.SetState(4369)
			p.Match(MySqlParserFOUND)
		}

	case MySqlParserSQLEXCEPTION:
		localctx = NewHandlerConditionExceptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4370)
			p.Match(MySqlParserSQLEXCEPTION)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProcedureSqlStatementContext is an interface to support dynamic dispatch.
type IProcedureSqlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProcedureSqlStatementContext differentiates from other interfaces.
	IsProcedureSqlStatementContext()
}

type ProcedureSqlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedureSqlStatementContext() *ProcedureSqlStatementContext {
	var p = new(ProcedureSqlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_procedureSqlStatement
	return p
}

func (*ProcedureSqlStatementContext) IsProcedureSqlStatementContext() {}

func NewProcedureSqlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProcedureSqlStatementContext {
	var p = new(ProcedureSqlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_procedureSqlStatement

	return p
}

func (s *ProcedureSqlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProcedureSqlStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MySqlParserSEMI, 0)
}

func (s *ProcedureSqlStatementContext) CompoundStatement() ICompoundStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *ProcedureSqlStatementContext) SqlStatement() ISqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISqlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISqlStatementContext)
}

func (s *ProcedureSqlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProcedureSqlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProcedureSqlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitProcedureSqlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ProcedureSqlStatement() (localctx IProcedureSqlStatementContext) {
	localctx = NewProcedureSqlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, MySqlParserRULE_procedureSqlStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4375)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 628, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4373)
			p.CompoundStatement()
		}

	case 2:
		{
			p.SetState(4374)
			p.SqlStatement()
		}

	}
	{
		p.SetState(4377)
		p.Match(MySqlParserSEMI)
	}

	return localctx
}

// ICaseAlternativeContext is an interface to support dynamic dispatch.
type ICaseAlternativeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseAlternativeContext differentiates from other interfaces.
	IsCaseAlternativeContext()
}

type CaseAlternativeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseAlternativeContext() *CaseAlternativeContext {
	var p = new(CaseAlternativeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_caseAlternative
	return p
}

func (*CaseAlternativeContext) IsCaseAlternativeContext() {}

func NewCaseAlternativeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseAlternativeContext {
	var p = new(CaseAlternativeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_caseAlternative

	return p
}

func (s *CaseAlternativeContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseAlternativeContext) WHEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHEN, 0)
}

func (s *CaseAlternativeContext) THEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHEN, 0)
}

func (s *CaseAlternativeContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *CaseAlternativeContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CaseAlternativeContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *CaseAlternativeContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *CaseAlternativeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseAlternativeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseAlternativeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCaseAlternative(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CaseAlternative() (localctx ICaseAlternativeContext) {
	localctx = NewCaseAlternativeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, MySqlParserRULE_caseAlternative)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4379)
		p.Match(MySqlParserWHEN)
	}
	p.SetState(4382)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 629, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4380)
			p.Constant()
		}

	case 2:
		{
			p.SetState(4381)
			p.expression(0)
		}

	}
	{
		p.SetState(4384)
		p.Match(MySqlParserTHEN)
	}
	p.SetState(4386)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(4385)
				p.ProcedureSqlStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4388)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 630, p.GetParserRuleContext())
	}

	return localctx
}

// IElifAlternativeContext is an interface to support dynamic dispatch.
type IElifAlternativeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElifAlternativeContext differentiates from other interfaces.
	IsElifAlternativeContext()
}

type ElifAlternativeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElifAlternativeContext() *ElifAlternativeContext {
	var p = new(ElifAlternativeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_elifAlternative
	return p
}

func (*ElifAlternativeContext) IsElifAlternativeContext() {}

func NewElifAlternativeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElifAlternativeContext {
	var p = new(ElifAlternativeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_elifAlternative

	return p
}

func (s *ElifAlternativeContext) GetParser() antlr.Parser { return s.parser }

func (s *ElifAlternativeContext) ELSEIF() antlr.TerminalNode {
	return s.GetToken(MySqlParserELSEIF, 0)
}

func (s *ElifAlternativeContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ElifAlternativeContext) THEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHEN, 0)
}

func (s *ElifAlternativeContext) AllProcedureSqlStatement() []IProcedureSqlStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem())
	var tst = make([]IProcedureSqlStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedureSqlStatementContext)
		}
	}

	return tst
}

func (s *ElifAlternativeContext) ProcedureSqlStatement(i int) IProcedureSqlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedureSqlStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedureSqlStatementContext)
}

func (s *ElifAlternativeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElifAlternativeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElifAlternativeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitElifAlternative(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ElifAlternative() (localctx IElifAlternativeContext) {
	localctx = NewElifAlternativeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, MySqlParserRULE_elifAlternative)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4390)
		p.Match(MySqlParserELSEIF)
	}
	{
		p.SetState(4391)
		p.expression(0)
	}
	{
		p.SetState(4392)
		p.Match(MySqlParserTHEN)
	}
	p.SetState(4394)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(4393)
				p.ProcedureSqlStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(4396)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 631, p.GetParserRuleContext())
	}

	return localctx
}

// IAlterUserContext is an interface to support dynamic dispatch.
type IAlterUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlterUserContext differentiates from other interfaces.
	IsAlterUserContext()
}

type AlterUserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlterUserContext() *AlterUserContext {
	var p = new(AlterUserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alterUser
	return p
}

func (*AlterUserContext) IsAlterUserContext() {}

func NewAlterUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlterUserContext {
	var p = new(AlterUserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alterUser

	return p
}

func (s *AlterUserContext) GetParser() antlr.Parser { return s.parser }

func (s *AlterUserContext) CopyFrom(ctx *AlterUserContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *AlterUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterUserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AlterUserMysqlV56Context struct {
	*AlterUserContext
}

func NewAlterUserMysqlV56Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterUserMysqlV56Context {
	var p = new(AlterUserMysqlV56Context)

	p.AlterUserContext = NewEmptyAlterUserContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterUserContext))

	return p
}

func (s *AlterUserMysqlV56Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterUserMysqlV56Context) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterUserMysqlV56Context) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *AlterUserMysqlV56Context) AllUserSpecification() []IUserSpecificationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserSpecificationContext)(nil)).Elem())
	var tst = make([]IUserSpecificationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserSpecificationContext)
		}
	}

	return tst
}

func (s *AlterUserMysqlV56Context) UserSpecification(i int) IUserSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserSpecificationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserSpecificationContext)
}

func (s *AlterUserMysqlV56Context) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterUserMysqlV56Context) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterUserMysqlV56Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterUserMysqlV56(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterUserMysqlV57Context struct {
	*AlterUserContext
	tlsNone antlr.Token
}

func NewAlterUserMysqlV57Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterUserMysqlV57Context {
	var p = new(AlterUserMysqlV57Context)

	p.AlterUserContext = NewEmptyAlterUserContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AlterUserContext))

	return p
}

func (s *AlterUserMysqlV57Context) GetTlsNone() antlr.Token { return s.tlsNone }

func (s *AlterUserMysqlV57Context) SetTlsNone(v antlr.Token) { s.tlsNone = v }

func (s *AlterUserMysqlV57Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterUserMysqlV57Context) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterUserMysqlV57Context) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *AlterUserMysqlV57Context) AllUserAuthOption() []IUserAuthOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem())
	var tst = make([]IUserAuthOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserAuthOptionContext)
		}
	}

	return tst
}

func (s *AlterUserMysqlV57Context) UserAuthOption(i int) IUserAuthOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserAuthOptionContext)
}

func (s *AlterUserMysqlV57Context) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *AlterUserMysqlV57Context) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AlterUserMysqlV57Context) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AlterUserMysqlV57Context) REQUIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREQUIRE, 0)
}

func (s *AlterUserMysqlV57Context) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *AlterUserMysqlV57Context) AllUserPasswordOption() []IUserPasswordOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserPasswordOptionContext)(nil)).Elem())
	var tst = make([]IUserPasswordOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserPasswordOptionContext)
		}
	}

	return tst
}

func (s *AlterUserMysqlV57Context) UserPasswordOption(i int) IUserPasswordOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserPasswordOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserPasswordOptionContext)
}

func (s *AlterUserMysqlV57Context) AllUserLockOption() []IUserLockOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserLockOptionContext)(nil)).Elem())
	var tst = make([]IUserLockOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserLockOptionContext)
		}
	}

	return tst
}

func (s *AlterUserMysqlV57Context) UserLockOption(i int) IUserLockOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserLockOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserLockOptionContext)
}

func (s *AlterUserMysqlV57Context) AllTlsOption() []ITlsOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem())
	var tst = make([]ITlsOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITlsOptionContext)
		}
	}

	return tst
}

func (s *AlterUserMysqlV57Context) TlsOption(i int) ITlsOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITlsOptionContext)
}

func (s *AlterUserMysqlV57Context) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *AlterUserMysqlV57Context) AllUserResourceOption() []IUserResourceOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserResourceOptionContext)(nil)).Elem())
	var tst = make([]IUserResourceOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserResourceOptionContext)
		}
	}

	return tst
}

func (s *AlterUserMysqlV57Context) UserResourceOption(i int) IUserResourceOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserResourceOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserResourceOptionContext)
}

func (s *AlterUserMysqlV57Context) AllAND() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserAND)
}

func (s *AlterUserMysqlV57Context) AND(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, i)
}

func (s *AlterUserMysqlV57Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterUserMysqlV57(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AlterUser() (localctx IAlterUserContext) {
	localctx = NewAlterUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, MySqlParserRULE_alterUser)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4452)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 643, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAlterUserMysqlV56Context(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4398)
			p.Match(MySqlParserALTER)
		}
		{
			p.SetState(4399)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(4400)
			p.UserSpecification()
		}
		p.SetState(4405)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4401)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4402)
				p.UserSpecification()
			}

			p.SetState(4407)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewAlterUserMysqlV57Context(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4408)
			p.Match(MySqlParserALTER)
		}
		{
			p.SetState(4409)
			p.Match(MySqlParserUSER)
		}
		p.SetState(4411)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(4410)
				p.IfExists()
			}

		}
		{
			p.SetState(4413)
			p.UserAuthOption()
		}
		p.SetState(4418)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4414)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4415)
				p.UserAuthOption()
			}

			p.SetState(4420)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4435)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserREQUIRE {
			{
				p.SetState(4421)
				p.Match(MySqlParserREQUIRE)
			}
			p.SetState(4433)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserNONE:
				{
					p.SetState(4422)

					var _m = p.Match(MySqlParserNONE)

					localctx.(*AlterUserMysqlV57Context).tlsNone = _m
				}

			case MySqlParserSSL, MySqlParserCIPHER, MySqlParserISSUER, MySqlParserSUBJECT, MySqlParserX509:
				{
					p.SetState(4423)
					p.TlsOption()
				}
				p.SetState(4430)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MySqlParserAND || _la == MySqlParserSSL || _la == MySqlParserCIPHER || _la == MySqlParserISSUER || _la == MySqlParserSUBJECT || _la == MySqlParserX509 {
					p.SetState(4425)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == MySqlParserAND {
						{
							p.SetState(4424)
							p.Match(MySqlParserAND)
						}

					}
					{
						p.SetState(4427)
						p.TlsOption()
					}

					p.SetState(4432)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(4443)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH {
			{
				p.SetState(4437)
				p.Match(MySqlParserWITH)
			}
			p.SetState(4439)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = (((_la-458)&-(0x1f+1)) == 0 && ((1<<uint((_la-458)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-458))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-458))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-458))|(1<<(MySqlParserMAX_USER_CONNECTIONS-458)))) != 0) {
				{
					p.SetState(4438)
					p.UserResourceOption()
				}

				p.SetState(4441)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(4449)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserACCOUNT || _la == MySqlParserPASSWORD {
			p.SetState(4447)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserPASSWORD:
				{
					p.SetState(4445)
					p.UserPasswordOption()
				}

			case MySqlParserACCOUNT:
				{
					p.SetState(4446)
					p.UserLockOption()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4451)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ICreateUserContext is an interface to support dynamic dispatch.
type ICreateUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateUserContext differentiates from other interfaces.
	IsCreateUserContext()
}

type CreateUserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateUserContext() *CreateUserContext {
	var p = new(CreateUserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createUser
	return p
}

func (*CreateUserContext) IsCreateUserContext() {}

func NewCreateUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateUserContext {
	var p = new(CreateUserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createUser

	return p
}

func (s *CreateUserContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateUserContext) CopyFrom(ctx *CreateUserContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *CreateUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type CreateUserMysqlV57Context struct {
	*CreateUserContext
	tlsNone antlr.Token
}

func NewCreateUserMysqlV57Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateUserMysqlV57Context {
	var p = new(CreateUserMysqlV57Context)

	p.CreateUserContext = NewEmptyCreateUserContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateUserContext))

	return p
}

func (s *CreateUserMysqlV57Context) GetTlsNone() antlr.Token { return s.tlsNone }

func (s *CreateUserMysqlV57Context) SetTlsNone(v antlr.Token) { s.tlsNone = v }

func (s *CreateUserMysqlV57Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserMysqlV57Context) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateUserMysqlV57Context) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *CreateUserMysqlV57Context) AllUserAuthOption() []IUserAuthOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem())
	var tst = make([]IUserAuthOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserAuthOptionContext)
		}
	}

	return tst
}

func (s *CreateUserMysqlV57Context) UserAuthOption(i int) IUserAuthOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserAuthOptionContext)
}

func (s *CreateUserMysqlV57Context) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *CreateUserMysqlV57Context) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CreateUserMysqlV57Context) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CreateUserMysqlV57Context) REQUIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREQUIRE, 0)
}

func (s *CreateUserMysqlV57Context) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *CreateUserMysqlV57Context) AllUserPasswordOption() []IUserPasswordOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserPasswordOptionContext)(nil)).Elem())
	var tst = make([]IUserPasswordOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserPasswordOptionContext)
		}
	}

	return tst
}

func (s *CreateUserMysqlV57Context) UserPasswordOption(i int) IUserPasswordOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserPasswordOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserPasswordOptionContext)
}

func (s *CreateUserMysqlV57Context) AllUserLockOption() []IUserLockOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserLockOptionContext)(nil)).Elem())
	var tst = make([]IUserLockOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserLockOptionContext)
		}
	}

	return tst
}

func (s *CreateUserMysqlV57Context) UserLockOption(i int) IUserLockOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserLockOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserLockOptionContext)
}

func (s *CreateUserMysqlV57Context) AllTlsOption() []ITlsOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem())
	var tst = make([]ITlsOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITlsOptionContext)
		}
	}

	return tst
}

func (s *CreateUserMysqlV57Context) TlsOption(i int) ITlsOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITlsOptionContext)
}

func (s *CreateUserMysqlV57Context) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *CreateUserMysqlV57Context) AllUserResourceOption() []IUserResourceOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserResourceOptionContext)(nil)).Elem())
	var tst = make([]IUserResourceOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserResourceOptionContext)
		}
	}

	return tst
}

func (s *CreateUserMysqlV57Context) UserResourceOption(i int) IUserResourceOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserResourceOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserResourceOptionContext)
}

func (s *CreateUserMysqlV57Context) AllAND() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserAND)
}

func (s *CreateUserMysqlV57Context) AND(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, i)
}

func (s *CreateUserMysqlV57Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateUserMysqlV57(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateUserMysqlV56Context struct {
	*CreateUserContext
}

func NewCreateUserMysqlV56Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateUserMysqlV56Context {
	var p = new(CreateUserMysqlV56Context)

	p.CreateUserContext = NewEmptyCreateUserContext()
	p.parser = parser
	p.CopyFrom(ctx.(*CreateUserContext))

	return p
}

func (s *CreateUserMysqlV56Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserMysqlV56Context) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateUserMysqlV56Context) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *CreateUserMysqlV56Context) AllUserAuthOption() []IUserAuthOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem())
	var tst = make([]IUserAuthOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserAuthOptionContext)
		}
	}

	return tst
}

func (s *CreateUserMysqlV56Context) UserAuthOption(i int) IUserAuthOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserAuthOptionContext)
}

func (s *CreateUserMysqlV56Context) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CreateUserMysqlV56Context) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CreateUserMysqlV56Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateUserMysqlV56(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateUser() (localctx ICreateUserContext) {
	localctx = NewCreateUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, MySqlParserRULE_createUser)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4508)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 655, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCreateUserMysqlV56Context(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4454)
			p.Match(MySqlParserCREATE)
		}
		{
			p.SetState(4455)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(4456)
			p.UserAuthOption()
		}
		p.SetState(4461)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4457)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4458)
				p.UserAuthOption()
			}

			p.SetState(4463)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewCreateUserMysqlV57Context(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4464)
			p.Match(MySqlParserCREATE)
		}
		{
			p.SetState(4465)
			p.Match(MySqlParserUSER)
		}
		p.SetState(4467)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(4466)
				p.IfNotExists()
			}

		}
		{
			p.SetState(4469)
			p.UserAuthOption()
		}
		p.SetState(4474)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4470)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4471)
				p.UserAuthOption()
			}

			p.SetState(4476)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4491)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserREQUIRE {
			{
				p.SetState(4477)
				p.Match(MySqlParserREQUIRE)
			}
			p.SetState(4489)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserNONE:
				{
					p.SetState(4478)

					var _m = p.Match(MySqlParserNONE)

					localctx.(*CreateUserMysqlV57Context).tlsNone = _m
				}

			case MySqlParserSSL, MySqlParserCIPHER, MySqlParserISSUER, MySqlParserSUBJECT, MySqlParserX509:
				{
					p.SetState(4479)
					p.TlsOption()
				}
				p.SetState(4486)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MySqlParserAND || _la == MySqlParserSSL || _la == MySqlParserCIPHER || _la == MySqlParserISSUER || _la == MySqlParserSUBJECT || _la == MySqlParserX509 {
					p.SetState(4481)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == MySqlParserAND {
						{
							p.SetState(4480)
							p.Match(MySqlParserAND)
						}

					}
					{
						p.SetState(4483)
						p.TlsOption()
					}

					p.SetState(4488)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(4499)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH {
			{
				p.SetState(4493)
				p.Match(MySqlParserWITH)
			}
			p.SetState(4495)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = (((_la-458)&-(0x1f+1)) == 0 && ((1<<uint((_la-458)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-458))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-458))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-458))|(1<<(MySqlParserMAX_USER_CONNECTIONS-458)))) != 0) {
				{
					p.SetState(4494)
					p.UserResourceOption()
				}

				p.SetState(4497)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(4505)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserACCOUNT || _la == MySqlParserPASSWORD {
			p.SetState(4503)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserPASSWORD:
				{
					p.SetState(4501)
					p.UserPasswordOption()
				}

			case MySqlParserACCOUNT:
				{
					p.SetState(4502)
					p.UserLockOption()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4507)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IDropUserContext is an interface to support dynamic dispatch.
type IDropUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDropUserContext differentiates from other interfaces.
	IsDropUserContext()
}

type DropUserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDropUserContext() *DropUserContext {
	var p = new(DropUserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dropUser
	return p
}

func (*DropUserContext) IsDropUserContext() {}

func NewDropUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DropUserContext {
	var p = new(DropUserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dropUser

	return p
}

func (s *DropUserContext) GetParser() antlr.Parser { return s.parser }

func (s *DropUserContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *DropUserContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *DropUserContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *DropUserContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *DropUserContext) IfExists() IIfExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExistsContext)
}

func (s *DropUserContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *DropUserContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *DropUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DropUserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DropUserContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDropUser(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DropUser() (localctx IDropUserContext) {
	localctx = NewDropUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, MySqlParserRULE_dropUser)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4510)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(4511)
		p.Match(MySqlParserUSER)
	}
	p.SetState(4513)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(4512)
			p.IfExists()
		}

	}
	{
		p.SetState(4515)
		p.UserName()
	}
	p.SetState(4520)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4516)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4517)
			p.UserName()
		}

		p.SetState(4522)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IGrantStatementContext is an interface to support dynamic dispatch.
type IGrantStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPrivilegeObject returns the privilegeObject token.
	GetPrivilegeObject() antlr.Token

	// GetTlsNone returns the tlsNone token.
	GetTlsNone() antlr.Token

	// SetPrivilegeObject sets the privilegeObject token.
	SetPrivilegeObject(antlr.Token)

	// SetTlsNone sets the tlsNone token.
	SetTlsNone(antlr.Token)

	// IsGrantStatementContext differentiates from other interfaces.
	IsGrantStatementContext()
}

type GrantStatementContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	privilegeObject antlr.Token
	tlsNone         antlr.Token
}

func NewEmptyGrantStatementContext() *GrantStatementContext {
	var p = new(GrantStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_grantStatement
	return p
}

func (*GrantStatementContext) IsGrantStatementContext() {}

func NewGrantStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GrantStatementContext {
	var p = new(GrantStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_grantStatement

	return p
}

func (s *GrantStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *GrantStatementContext) GetPrivilegeObject() antlr.Token { return s.privilegeObject }

func (s *GrantStatementContext) GetTlsNone() antlr.Token { return s.tlsNone }

func (s *GrantStatementContext) SetPrivilegeObject(v antlr.Token) { s.privilegeObject = v }

func (s *GrantStatementContext) SetTlsNone(v antlr.Token) { s.tlsNone = v }

func (s *GrantStatementContext) AllGRANT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserGRANT)
}

func (s *GrantStatementContext) GRANT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANT, i)
}

func (s *GrantStatementContext) AllPrivelegeClause() []IPrivelegeClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPrivelegeClauseContext)(nil)).Elem())
	var tst = make([]IPrivelegeClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPrivelegeClauseContext)
		}
	}

	return tst
}

func (s *GrantStatementContext) PrivelegeClause(i int) IPrivelegeClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivelegeClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPrivelegeClauseContext)
}

func (s *GrantStatementContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *GrantStatementContext) PrivilegeLevel() IPrivilegeLevelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeLevelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeLevelContext)
}

func (s *GrantStatementContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *GrantStatementContext) AllUserAuthOption() []IUserAuthOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem())
	var tst = make([]IUserAuthOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserAuthOptionContext)
		}
	}

	return tst
}

func (s *GrantStatementContext) UserAuthOption(i int) IUserAuthOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserAuthOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserAuthOptionContext)
}

func (s *GrantStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *GrantStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *GrantStatementContext) REQUIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREQUIRE, 0)
}

func (s *GrantStatementContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *GrantStatementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *GrantStatementContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *GrantStatementContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *GrantStatementContext) AllTlsOption() []ITlsOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem())
	var tst = make([]ITlsOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITlsOptionContext)
		}
	}

	return tst
}

func (s *GrantStatementContext) TlsOption(i int) ITlsOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITlsOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITlsOptionContext)
}

func (s *GrantStatementContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *GrantStatementContext) AllOPTION() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserOPTION)
}

func (s *GrantStatementContext) OPTION(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, i)
}

func (s *GrantStatementContext) AllUserResourceOption() []IUserResourceOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserResourceOptionContext)(nil)).Elem())
	var tst = make([]IUserResourceOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserResourceOptionContext)
		}
	}

	return tst
}

func (s *GrantStatementContext) UserResourceOption(i int) IUserResourceOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserResourceOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserResourceOptionContext)
}

func (s *GrantStatementContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserAND)
}

func (s *GrantStatementContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, i)
}

func (s *GrantStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GrantStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGrantStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) GrantStatement() (localctx IGrantStatementContext) {
	localctx = NewGrantStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, MySqlParserRULE_grantStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4523)
		p.Match(MySqlParserGRANT)
	}
	{
		p.SetState(4524)
		p.PrivelegeClause()
	}
	p.SetState(4529)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4525)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4526)
			p.PrivelegeClause()
		}

		p.SetState(4531)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4532)
		p.Match(MySqlParserON)
	}
	p.SetState(4534)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 659, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4533)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*GrantStatementContext).privilegeObject = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserPROCEDURE || _la == MySqlParserTABLE || _la == MySqlParserFUNCTION) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*GrantStatementContext).privilegeObject = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(4536)
		p.PrivilegeLevel()
	}
	{
		p.SetState(4537)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(4538)
		p.UserAuthOption()
	}
	p.SetState(4543)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4539)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4540)
			p.UserAuthOption()
		}

		p.SetState(4545)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4560)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserREQUIRE {
		{
			p.SetState(4546)
			p.Match(MySqlParserREQUIRE)
		}
		p.SetState(4558)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserNONE:
			{
				p.SetState(4547)

				var _m = p.Match(MySqlParserNONE)

				localctx.(*GrantStatementContext).tlsNone = _m
			}

		case MySqlParserSSL, MySqlParserCIPHER, MySqlParserISSUER, MySqlParserSUBJECT, MySqlParserX509:
			{
				p.SetState(4548)
				p.TlsOption()
			}
			p.SetState(4555)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserAND || _la == MySqlParserSSL || _la == MySqlParserCIPHER || _la == MySqlParserISSUER || _la == MySqlParserSUBJECT || _la == MySqlParserX509 {
				p.SetState(4550)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserAND {
					{
						p.SetState(4549)
						p.Match(MySqlParserAND)
					}

				}
				{
					p.SetState(4552)
					p.TlsOption()
				}

				p.SetState(4557)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(4571)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWITH {
		{
			p.SetState(4562)
			p.Match(MySqlParserWITH)
		}
		p.SetState(4568)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 666, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(4566)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case MySqlParserGRANT:
					{
						p.SetState(4563)
						p.Match(MySqlParserGRANT)
					}
					{
						p.SetState(4564)
						p.Match(MySqlParserOPTION)
					}

				case MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS:
					{
						p.SetState(4565)
						p.UserResourceOption()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			p.SetState(4570)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 666, p.GetParserRuleContext())
		}

	}

	return localctx
}

// IGrantProxyContext is an interface to support dynamic dispatch.
type IGrantProxyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFromFirst returns the fromFirst rule contexts.
	GetFromFirst() IUserNameContext

	// GetToFirst returns the toFirst rule contexts.
	GetToFirst() IUserNameContext

	// Get_userName returns the _userName rule contexts.
	Get_userName() IUserNameContext

	// SetFromFirst sets the fromFirst rule contexts.
	SetFromFirst(IUserNameContext)

	// SetToFirst sets the toFirst rule contexts.
	SetToFirst(IUserNameContext)

	// Set_userName sets the _userName rule contexts.
	Set_userName(IUserNameContext)

	// GetToOther returns the toOther rule context list.
	GetToOther() []IUserNameContext

	// SetToOther sets the toOther rule context list.
	SetToOther([]IUserNameContext)

	// IsGrantProxyContext differentiates from other interfaces.
	IsGrantProxyContext()
}

type GrantProxyContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	fromFirst IUserNameContext
	toFirst   IUserNameContext
	_userName IUserNameContext
	toOther   []IUserNameContext
}

func NewEmptyGrantProxyContext() *GrantProxyContext {
	var p = new(GrantProxyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_grantProxy
	return p
}

func (*GrantProxyContext) IsGrantProxyContext() {}

func NewGrantProxyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GrantProxyContext {
	var p = new(GrantProxyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_grantProxy

	return p
}

func (s *GrantProxyContext) GetParser() antlr.Parser { return s.parser }

func (s *GrantProxyContext) GetFromFirst() IUserNameContext { return s.fromFirst }

func (s *GrantProxyContext) GetToFirst() IUserNameContext { return s.toFirst }

func (s *GrantProxyContext) Get_userName() IUserNameContext { return s._userName }

func (s *GrantProxyContext) SetFromFirst(v IUserNameContext) { s.fromFirst = v }

func (s *GrantProxyContext) SetToFirst(v IUserNameContext) { s.toFirst = v }

func (s *GrantProxyContext) Set_userName(v IUserNameContext) { s._userName = v }

func (s *GrantProxyContext) GetToOther() []IUserNameContext { return s.toOther }

func (s *GrantProxyContext) SetToOther(v []IUserNameContext) { s.toOther = v }

func (s *GrantProxyContext) AllGRANT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserGRANT)
}

func (s *GrantProxyContext) GRANT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANT, i)
}

func (s *GrantProxyContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROXY, 0)
}

func (s *GrantProxyContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *GrantProxyContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *GrantProxyContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *GrantProxyContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *GrantProxyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *GrantProxyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *GrantProxyContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *GrantProxyContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *GrantProxyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GrantProxyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GrantProxyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGrantProxy(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) GrantProxy() (localctx IGrantProxyContext) {
	localctx = NewGrantProxyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, MySqlParserRULE_grantProxy)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4573)
		p.Match(MySqlParserGRANT)
	}
	{
		p.SetState(4574)
		p.Match(MySqlParserPROXY)
	}
	{
		p.SetState(4575)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(4576)

		var _x = p.UserName()

		localctx.(*GrantProxyContext).fromFirst = _x
	}
	{
		p.SetState(4577)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(4578)

		var _x = p.UserName()

		localctx.(*GrantProxyContext).toFirst = _x
	}
	p.SetState(4583)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4579)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4580)

			var _x = p.UserName()

			localctx.(*GrantProxyContext)._userName = _x
		}
		localctx.(*GrantProxyContext).toOther = append(localctx.(*GrantProxyContext).toOther, localctx.(*GrantProxyContext)._userName)

		p.SetState(4585)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4589)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWITH {
		{
			p.SetState(4586)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(4587)
			p.Match(MySqlParserGRANT)
		}
		{
			p.SetState(4588)
			p.Match(MySqlParserOPTION)
		}

	}

	return localctx
}

// IRenameUserContext is an interface to support dynamic dispatch.
type IRenameUserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRenameUserContext differentiates from other interfaces.
	IsRenameUserContext()
}

type RenameUserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRenameUserContext() *RenameUserContext {
	var p = new(RenameUserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_renameUser
	return p
}

func (*RenameUserContext) IsRenameUserContext() {}

func NewRenameUserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RenameUserContext {
	var p = new(RenameUserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_renameUser

	return p
}

func (s *RenameUserContext) GetParser() antlr.Parser { return s.parser }

func (s *RenameUserContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *RenameUserContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *RenameUserContext) AllRenameUserClause() []IRenameUserClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRenameUserClauseContext)(nil)).Elem())
	var tst = make([]IRenameUserClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRenameUserClauseContext)
		}
	}

	return tst
}

func (s *RenameUserContext) RenameUserClause(i int) IRenameUserClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRenameUserClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRenameUserClauseContext)
}

func (s *RenameUserContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *RenameUserContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *RenameUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameUserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RenameUserContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRenameUser(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) RenameUser() (localctx IRenameUserContext) {
	localctx = NewRenameUserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, MySqlParserRULE_renameUser)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4591)
		p.Match(MySqlParserRENAME)
	}
	{
		p.SetState(4592)
		p.Match(MySqlParserUSER)
	}
	{
		p.SetState(4593)
		p.RenameUserClause()
	}
	p.SetState(4598)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4594)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4595)
			p.RenameUserClause()
		}

		p.SetState(4600)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRevokeStatementContext is an interface to support dynamic dispatch.
type IRevokeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevokeStatementContext differentiates from other interfaces.
	IsRevokeStatementContext()
}

type RevokeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevokeStatementContext() *RevokeStatementContext {
	var p = new(RevokeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_revokeStatement
	return p
}

func (*RevokeStatementContext) IsRevokeStatementContext() {}

func NewRevokeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RevokeStatementContext {
	var p = new(RevokeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_revokeStatement

	return p
}

func (s *RevokeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *RevokeStatementContext) CopyFrom(ctx *RevokeStatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *RevokeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RevokeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DetailRevokeContext struct {
	*RevokeStatementContext
	privilegeObject antlr.Token
}

func NewDetailRevokeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DetailRevokeContext {
	var p = new(DetailRevokeContext)

	p.RevokeStatementContext = NewEmptyRevokeStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RevokeStatementContext))

	return p
}

func (s *DetailRevokeContext) GetPrivilegeObject() antlr.Token { return s.privilegeObject }

func (s *DetailRevokeContext) SetPrivilegeObject(v antlr.Token) { s.privilegeObject = v }

func (s *DetailRevokeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DetailRevokeContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVOKE, 0)
}

func (s *DetailRevokeContext) AllPrivelegeClause() []IPrivelegeClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPrivelegeClauseContext)(nil)).Elem())
	var tst = make([]IPrivelegeClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPrivelegeClauseContext)
		}
	}

	return tst
}

func (s *DetailRevokeContext) PrivelegeClause(i int) IPrivelegeClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivelegeClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPrivelegeClauseContext)
}

func (s *DetailRevokeContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *DetailRevokeContext) PrivilegeLevel() IPrivilegeLevelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeLevelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeLevelContext)
}

func (s *DetailRevokeContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *DetailRevokeContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *DetailRevokeContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *DetailRevokeContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *DetailRevokeContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *DetailRevokeContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *DetailRevokeContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *DetailRevokeContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *DetailRevokeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDetailRevoke(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShortRevokeContext struct {
	*RevokeStatementContext
}

func NewShortRevokeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShortRevokeContext {
	var p = new(ShortRevokeContext)

	p.RevokeStatementContext = NewEmptyRevokeStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RevokeStatementContext))

	return p
}

func (s *ShortRevokeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShortRevokeContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVOKE, 0)
}

func (s *ShortRevokeContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *ShortRevokeContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ShortRevokeContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ShortRevokeContext) GRANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANT, 0)
}

func (s *ShortRevokeContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *ShortRevokeContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ShortRevokeContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *ShortRevokeContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *ShortRevokeContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *ShortRevokeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShortRevoke(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) RevokeStatement() (localctx IRevokeStatementContext) {
	localctx = NewRevokeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, MySqlParserRULE_revokeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4641)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 676, p.GetParserRuleContext()) {
	case 1:
		localctx = NewDetailRevokeContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4601)
			p.Match(MySqlParserREVOKE)
		}
		{
			p.SetState(4602)
			p.PrivelegeClause()
		}
		p.SetState(4607)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4603)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4604)
				p.PrivelegeClause()
			}

			p.SetState(4609)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4610)
			p.Match(MySqlParserON)
		}
		p.SetState(4612)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 672, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4611)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*DetailRevokeContext).privilegeObject = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserPROCEDURE || _la == MySqlParserTABLE || _la == MySqlParserFUNCTION) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*DetailRevokeContext).privilegeObject = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(4614)
			p.PrivilegeLevel()
		}
		{
			p.SetState(4615)
			p.Match(MySqlParserFROM)
		}
		{
			p.SetState(4616)
			p.UserName()
		}
		p.SetState(4621)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4617)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4618)
				p.UserName()
			}

			p.SetState(4623)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewShortRevokeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4624)
			p.Match(MySqlParserREVOKE)
		}
		{
			p.SetState(4625)
			p.Match(MySqlParserALL)
		}
		p.SetState(4627)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPRIVILEGES {
			{
				p.SetState(4626)
				p.Match(MySqlParserPRIVILEGES)
			}

		}
		{
			p.SetState(4629)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4630)
			p.Match(MySqlParserGRANT)
		}
		{
			p.SetState(4631)
			p.Match(MySqlParserOPTION)
		}
		{
			p.SetState(4632)
			p.Match(MySqlParserFROM)
		}
		{
			p.SetState(4633)
			p.UserName()
		}
		p.SetState(4638)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4634)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4635)
				p.UserName()
			}

			p.SetState(4640)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IRevokeProxyContext is an interface to support dynamic dispatch.
type IRevokeProxyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOnUser returns the onUser rule contexts.
	GetOnUser() IUserNameContext

	// GetFromFirst returns the fromFirst rule contexts.
	GetFromFirst() IUserNameContext

	// Get_userName returns the _userName rule contexts.
	Get_userName() IUserNameContext

	// SetOnUser sets the onUser rule contexts.
	SetOnUser(IUserNameContext)

	// SetFromFirst sets the fromFirst rule contexts.
	SetFromFirst(IUserNameContext)

	// Set_userName sets the _userName rule contexts.
	Set_userName(IUserNameContext)

	// GetFromOther returns the fromOther rule context list.
	GetFromOther() []IUserNameContext

	// SetFromOther sets the fromOther rule context list.
	SetFromOther([]IUserNameContext)

	// IsRevokeProxyContext differentiates from other interfaces.
	IsRevokeProxyContext()
}

type RevokeProxyContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	onUser    IUserNameContext
	fromFirst IUserNameContext
	_userName IUserNameContext
	fromOther []IUserNameContext
}

func NewEmptyRevokeProxyContext() *RevokeProxyContext {
	var p = new(RevokeProxyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_revokeProxy
	return p
}

func (*RevokeProxyContext) IsRevokeProxyContext() {}

func NewRevokeProxyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RevokeProxyContext {
	var p = new(RevokeProxyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_revokeProxy

	return p
}

func (s *RevokeProxyContext) GetParser() antlr.Parser { return s.parser }

func (s *RevokeProxyContext) GetOnUser() IUserNameContext { return s.onUser }

func (s *RevokeProxyContext) GetFromFirst() IUserNameContext { return s.fromFirst }

func (s *RevokeProxyContext) Get_userName() IUserNameContext { return s._userName }

func (s *RevokeProxyContext) SetOnUser(v IUserNameContext) { s.onUser = v }

func (s *RevokeProxyContext) SetFromFirst(v IUserNameContext) { s.fromFirst = v }

func (s *RevokeProxyContext) Set_userName(v IUserNameContext) { s._userName = v }

func (s *RevokeProxyContext) GetFromOther() []IUserNameContext { return s.fromOther }

func (s *RevokeProxyContext) SetFromOther(v []IUserNameContext) { s.fromOther = v }

func (s *RevokeProxyContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVOKE, 0)
}

func (s *RevokeProxyContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROXY, 0)
}

func (s *RevokeProxyContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *RevokeProxyContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *RevokeProxyContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *RevokeProxyContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *RevokeProxyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *RevokeProxyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *RevokeProxyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RevokeProxyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RevokeProxyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRevokeProxy(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) RevokeProxy() (localctx IRevokeProxyContext) {
	localctx = NewRevokeProxyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 400, MySqlParserRULE_revokeProxy)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4643)
		p.Match(MySqlParserREVOKE)
	}
	{
		p.SetState(4644)
		p.Match(MySqlParserPROXY)
	}
	{
		p.SetState(4645)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(4646)

		var _x = p.UserName()

		localctx.(*RevokeProxyContext).onUser = _x
	}
	{
		p.SetState(4647)
		p.Match(MySqlParserFROM)
	}
	{
		p.SetState(4648)

		var _x = p.UserName()

		localctx.(*RevokeProxyContext).fromFirst = _x
	}
	p.SetState(4653)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4649)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4650)

			var _x = p.UserName()

			localctx.(*RevokeProxyContext)._userName = _x
		}
		localctx.(*RevokeProxyContext).fromOther = append(localctx.(*RevokeProxyContext).fromOther, localctx.(*RevokeProxyContext)._userName)

		p.SetState(4655)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISetPasswordStatementContext is an interface to support dynamic dispatch.
type ISetPasswordStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetPasswordStatementContext differentiates from other interfaces.
	IsSetPasswordStatementContext()
}

type SetPasswordStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetPasswordStatementContext() *SetPasswordStatementContext {
	var p = new(SetPasswordStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_setPasswordStatement
	return p
}

func (*SetPasswordStatementContext) IsSetPasswordStatementContext() {}

func NewSetPasswordStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetPasswordStatementContext {
	var p = new(SetPasswordStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_setPasswordStatement

	return p
}

func (s *SetPasswordStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SetPasswordStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetPasswordStatementContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *SetPasswordStatementContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *SetPasswordStatementContext) PasswordFunctionClause() IPasswordFunctionClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPasswordFunctionClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPasswordFunctionClauseContext)
}

func (s *SetPasswordStatementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *SetPasswordStatementContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *SetPasswordStatementContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *SetPasswordStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetPasswordStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetPasswordStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetPasswordStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SetPasswordStatement() (localctx ISetPasswordStatementContext) {
	localctx = NewSetPasswordStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 402, MySqlParserRULE_setPasswordStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4656)
		p.Match(MySqlParserSET)
	}
	{
		p.SetState(4657)
		p.Match(MySqlParserPASSWORD)
	}
	p.SetState(4660)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(4658)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(4659)
			p.UserName()
		}

	}
	{
		p.SetState(4662)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	p.SetState(4665)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserOLD_PASSWORD, MySqlParserPASSWORD:
		{
			p.SetState(4663)
			p.PasswordFunctionClause()
		}

	case MySqlParserSTRING_LITERAL:
		{
			p.SetState(4664)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUserSpecificationContext is an interface to support dynamic dispatch.
type IUserSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserSpecificationContext differentiates from other interfaces.
	IsUserSpecificationContext()
}

type UserSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserSpecificationContext() *UserSpecificationContext {
	var p = new(UserSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userSpecification
	return p
}

func (*UserSpecificationContext) IsUserSpecificationContext() {}

func NewUserSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserSpecificationContext {
	var p = new(UserSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userSpecification

	return p
}

func (s *UserSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *UserSpecificationContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *UserSpecificationContext) UserPasswordOption() IUserPasswordOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserPasswordOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserPasswordOptionContext)
}

func (s *UserSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUserSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UserSpecification() (localctx IUserSpecificationContext) {
	localctx = NewUserSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, MySqlParserRULE_userSpecification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4667)
		p.UserName()
	}
	{
		p.SetState(4668)
		p.UserPasswordOption()
	}

	return localctx
}

// IUserAuthOptionContext is an interface to support dynamic dispatch.
type IUserAuthOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserAuthOptionContext differentiates from other interfaces.
	IsUserAuthOptionContext()
}

type UserAuthOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserAuthOptionContext() *UserAuthOptionContext {
	var p = new(UserAuthOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userAuthOption
	return p
}

func (*UserAuthOptionContext) IsUserAuthOptionContext() {}

func NewUserAuthOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserAuthOptionContext {
	var p = new(UserAuthOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userAuthOption

	return p
}

func (s *UserAuthOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UserAuthOptionContext) CopyFrom(ctx *UserAuthOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *UserAuthOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserAuthOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SimpleAuthOptionContext struct {
	*UserAuthOptionContext
}

func NewSimpleAuthOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleAuthOptionContext {
	var p = new(SimpleAuthOptionContext)

	p.UserAuthOptionContext = NewEmptyUserAuthOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UserAuthOptionContext))

	return p
}

func (s *SimpleAuthOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleAuthOptionContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *SimpleAuthOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimpleAuthOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type PasswordAuthOptionContext struct {
	*UserAuthOptionContext
	hashed antlr.Token
}

func NewPasswordAuthOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PasswordAuthOptionContext {
	var p = new(PasswordAuthOptionContext)

	p.UserAuthOptionContext = NewEmptyUserAuthOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UserAuthOptionContext))

	return p
}

func (s *PasswordAuthOptionContext) GetHashed() antlr.Token { return s.hashed }

func (s *PasswordAuthOptionContext) SetHashed(v antlr.Token) { s.hashed = v }

func (s *PasswordAuthOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PasswordAuthOptionContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *PasswordAuthOptionContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *PasswordAuthOptionContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *PasswordAuthOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *PasswordAuthOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *PasswordAuthOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPasswordAuthOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type StringAuthOptionContext struct {
	*UserAuthOptionContext
}

func NewStringAuthOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StringAuthOptionContext {
	var p = new(StringAuthOptionContext)

	p.UserAuthOptionContext = NewEmptyUserAuthOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UserAuthOptionContext))

	return p
}

func (s *StringAuthOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringAuthOptionContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *StringAuthOptionContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *StringAuthOptionContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *StringAuthOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *StringAuthOptionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *StringAuthOptionContext) AuthPlugin() IAuthPluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuthPluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuthPluginContext)
}

func (s *StringAuthOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStringAuthOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type HashAuthOptionContext struct {
	*UserAuthOptionContext
}

func NewHashAuthOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HashAuthOptionContext {
	var p = new(HashAuthOptionContext)

	p.UserAuthOptionContext = NewEmptyUserAuthOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*UserAuthOptionContext))

	return p
}

func (s *HashAuthOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HashAuthOptionContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *HashAuthOptionContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *HashAuthOptionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *HashAuthOptionContext) AuthPlugin() IAuthPluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuthPluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuthPluginContext)
}

func (s *HashAuthOptionContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *HashAuthOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *HashAuthOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHashAuthOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UserAuthOption() (localctx IUserAuthOptionContext) {
	localctx = NewUserAuthOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, MySqlParserRULE_userAuthOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4694)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 682, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPasswordAuthOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4670)
			p.UserName()
		}
		{
			p.SetState(4671)
			p.Match(MySqlParserIDENTIFIED)
		}
		{
			p.SetState(4672)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(4673)
			p.Match(MySqlParserPASSWORD)
		}
		{
			p.SetState(4674)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*PasswordAuthOptionContext).hashed = _m
		}

	case 2:
		localctx = NewStringAuthOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4676)
			p.UserName()
		}
		{
			p.SetState(4677)
			p.Match(MySqlParserIDENTIFIED)
		}
		p.SetState(4680)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH {
			{
				p.SetState(4678)
				p.Match(MySqlParserWITH)
			}
			{
				p.SetState(4679)
				p.AuthPlugin()
			}

		}
		{
			p.SetState(4682)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(4683)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 3:
		localctx = NewHashAuthOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4685)
			p.UserName()
		}
		{
			p.SetState(4686)
			p.Match(MySqlParserIDENTIFIED)
		}
		{
			p.SetState(4687)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(4688)
			p.AuthPlugin()
		}
		p.SetState(4691)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(4689)
				p.Match(MySqlParserAS)
			}
			{
				p.SetState(4690)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		}

	case 4:
		localctx = NewSimpleAuthOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4693)
			p.UserName()
		}

	}

	return localctx
}

// ITlsOptionContext is an interface to support dynamic dispatch.
type ITlsOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTlsOptionContext differentiates from other interfaces.
	IsTlsOptionContext()
}

type TlsOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTlsOptionContext() *TlsOptionContext {
	var p = new(TlsOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tlsOption
	return p
}

func (*TlsOptionContext) IsTlsOptionContext() {}

func NewTlsOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TlsOptionContext {
	var p = new(TlsOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tlsOption

	return p
}

func (s *TlsOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *TlsOptionContext) SSL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSSL, 0)
}

func (s *TlsOptionContext) X509() antlr.TerminalNode {
	return s.GetToken(MySqlParserX509, 0)
}

func (s *TlsOptionContext) CIPHER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCIPHER, 0)
}

func (s *TlsOptionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TlsOptionContext) ISSUER() antlr.TerminalNode {
	return s.GetToken(MySqlParserISSUER, 0)
}

func (s *TlsOptionContext) SUBJECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBJECT, 0)
}

func (s *TlsOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TlsOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TlsOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTlsOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TlsOption() (localctx ITlsOptionContext) {
	localctx = NewTlsOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, MySqlParserRULE_tlsOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4704)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSSL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4696)
			p.Match(MySqlParserSSL)
		}

	case MySqlParserX509:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4697)
			p.Match(MySqlParserX509)
		}

	case MySqlParserCIPHER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4698)
			p.Match(MySqlParserCIPHER)
		}
		{
			p.SetState(4699)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserISSUER:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4700)
			p.Match(MySqlParserISSUER)
		}
		{
			p.SetState(4701)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserSUBJECT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4702)
			p.Match(MySqlParserSUBJECT)
		}
		{
			p.SetState(4703)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUserResourceOptionContext is an interface to support dynamic dispatch.
type IUserResourceOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserResourceOptionContext differentiates from other interfaces.
	IsUserResourceOptionContext()
}

type UserResourceOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserResourceOptionContext() *UserResourceOptionContext {
	var p = new(UserResourceOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userResourceOption
	return p
}

func (*UserResourceOptionContext) IsUserResourceOptionContext() {}

func NewUserResourceOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserResourceOptionContext {
	var p = new(UserResourceOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userResourceOption

	return p
}

func (s *UserResourceOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UserResourceOptionContext) MAX_QUERIES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_QUERIES_PER_HOUR, 0)
}

func (s *UserResourceOptionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *UserResourceOptionContext) MAX_UPDATES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_UPDATES_PER_HOUR, 0)
}

func (s *UserResourceOptionContext) MAX_CONNECTIONS_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_CONNECTIONS_PER_HOUR, 0)
}

func (s *UserResourceOptionContext) MAX_USER_CONNECTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_USER_CONNECTIONS, 0)
}

func (s *UserResourceOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserResourceOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserResourceOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUserResourceOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UserResourceOption() (localctx IUserResourceOptionContext) {
	localctx = NewUserResourceOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, MySqlParserRULE_userResourceOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4714)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserMAX_QUERIES_PER_HOUR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4706)
			p.Match(MySqlParserMAX_QUERIES_PER_HOUR)
		}
		{
			p.SetState(4707)
			p.DecimalLiteral()
		}

	case MySqlParserMAX_UPDATES_PER_HOUR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4708)
			p.Match(MySqlParserMAX_UPDATES_PER_HOUR)
		}
		{
			p.SetState(4709)
			p.DecimalLiteral()
		}

	case MySqlParserMAX_CONNECTIONS_PER_HOUR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4710)
			p.Match(MySqlParserMAX_CONNECTIONS_PER_HOUR)
		}
		{
			p.SetState(4711)
			p.DecimalLiteral()
		}

	case MySqlParserMAX_USER_CONNECTIONS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4712)
			p.Match(MySqlParserMAX_USER_CONNECTIONS)
		}
		{
			p.SetState(4713)
			p.DecimalLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUserPasswordOptionContext is an interface to support dynamic dispatch.
type IUserPasswordOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetExpireType returns the expireType token.
	GetExpireType() antlr.Token

	// SetExpireType sets the expireType token.
	SetExpireType(antlr.Token)

	// IsUserPasswordOptionContext differentiates from other interfaces.
	IsUserPasswordOptionContext()
}

type UserPasswordOptionContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	expireType antlr.Token
}

func NewEmptyUserPasswordOptionContext() *UserPasswordOptionContext {
	var p = new(UserPasswordOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userPasswordOption
	return p
}

func (*UserPasswordOptionContext) IsUserPasswordOptionContext() {}

func NewUserPasswordOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserPasswordOptionContext {
	var p = new(UserPasswordOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userPasswordOption

	return p
}

func (s *UserPasswordOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UserPasswordOptionContext) GetExpireType() antlr.Token { return s.expireType }

func (s *UserPasswordOptionContext) SetExpireType(v antlr.Token) { s.expireType = v }

func (s *UserPasswordOptionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *UserPasswordOptionContext) EXPIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPIRE, 0)
}

func (s *UserPasswordOptionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *UserPasswordOptionContext) DAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY, 0)
}

func (s *UserPasswordOptionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *UserPasswordOptionContext) NEVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEVER, 0)
}

func (s *UserPasswordOptionContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERVAL, 0)
}

func (s *UserPasswordOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserPasswordOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserPasswordOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUserPasswordOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UserPasswordOption() (localctx IUserPasswordOptionContext) {
	localctx = NewUserPasswordOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, MySqlParserRULE_userPasswordOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4716)
		p.Match(MySqlParserPASSWORD)
	}
	{
		p.SetState(4717)
		p.Match(MySqlParserEXPIRE)
	}
	p.SetState(4724)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserDEFAULT:
		{
			p.SetState(4718)

			var _m = p.Match(MySqlParserDEFAULT)

			localctx.(*UserPasswordOptionContext).expireType = _m
		}

	case MySqlParserNEVER:
		{
			p.SetState(4719)

			var _m = p.Match(MySqlParserNEVER)

			localctx.(*UserPasswordOptionContext).expireType = _m
		}

	case MySqlParserINTERVAL:
		{
			p.SetState(4720)

			var _m = p.Match(MySqlParserINTERVAL)

			localctx.(*UserPasswordOptionContext).expireType = _m
		}
		{
			p.SetState(4721)
			p.DecimalLiteral()
		}
		{
			p.SetState(4722)
			p.Match(MySqlParserDAY)
		}

	case MySqlParserEOF, MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserACCOUNT, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPASSWORD, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserMINUSMINUS, MySqlParserLR_BRACKET, MySqlParserCOMMA, MySqlParserSEMI:

	default:
	}

	return localctx
}

// IUserLockOptionContext is an interface to support dynamic dispatch.
type IUserLockOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLockType returns the lockType token.
	GetLockType() antlr.Token

	// SetLockType sets the lockType token.
	SetLockType(antlr.Token)

	// IsUserLockOptionContext differentiates from other interfaces.
	IsUserLockOptionContext()
}

type UserLockOptionContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	lockType antlr.Token
}

func NewEmptyUserLockOptionContext() *UserLockOptionContext {
	var p = new(UserLockOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userLockOption
	return p
}

func (*UserLockOptionContext) IsUserLockOptionContext() {}

func NewUserLockOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserLockOptionContext {
	var p = new(UserLockOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userLockOption

	return p
}

func (s *UserLockOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *UserLockOptionContext) GetLockType() antlr.Token { return s.lockType }

func (s *UserLockOptionContext) SetLockType(v antlr.Token) { s.lockType = v }

func (s *UserLockOptionContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserACCOUNT, 0)
}

func (s *UserLockOptionContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *UserLockOptionContext) UNLOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNLOCK, 0)
}

func (s *UserLockOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserLockOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserLockOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUserLockOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UserLockOption() (localctx IUserLockOptionContext) {
	localctx = NewUserLockOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, MySqlParserRULE_userLockOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4726)
		p.Match(MySqlParserACCOUNT)
	}
	{
		p.SetState(4727)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*UserLockOptionContext).lockType = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserLOCK || _la == MySqlParserUNLOCK) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*UserLockOptionContext).lockType = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPrivelegeClauseContext is an interface to support dynamic dispatch.
type IPrivelegeClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivelegeClauseContext differentiates from other interfaces.
	IsPrivelegeClauseContext()
}

type PrivelegeClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivelegeClauseContext() *PrivelegeClauseContext {
	var p = new(PrivelegeClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_privelegeClause
	return p
}

func (*PrivelegeClauseContext) IsPrivelegeClauseContext() {}

func NewPrivelegeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivelegeClauseContext {
	var p = new(PrivelegeClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_privelegeClause

	return p
}

func (s *PrivelegeClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivelegeClauseContext) Privilege() IPrivilegeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeContext)
}

func (s *PrivelegeClauseContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PrivelegeClauseContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *PrivelegeClauseContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PrivelegeClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivelegeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivelegeClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPrivelegeClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) PrivelegeClause() (localctx IPrivelegeClauseContext) {
	localctx = NewPrivelegeClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, MySqlParserRULE_privelegeClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4729)
		p.Privilege()
	}
	p.SetState(4734)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(4730)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4731)
			p.UidList()
		}
		{
			p.SetState(4732)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IPrivilegeContext is an interface to support dynamic dispatch.
type IPrivilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivilegeContext differentiates from other interfaces.
	IsPrivilegeContext()
}

type PrivilegeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegeContext() *PrivilegeContext {
	var p = new(PrivilegeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_privilege
	return p
}

func (*PrivilegeContext) IsPrivilegeContext() {}

func NewPrivilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegeContext {
	var p = new(PrivilegeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_privilege

	return p
}

func (s *PrivilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegeContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *PrivilegeContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *PrivilegeContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *PrivilegeContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROUTINE, 0)
}

func (s *PrivilegeContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *PrivilegeContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *PrivilegeContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *PrivilegeContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *PrivilegeContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *PrivilegeContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *PrivilegeContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLE, 0)
}

func (s *PrivilegeContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *PrivilegeContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *PrivilegeContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *PrivilegeContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXECUTE, 0)
}

func (s *PrivilegeContext) FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILE, 0)
}

func (s *PrivilegeContext) GRANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANT, 0)
}

func (s *PrivilegeContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *PrivilegeContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *PrivilegeContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT, 0)
}

func (s *PrivilegeContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *PrivilegeContext) PROCESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCESS, 0)
}

func (s *PrivilegeContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROXY, 0)
}

func (s *PrivilegeContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(MySqlParserREFERENCES, 0)
}

func (s *PrivilegeContext) RELOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELOAD, 0)
}

func (s *PrivilegeContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION, 0)
}

func (s *PrivilegeContext) CLIENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLIENT, 0)
}

func (s *PrivilegeContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *PrivilegeContext) SELECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSELECT, 0)
}

func (s *PrivilegeContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *PrivilegeContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASES, 0)
}

func (s *PrivilegeContext) SHUTDOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHUTDOWN, 0)
}

func (s *PrivilegeContext) SUPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUPER, 0)
}

func (s *PrivilegeContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGER, 0)
}

func (s *PrivilegeContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *PrivilegeContext) USAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSAGE, 0)
}

func (s *PrivilegeContext) APPLICATION_PASSWORD_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserAPPLICATION_PASSWORD_ADMIN, 0)
}

func (s *PrivilegeContext) AUDIT_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUDIT_ADMIN, 0)
}

func (s *PrivilegeContext) BACKUP_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBACKUP_ADMIN, 0)
}

func (s *PrivilegeContext) BINLOG_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG_ADMIN, 0)
}

func (s *PrivilegeContext) BINLOG_ENCRYPTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG_ENCRYPTION_ADMIN, 0)
}

func (s *PrivilegeContext) CLONE_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLONE_ADMIN, 0)
}

func (s *PrivilegeContext) CONNECTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION_ADMIN, 0)
}

func (s *PrivilegeContext) ENCRYPTION_KEY_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCRYPTION_KEY_ADMIN, 0)
}

func (s *PrivilegeContext) FIREWALL_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIREWALL_ADMIN, 0)
}

func (s *PrivilegeContext) FIREWALL_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIREWALL_USER, 0)
}

func (s *PrivilegeContext) FLUSH_OPTIMIZER_COSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLUSH_OPTIMIZER_COSTS, 0)
}

func (s *PrivilegeContext) FLUSH_STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLUSH_STATUS, 0)
}

func (s *PrivilegeContext) FLUSH_TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLUSH_TABLES, 0)
}

func (s *PrivilegeContext) FLUSH_USER_RESOURCES() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLUSH_USER_RESOURCES, 0)
}

func (s *PrivilegeContext) GROUP_REPLICATION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_REPLICATION_ADMIN, 0)
}

func (s *PrivilegeContext) INNODB_REDO_LOG_ARCHIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNODB_REDO_LOG_ARCHIVE, 0)
}

func (s *PrivilegeContext) INNODB_REDO_LOG_ENABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNODB_REDO_LOG_ENABLE, 0)
}

func (s *PrivilegeContext) NDB_STORED_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNDB_STORED_USER, 0)
}

func (s *PrivilegeContext) PERSIST_RO_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERSIST_RO_VARIABLES_ADMIN, 0)
}

func (s *PrivilegeContext) REPLICATION_APPLIER() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION_APPLIER, 0)
}

func (s *PrivilegeContext) REPLICATION_SLAVE_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION_SLAVE_ADMIN, 0)
}

func (s *PrivilegeContext) RESOURCE_GROUP_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESOURCE_GROUP_ADMIN, 0)
}

func (s *PrivilegeContext) RESOURCE_GROUP_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESOURCE_GROUP_USER, 0)
}

func (s *PrivilegeContext) ROLE_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLE_ADMIN, 0)
}

func (s *PrivilegeContext) SERVICE_CONNECTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVICE_CONNECTION_ADMIN, 0)
}

func (s *PrivilegeContext) SESSION_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION_VARIABLES_ADMIN, 0)
}

func (s *PrivilegeContext) SET_USER_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET_USER_ID, 0)
}

func (s *PrivilegeContext) SHOW_ROUTINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW_ROUTINE, 0)
}

func (s *PrivilegeContext) SYSTEM_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSYSTEM_USER, 0)
}

func (s *PrivilegeContext) SYSTEM_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSYSTEM_VARIABLES_ADMIN, 0)
}

func (s *PrivilegeContext) TABLE_ENCRYPTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE_ENCRYPTION_ADMIN, 0)
}

func (s *PrivilegeContext) VERSION_TOKEN_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserVERSION_TOKEN_ADMIN, 0)
}

func (s *PrivilegeContext) XA_RECOVER_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA_RECOVER_ADMIN, 0)
}

func (s *PrivilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivilegeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPrivilege(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Privilege() (localctx IPrivilegeContext) {
	localctx = NewPrivilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, MySqlParserRULE_privilege)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4815)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4736)
			p.Match(MySqlParserALL)
		}
		p.SetState(4738)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPRIVILEGES {
			{
				p.SetState(4737)
				p.Match(MySqlParserPRIVILEGES)
			}

		}

	case MySqlParserALTER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4740)
			p.Match(MySqlParserALTER)
		}
		p.SetState(4742)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserROUTINE {
			{
				p.SetState(4741)
				p.Match(MySqlParserROUTINE)
			}

		}

	case MySqlParserCREATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4744)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(4752)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserTEMPORARY:
			{
				p.SetState(4745)
				p.Match(MySqlParserTEMPORARY)
			}
			{
				p.SetState(4746)
				p.Match(MySqlParserTABLES)
			}

		case MySqlParserROUTINE:
			{
				p.SetState(4747)
				p.Match(MySqlParserROUTINE)
			}

		case MySqlParserVIEW:
			{
				p.SetState(4748)
				p.Match(MySqlParserVIEW)
			}

		case MySqlParserUSER:
			{
				p.SetState(4749)
				p.Match(MySqlParserUSER)
			}

		case MySqlParserTABLESPACE:
			{
				p.SetState(4750)
				p.Match(MySqlParserTABLESPACE)
			}

		case MySqlParserROLE:
			{
				p.SetState(4751)
				p.Match(MySqlParserROLE)
			}

		case MySqlParserON, MySqlParserLR_BRACKET, MySqlParserCOMMA:

		default:
		}

	case MySqlParserDELETE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4754)
			p.Match(MySqlParserDELETE)
		}

	case MySqlParserDROP:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4755)
			p.Match(MySqlParserDROP)
		}
		p.SetState(4757)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserROLE {
			{
				p.SetState(4756)
				p.Match(MySqlParserROLE)
			}

		}

	case MySqlParserEVENT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4759)
			p.Match(MySqlParserEVENT)
		}

	case MySqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4760)
			p.Match(MySqlParserEXECUTE)
		}

	case MySqlParserFILE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4761)
			p.Match(MySqlParserFILE)
		}

	case MySqlParserGRANT:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4762)
			p.Match(MySqlParserGRANT)
		}
		{
			p.SetState(4763)
			p.Match(MySqlParserOPTION)
		}

	case MySqlParserINDEX:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4764)
			p.Match(MySqlParserINDEX)
		}

	case MySqlParserINSERT:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4765)
			p.Match(MySqlParserINSERT)
		}

	case MySqlParserLOCK:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4766)
			p.Match(MySqlParserLOCK)
		}
		{
			p.SetState(4767)
			p.Match(MySqlParserTABLES)
		}

	case MySqlParserPROCESS:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4768)
			p.Match(MySqlParserPROCESS)
		}

	case MySqlParserPROXY:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(4769)
			p.Match(MySqlParserPROXY)
		}

	case MySqlParserREFERENCES:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(4770)
			p.Match(MySqlParserREFERENCES)
		}

	case MySqlParserRELOAD:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(4771)
			p.Match(MySqlParserRELOAD)
		}

	case MySqlParserREPLICATION:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(4772)
			p.Match(MySqlParserREPLICATION)
		}
		{
			p.SetState(4773)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCLIENT || _la == MySqlParserSLAVE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserSELECT:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(4774)
			p.Match(MySqlParserSELECT)
		}

	case MySqlParserSHOW:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(4775)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(4776)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDATABASES || _la == MySqlParserVIEW) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserSHUTDOWN:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(4777)
			p.Match(MySqlParserSHUTDOWN)
		}

	case MySqlParserSUPER:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(4778)
			p.Match(MySqlParserSUPER)
		}

	case MySqlParserTRIGGER:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(4779)
			p.Match(MySqlParserTRIGGER)
		}

	case MySqlParserUPDATE:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(4780)
			p.Match(MySqlParserUPDATE)
		}

	case MySqlParserUSAGE:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(4781)
			p.Match(MySqlParserUSAGE)
		}

	case MySqlParserAPPLICATION_PASSWORD_ADMIN:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(4782)
			p.Match(MySqlParserAPPLICATION_PASSWORD_ADMIN)
		}

	case MySqlParserAUDIT_ADMIN:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(4783)
			p.Match(MySqlParserAUDIT_ADMIN)
		}

	case MySqlParserBACKUP_ADMIN:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(4784)
			p.Match(MySqlParserBACKUP_ADMIN)
		}

	case MySqlParserBINLOG_ADMIN:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(4785)
			p.Match(MySqlParserBINLOG_ADMIN)
		}

	case MySqlParserBINLOG_ENCRYPTION_ADMIN:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(4786)
			p.Match(MySqlParserBINLOG_ENCRYPTION_ADMIN)
		}

	case MySqlParserCLONE_ADMIN:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(4787)
			p.Match(MySqlParserCLONE_ADMIN)
		}

	case MySqlParserCONNECTION_ADMIN:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(4788)
			p.Match(MySqlParserCONNECTION_ADMIN)
		}

	case MySqlParserENCRYPTION_KEY_ADMIN:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(4789)
			p.Match(MySqlParserENCRYPTION_KEY_ADMIN)
		}

	case MySqlParserFIREWALL_ADMIN:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(4790)
			p.Match(MySqlParserFIREWALL_ADMIN)
		}

	case MySqlParserFIREWALL_USER:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(4791)
			p.Match(MySqlParserFIREWALL_USER)
		}

	case MySqlParserFLUSH_OPTIMIZER_COSTS:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(4792)
			p.Match(MySqlParserFLUSH_OPTIMIZER_COSTS)
		}

	case MySqlParserFLUSH_STATUS:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(4793)
			p.Match(MySqlParserFLUSH_STATUS)
		}

	case MySqlParserFLUSH_TABLES:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(4794)
			p.Match(MySqlParserFLUSH_TABLES)
		}

	case MySqlParserFLUSH_USER_RESOURCES:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(4795)
			p.Match(MySqlParserFLUSH_USER_RESOURCES)
		}

	case MySqlParserGROUP_REPLICATION_ADMIN:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(4796)
			p.Match(MySqlParserGROUP_REPLICATION_ADMIN)
		}

	case MySqlParserINNODB_REDO_LOG_ARCHIVE:
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(4797)
			p.Match(MySqlParserINNODB_REDO_LOG_ARCHIVE)
		}

	case MySqlParserINNODB_REDO_LOG_ENABLE:
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(4798)
			p.Match(MySqlParserINNODB_REDO_LOG_ENABLE)
		}

	case MySqlParserNDB_STORED_USER:
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(4799)
			p.Match(MySqlParserNDB_STORED_USER)
		}

	case MySqlParserPERSIST_RO_VARIABLES_ADMIN:
		p.EnterOuterAlt(localctx, 43)
		{
			p.SetState(4800)
			p.Match(MySqlParserPERSIST_RO_VARIABLES_ADMIN)
		}

	case MySqlParserREPLICATION_APPLIER:
		p.EnterOuterAlt(localctx, 44)
		{
			p.SetState(4801)
			p.Match(MySqlParserREPLICATION_APPLIER)
		}

	case MySqlParserREPLICATION_SLAVE_ADMIN:
		p.EnterOuterAlt(localctx, 45)
		{
			p.SetState(4802)
			p.Match(MySqlParserREPLICATION_SLAVE_ADMIN)
		}

	case MySqlParserRESOURCE_GROUP_ADMIN:
		p.EnterOuterAlt(localctx, 46)
		{
			p.SetState(4803)
			p.Match(MySqlParserRESOURCE_GROUP_ADMIN)
		}

	case MySqlParserRESOURCE_GROUP_USER:
		p.EnterOuterAlt(localctx, 47)
		{
			p.SetState(4804)
			p.Match(MySqlParserRESOURCE_GROUP_USER)
		}

	case MySqlParserROLE_ADMIN:
		p.EnterOuterAlt(localctx, 48)
		{
			p.SetState(4805)
			p.Match(MySqlParserROLE_ADMIN)
		}

	case MySqlParserSERVICE_CONNECTION_ADMIN:
		p.EnterOuterAlt(localctx, 49)
		{
			p.SetState(4806)
			p.Match(MySqlParserSERVICE_CONNECTION_ADMIN)
		}

	case MySqlParserSESSION_VARIABLES_ADMIN:
		p.EnterOuterAlt(localctx, 50)
		{
			p.SetState(4807)
			p.Match(MySqlParserSESSION_VARIABLES_ADMIN)
		}

	case MySqlParserSET_USER_ID:
		p.EnterOuterAlt(localctx, 51)
		{
			p.SetState(4808)
			p.Match(MySqlParserSET_USER_ID)
		}

	case MySqlParserSHOW_ROUTINE:
		p.EnterOuterAlt(localctx, 52)
		{
			p.SetState(4809)
			p.Match(MySqlParserSHOW_ROUTINE)
		}

	case MySqlParserSYSTEM_USER:
		p.EnterOuterAlt(localctx, 53)
		{
			p.SetState(4810)
			p.Match(MySqlParserSYSTEM_USER)
		}

	case MySqlParserSYSTEM_VARIABLES_ADMIN:
		p.EnterOuterAlt(localctx, 54)
		{
			p.SetState(4811)
			p.Match(MySqlParserSYSTEM_VARIABLES_ADMIN)
		}

	case MySqlParserTABLE_ENCRYPTION_ADMIN:
		p.EnterOuterAlt(localctx, 55)
		{
			p.SetState(4812)
			p.Match(MySqlParserTABLE_ENCRYPTION_ADMIN)
		}

	case MySqlParserVERSION_TOKEN_ADMIN:
		p.EnterOuterAlt(localctx, 56)
		{
			p.SetState(4813)
			p.Match(MySqlParserVERSION_TOKEN_ADMIN)
		}

	case MySqlParserXA_RECOVER_ADMIN:
		p.EnterOuterAlt(localctx, 57)
		{
			p.SetState(4814)
			p.Match(MySqlParserXA_RECOVER_ADMIN)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrivilegeLevelContext is an interface to support dynamic dispatch.
type IPrivilegeLevelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivilegeLevelContext differentiates from other interfaces.
	IsPrivilegeLevelContext()
}

type PrivilegeLevelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegeLevelContext() *PrivilegeLevelContext {
	var p = new(PrivilegeLevelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_privilegeLevel
	return p
}

func (*PrivilegeLevelContext) IsPrivilegeLevelContext() {}

func NewPrivilegeLevelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegeLevelContext {
	var p = new(PrivilegeLevelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_privilegeLevel

	return p
}

func (s *PrivilegeLevelContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegeLevelContext) CopyFrom(ctx *PrivilegeLevelContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PrivilegeLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegeLevelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DefiniteSchemaPrivLevelContext struct {
	*PrivilegeLevelContext
}

func NewDefiniteSchemaPrivLevelContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefiniteSchemaPrivLevelContext {
	var p = new(DefiniteSchemaPrivLevelContext)

	p.PrivilegeLevelContext = NewEmptyPrivilegeLevelContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrivilegeLevelContext))

	return p
}

func (s *DefiniteSchemaPrivLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefiniteSchemaPrivLevelContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DefiniteSchemaPrivLevelContext) DOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, 0)
}

func (s *DefiniteSchemaPrivLevelContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *DefiniteSchemaPrivLevelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDefiniteSchemaPrivLevel(s)

	default:
		return t.VisitChildren(s)
	}
}

type DefiniteFullTablePrivLevel2Context struct {
	*PrivilegeLevelContext
}

func NewDefiniteFullTablePrivLevel2Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefiniteFullTablePrivLevel2Context {
	var p = new(DefiniteFullTablePrivLevel2Context)

	p.PrivilegeLevelContext = NewEmptyPrivilegeLevelContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrivilegeLevelContext))

	return p
}

func (s *DefiniteFullTablePrivLevel2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefiniteFullTablePrivLevel2Context) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DefiniteFullTablePrivLevel2Context) DottedId() IDottedIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDottedIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDottedIdContext)
}

func (s *DefiniteFullTablePrivLevel2Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDefiniteFullTablePrivLevel2(s)

	default:
		return t.VisitChildren(s)
	}
}

type DefiniteFullTablePrivLevelContext struct {
	*PrivilegeLevelContext
}

func NewDefiniteFullTablePrivLevelContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefiniteFullTablePrivLevelContext {
	var p = new(DefiniteFullTablePrivLevelContext)

	p.PrivilegeLevelContext = NewEmptyPrivilegeLevelContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrivilegeLevelContext))

	return p
}

func (s *DefiniteFullTablePrivLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefiniteFullTablePrivLevelContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *DefiniteFullTablePrivLevelContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DefiniteFullTablePrivLevelContext) DOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, 0)
}

func (s *DefiniteFullTablePrivLevelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDefiniteFullTablePrivLevel(s)

	default:
		return t.VisitChildren(s)
	}
}

type GlobalPrivLevelContext struct {
	*PrivilegeLevelContext
}

func NewGlobalPrivLevelContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GlobalPrivLevelContext {
	var p = new(GlobalPrivLevelContext)

	p.PrivilegeLevelContext = NewEmptyPrivilegeLevelContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrivilegeLevelContext))

	return p
}

func (s *GlobalPrivLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GlobalPrivLevelContext) AllSTAR() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTAR)
}

func (s *GlobalPrivLevelContext) STAR(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, i)
}

func (s *GlobalPrivLevelContext) DOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, 0)
}

func (s *GlobalPrivLevelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGlobalPrivLevel(s)

	default:
		return t.VisitChildren(s)
	}
}

type DefiniteTablePrivLevelContext struct {
	*PrivilegeLevelContext
}

func NewDefiniteTablePrivLevelContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefiniteTablePrivLevelContext {
	var p = new(DefiniteTablePrivLevelContext)

	p.PrivilegeLevelContext = NewEmptyPrivilegeLevelContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrivilegeLevelContext))

	return p
}

func (s *DefiniteTablePrivLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefiniteTablePrivLevelContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DefiniteTablePrivLevelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDefiniteTablePrivLevel(s)

	default:
		return t.VisitChildren(s)
	}
}

type CurrentSchemaPriviLevelContext struct {
	*PrivilegeLevelContext
}

func NewCurrentSchemaPriviLevelContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CurrentSchemaPriviLevelContext {
	var p = new(CurrentSchemaPriviLevelContext)

	p.PrivilegeLevelContext = NewEmptyPrivilegeLevelContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrivilegeLevelContext))

	return p
}

func (s *CurrentSchemaPriviLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CurrentSchemaPriviLevelContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *CurrentSchemaPriviLevelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCurrentSchemaPriviLevel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) PrivilegeLevel() (localctx IPrivilegeLevelContext) {
	localctx = NewPrivilegeLevelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, MySqlParserRULE_privilegeLevel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4833)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 692, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCurrentSchemaPriviLevelContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4817)
			p.Match(MySqlParserSTAR)
		}

	case 2:
		localctx = NewGlobalPrivLevelContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4818)
			p.Match(MySqlParserSTAR)
		}
		{
			p.SetState(4819)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(4820)
			p.Match(MySqlParserSTAR)
		}

	case 3:
		localctx = NewDefiniteSchemaPrivLevelContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4821)
			p.Uid()
		}
		{
			p.SetState(4822)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(4823)
			p.Match(MySqlParserSTAR)
		}

	case 4:
		localctx = NewDefiniteFullTablePrivLevelContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4825)
			p.Uid()
		}
		{
			p.SetState(4826)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(4827)
			p.Uid()
		}

	case 5:
		localctx = NewDefiniteFullTablePrivLevel2Context(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4829)
			p.Uid()
		}
		{
			p.SetState(4830)
			p.DottedId()
		}

	case 6:
		localctx = NewDefiniteTablePrivLevelContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4832)
			p.Uid()
		}

	}

	return localctx
}

// IRenameUserClauseContext is an interface to support dynamic dispatch.
type IRenameUserClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFromFirst returns the fromFirst rule contexts.
	GetFromFirst() IUserNameContext

	// GetToFirst returns the toFirst rule contexts.
	GetToFirst() IUserNameContext

	// SetFromFirst sets the fromFirst rule contexts.
	SetFromFirst(IUserNameContext)

	// SetToFirst sets the toFirst rule contexts.
	SetToFirst(IUserNameContext)

	// IsRenameUserClauseContext differentiates from other interfaces.
	IsRenameUserClauseContext()
}

type RenameUserClauseContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	fromFirst IUserNameContext
	toFirst   IUserNameContext
}

func NewEmptyRenameUserClauseContext() *RenameUserClauseContext {
	var p = new(RenameUserClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_renameUserClause
	return p
}

func (*RenameUserClauseContext) IsRenameUserClauseContext() {}

func NewRenameUserClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RenameUserClauseContext {
	var p = new(RenameUserClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_renameUserClause

	return p
}

func (s *RenameUserClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *RenameUserClauseContext) GetFromFirst() IUserNameContext { return s.fromFirst }

func (s *RenameUserClauseContext) GetToFirst() IUserNameContext { return s.toFirst }

func (s *RenameUserClauseContext) SetFromFirst(v IUserNameContext) { s.fromFirst = v }

func (s *RenameUserClauseContext) SetToFirst(v IUserNameContext) { s.toFirst = v }

func (s *RenameUserClauseContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *RenameUserClauseContext) AllUserName() []IUserNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserNameContext)(nil)).Elem())
	var tst = make([]IUserNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserNameContext)
		}
	}

	return tst
}

func (s *RenameUserClauseContext) UserName(i int) IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *RenameUserClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RenameUserClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RenameUserClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRenameUserClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) RenameUserClause() (localctx IRenameUserClauseContext) {
	localctx = NewRenameUserClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, MySqlParserRULE_renameUserClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4835)

		var _x = p.UserName()

		localctx.(*RenameUserClauseContext).fromFirst = _x
	}
	{
		p.SetState(4836)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(4837)

		var _x = p.UserName()

		localctx.(*RenameUserClauseContext).toFirst = _x
	}

	return localctx
}

// IAnalyzeTableContext is an interface to support dynamic dispatch.
type IAnalyzeTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetActionOption returns the actionOption token.
	GetActionOption() antlr.Token

	// SetActionOption sets the actionOption token.
	SetActionOption(antlr.Token)

	// IsAnalyzeTableContext differentiates from other interfaces.
	IsAnalyzeTableContext()
}

type AnalyzeTableContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	actionOption antlr.Token
}

func NewEmptyAnalyzeTableContext() *AnalyzeTableContext {
	var p = new(AnalyzeTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_analyzeTable
	return p
}

func (*AnalyzeTableContext) IsAnalyzeTableContext() {}

func NewAnalyzeTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnalyzeTableContext {
	var p = new(AnalyzeTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_analyzeTable

	return p
}

func (s *AnalyzeTableContext) GetParser() antlr.Parser { return s.parser }

func (s *AnalyzeTableContext) GetActionOption() antlr.Token { return s.actionOption }

func (s *AnalyzeTableContext) SetActionOption(v antlr.Token) { s.actionOption = v }

func (s *AnalyzeTableContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserANALYZE, 0)
}

func (s *AnalyzeTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *AnalyzeTableContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *AnalyzeTableContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO_WRITE_TO_BINLOG, 0)
}

func (s *AnalyzeTableContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *AnalyzeTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnalyzeTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnalyzeTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAnalyzeTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AnalyzeTable() (localctx IAnalyzeTableContext) {
	localctx = NewAnalyzeTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, MySqlParserRULE_analyzeTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4839)
		p.Match(MySqlParserANALYZE)
	}
	p.SetState(4841)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL {
		{
			p.SetState(4840)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*AnalyzeTableContext).actionOption = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*AnalyzeTableContext).actionOption = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(4843)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(4844)
		p.Tables()
	}

	return localctx
}

// ICheckTableContext is an interface to support dynamic dispatch.
type ICheckTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckTableContext differentiates from other interfaces.
	IsCheckTableContext()
}

type CheckTableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckTableContext() *CheckTableContext {
	var p = new(CheckTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_checkTable
	return p
}

func (*CheckTableContext) IsCheckTableContext() {}

func NewCheckTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckTableContext {
	var p = new(CheckTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_checkTable

	return p
}

func (s *CheckTableContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckTableContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *CheckTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *CheckTableContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *CheckTableContext) AllCheckTableOption() []ICheckTableOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICheckTableOptionContext)(nil)).Elem())
	var tst = make([]ICheckTableOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICheckTableOptionContext)
		}
	}

	return tst
}

func (s *CheckTableContext) CheckTableOption(i int) ICheckTableOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckTableOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICheckTableOptionContext)
}

func (s *CheckTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCheckTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CheckTable() (localctx ICheckTableContext) {
	localctx = NewCheckTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, MySqlParserRULE_checkTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4846)
		p.Match(MySqlParserCHECK)
	}
	{
		p.SetState(4847)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(4848)
		p.Tables()
	}
	p.SetState(4852)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserFOR || _la == MySqlParserCHANGED || _la == MySqlParserEXTENDED || _la == MySqlParserFAST || _la == MySqlParserMEDIUM || _la == MySqlParserQUICK {
		{
			p.SetState(4849)
			p.CheckTableOption()
		}

		p.SetState(4854)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IChecksumTableContext is an interface to support dynamic dispatch.
type IChecksumTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetActionOption returns the actionOption token.
	GetActionOption() antlr.Token

	// SetActionOption sets the actionOption token.
	SetActionOption(antlr.Token)

	// IsChecksumTableContext differentiates from other interfaces.
	IsChecksumTableContext()
}

type ChecksumTableContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	actionOption antlr.Token
}

func NewEmptyChecksumTableContext() *ChecksumTableContext {
	var p = new(ChecksumTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_checksumTable
	return p
}

func (*ChecksumTableContext) IsChecksumTableContext() {}

func NewChecksumTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChecksumTableContext {
	var p = new(ChecksumTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_checksumTable

	return p
}

func (s *ChecksumTableContext) GetParser() antlr.Parser { return s.parser }

func (s *ChecksumTableContext) GetActionOption() antlr.Token { return s.actionOption }

func (s *ChecksumTableContext) SetActionOption(v antlr.Token) { s.actionOption = v }

func (s *ChecksumTableContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECKSUM, 0)
}

func (s *ChecksumTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *ChecksumTableContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *ChecksumTableContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *ChecksumTableContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *ChecksumTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChecksumTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChecksumTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitChecksumTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ChecksumTable() (localctx IChecksumTableContext) {
	localctx = NewChecksumTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, MySqlParserRULE_checksumTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4855)
		p.Match(MySqlParserCHECKSUM)
	}
	{
		p.SetState(4856)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(4857)
		p.Tables()
	}
	p.SetState(4859)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEXTENDED || _la == MySqlParserQUICK {
		{
			p.SetState(4858)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ChecksumTableContext).actionOption = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserEXTENDED || _la == MySqlParserQUICK) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ChecksumTableContext).actionOption = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IOptimizeTableContext is an interface to support dynamic dispatch.
type IOptimizeTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetActionOption returns the actionOption token.
	GetActionOption() antlr.Token

	// SetActionOption sets the actionOption token.
	SetActionOption(antlr.Token)

	// IsOptimizeTableContext differentiates from other interfaces.
	IsOptimizeTableContext()
}

type OptimizeTableContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	actionOption antlr.Token
}

func NewEmptyOptimizeTableContext() *OptimizeTableContext {
	var p = new(OptimizeTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_optimizeTable
	return p
}

func (*OptimizeTableContext) IsOptimizeTableContext() {}

func NewOptimizeTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptimizeTableContext {
	var p = new(OptimizeTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_optimizeTable

	return p
}

func (s *OptimizeTableContext) GetParser() antlr.Parser { return s.parser }

func (s *OptimizeTableContext) GetActionOption() antlr.Token { return s.actionOption }

func (s *OptimizeTableContext) SetActionOption(v antlr.Token) { s.actionOption = v }

func (s *OptimizeTableContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIMIZE, 0)
}

func (s *OptimizeTableContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *OptimizeTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *OptimizeTableContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *OptimizeTableContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO_WRITE_TO_BINLOG, 0)
}

func (s *OptimizeTableContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *OptimizeTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptimizeTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptimizeTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitOptimizeTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) OptimizeTable() (localctx IOptimizeTableContext) {
	localctx = NewOptimizeTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, MySqlParserRULE_optimizeTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4861)
		p.Match(MySqlParserOPTIMIZE)
	}
	p.SetState(4863)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL {
		{
			p.SetState(4862)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*OptimizeTableContext).actionOption = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*OptimizeTableContext).actionOption = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(4865)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserTABLE || _la == MySqlParserTABLES) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4866)
		p.Tables()
	}

	return localctx
}

// IRepairTableContext is an interface to support dynamic dispatch.
type IRepairTableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetActionOption returns the actionOption token.
	GetActionOption() antlr.Token

	// SetActionOption sets the actionOption token.
	SetActionOption(antlr.Token)

	// IsRepairTableContext differentiates from other interfaces.
	IsRepairTableContext()
}

type RepairTableContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	actionOption antlr.Token
}

func NewEmptyRepairTableContext() *RepairTableContext {
	var p = new(RepairTableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_repairTable
	return p
}

func (*RepairTableContext) IsRepairTableContext() {}

func NewRepairTableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RepairTableContext {
	var p = new(RepairTableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_repairTable

	return p
}

func (s *RepairTableContext) GetParser() antlr.Parser { return s.parser }

func (s *RepairTableContext) GetActionOption() antlr.Token { return s.actionOption }

func (s *RepairTableContext) SetActionOption(v antlr.Token) { s.actionOption = v }

func (s *RepairTableContext) REPAIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPAIR, 0)
}

func (s *RepairTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *RepairTableContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *RepairTableContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *RepairTableContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *RepairTableContext) USE_FRM() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE_FRM, 0)
}

func (s *RepairTableContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO_WRITE_TO_BINLOG, 0)
}

func (s *RepairTableContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *RepairTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RepairTableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RepairTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRepairTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) RepairTable() (localctx IRepairTableContext) {
	localctx = NewRepairTableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 432, MySqlParserRULE_repairTable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4868)
		p.Match(MySqlParserREPAIR)
	}
	p.SetState(4870)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL {
		{
			p.SetState(4869)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*RepairTableContext).actionOption = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*RepairTableContext).actionOption = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(4872)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(4873)
		p.Tables()
	}
	p.SetState(4875)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserQUICK {
		{
			p.SetState(4874)
			p.Match(MySqlParserQUICK)
		}

	}
	p.SetState(4878)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEXTENDED {
		{
			p.SetState(4877)
			p.Match(MySqlParserEXTENDED)
		}

	}
	p.SetState(4881)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUSE_FRM {
		{
			p.SetState(4880)
			p.Match(MySqlParserUSE_FRM)
		}

	}

	return localctx
}

// ICheckTableOptionContext is an interface to support dynamic dispatch.
type ICheckTableOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckTableOptionContext differentiates from other interfaces.
	IsCheckTableOptionContext()
}

type CheckTableOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckTableOptionContext() *CheckTableOptionContext {
	var p = new(CheckTableOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_checkTableOption
	return p
}

func (*CheckTableOptionContext) IsCheckTableOptionContext() {}

func NewCheckTableOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckTableOptionContext {
	var p = new(CheckTableOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_checkTableOption

	return p
}

func (s *CheckTableOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckTableOptionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *CheckTableOptionContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPGRADE, 0)
}

func (s *CheckTableOptionContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *CheckTableOptionContext) FAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFAST, 0)
}

func (s *CheckTableOptionContext) MEDIUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUM, 0)
}

func (s *CheckTableOptionContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *CheckTableOptionContext) CHANGED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGED, 0)
}

func (s *CheckTableOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckTableOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckTableOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCheckTableOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CheckTableOption() (localctx ICheckTableOptionContext) {
	localctx = NewCheckTableOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 434, MySqlParserRULE_checkTableOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4890)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserFOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4883)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(4884)
			p.Match(MySqlParserUPGRADE)
		}

	case MySqlParserQUICK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4885)
			p.Match(MySqlParserQUICK)
		}

	case MySqlParserFAST:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4886)
			p.Match(MySqlParserFAST)
		}

	case MySqlParserMEDIUM:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4887)
			p.Match(MySqlParserMEDIUM)
		}

	case MySqlParserEXTENDED:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4888)
			p.Match(MySqlParserEXTENDED)
		}

	case MySqlParserCHANGED:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4889)
			p.Match(MySqlParserCHANGED)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreateUdfunctionContext is an interface to support dynamic dispatch.
type ICreateUdfunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetReturnType returns the returnType token.
	GetReturnType() antlr.Token

	// SetReturnType sets the returnType token.
	SetReturnType(antlr.Token)

	// IsCreateUdfunctionContext differentiates from other interfaces.
	IsCreateUdfunctionContext()
}

type CreateUdfunctionContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	returnType antlr.Token
}

func NewEmptyCreateUdfunctionContext() *CreateUdfunctionContext {
	var p = new(CreateUdfunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_createUdfunction
	return p
}

func (*CreateUdfunctionContext) IsCreateUdfunctionContext() {}

func NewCreateUdfunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateUdfunctionContext {
	var p = new(CreateUdfunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_createUdfunction

	return p
}

func (s *CreateUdfunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateUdfunctionContext) GetReturnType() antlr.Token { return s.returnType }

func (s *CreateUdfunctionContext) SetReturnType(v antlr.Token) { s.returnType = v }

func (s *CreateUdfunctionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateUdfunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *CreateUdfunctionContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CreateUdfunctionContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNS, 0)
}

func (s *CreateUdfunctionContext) SONAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSONAME, 0)
}

func (s *CreateUdfunctionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CreateUdfunctionContext) STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING, 0)
}

func (s *CreateUdfunctionContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTEGER, 0)
}

func (s *CreateUdfunctionContext) REAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAL, 0)
}

func (s *CreateUdfunctionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL, 0)
}

func (s *CreateUdfunctionContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserAGGREGATE, 0)
}

func (s *CreateUdfunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUdfunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateUdfunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateUdfunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CreateUdfunction() (localctx ICreateUdfunctionContext) {
	localctx = NewCreateUdfunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 436, MySqlParserRULE_createUdfunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4892)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(4894)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAGGREGATE {
		{
			p.SetState(4893)
			p.Match(MySqlParserAGGREGATE)
		}

	}
	{
		p.SetState(4896)
		p.Match(MySqlParserFUNCTION)
	}
	{
		p.SetState(4897)
		p.Uid()
	}
	{
		p.SetState(4898)
		p.Match(MySqlParserRETURNS)
	}
	{
		p.SetState(4899)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CreateUdfunctionContext).returnType = _lt

		_la = p.GetTokenStream().LA(1)

		if !((((_la-190)&-(0x1f+1)) == 0 && ((1<<uint((_la-190)))&((1<<(MySqlParserINTEGER-190))|(1<<(MySqlParserREAL-190))|(1<<(MySqlParserDECIMAL-190)))) != 0) || _la == MySqlParserSTRING) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CreateUdfunctionContext).returnType = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4900)
		p.Match(MySqlParserSONAME)
	}
	{
		p.SetState(4901)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// IInstallPluginContext is an interface to support dynamic dispatch.
type IInstallPluginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInstallPluginContext differentiates from other interfaces.
	IsInstallPluginContext()
}

type InstallPluginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstallPluginContext() *InstallPluginContext {
	var p = new(InstallPluginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_installPlugin
	return p
}

func (*InstallPluginContext) IsInstallPluginContext() {}

func NewInstallPluginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstallPluginContext {
	var p = new(InstallPluginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_installPlugin

	return p
}

func (s *InstallPluginContext) GetParser() antlr.Parser { return s.parser }

func (s *InstallPluginContext) INSTALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTALL, 0)
}

func (s *InstallPluginContext) PLUGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGIN, 0)
}

func (s *InstallPluginContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *InstallPluginContext) SONAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSONAME, 0)
}

func (s *InstallPluginContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *InstallPluginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstallPluginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstallPluginContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitInstallPlugin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) InstallPlugin() (localctx IInstallPluginContext) {
	localctx = NewInstallPluginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 438, MySqlParserRULE_installPlugin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4903)
		p.Match(MySqlParserINSTALL)
	}
	{
		p.SetState(4904)
		p.Match(MySqlParserPLUGIN)
	}
	{
		p.SetState(4905)
		p.Uid()
	}
	{
		p.SetState(4906)
		p.Match(MySqlParserSONAME)
	}
	{
		p.SetState(4907)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// IUninstallPluginContext is an interface to support dynamic dispatch.
type IUninstallPluginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUninstallPluginContext differentiates from other interfaces.
	IsUninstallPluginContext()
}

type UninstallPluginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUninstallPluginContext() *UninstallPluginContext {
	var p = new(UninstallPluginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_uninstallPlugin
	return p
}

func (*UninstallPluginContext) IsUninstallPluginContext() {}

func NewUninstallPluginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UninstallPluginContext {
	var p = new(UninstallPluginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_uninstallPlugin

	return p
}

func (s *UninstallPluginContext) GetParser() antlr.Parser { return s.parser }

func (s *UninstallPluginContext) UNINSTALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNINSTALL, 0)
}

func (s *UninstallPluginContext) PLUGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGIN, 0)
}

func (s *UninstallPluginContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *UninstallPluginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UninstallPluginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UninstallPluginContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUninstallPlugin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UninstallPlugin() (localctx IUninstallPluginContext) {
	localctx = NewUninstallPluginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 440, MySqlParserRULE_uninstallPlugin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4909)
		p.Match(MySqlParserUNINSTALL)
	}
	{
		p.SetState(4910)
		p.Match(MySqlParserPLUGIN)
	}
	{
		p.SetState(4911)
		p.Uid()
	}

	return localctx
}

// ISetStatementContext is an interface to support dynamic dispatch.
type ISetStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetStatementContext differentiates from other interfaces.
	IsSetStatementContext()
}

type SetStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetStatementContext() *SetStatementContext {
	var p = new(SetStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_setStatement
	return p
}

func (*SetStatementContext) IsSetStatementContext() {}

func NewSetStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetStatementContext {
	var p = new(SetStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_setStatement

	return p
}

func (s *SetStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SetStatementContext) CopyFrom(ctx *SetStatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SetStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SetTransactionContext struct {
	*SetStatementContext
}

func NewSetTransactionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetTransactionContext {
	var p = new(SetTransactionContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetTransactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetTransactionContext) SetTransactionStatement() ISetTransactionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetTransactionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetTransactionStatementContext)
}

func (s *SetTransactionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetTransaction(s)

	default:
		return t.VisitChildren(s)
	}
}

type SetCharsetContext struct {
	*SetStatementContext
}

func NewSetCharsetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetCharsetContext {
	var p = new(SetCharsetContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetCharsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetCharsetContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSET)
}

func (s *SetCharsetContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, i)
}

func (s *SetCharsetContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *SetCharsetContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET, 0)
}

func (s *SetCharsetContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *SetCharsetContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *SetCharsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetCharset(s)

	default:
		return t.VisitChildren(s)
	}
}

type SetNamesContext struct {
	*SetStatementContext
}

func NewSetNamesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetNamesContext {
	var p = new(SetNamesContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetNamesContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetNamesContext) NAMES() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAMES, 0)
}

func (s *SetNamesContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *SetNamesContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *SetNamesContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *SetNamesContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *SetNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetNames(s)

	default:
		return t.VisitChildren(s)
	}
}

type SetPasswordContext struct {
	*SetStatementContext
}

func NewSetPasswordContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetPasswordContext {
	var p = new(SetPasswordContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetPasswordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetPasswordContext) SetPasswordStatement() ISetPasswordStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetPasswordStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetPasswordStatementContext)
}

func (s *SetPasswordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetPassword(s)

	default:
		return t.VisitChildren(s)
	}
}

type SetAutocommitContext struct {
	*SetStatementContext
}

func NewSetAutocommitContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetAutocommitContext {
	var p = new(SetAutocommitContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetAutocommitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetAutocommitContext) SetAutocommitStatement() ISetAutocommitStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAutocommitStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAutocommitStatementContext)
}

func (s *SetAutocommitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetAutocommit(s)

	default:
		return t.VisitChildren(s)
	}
}

type SetNewValueInsideTriggerContext struct {
	*SetStatementContext
}

func NewSetNewValueInsideTriggerContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetNewValueInsideTriggerContext {
	var p = new(SetNewValueInsideTriggerContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetNewValueInsideTriggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetNewValueInsideTriggerContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetNewValueInsideTriggerContext) AllFullId() []IFullIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFullIdContext)(nil)).Elem())
	var tst = make([]IFullIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFullIdContext)
		}
	}

	return tst
}

func (s *SetNewValueInsideTriggerContext) FullId(i int) IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *SetNewValueInsideTriggerContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SetNewValueInsideTriggerContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetNewValueInsideTriggerContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *SetNewValueInsideTriggerContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *SetNewValueInsideTriggerContext) AllVAR_ASSIGN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserVAR_ASSIGN)
}

func (s *SetNewValueInsideTriggerContext) VAR_ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_ASSIGN, i)
}

func (s *SetNewValueInsideTriggerContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SetNewValueInsideTriggerContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SetNewValueInsideTriggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetNewValueInsideTrigger(s)

	default:
		return t.VisitChildren(s)
	}
}

type SetVariableContext struct {
	*SetStatementContext
}

func NewSetVariableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetVariableContext {
	var p = new(SetVariableContext)

	p.SetStatementContext = NewEmptySetStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SetStatementContext))

	return p
}

func (s *SetVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetVariableContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetVariableContext) AllVariableClause() []IVariableClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableClauseContext)(nil)).Elem())
	var tst = make([]IVariableClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableClauseContext)
		}
	}

	return tst
}

func (s *SetVariableContext) VariableClause(i int) IVariableClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableClauseContext)
}

func (s *SetVariableContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SetVariableContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetVariableContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *SetVariableContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *SetVariableContext) AllVAR_ASSIGN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserVAR_ASSIGN)
}

func (s *SetVariableContext) VAR_ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_ASSIGN, i)
}

func (s *SetVariableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SetVariableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SetVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SetStatement() (localctx ISetStatementContext) {
	localctx = NewSetStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 442, MySqlParserRULE_setStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4964)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 709, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSetVariableContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4913)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(4914)
			p.VariableClause()
		}
		{
			p.SetState(4915)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserVAR_ASSIGN || _la == MySqlParserEQUAL_SYMBOL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4916)
			p.expression(0)
		}
		p.SetState(4924)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4917)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4918)
				p.VariableClause()
			}
			{
				p.SetState(4919)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserVAR_ASSIGN || _la == MySqlParserEQUAL_SYMBOL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(4920)
				p.expression(0)
			}

			p.SetState(4926)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewSetCharsetContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4927)
			p.Match(MySqlParserSET)
		}
		p.SetState(4931)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCHARACTER:
			{
				p.SetState(4928)
				p.Match(MySqlParserCHARACTER)
			}
			{
				p.SetState(4929)
				p.Match(MySqlParserSET)
			}

		case MySqlParserCHARSET:
			{
				p.SetState(4930)
				p.Match(MySqlParserCHARSET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(4935)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserBINARY, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL:
			{
				p.SetState(4933)
				p.CharsetName()
			}

		case MySqlParserDEFAULT:
			{
				p.SetState(4934)
				p.Match(MySqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 3:
		localctx = NewSetNamesContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4937)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(4938)
			p.Match(MySqlParserNAMES)
		}
		p.SetState(4945)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserBINARY, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL:
			{
				p.SetState(4939)
				p.CharsetName()
			}
			p.SetState(4942)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserCOLLATE {
				{
					p.SetState(4940)
					p.Match(MySqlParserCOLLATE)
				}
				{
					p.SetState(4941)
					p.CollationName()
				}

			}

		case MySqlParserDEFAULT:
			{
				p.SetState(4944)
				p.Match(MySqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 4:
		localctx = NewSetPasswordContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4947)
			p.SetPasswordStatement()
		}

	case 5:
		localctx = NewSetTransactionContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4948)
			p.SetTransactionStatement()
		}

	case 6:
		localctx = NewSetAutocommitContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4949)
			p.SetAutocommitStatement()
		}

	case 7:
		localctx = NewSetNewValueInsideTriggerContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4950)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(4951)
			p.FullId()
		}
		{
			p.SetState(4952)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserVAR_ASSIGN || _la == MySqlParserEQUAL_SYMBOL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4953)
			p.expression(0)
		}
		p.SetState(4961)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4954)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4955)
				p.FullId()
			}
			{
				p.SetState(4956)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserVAR_ASSIGN || _la == MySqlParserEQUAL_SYMBOL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(4957)
				p.expression(0)
			}

			p.SetState(4963)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IShowStatementContext is an interface to support dynamic dispatch.
type IShowStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowStatementContext differentiates from other interfaces.
	IsShowStatementContext()
}

type ShowStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowStatementContext() *ShowStatementContext {
	var p = new(ShowStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_showStatement
	return p
}

func (*ShowStatementContext) IsShowStatementContext() {}

func NewShowStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowStatementContext {
	var p = new(ShowStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_showStatement

	return p
}

func (s *ShowStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowStatementContext) CopyFrom(ctx *ShowStatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ShowStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ShowOpenTablesContext struct {
	*ShowStatementContext
	schemaFormat antlr.Token
}

func NewShowOpenTablesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowOpenTablesContext {
	var p = new(ShowOpenTablesContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowOpenTablesContext) GetSchemaFormat() antlr.Token { return s.schemaFormat }

func (s *ShowOpenTablesContext) SetSchemaFormat(v antlr.Token) { s.schemaFormat = v }

func (s *ShowOpenTablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowOpenTablesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowOpenTablesContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPEN, 0)
}

func (s *ShowOpenTablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *ShowOpenTablesContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ShowOpenTablesContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowOpenTablesContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ShowOpenTablesContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *ShowOpenTablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowOpenTables(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowGlobalInfoContext struct {
	*ShowStatementContext
}

func NewShowGlobalInfoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowGlobalInfoContext {
	var p = new(ShowGlobalInfoContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowGlobalInfoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowGlobalInfoContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowGlobalInfoContext) ShowGlobalInfoClause() IShowGlobalInfoClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowGlobalInfoClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowGlobalInfoClauseContext)
}

func (s *ShowGlobalInfoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowGlobalInfo(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowCreateFullIdObjectContext struct {
	*ShowStatementContext
	namedEntity antlr.Token
}

func NewShowCreateFullIdObjectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateFullIdObjectContext {
	var p = new(ShowCreateFullIdObjectContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowCreateFullIdObjectContext) GetNamedEntity() antlr.Token { return s.namedEntity }

func (s *ShowCreateFullIdObjectContext) SetNamedEntity(v antlr.Token) { s.namedEntity = v }

func (s *ShowCreateFullIdObjectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateFullIdObjectContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowCreateFullIdObjectContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *ShowCreateFullIdObjectContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *ShowCreateFullIdObjectContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *ShowCreateFullIdObjectContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *ShowCreateFullIdObjectContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *ShowCreateFullIdObjectContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *ShowCreateFullIdObjectContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGER, 0)
}

func (s *ShowCreateFullIdObjectContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *ShowCreateFullIdObjectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowCreateFullIdObject(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowCreateUserContext struct {
	*ShowStatementContext
}

func NewShowCreateUserContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateUserContext {
	var p = new(ShowCreateUserContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowCreateUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateUserContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowCreateUserContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *ShowCreateUserContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *ShowCreateUserContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *ShowCreateUserContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowCreateUser(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowErrorsContext struct {
	*ShowStatementContext
	errorFormat antlr.Token
	offset      IDecimalLiteralContext
	rowCount    IDecimalLiteralContext
}

func NewShowErrorsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowErrorsContext {
	var p = new(ShowErrorsContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowErrorsContext) GetErrorFormat() antlr.Token { return s.errorFormat }

func (s *ShowErrorsContext) SetErrorFormat(v antlr.Token) { s.errorFormat = v }

func (s *ShowErrorsContext) GetOffset() IDecimalLiteralContext { return s.offset }

func (s *ShowErrorsContext) GetRowCount() IDecimalLiteralContext { return s.rowCount }

func (s *ShowErrorsContext) SetOffset(v IDecimalLiteralContext) { s.offset = v }

func (s *ShowErrorsContext) SetRowCount(v IDecimalLiteralContext) { s.rowCount = v }

func (s *ShowErrorsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowErrorsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowErrorsContext) ERRORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserERRORS, 0)
}

func (s *ShowErrorsContext) WARNINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserWARNINGS, 0)
}

func (s *ShowErrorsContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *ShowErrorsContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *ShowErrorsContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *ShowErrorsContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *ShowErrorsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowErrors(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowCountErrorsContext struct {
	*ShowStatementContext
	errorFormat antlr.Token
}

func NewShowCountErrorsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCountErrorsContext {
	var p = new(ShowCountErrorsContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowCountErrorsContext) GetErrorFormat() antlr.Token { return s.errorFormat }

func (s *ShowCountErrorsContext) SetErrorFormat(v antlr.Token) { s.errorFormat = v }

func (s *ShowCountErrorsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCountErrorsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowCountErrorsContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOUNT, 0)
}

func (s *ShowCountErrorsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *ShowCountErrorsContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *ShowCountErrorsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *ShowCountErrorsContext) ERRORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserERRORS, 0)
}

func (s *ShowCountErrorsContext) WARNINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserWARNINGS, 0)
}

func (s *ShowCountErrorsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowCountErrors(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowObjectFilterContext struct {
	*ShowStatementContext
}

func NewShowObjectFilterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowObjectFilterContext {
	var p = new(ShowObjectFilterContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowObjectFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowObjectFilterContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowObjectFilterContext) ShowCommonEntity() IShowCommonEntityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowCommonEntityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowCommonEntityContext)
}

func (s *ShowObjectFilterContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowObjectFilterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowObjectFilter(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowCreateDbContext struct {
	*ShowStatementContext
	schemaFormat antlr.Token
}

func NewShowCreateDbContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateDbContext {
	var p = new(ShowCreateDbContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowCreateDbContext) GetSchemaFormat() antlr.Token { return s.schemaFormat }

func (s *ShowCreateDbContext) SetSchemaFormat(v antlr.Token) { s.schemaFormat = v }

func (s *ShowCreateDbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateDbContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowCreateDbContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *ShowCreateDbContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ShowCreateDbContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *ShowCreateDbContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *ShowCreateDbContext) IfNotExists() IIfNotExistsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfNotExistsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfNotExistsContext)
}

func (s *ShowCreateDbContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowCreateDb(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowEngineContext struct {
	*ShowStatementContext
	engineOption antlr.Token
}

func NewShowEngineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowEngineContext {
	var p = new(ShowEngineContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowEngineContext) GetEngineOption() antlr.Token { return s.engineOption }

func (s *ShowEngineContext) SetEngineOption(v antlr.Token) { s.engineOption = v }

func (s *ShowEngineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowEngineContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowEngineContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *ShowEngineContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *ShowEngineContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowEngineContext) MUTEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserMUTEX, 0)
}

func (s *ShowEngineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowEngine(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowSchemaFilterContext struct {
	*ShowStatementContext
	schemaFormat antlr.Token
}

func NewShowSchemaFilterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowSchemaFilterContext {
	var p = new(ShowSchemaFilterContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowSchemaFilterContext) GetSchemaFormat() antlr.Token { return s.schemaFormat }

func (s *ShowSchemaFilterContext) SetSchemaFormat(v antlr.Token) { s.schemaFormat = v }

func (s *ShowSchemaFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowSchemaFilterContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowSchemaFilterContext) ShowSchemaEntity() IShowSchemaEntityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowSchemaEntityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowSchemaEntityContext)
}

func (s *ShowSchemaFilterContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ShowSchemaFilterContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowSchemaFilterContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ShowSchemaFilterContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *ShowSchemaFilterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowSchemaFilter(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowIndexesContext struct {
	*ShowStatementContext
	indexFormat  antlr.Token
	tableFormat  antlr.Token
	schemaFormat antlr.Token
}

func NewShowIndexesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowIndexesContext {
	var p = new(ShowIndexesContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowIndexesContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *ShowIndexesContext) GetTableFormat() antlr.Token { return s.tableFormat }

func (s *ShowIndexesContext) GetSchemaFormat() antlr.Token { return s.schemaFormat }

func (s *ShowIndexesContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *ShowIndexesContext) SetTableFormat(v antlr.Token) { s.tableFormat = v }

func (s *ShowIndexesContext) SetSchemaFormat(v antlr.Token) { s.schemaFormat = v }

func (s *ShowIndexesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowIndexesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowIndexesContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ShowIndexesContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *ShowIndexesContext) INDEXES() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEXES, 0)
}

func (s *ShowIndexesContext) KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEYS, 0)
}

func (s *ShowIndexesContext) AllFROM() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserFROM)
}

func (s *ShowIndexesContext) FROM(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, i)
}

func (s *ShowIndexesContext) AllIN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIN)
}

func (s *ShowIndexesContext) IN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, i)
}

func (s *ShowIndexesContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ShowIndexesContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *ShowIndexesContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ShowIndexesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowIndexes(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowLogEventsContext struct {
	*ShowStatementContext
	logFormat    antlr.Token
	filename     antlr.Token
	fromPosition IDecimalLiteralContext
	offset       IDecimalLiteralContext
	rowCount     IDecimalLiteralContext
}

func NewShowLogEventsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowLogEventsContext {
	var p = new(ShowLogEventsContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowLogEventsContext) GetLogFormat() antlr.Token { return s.logFormat }

func (s *ShowLogEventsContext) GetFilename() antlr.Token { return s.filename }

func (s *ShowLogEventsContext) SetLogFormat(v antlr.Token) { s.logFormat = v }

func (s *ShowLogEventsContext) SetFilename(v antlr.Token) { s.filename = v }

func (s *ShowLogEventsContext) GetFromPosition() IDecimalLiteralContext { return s.fromPosition }

func (s *ShowLogEventsContext) GetOffset() IDecimalLiteralContext { return s.offset }

func (s *ShowLogEventsContext) GetRowCount() IDecimalLiteralContext { return s.rowCount }

func (s *ShowLogEventsContext) SetFromPosition(v IDecimalLiteralContext) { s.fromPosition = v }

func (s *ShowLogEventsContext) SetOffset(v IDecimalLiteralContext) { s.offset = v }

func (s *ShowLogEventsContext) SetRowCount(v IDecimalLiteralContext) { s.rowCount = v }

func (s *ShowLogEventsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowLogEventsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowLogEventsContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENTS, 0)
}

func (s *ShowLogEventsContext) BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG, 0)
}

func (s *ShowLogEventsContext) RELAYLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAYLOG, 0)
}

func (s *ShowLogEventsContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *ShowLogEventsContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ShowLogEventsContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *ShowLogEventsContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *ShowLogEventsContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *ShowLogEventsContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *ShowLogEventsContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *ShowLogEventsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowLogEvents(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowMasterLogsContext struct {
	*ShowStatementContext
	logFormat antlr.Token
}

func NewShowMasterLogsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowMasterLogsContext {
	var p = new(ShowMasterLogsContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowMasterLogsContext) GetLogFormat() antlr.Token { return s.logFormat }

func (s *ShowMasterLogsContext) SetLogFormat(v antlr.Token) { s.logFormat = v }

func (s *ShowMasterLogsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowMasterLogsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowMasterLogsContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *ShowMasterLogsContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *ShowMasterLogsContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *ShowMasterLogsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowMasterLogs(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowGrantsContext struct {
	*ShowStatementContext
}

func NewShowGrantsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowGrantsContext {
	var p = new(ShowGrantsContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowGrantsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowGrantsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowGrantsContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANTS, 0)
}

func (s *ShowGrantsContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *ShowGrantsContext) UserName() IUserNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserNameContext)
}

func (s *ShowGrantsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowGrants(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowSlaveStatusContext struct {
	*ShowStatementContext
}

func NewShowSlaveStatusContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowSlaveStatusContext {
	var p = new(ShowSlaveStatusContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowSlaveStatusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowSlaveStatusContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowSlaveStatusContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *ShowSlaveStatusContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowSlaveStatusContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *ShowSlaveStatusContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANNEL, 0)
}

func (s *ShowSlaveStatusContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *ShowSlaveStatusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowSlaveStatus(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowRoutineContext struct {
	*ShowStatementContext
	routine antlr.Token
}

func NewShowRoutineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowRoutineContext {
	var p = new(ShowRoutineContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowRoutineContext) GetRoutine() antlr.Token { return s.routine }

func (s *ShowRoutineContext) SetRoutine(v antlr.Token) { s.routine = v }

func (s *ShowRoutineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowRoutineContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowRoutineContext) CODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCODE, 0)
}

func (s *ShowRoutineContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *ShowRoutineContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *ShowRoutineContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *ShowRoutineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowRoutine(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowProfileContext struct {
	*ShowStatementContext
	queryCount IDecimalLiteralContext
	offset     IDecimalLiteralContext
	rowCount   IDecimalLiteralContext
}

func NewShowProfileContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowProfileContext {
	var p = new(ShowProfileContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowProfileContext) GetQueryCount() IDecimalLiteralContext { return s.queryCount }

func (s *ShowProfileContext) GetOffset() IDecimalLiteralContext { return s.offset }

func (s *ShowProfileContext) GetRowCount() IDecimalLiteralContext { return s.rowCount }

func (s *ShowProfileContext) SetQueryCount(v IDecimalLiteralContext) { s.queryCount = v }

func (s *ShowProfileContext) SetOffset(v IDecimalLiteralContext) { s.offset = v }

func (s *ShowProfileContext) SetRowCount(v IDecimalLiteralContext) { s.rowCount = v }

func (s *ShowProfileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowProfileContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowProfileContext) PROFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROFILE, 0)
}

func (s *ShowProfileContext) AllShowProfileType() []IShowProfileTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IShowProfileTypeContext)(nil)).Elem())
	var tst = make([]IShowProfileTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IShowProfileTypeContext)
		}
	}

	return tst
}

func (s *ShowProfileContext) ShowProfileType(i int) IShowProfileTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowProfileTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IShowProfileTypeContext)
}

func (s *ShowProfileContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *ShowProfileContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ShowProfileContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ShowProfileContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *ShowProfileContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *ShowProfileContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *ShowProfileContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *ShowProfileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowProfile(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowColumnsContext struct {
	*ShowStatementContext
	columnsFormat antlr.Token
	tableFormat   antlr.Token
	schemaFormat  antlr.Token
}

func NewShowColumnsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowColumnsContext {
	var p = new(ShowColumnsContext)

	p.ShowStatementContext = NewEmptyShowStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ShowStatementContext))

	return p
}

func (s *ShowColumnsContext) GetColumnsFormat() antlr.Token { return s.columnsFormat }

func (s *ShowColumnsContext) GetTableFormat() antlr.Token { return s.tableFormat }

func (s *ShowColumnsContext) GetSchemaFormat() antlr.Token { return s.schemaFormat }

func (s *ShowColumnsContext) SetColumnsFormat(v antlr.Token) { s.columnsFormat = v }

func (s *ShowColumnsContext) SetTableFormat(v antlr.Token) { s.tableFormat = v }

func (s *ShowColumnsContext) SetSchemaFormat(v antlr.Token) { s.schemaFormat = v }

func (s *ShowColumnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowColumnsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowColumnsContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *ShowColumnsContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *ShowColumnsContext) FIELDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELDS, 0)
}

func (s *ShowColumnsContext) AllFROM() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserFROM)
}

func (s *ShowColumnsContext) FROM(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, i)
}

func (s *ShowColumnsContext) AllIN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIN)
}

func (s *ShowColumnsContext) IN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, i)
}

func (s *ShowColumnsContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *ShowColumnsContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *ShowColumnsContext) ShowFilter() IShowFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShowFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShowFilterContext)
}

func (s *ShowColumnsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowColumns(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ShowStatement() (localctx IShowStatementContext) {
	localctx = NewShowStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 444, MySqlParserRULE_showStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5117)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 731, p.GetParserRuleContext()) {
	case 1:
		localctx = NewShowMasterLogsContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4966)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(4967)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowMasterLogsContext).logFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserBINARY || _la == MySqlParserMASTER) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowMasterLogsContext).logFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4968)
			p.Match(MySqlParserLOGS)
		}

	case 2:
		localctx = NewShowLogEventsContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4969)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(4970)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowLogEventsContext).logFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserBINLOG || _la == MySqlParserRELAYLOG) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowLogEventsContext).logFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4971)
			p.Match(MySqlParserEVENTS)
		}
		p.SetState(4974)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIN {
			{
				p.SetState(4972)
				p.Match(MySqlParserIN)
			}
			{
				p.SetState(4973)

				var _m = p.Match(MySqlParserSTRING_LITERAL)

				localctx.(*ShowLogEventsContext).filename = _m
			}

		}
		p.SetState(4978)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM {
			{
				p.SetState(4976)
				p.Match(MySqlParserFROM)
			}
			{
				p.SetState(4977)

				var _x = p.DecimalLiteral()

				localctx.(*ShowLogEventsContext).fromPosition = _x
			}

		}
		p.SetState(4987)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIMIT {
			{
				p.SetState(4980)
				p.Match(MySqlParserLIMIT)
			}
			p.SetState(4984)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 712, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(4981)

					var _x = p.DecimalLiteral()

					localctx.(*ShowLogEventsContext).offset = _x
				}
				{
					p.SetState(4982)
					p.Match(MySqlParserCOMMA)
				}

			}
			{
				p.SetState(4986)

				var _x = p.DecimalLiteral()

				localctx.(*ShowLogEventsContext).rowCount = _x
			}

		}

	case 3:
		localctx = NewShowObjectFilterContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4989)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(4990)
			p.ShowCommonEntity()
		}
		p.SetState(4992)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIKE || _la == MySqlParserWHERE {
			{
				p.SetState(4991)
				p.ShowFilter()
			}

		}

	case 4:
		localctx = NewShowColumnsContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4994)
			p.Match(MySqlParserSHOW)
		}
		p.SetState(4996)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFULL {
			{
				p.SetState(4995)
				p.Match(MySqlParserFULL)
			}

		}
		{
			p.SetState(4998)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowColumnsContext).columnsFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCOLUMNS || _la == MySqlParserFIELDS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowColumnsContext).columnsFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4999)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowColumnsContext).tableFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowColumnsContext).tableFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5000)
			p.TableName()
		}
		p.SetState(5003)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM || _la == MySqlParserIN {
			{
				p.SetState(5001)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*ShowColumnsContext).schemaFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*ShowColumnsContext).schemaFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5002)
				p.Uid()
			}

		}
		p.SetState(5006)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIKE || _la == MySqlParserWHERE {
			{
				p.SetState(5005)
				p.ShowFilter()
			}

		}

	case 5:
		localctx = NewShowCreateDbContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5008)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5009)
			p.Match(MySqlParserCREATE)
		}
		{
			p.SetState(5010)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowCreateDbContext).schemaFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowCreateDbContext).schemaFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5012)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(5011)
				p.IfNotExists()
			}

		}
		{
			p.SetState(5014)
			p.Uid()
		}

	case 6:
		localctx = NewShowCreateFullIdObjectContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5015)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5016)
			p.Match(MySqlParserCREATE)
		}
		{
			p.SetState(5017)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowCreateFullIdObjectContext).namedEntity = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserPROCEDURE || _la == MySqlParserTABLE || _la == MySqlParserTRIGGER || _la == MySqlParserEVENT || _la == MySqlParserFUNCTION || _la == MySqlParserVIEW) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowCreateFullIdObjectContext).namedEntity = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5018)
			p.FullId()
		}

	case 7:
		localctx = NewShowCreateUserContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5019)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5020)
			p.Match(MySqlParserCREATE)
		}
		{
			p.SetState(5021)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(5022)
			p.UserName()
		}

	case 8:
		localctx = NewShowEngineContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5023)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5024)
			p.Match(MySqlParserENGINE)
		}
		{
			p.SetState(5025)
			p.EngineName()
		}
		{
			p.SetState(5026)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowEngineContext).engineOption = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserMUTEX || _la == MySqlParserSTATUS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowEngineContext).engineOption = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 9:
		localctx = NewShowGlobalInfoContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5028)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5029)
			p.ShowGlobalInfoClause()
		}

	case 10:
		localctx = NewShowErrorsContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5030)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5031)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowErrorsContext).errorFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserERRORS || _la == MySqlParserWARNINGS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowErrorsContext).errorFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

		{
			p.SetState(5032)
			p.Match(MySqlParserLIMIT)
		}
		p.SetState(5036)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 719, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5033)

				var _x = p.DecimalLiteral()

				localctx.(*ShowErrorsContext).offset = _x
			}
			{
				p.SetState(5034)
				p.Match(MySqlParserCOMMA)
			}

		}
		{
			p.SetState(5038)

			var _x = p.DecimalLiteral()

			localctx.(*ShowErrorsContext).rowCount = _x
		}

	case 11:
		localctx = NewShowCountErrorsContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5039)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5040)
			p.Match(MySqlParserCOUNT)
		}
		{
			p.SetState(5041)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5042)
			p.Match(MySqlParserSTAR)
		}
		{
			p.SetState(5043)
			p.Match(MySqlParserRR_BRACKET)
		}
		{
			p.SetState(5044)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowCountErrorsContext).errorFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserERRORS || _la == MySqlParserWARNINGS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowCountErrorsContext).errorFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 12:
		localctx = NewShowSchemaFilterContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5045)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5046)
			p.ShowSchemaEntity()
		}
		p.SetState(5049)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM || _la == MySqlParserIN {
			{
				p.SetState(5047)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*ShowSchemaFilterContext).schemaFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*ShowSchemaFilterContext).schemaFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5048)
				p.Uid()
			}

		}
		p.SetState(5052)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIKE || _la == MySqlParserWHERE {
			{
				p.SetState(5051)
				p.ShowFilter()
			}

		}

	case 13:
		localctx = NewShowRoutineContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5054)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5055)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowRoutineContext).routine = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserPROCEDURE || _la == MySqlParserFUNCTION) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowRoutineContext).routine = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5056)
			p.Match(MySqlParserCODE)
		}
		{
			p.SetState(5057)
			p.FullId()
		}

	case 14:
		localctx = NewShowGrantsContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(5058)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5059)
			p.Match(MySqlParserGRANTS)
		}
		p.SetState(5062)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(5060)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(5061)
				p.UserName()
			}

		}

	case 15:
		localctx = NewShowIndexesContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(5064)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5065)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowIndexesContext).indexFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEYS || _la == MySqlParserINDEXES) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowIndexesContext).indexFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5066)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ShowIndexesContext).tableFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ShowIndexesContext).tableFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5067)
			p.TableName()
		}
		p.SetState(5070)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM || _la == MySqlParserIN {
			{
				p.SetState(5068)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*ShowIndexesContext).schemaFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*ShowIndexesContext).schemaFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5069)
				p.Uid()
			}

		}
		p.SetState(5074)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWHERE {
			{
				p.SetState(5072)
				p.Match(MySqlParserWHERE)
			}
			{
				p.SetState(5073)
				p.expression(0)
			}

		}

	case 16:
		localctx = NewShowOpenTablesContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(5076)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5077)
			p.Match(MySqlParserOPEN)
		}
		{
			p.SetState(5078)
			p.Match(MySqlParserTABLES)
		}
		p.SetState(5081)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM || _la == MySqlParserIN {
			{
				p.SetState(5079)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*ShowOpenTablesContext).schemaFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*ShowOpenTablesContext).schemaFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5080)
				p.Uid()
			}

		}
		p.SetState(5084)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIKE || _la == MySqlParserWHERE {
			{
				p.SetState(5083)
				p.ShowFilter()
			}

		}

	case 17:
		localctx = NewShowProfileContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(5086)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5087)
			p.Match(MySqlParserPROFILE)
		}
		{
			p.SetState(5088)
			p.ShowProfileType()
		}
		p.SetState(5093)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5089)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5090)
				p.ShowProfileType()
			}

			p.SetState(5095)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(5099)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(5096)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(5097)
				p.Match(MySqlParserQUERY)
			}
			{
				p.SetState(5098)

				var _x = p.DecimalLiteral()

				localctx.(*ShowProfileContext).queryCount = _x
			}

		}

		{
			p.SetState(5101)
			p.Match(MySqlParserLIMIT)
		}
		p.SetState(5105)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 729, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5102)

				var _x = p.DecimalLiteral()

				localctx.(*ShowProfileContext).offset = _x
			}
			{
				p.SetState(5103)
				p.Match(MySqlParserCOMMA)
			}

		}
		{
			p.SetState(5107)

			var _x = p.DecimalLiteral()

			localctx.(*ShowProfileContext).rowCount = _x
		}

	case 18:
		localctx = NewShowSlaveStatusContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(5109)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(5110)
			p.Match(MySqlParserSLAVE)
		}
		{
			p.SetState(5111)
			p.Match(MySqlParserSTATUS)
		}
		p.SetState(5115)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(5112)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(5113)
				p.Match(MySqlParserCHANNEL)
			}
			{
				p.SetState(5114)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		}

	}

	return localctx
}

// IVariableClauseContext is an interface to support dynamic dispatch.
type IVariableClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableClauseContext differentiates from other interfaces.
	IsVariableClauseContext()
}

type VariableClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableClauseContext() *VariableClauseContext {
	var p = new(VariableClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_variableClause
	return p
}

func (*VariableClauseContext) IsVariableClauseContext() {}

func NewVariableClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableClauseContext {
	var p = new(VariableClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_variableClause

	return p
}

func (s *VariableClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableClauseContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *VariableClauseContext) GLOBAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL_ID, 0)
}

func (s *VariableClauseContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *VariableClauseContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL, 0)
}

func (s *VariableClauseContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION, 0)
}

func (s *VariableClauseContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *VariableClauseContext) AllAT_SIGN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserAT_SIGN)
}

func (s *VariableClauseContext) AT_SIGN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserAT_SIGN, i)
}

func (s *VariableClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitVariableClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) VariableClause() (localctx IVariableClauseContext) {
	localctx = NewVariableClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 446, MySqlParserRULE_variableClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5129)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5119)
			p.Match(MySqlParserLOCAL_ID)
		}

	case MySqlParserGLOBAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5120)
			p.Match(MySqlParserGLOBAL_ID)
		}

	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserAT_SIGN, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(5126)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 733, p.GetParserRuleContext()) == 1 {
			p.SetState(5123)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAT_SIGN {
				{
					p.SetState(5121)
					p.Match(MySqlParserAT_SIGN)
				}
				{
					p.SetState(5122)
					p.Match(MySqlParserAT_SIGN)
				}

			}
			{
				p.SetState(5125)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserGLOBAL || _la == MySqlParserLOCAL || _la == MySqlParserSESSION) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(5128)
			p.Uid()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowCommonEntityContext is an interface to support dynamic dispatch.
type IShowCommonEntityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowCommonEntityContext differentiates from other interfaces.
	IsShowCommonEntityContext()
}

type ShowCommonEntityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowCommonEntityContext() *ShowCommonEntityContext {
	var p = new(ShowCommonEntityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_showCommonEntity
	return p
}

func (*ShowCommonEntityContext) IsShowCommonEntityContext() {}

func NewShowCommonEntityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowCommonEntityContext {
	var p = new(ShowCommonEntityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_showCommonEntity

	return p
}

func (s *ShowCommonEntityContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowCommonEntityContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *ShowCommonEntityContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *ShowCommonEntityContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATION, 0)
}

func (s *ShowCommonEntityContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASES, 0)
}

func (s *ShowCommonEntityContext) SCHEMAS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMAS, 0)
}

func (s *ShowCommonEntityContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *ShowCommonEntityContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowCommonEntityContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *ShowCommonEntityContext) VARIABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARIABLES, 0)
}

func (s *ShowCommonEntityContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL, 0)
}

func (s *ShowCommonEntityContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION, 0)
}

func (s *ShowCommonEntityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCommonEntityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowCommonEntityContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowCommonEntity(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ShowCommonEntity() (localctx IShowCommonEntityContext) {
	localctx = NewShowCommonEntityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 448, MySqlParserRULE_showCommonEntity)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5144)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCHARACTER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5131)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(5132)
			p.Match(MySqlParserSET)
		}

	case MySqlParserCOLLATION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5133)
			p.Match(MySqlParserCOLLATION)
		}

	case MySqlParserDATABASES:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5134)
			p.Match(MySqlParserDATABASES)
		}

	case MySqlParserSCHEMAS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5135)
			p.Match(MySqlParserSCHEMAS)
		}

	case MySqlParserFUNCTION:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5136)
			p.Match(MySqlParserFUNCTION)
		}
		{
			p.SetState(5137)
			p.Match(MySqlParserSTATUS)
		}

	case MySqlParserPROCEDURE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5138)
			p.Match(MySqlParserPROCEDURE)
		}
		{
			p.SetState(5139)
			p.Match(MySqlParserSTATUS)
		}

	case MySqlParserGLOBAL, MySqlParserSESSION, MySqlParserSTATUS, MySqlParserVARIABLES:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(5141)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserGLOBAL || _la == MySqlParserSESSION {
			{
				p.SetState(5140)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserGLOBAL || _la == MySqlParserSESSION) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(5143)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserSTATUS || _la == MySqlParserVARIABLES) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowFilterContext is an interface to support dynamic dispatch.
type IShowFilterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowFilterContext differentiates from other interfaces.
	IsShowFilterContext()
}

type ShowFilterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowFilterContext() *ShowFilterContext {
	var p = new(ShowFilterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_showFilter
	return p
}

func (*ShowFilterContext) IsShowFilterContext() {}

func NewShowFilterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowFilterContext {
	var p = new(ShowFilterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_showFilter

	return p
}

func (s *ShowFilterContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowFilterContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIKE, 0)
}

func (s *ShowFilterContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *ShowFilterContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *ShowFilterContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ShowFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowFilterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowFilterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowFilter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ShowFilter() (localctx IShowFilterContext) {
	localctx = NewShowFilterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 450, MySqlParserRULE_showFilter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5150)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLIKE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5146)
			p.Match(MySqlParserLIKE)
		}
		{
			p.SetState(5147)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserWHERE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5148)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(5149)
			p.expression(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowGlobalInfoClauseContext is an interface to support dynamic dispatch.
type IShowGlobalInfoClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowGlobalInfoClauseContext differentiates from other interfaces.
	IsShowGlobalInfoClauseContext()
}

type ShowGlobalInfoClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowGlobalInfoClauseContext() *ShowGlobalInfoClauseContext {
	var p = new(ShowGlobalInfoClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_showGlobalInfoClause
	return p
}

func (*ShowGlobalInfoClauseContext) IsShowGlobalInfoClauseContext() {}

func NewShowGlobalInfoClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowGlobalInfoClauseContext {
	var p = new(ShowGlobalInfoClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_showGlobalInfoClause

	return p
}

func (s *ShowGlobalInfoClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowGlobalInfoClauseContext) ENGINES() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINES, 0)
}

func (s *ShowGlobalInfoClauseContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *ShowGlobalInfoClauseContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *ShowGlobalInfoClauseContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowGlobalInfoClauseContext) PLUGINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGINS, 0)
}

func (s *ShowGlobalInfoClauseContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *ShowGlobalInfoClauseContext) PROCESSLIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCESSLIST, 0)
}

func (s *ShowGlobalInfoClauseContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *ShowGlobalInfoClauseContext) PROFILES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROFILES, 0)
}

func (s *ShowGlobalInfoClauseContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *ShowGlobalInfoClauseContext) HOSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOSTS, 0)
}

func (s *ShowGlobalInfoClauseContext) AUTHORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTHORS, 0)
}

func (s *ShowGlobalInfoClauseContext) CONTRIBUTORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTRIBUTORS, 0)
}

func (s *ShowGlobalInfoClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowGlobalInfoClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowGlobalInfoClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowGlobalInfoClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ShowGlobalInfoClause() (localctx IShowGlobalInfoClauseContext) {
	localctx = NewShowGlobalInfoClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, MySqlParserRULE_showGlobalInfoClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5169)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserENGINES, MySqlParserSTORAGE:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5153)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSTORAGE {
			{
				p.SetState(5152)
				p.Match(MySqlParserSTORAGE)
			}

		}
		{
			p.SetState(5155)
			p.Match(MySqlParserENGINES)
		}

	case MySqlParserMASTER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5156)
			p.Match(MySqlParserMASTER)
		}
		{
			p.SetState(5157)
			p.Match(MySqlParserSTATUS)
		}

	case MySqlParserPLUGINS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5158)
			p.Match(MySqlParserPLUGINS)
		}

	case MySqlParserPRIVILEGES:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5159)
			p.Match(MySqlParserPRIVILEGES)
		}

	case MySqlParserFULL, MySqlParserPROCESSLIST:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(5161)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFULL {
			{
				p.SetState(5160)
				p.Match(MySqlParserFULL)
			}

		}
		{
			p.SetState(5163)
			p.Match(MySqlParserPROCESSLIST)
		}

	case MySqlParserPROFILES:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5164)
			p.Match(MySqlParserPROFILES)
		}

	case MySqlParserSLAVE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5165)
			p.Match(MySqlParserSLAVE)
		}
		{
			p.SetState(5166)
			p.Match(MySqlParserHOSTS)
		}

	case MySqlParserAUTHORS:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5167)
			p.Match(MySqlParserAUTHORS)
		}

	case MySqlParserCONTRIBUTORS:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5168)
			p.Match(MySqlParserCONTRIBUTORS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowSchemaEntityContext is an interface to support dynamic dispatch.
type IShowSchemaEntityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowSchemaEntityContext differentiates from other interfaces.
	IsShowSchemaEntityContext()
}

type ShowSchemaEntityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowSchemaEntityContext() *ShowSchemaEntityContext {
	var p = new(ShowSchemaEntityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_showSchemaEntity
	return p
}

func (*ShowSchemaEntityContext) IsShowSchemaEntityContext() {}

func NewShowSchemaEntityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowSchemaEntityContext {
	var p = new(ShowSchemaEntityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_showSchemaEntity

	return p
}

func (s *ShowSchemaEntityContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowSchemaEntityContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENTS, 0)
}

func (s *ShowSchemaEntityContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *ShowSchemaEntityContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowSchemaEntityContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *ShowSchemaEntityContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *ShowSchemaEntityContext) TRIGGERS() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGERS, 0)
}

func (s *ShowSchemaEntityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowSchemaEntityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowSchemaEntityContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowSchemaEntity(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ShowSchemaEntity() (localctx IShowSchemaEntityContext) {
	localctx = NewShowSchemaEntityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, MySqlParserRULE_showSchemaEntity)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5179)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserEVENTS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5171)
			p.Match(MySqlParserEVENTS)
		}

	case MySqlParserTABLE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5172)
			p.Match(MySqlParserTABLE)
		}
		{
			p.SetState(5173)
			p.Match(MySqlParserSTATUS)
		}

	case MySqlParserFULL, MySqlParserTABLES:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(5175)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFULL {
			{
				p.SetState(5174)
				p.Match(MySqlParserFULL)
			}

		}
		{
			p.SetState(5177)
			p.Match(MySqlParserTABLES)
		}

	case MySqlParserTRIGGERS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5178)
			p.Match(MySqlParserTRIGGERS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShowProfileTypeContext is an interface to support dynamic dispatch.
type IShowProfileTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShowProfileTypeContext differentiates from other interfaces.
	IsShowProfileTypeContext()
}

type ShowProfileTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShowProfileTypeContext() *ShowProfileTypeContext {
	var p = new(ShowProfileTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_showProfileType
	return p
}

func (*ShowProfileTypeContext) IsShowProfileTypeContext() {}

func NewShowProfileTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShowProfileTypeContext {
	var p = new(ShowProfileTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_showProfileType

	return p
}

func (s *ShowProfileTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ShowProfileTypeContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *ShowProfileTypeContext) BLOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserBLOCK, 0)
}

func (s *ShowProfileTypeContext) IO() antlr.TerminalNode {
	return s.GetToken(MySqlParserIO, 0)
}

func (s *ShowProfileTypeContext) CONTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTEXT, 0)
}

func (s *ShowProfileTypeContext) SWITCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserSWITCHES, 0)
}

func (s *ShowProfileTypeContext) CPU() antlr.TerminalNode {
	return s.GetToken(MySqlParserCPU, 0)
}

func (s *ShowProfileTypeContext) IPC() antlr.TerminalNode {
	return s.GetToken(MySqlParserIPC, 0)
}

func (s *ShowProfileTypeContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *ShowProfileTypeContext) PAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPAGE, 0)
}

func (s *ShowProfileTypeContext) FAULTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFAULTS, 0)
}

func (s *ShowProfileTypeContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOURCE, 0)
}

func (s *ShowProfileTypeContext) SWAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSWAPS, 0)
}

func (s *ShowProfileTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowProfileTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShowProfileTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowProfileType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ShowProfileType() (localctx IShowProfileTypeContext) {
	localctx = NewShowProfileTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, MySqlParserRULE_showProfileType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5193)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5181)
			p.Match(MySqlParserALL)
		}

	case MySqlParserBLOCK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5182)
			p.Match(MySqlParserBLOCK)
		}
		{
			p.SetState(5183)
			p.Match(MySqlParserIO)
		}

	case MySqlParserCONTEXT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5184)
			p.Match(MySqlParserCONTEXT)
		}
		{
			p.SetState(5185)
			p.Match(MySqlParserSWITCHES)
		}

	case MySqlParserCPU:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5186)
			p.Match(MySqlParserCPU)
		}

	case MySqlParserIPC:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5187)
			p.Match(MySqlParserIPC)
		}

	case MySqlParserMEMORY:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5188)
			p.Match(MySqlParserMEMORY)
		}

	case MySqlParserPAGE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5189)
			p.Match(MySqlParserPAGE)
		}
		{
			p.SetState(5190)
			p.Match(MySqlParserFAULTS)
		}

	case MySqlParserSOURCE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5191)
			p.Match(MySqlParserSOURCE)
		}

	case MySqlParserSWAPS:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5192)
			p.Match(MySqlParserSWAPS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBinlogStatementContext is an interface to support dynamic dispatch.
type IBinlogStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinlogStatementContext differentiates from other interfaces.
	IsBinlogStatementContext()
}

type BinlogStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinlogStatementContext() *BinlogStatementContext {
	var p = new(BinlogStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_binlogStatement
	return p
}

func (*BinlogStatementContext) IsBinlogStatementContext() {}

func NewBinlogStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinlogStatementContext {
	var p = new(BinlogStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_binlogStatement

	return p
}

func (s *BinlogStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BinlogStatementContext) BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG, 0)
}

func (s *BinlogStatementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *BinlogStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinlogStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinlogStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBinlogStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) BinlogStatement() (localctx IBinlogStatementContext) {
	localctx = NewBinlogStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, MySqlParserRULE_binlogStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5195)
		p.Match(MySqlParserBINLOG)
	}
	{
		p.SetState(5196)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// ICacheIndexStatementContext is an interface to support dynamic dispatch.
type ICacheIndexStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema returns the schema rule contexts.
	GetSchema() IUidContext

	// SetSchema sets the schema rule contexts.
	SetSchema(IUidContext)

	// IsCacheIndexStatementContext differentiates from other interfaces.
	IsCacheIndexStatementContext()
}

type CacheIndexStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	schema IUidContext
}

func NewEmptyCacheIndexStatementContext() *CacheIndexStatementContext {
	var p = new(CacheIndexStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_cacheIndexStatement
	return p
}

func (*CacheIndexStatementContext) IsCacheIndexStatementContext() {}

func NewCacheIndexStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CacheIndexStatementContext {
	var p = new(CacheIndexStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_cacheIndexStatement

	return p
}

func (s *CacheIndexStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CacheIndexStatementContext) GetSchema() IUidContext { return s.schema }

func (s *CacheIndexStatementContext) SetSchema(v IUidContext) { s.schema = v }

func (s *CacheIndexStatementContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *CacheIndexStatementContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *CacheIndexStatementContext) AllTableIndexes() []ITableIndexesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableIndexesContext)(nil)).Elem())
	var tst = make([]ITableIndexesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableIndexesContext)
		}
	}

	return tst
}

func (s *CacheIndexStatementContext) TableIndexes(i int) ITableIndexesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableIndexesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableIndexesContext)
}

func (s *CacheIndexStatementContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *CacheIndexStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CacheIndexStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CacheIndexStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CacheIndexStatementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *CacheIndexStatementContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CacheIndexStatementContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CacheIndexStatementContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *CacheIndexStatementContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *CacheIndexStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CacheIndexStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CacheIndexStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCacheIndexStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CacheIndexStatement() (localctx ICacheIndexStatementContext) {
	localctx = NewCacheIndexStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, MySqlParserRULE_cacheIndexStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5198)
		p.Match(MySqlParserCACHE)
	}
	{
		p.SetState(5199)
		p.Match(MySqlParserINDEX)
	}
	{
		p.SetState(5200)
		p.TableIndexes()
	}
	p.SetState(5205)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5201)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5202)
			p.TableIndexes()
		}

		p.SetState(5207)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(5215)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(5208)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(5209)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5212)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(5210)
				p.UidList()
			}

		case MySqlParserALL:
			{
				p.SetState(5211)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(5214)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	{
		p.SetState(5217)
		p.Match(MySqlParserIN)
	}
	{
		p.SetState(5218)

		var _x = p.Uid()

		localctx.(*CacheIndexStatementContext).schema = _x
	}

	return localctx
}

// IFlushStatementContext is an interface to support dynamic dispatch.
type IFlushStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFlushFormat returns the flushFormat token.
	GetFlushFormat() antlr.Token

	// SetFlushFormat sets the flushFormat token.
	SetFlushFormat(antlr.Token)

	// IsFlushStatementContext differentiates from other interfaces.
	IsFlushStatementContext()
}

type FlushStatementContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	flushFormat antlr.Token
}

func NewEmptyFlushStatementContext() *FlushStatementContext {
	var p = new(FlushStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_flushStatement
	return p
}

func (*FlushStatementContext) IsFlushStatementContext() {}

func NewFlushStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FlushStatementContext {
	var p = new(FlushStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_flushStatement

	return p
}

func (s *FlushStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FlushStatementContext) GetFlushFormat() antlr.Token { return s.flushFormat }

func (s *FlushStatementContext) SetFlushFormat(v antlr.Token) { s.flushFormat = v }

func (s *FlushStatementContext) FLUSH() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLUSH, 0)
}

func (s *FlushStatementContext) AllFlushOption() []IFlushOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFlushOptionContext)(nil)).Elem())
	var tst = make([]IFlushOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFlushOptionContext)
		}
	}

	return tst
}

func (s *FlushStatementContext) FlushOption(i int) IFlushOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFlushOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFlushOptionContext)
}

func (s *FlushStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *FlushStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *FlushStatementContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO_WRITE_TO_BINLOG, 0)
}

func (s *FlushStatementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *FlushStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FlushStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FlushStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFlushStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) FlushStatement() (localctx IFlushStatementContext) {
	localctx = NewFlushStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, MySqlParserRULE_flushStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5220)
		p.Match(MySqlParserFLUSH)
	}
	p.SetState(5222)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL {
		{
			p.SetState(5221)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*FlushStatementContext).flushFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*FlushStatementContext).flushFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(5224)
		p.FlushOption()
	}
	p.SetState(5229)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5225)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5226)
			p.FlushOption()
		}

		p.SetState(5231)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IKillStatementContext is an interface to support dynamic dispatch.
type IKillStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConnectionFormat returns the connectionFormat token.
	GetConnectionFormat() antlr.Token

	// SetConnectionFormat sets the connectionFormat token.
	SetConnectionFormat(antlr.Token)

	// IsKillStatementContext differentiates from other interfaces.
	IsKillStatementContext()
}

type KillStatementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	connectionFormat antlr.Token
}

func NewEmptyKillStatementContext() *KillStatementContext {
	var p = new(KillStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_killStatement
	return p
}

func (*KillStatementContext) IsKillStatementContext() {}

func NewKillStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KillStatementContext {
	var p = new(KillStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_killStatement

	return p
}

func (s *KillStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *KillStatementContext) GetConnectionFormat() antlr.Token { return s.connectionFormat }

func (s *KillStatementContext) SetConnectionFormat(v antlr.Token) { s.connectionFormat = v }

func (s *KillStatementContext) KILL() antlr.TerminalNode {
	return s.GetToken(MySqlParserKILL, 0)
}

func (s *KillStatementContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *KillStatementContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *KillStatementContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION, 0)
}

func (s *KillStatementContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *KillStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KillStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KillStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitKillStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) KillStatement() (localctx IKillStatementContext) {
	localctx = NewKillStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, MySqlParserRULE_killStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5232)
		p.Match(MySqlParserKILL)
	}
	p.SetState(5234)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCONNECTION || _la == MySqlParserQUERY {
		{
			p.SetState(5233)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*KillStatementContext).connectionFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCONNECTION || _la == MySqlParserQUERY) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*KillStatementContext).connectionFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(5237)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-1066)&-(0x1f+1)) == 0 && ((1<<uint((_la-1066)))&((1<<(MySqlParserZERO_DECIMAL-1066))|(1<<(MySqlParserONE_DECIMAL-1066))|(1<<(MySqlParserTWO_DECIMAL-1066))|(1<<(MySqlParserDECIMAL_LITERAL-1066)))) != 0) {
		{
			p.SetState(5236)
			p.DecimalLiteral()
		}

		p.SetState(5239)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILoadIndexIntoCacheContext is an interface to support dynamic dispatch.
type ILoadIndexIntoCacheContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoadIndexIntoCacheContext differentiates from other interfaces.
	IsLoadIndexIntoCacheContext()
}

type LoadIndexIntoCacheContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoadIndexIntoCacheContext() *LoadIndexIntoCacheContext {
	var p = new(LoadIndexIntoCacheContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_loadIndexIntoCache
	return p
}

func (*LoadIndexIntoCacheContext) IsLoadIndexIntoCacheContext() {}

func NewLoadIndexIntoCacheContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadIndexIntoCacheContext {
	var p = new(LoadIndexIntoCacheContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_loadIndexIntoCache

	return p
}

func (s *LoadIndexIntoCacheContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadIndexIntoCacheContext) LOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOAD, 0)
}

func (s *LoadIndexIntoCacheContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *LoadIndexIntoCacheContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *LoadIndexIntoCacheContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *LoadIndexIntoCacheContext) AllLoadedTableIndexes() []ILoadedTableIndexesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILoadedTableIndexesContext)(nil)).Elem())
	var tst = make([]ILoadedTableIndexesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILoadedTableIndexesContext)
		}
	}

	return tst
}

func (s *LoadIndexIntoCacheContext) LoadedTableIndexes(i int) ILoadedTableIndexesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoadedTableIndexesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILoadedTableIndexesContext)
}

func (s *LoadIndexIntoCacheContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *LoadIndexIntoCacheContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *LoadIndexIntoCacheContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadIndexIntoCacheContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadIndexIntoCacheContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLoadIndexIntoCache(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LoadIndexIntoCache() (localctx ILoadIndexIntoCacheContext) {
	localctx = NewLoadIndexIntoCacheContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, MySqlParserRULE_loadIndexIntoCache)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5241)
		p.Match(MySqlParserLOAD)
	}
	{
		p.SetState(5242)
		p.Match(MySqlParserINDEX)
	}
	{
		p.SetState(5243)
		p.Match(MySqlParserINTO)
	}
	{
		p.SetState(5244)
		p.Match(MySqlParserCACHE)
	}
	{
		p.SetState(5245)
		p.LoadedTableIndexes()
	}
	p.SetState(5250)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5246)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5247)
			p.LoadedTableIndexes()
		}

		p.SetState(5252)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IResetStatementContext is an interface to support dynamic dispatch.
type IResetStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResetStatementContext differentiates from other interfaces.
	IsResetStatementContext()
}

type ResetStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResetStatementContext() *ResetStatementContext {
	var p = new(ResetStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_resetStatement
	return p
}

func (*ResetStatementContext) IsResetStatementContext() {}

func NewResetStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResetStatementContext {
	var p = new(ResetStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_resetStatement

	return p
}

func (s *ResetStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ResetStatementContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESET, 0)
}

func (s *ResetStatementContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *ResetStatementContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *ResetStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResetStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResetStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitResetStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ResetStatement() (localctx IResetStatementContext) {
	localctx = NewResetStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, MySqlParserRULE_resetStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5253)
		p.Match(MySqlParserRESET)
	}
	{
		p.SetState(5254)
		p.Match(MySqlParserQUERY)
	}
	{
		p.SetState(5255)
		p.Match(MySqlParserCACHE)
	}

	return localctx
}

// IShutdownStatementContext is an interface to support dynamic dispatch.
type IShutdownStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShutdownStatementContext differentiates from other interfaces.
	IsShutdownStatementContext()
}

type ShutdownStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShutdownStatementContext() *ShutdownStatementContext {
	var p = new(ShutdownStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_shutdownStatement
	return p
}

func (*ShutdownStatementContext) IsShutdownStatementContext() {}

func NewShutdownStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShutdownStatementContext {
	var p = new(ShutdownStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_shutdownStatement

	return p
}

func (s *ShutdownStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ShutdownStatementContext) SHUTDOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHUTDOWN, 0)
}

func (s *ShutdownStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShutdownStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShutdownStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShutdownStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ShutdownStatement() (localctx IShutdownStatementContext) {
	localctx = NewShutdownStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 470, MySqlParserRULE_shutdownStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5257)
		p.Match(MySqlParserSHUTDOWN)
	}

	return localctx
}

// ITableIndexesContext is an interface to support dynamic dispatch.
type ITableIndexesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndexFormat returns the indexFormat token.
	GetIndexFormat() antlr.Token

	// SetIndexFormat sets the indexFormat token.
	SetIndexFormat(antlr.Token)

	// IsTableIndexesContext differentiates from other interfaces.
	IsTableIndexesContext()
}

type TableIndexesContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	indexFormat antlr.Token
}

func NewEmptyTableIndexesContext() *TableIndexesContext {
	var p = new(TableIndexesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableIndexes
	return p
}

func (*TableIndexesContext) IsTableIndexesContext() {}

func NewTableIndexesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableIndexesContext {
	var p = new(TableIndexesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableIndexes

	return p
}

func (s *TableIndexesContext) GetParser() antlr.Parser { return s.parser }

func (s *TableIndexesContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *TableIndexesContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *TableIndexesContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TableIndexesContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *TableIndexesContext) UidList() IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *TableIndexesContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *TableIndexesContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *TableIndexesContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *TableIndexesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableIndexesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableIndexesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableIndexes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TableIndexes() (localctx ITableIndexesContext) {
	localctx = NewTableIndexesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 472, MySqlParserRULE_tableIndexes)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5259)
		p.TableName()
	}
	p.SetState(5267)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINDEX || _la == MySqlParserKEY || _la == MySqlParserLR_BRACKET {
		p.SetState(5261)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			{
				p.SetState(5260)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*TableIndexesContext).indexFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*TableIndexesContext).indexFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(5263)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5264)
			p.UidList()
		}
		{
			p.SetState(5265)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IFlushOptionContext is an interface to support dynamic dispatch.
type IFlushOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFlushOptionContext differentiates from other interfaces.
	IsFlushOptionContext()
}

type FlushOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFlushOptionContext() *FlushOptionContext {
	var p = new(FlushOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_flushOption
	return p
}

func (*FlushOptionContext) IsFlushOptionContext() {}

func NewFlushOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FlushOptionContext {
	var p = new(FlushOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_flushOption

	return p
}

func (s *FlushOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *FlushOptionContext) CopyFrom(ctx *FlushOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *FlushOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FlushOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TableFlushOptionContext struct {
	*FlushOptionContext
}

func NewTableFlushOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableFlushOptionContext {
	var p = new(TableFlushOptionContext)

	p.FlushOptionContext = NewEmptyFlushOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FlushOptionContext))

	return p
}

func (s *TableFlushOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableFlushOptionContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *TableFlushOptionContext) Tables() ITablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITablesContext)
}

func (s *TableFlushOptionContext) FlushTableOption() IFlushTableOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFlushTableOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFlushTableOptionContext)
}

func (s *TableFlushOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableFlushOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type ChannelFlushOptionContext struct {
	*FlushOptionContext
}

func NewChannelFlushOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ChannelFlushOptionContext {
	var p = new(ChannelFlushOptionContext)

	p.FlushOptionContext = NewEmptyFlushOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FlushOptionContext))

	return p
}

func (s *ChannelFlushOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChannelFlushOptionContext) RELAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY, 0)
}

func (s *ChannelFlushOptionContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *ChannelFlushOptionContext) ChannelOption() IChannelOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelOptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelOptionContext)
}

func (s *ChannelFlushOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitChannelFlushOption(s)

	default:
		return t.VisitChildren(s)
	}
}

type SimpleFlushOptionContext struct {
	*FlushOptionContext
}

func NewSimpleFlushOptionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleFlushOptionContext {
	var p = new(SimpleFlushOptionContext)

	p.FlushOptionContext = NewEmptyFlushOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FlushOptionContext))

	return p
}

func (s *SimpleFlushOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleFlushOptionContext) DES_KEY_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDES_KEY_FILE, 0)
}

func (s *SimpleFlushOptionContext) HOSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOSTS, 0)
}

func (s *SimpleFlushOptionContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *SimpleFlushOptionContext) OPTIMIZER_COSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIMIZER_COSTS, 0)
}

func (s *SimpleFlushOptionContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *SimpleFlushOptionContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *SimpleFlushOptionContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *SimpleFlushOptionContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *SimpleFlushOptionContext) USER_RESOURCES() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER_RESOURCES, 0)
}

func (s *SimpleFlushOptionContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *SimpleFlushOptionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *SimpleFlushOptionContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *SimpleFlushOptionContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *SimpleFlushOptionContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *SimpleFlushOptionContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *SimpleFlushOptionContext) ERROR() antlr.TerminalNode {
	return s.GetToken(MySqlParserERROR, 0)
}

func (s *SimpleFlushOptionContext) GENERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGENERAL, 0)
}

func (s *SimpleFlushOptionContext) RELAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY, 0)
}

func (s *SimpleFlushOptionContext) SLOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLOW, 0)
}

func (s *SimpleFlushOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimpleFlushOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) FlushOption() (localctx IFlushOptionContext) {
	localctx = NewFlushOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 474, MySqlParserRULE_flushOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5299)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 759, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSimpleFlushOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5287)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserDES_KEY_FILE:
			{
				p.SetState(5269)
				p.Match(MySqlParserDES_KEY_FILE)
			}

		case MySqlParserHOSTS:
			{
				p.SetState(5270)
				p.Match(MySqlParserHOSTS)
			}

		case MySqlParserBINARY, MySqlParserENGINE, MySqlParserERROR, MySqlParserGENERAL, MySqlParserLOGS, MySqlParserRELAY, MySqlParserSLOW:
			p.SetState(5272)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserBINARY || (((_la-374)&-(0x1f+1)) == 0 && ((1<<uint((_la-374)))&((1<<(MySqlParserENGINE-374))|(1<<(MySqlParserERROR-374))|(1<<(MySqlParserGENERAL-374)))) != 0) || _la == MySqlParserRELAY || _la == MySqlParserSLOW {
				{
					p.SetState(5271)
					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserBINARY || (((_la-374)&-(0x1f+1)) == 0 && ((1<<uint((_la-374)))&((1<<(MySqlParserENGINE-374))|(1<<(MySqlParserERROR-374))|(1<<(MySqlParserGENERAL-374)))) != 0) || _la == MySqlParserRELAY || _la == MySqlParserSLOW) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}
			{
				p.SetState(5274)
				p.Match(MySqlParserLOGS)
			}

		case MySqlParserOPTIMIZER_COSTS:
			{
				p.SetState(5275)
				p.Match(MySqlParserOPTIMIZER_COSTS)
			}

		case MySqlParserPRIVILEGES:
			{
				p.SetState(5276)
				p.Match(MySqlParserPRIVILEGES)
			}

		case MySqlParserQUERY:
			{
				p.SetState(5277)
				p.Match(MySqlParserQUERY)
			}
			{
				p.SetState(5278)
				p.Match(MySqlParserCACHE)
			}

		case MySqlParserSTATUS:
			{
				p.SetState(5279)
				p.Match(MySqlParserSTATUS)
			}

		case MySqlParserUSER_RESOURCES:
			{
				p.SetState(5280)
				p.Match(MySqlParserUSER_RESOURCES)
			}

		case MySqlParserTABLES:
			{
				p.SetState(5281)
				p.Match(MySqlParserTABLES)
			}
			p.SetState(5285)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserWITH {
				{
					p.SetState(5282)
					p.Match(MySqlParserWITH)
				}
				{
					p.SetState(5283)
					p.Match(MySqlParserREAD)
				}
				{
					p.SetState(5284)
					p.Match(MySqlParserLOCK)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		localctx = NewChannelFlushOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5289)
			p.Match(MySqlParserRELAY)
		}
		{
			p.SetState(5290)
			p.Match(MySqlParserLOGS)
		}
		p.SetState(5292)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(5291)
				p.ChannelOption()
			}

		}

	case 3:
		localctx = NewTableFlushOptionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5294)
			p.Match(MySqlParserTABLES)
		}
		{
			p.SetState(5295)
			p.Tables()
		}
		p.SetState(5297)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR || _la == MySqlParserWITH {
			{
				p.SetState(5296)
				p.FlushTableOption()
			}

		}

	}

	return localctx
}

// IFlushTableOptionContext is an interface to support dynamic dispatch.
type IFlushTableOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFlushTableOptionContext differentiates from other interfaces.
	IsFlushTableOptionContext()
}

type FlushTableOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFlushTableOptionContext() *FlushTableOptionContext {
	var p = new(FlushTableOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_flushTableOption
	return p
}

func (*FlushTableOptionContext) IsFlushTableOptionContext() {}

func NewFlushTableOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FlushTableOptionContext {
	var p = new(FlushTableOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_flushTableOption

	return p
}

func (s *FlushTableOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *FlushTableOptionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *FlushTableOptionContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *FlushTableOptionContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *FlushTableOptionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *FlushTableOptionContext) EXPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPORT, 0)
}

func (s *FlushTableOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FlushTableOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FlushTableOptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFlushTableOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) FlushTableOption() (localctx IFlushTableOptionContext) {
	localctx = NewFlushTableOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 476, MySqlParserRULE_flushTableOption)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5306)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserWITH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5301)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(5302)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(5303)
			p.Match(MySqlParserLOCK)
		}

	case MySqlParserFOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5304)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(5305)
			p.Match(MySqlParserEXPORT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILoadedTableIndexesContext is an interface to support dynamic dispatch.
type ILoadedTableIndexesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndexFormat returns the indexFormat token.
	GetIndexFormat() antlr.Token

	// SetIndexFormat sets the indexFormat token.
	SetIndexFormat(antlr.Token)

	// GetPartitionList returns the partitionList rule contexts.
	GetPartitionList() IUidListContext

	// GetIndexList returns the indexList rule contexts.
	GetIndexList() IUidListContext

	// SetPartitionList sets the partitionList rule contexts.
	SetPartitionList(IUidListContext)

	// SetIndexList sets the indexList rule contexts.
	SetIndexList(IUidListContext)

	// IsLoadedTableIndexesContext differentiates from other interfaces.
	IsLoadedTableIndexesContext()
}

type LoadedTableIndexesContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	partitionList IUidListContext
	indexFormat   antlr.Token
	indexList     IUidListContext
}

func NewEmptyLoadedTableIndexesContext() *LoadedTableIndexesContext {
	var p = new(LoadedTableIndexesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_loadedTableIndexes
	return p
}

func (*LoadedTableIndexesContext) IsLoadedTableIndexesContext() {}

func NewLoadedTableIndexesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoadedTableIndexesContext {
	var p = new(LoadedTableIndexesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_loadedTableIndexes

	return p
}

func (s *LoadedTableIndexesContext) GetParser() antlr.Parser { return s.parser }

func (s *LoadedTableIndexesContext) GetIndexFormat() antlr.Token { return s.indexFormat }

func (s *LoadedTableIndexesContext) SetIndexFormat(v antlr.Token) { s.indexFormat = v }

func (s *LoadedTableIndexesContext) GetPartitionList() IUidListContext { return s.partitionList }

func (s *LoadedTableIndexesContext) GetIndexList() IUidListContext { return s.indexList }

func (s *LoadedTableIndexesContext) SetPartitionList(v IUidListContext) { s.partitionList = v }

func (s *LoadedTableIndexesContext) SetIndexList(v IUidListContext) { s.indexList = v }

func (s *LoadedTableIndexesContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *LoadedTableIndexesContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *LoadedTableIndexesContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *LoadedTableIndexesContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *LoadedTableIndexesContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *LoadedTableIndexesContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *LoadedTableIndexesContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *LoadedTableIndexesContext) LEAVES() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEAVES, 0)
}

func (s *LoadedTableIndexesContext) AllUidList() []IUidListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidListContext)(nil)).Elem())
	var tst = make([]IUidListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidListContext)
		}
	}

	return tst
}

func (s *LoadedTableIndexesContext) UidList(i int) IUidListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidListContext)
}

func (s *LoadedTableIndexesContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *LoadedTableIndexesContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *LoadedTableIndexesContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *LoadedTableIndexesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoadedTableIndexesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoadedTableIndexesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLoadedTableIndexes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LoadedTableIndexes() (localctx ILoadedTableIndexesContext) {
	localctx = NewLoadedTableIndexesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 478, MySqlParserRULE_loadedTableIndexes)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5308)
		p.TableName()
	}
	p.SetState(5316)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(5309)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(5310)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5313)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(5311)

				var _x = p.UidList()

				localctx.(*LoadedTableIndexesContext).partitionList = _x
			}

		case MySqlParserALL:
			{
				p.SetState(5312)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(5315)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(5325)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 764, p.GetParserRuleContext()) == 1 {
		p.SetState(5319)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			{
				p.SetState(5318)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*LoadedTableIndexesContext).indexFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*LoadedTableIndexesContext).indexFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(5321)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5322)

			var _x = p.UidList()

			localctx.(*LoadedTableIndexesContext).indexList = _x
		}
		{
			p.SetState(5323)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(5329)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(5327)
			p.Match(MySqlParserIGNORE)
		}
		{
			p.SetState(5328)
			p.Match(MySqlParserLEAVES)
		}

	}

	return localctx
}

// ISimpleDescribeStatementContext is an interface to support dynamic dispatch.
type ISimpleDescribeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCommand returns the command token.
	GetCommand() antlr.Token

	// GetPattern returns the pattern token.
	GetPattern() antlr.Token

	// SetCommand sets the command token.
	SetCommand(antlr.Token)

	// SetPattern sets the pattern token.
	SetPattern(antlr.Token)

	// GetColumn returns the column rule contexts.
	GetColumn() IUidContext

	// SetColumn sets the column rule contexts.
	SetColumn(IUidContext)

	// IsSimpleDescribeStatementContext differentiates from other interfaces.
	IsSimpleDescribeStatementContext()
}

type SimpleDescribeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	command antlr.Token
	column  IUidContext
	pattern antlr.Token
}

func NewEmptySimpleDescribeStatementContext() *SimpleDescribeStatementContext {
	var p = new(SimpleDescribeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_simpleDescribeStatement
	return p
}

func (*SimpleDescribeStatementContext) IsSimpleDescribeStatementContext() {}

func NewSimpleDescribeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleDescribeStatementContext {
	var p = new(SimpleDescribeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_simpleDescribeStatement

	return p
}

func (s *SimpleDescribeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleDescribeStatementContext) GetCommand() antlr.Token { return s.command }

func (s *SimpleDescribeStatementContext) GetPattern() antlr.Token { return s.pattern }

func (s *SimpleDescribeStatementContext) SetCommand(v antlr.Token) { s.command = v }

func (s *SimpleDescribeStatementContext) SetPattern(v antlr.Token) { s.pattern = v }

func (s *SimpleDescribeStatementContext) GetColumn() IUidContext { return s.column }

func (s *SimpleDescribeStatementContext) SetColumn(v IUidContext) { s.column = v }

func (s *SimpleDescribeStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *SimpleDescribeStatementContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPLAIN, 0)
}

func (s *SimpleDescribeStatementContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESCRIBE, 0)
}

func (s *SimpleDescribeStatementContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *SimpleDescribeStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *SimpleDescribeStatementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *SimpleDescribeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleDescribeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleDescribeStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimpleDescribeStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SimpleDescribeStatement() (localctx ISimpleDescribeStatementContext) {
	localctx = NewSimpleDescribeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 480, MySqlParserRULE_simpleDescribeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5331)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SimpleDescribeStatementContext).command = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-41)&-(0x1f+1)) == 0 && ((1<<uint((_la-41)))&((1<<(MySqlParserDESC-41))|(1<<(MySqlParserDESCRIBE-41))|(1<<(MySqlParserEXPLAIN-41)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SimpleDescribeStatementContext).command = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5332)
		p.TableName()
	}
	p.SetState(5335)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 766, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5333)

			var _x = p.Uid()

			localctx.(*SimpleDescribeStatementContext).column = _x
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 766, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(5334)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SimpleDescribeStatementContext).pattern = _m
		}

	}

	return localctx
}

// IFullDescribeStatementContext is an interface to support dynamic dispatch.
type IFullDescribeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCommand returns the command token.
	GetCommand() antlr.Token

	// GetFormatType returns the formatType token.
	GetFormatType() antlr.Token

	// GetFormatValue returns the formatValue token.
	GetFormatValue() antlr.Token

	// SetCommand sets the command token.
	SetCommand(antlr.Token)

	// SetFormatType sets the formatType token.
	SetFormatType(antlr.Token)

	// SetFormatValue sets the formatValue token.
	SetFormatValue(antlr.Token)

	// IsFullDescribeStatementContext differentiates from other interfaces.
	IsFullDescribeStatementContext()
}

type FullDescribeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	command     antlr.Token
	formatType  antlr.Token
	formatValue antlr.Token
}

func NewEmptyFullDescribeStatementContext() *FullDescribeStatementContext {
	var p = new(FullDescribeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_fullDescribeStatement
	return p
}

func (*FullDescribeStatementContext) IsFullDescribeStatementContext() {}

func NewFullDescribeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FullDescribeStatementContext {
	var p = new(FullDescribeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_fullDescribeStatement

	return p
}

func (s *FullDescribeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FullDescribeStatementContext) GetCommand() antlr.Token { return s.command }

func (s *FullDescribeStatementContext) GetFormatType() antlr.Token { return s.formatType }

func (s *FullDescribeStatementContext) GetFormatValue() antlr.Token { return s.formatValue }

func (s *FullDescribeStatementContext) SetCommand(v antlr.Token) { s.command = v }

func (s *FullDescribeStatementContext) SetFormatType(v antlr.Token) { s.formatType = v }

func (s *FullDescribeStatementContext) SetFormatValue(v antlr.Token) { s.formatValue = v }

func (s *FullDescribeStatementContext) DescribeObjectClause() IDescribeObjectClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescribeObjectClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescribeObjectClauseContext)
}

func (s *FullDescribeStatementContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPLAIN, 0)
}

func (s *FullDescribeStatementContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESCRIBE, 0)
}

func (s *FullDescribeStatementContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *FullDescribeStatementContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *FullDescribeStatementContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *FullDescribeStatementContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONS, 0)
}

func (s *FullDescribeStatementContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFORMAT, 0)
}

func (s *FullDescribeStatementContext) TRADITIONAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRADITIONAL, 0)
}

func (s *FullDescribeStatementContext) JSON() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON, 0)
}

func (s *FullDescribeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FullDescribeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FullDescribeStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFullDescribeStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) FullDescribeStatement() (localctx IFullDescribeStatementContext) {
	localctx = NewFullDescribeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 482, MySqlParserRULE_fullDescribeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5337)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*FullDescribeStatementContext).command = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-41)&-(0x1f+1)) == 0 && ((1<<uint((_la-41)))&((1<<(MySqlParserDESC-41))|(1<<(MySqlParserDESCRIBE-41))|(1<<(MySqlParserEXPLAIN-41)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*FullDescribeStatementContext).command = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(5341)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEXTENDED || _la == MySqlParserPARTITIONS || _la == MySqlParserFORMAT {
		{
			p.SetState(5338)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*FullDescribeStatementContext).formatType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserEXTENDED || _la == MySqlParserPARTITIONS || _la == MySqlParserFORMAT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*FullDescribeStatementContext).formatType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5339)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(5340)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*FullDescribeStatementContext).formatValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserJSON || _la == MySqlParserTRADITIONAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*FullDescribeStatementContext).formatValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(5343)
		p.DescribeObjectClause()
	}

	return localctx
}

// IHelpStatementContext is an interface to support dynamic dispatch.
type IHelpStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHelpStatementContext differentiates from other interfaces.
	IsHelpStatementContext()
}

type HelpStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHelpStatementContext() *HelpStatementContext {
	var p = new(HelpStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_helpStatement
	return p
}

func (*HelpStatementContext) IsHelpStatementContext() {}

func NewHelpStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HelpStatementContext {
	var p = new(HelpStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_helpStatement

	return p
}

func (s *HelpStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *HelpStatementContext) HELP() antlr.TerminalNode {
	return s.GetToken(MySqlParserHELP, 0)
}

func (s *HelpStatementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *HelpStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HelpStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HelpStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHelpStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) HelpStatement() (localctx IHelpStatementContext) {
	localctx = NewHelpStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 484, MySqlParserRULE_helpStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5345)
		p.Match(MySqlParserHELP)
	}
	{
		p.SetState(5346)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// IUseStatementContext is an interface to support dynamic dispatch.
type IUseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUseStatementContext differentiates from other interfaces.
	IsUseStatementContext()
}

type UseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUseStatementContext() *UseStatementContext {
	var p = new(UseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_useStatement
	return p
}

func (*UseStatementContext) IsUseStatementContext() {}

func NewUseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UseStatementContext {
	var p = new(UseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_useStatement

	return p
}

func (s *UseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UseStatementContext) USE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE, 0)
}

func (s *UseStatementContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *UseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UseStatement() (localctx IUseStatementContext) {
	localctx = NewUseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 486, MySqlParserRULE_useStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5348)
		p.Match(MySqlParserUSE)
	}
	{
		p.SetState(5349)
		p.Uid()
	}

	return localctx
}

// ISignalStatementContext is an interface to support dynamic dispatch.
type ISignalStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignalStatementContext differentiates from other interfaces.
	IsSignalStatementContext()
}

type SignalStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignalStatementContext() *SignalStatementContext {
	var p = new(SignalStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_signalStatement
	return p
}

func (*SignalStatementContext) IsSignalStatementContext() {}

func NewSignalStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignalStatementContext {
	var p = new(SignalStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_signalStatement

	return p
}

func (s *SignalStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SignalStatementContext) SIGNAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIGNAL, 0)
}

func (s *SignalStatementContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *SignalStatementContext) REVERSE_QUOTE_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE_QUOTE_ID, 0)
}

func (s *SignalStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SignalStatementContext) AllSignalConditionInformation() []ISignalConditionInformationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISignalConditionInformationContext)(nil)).Elem())
	var tst = make([]ISignalConditionInformationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISignalConditionInformationContext)
		}
	}

	return tst
}

func (s *SignalStatementContext) SignalConditionInformation(i int) ISignalConditionInformationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalConditionInformationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISignalConditionInformationContext)
}

func (s *SignalStatementContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLSTATE, 0)
}

func (s *SignalStatementContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *SignalStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SignalStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SignalStatementContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *SignalStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignalStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignalStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSignalStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SignalStatement() (localctx ISignalStatementContext) {
	localctx = NewSignalStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 488, MySqlParserRULE_signalStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5351)
		p.Match(MySqlParserSIGNAL)
	}
	p.SetState(5359)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSQLSTATE:
		{
			p.SetState(5352)
			p.Match(MySqlParserSQLSTATE)
		}
		p.SetState(5354)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVALUE {
			{
				p.SetState(5353)
				p.Match(MySqlParserVALUE)
			}

		}
		{
			p.SetState(5356)
			p.StringLiteral()
		}

	case MySqlParserID:
		{
			p.SetState(5357)
			p.Match(MySqlParserID)
		}

	case MySqlParserREVERSE_QUOTE_ID:
		{
			p.SetState(5358)
			p.Match(MySqlParserREVERSE_QUOTE_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(5370)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 771, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5361)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(5362)
			p.SignalConditionInformation()
		}
		p.SetState(5367)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5363)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5364)
				p.SignalConditionInformation()
			}

			p.SetState(5369)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IResignalStatementContext is an interface to support dynamic dispatch.
type IResignalStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResignalStatementContext differentiates from other interfaces.
	IsResignalStatementContext()
}

type ResignalStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResignalStatementContext() *ResignalStatementContext {
	var p = new(ResignalStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_resignalStatement
	return p
}

func (*ResignalStatementContext) IsResignalStatementContext() {}

func NewResignalStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResignalStatementContext {
	var p = new(ResignalStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_resignalStatement

	return p
}

func (s *ResignalStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ResignalStatementContext) RESIGNAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESIGNAL, 0)
}

func (s *ResignalStatementContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *ResignalStatementContext) REVERSE_QUOTE_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE_QUOTE_ID, 0)
}

func (s *ResignalStatementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *ResignalStatementContext) AllSignalConditionInformation() []ISignalConditionInformationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISignalConditionInformationContext)(nil)).Elem())
	var tst = make([]ISignalConditionInformationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISignalConditionInformationContext)
		}
	}

	return tst
}

func (s *ResignalStatementContext) SignalConditionInformation(i int) ISignalConditionInformationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignalConditionInformationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISignalConditionInformationContext)
}

func (s *ResignalStatementContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLSTATE, 0)
}

func (s *ResignalStatementContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *ResignalStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ResignalStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ResignalStatementContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *ResignalStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResignalStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResignalStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitResignalStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ResignalStatement() (localctx IResignalStatementContext) {
	localctx = NewResignalStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 490, MySqlParserRULE_resignalStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5372)
		p.Match(MySqlParserRESIGNAL)
	}
	p.SetState(5380)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSQLSTATE:
		{
			p.SetState(5373)
			p.Match(MySqlParserSQLSTATE)
		}
		p.SetState(5375)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVALUE {
			{
				p.SetState(5374)
				p.Match(MySqlParserVALUE)
			}

		}
		{
			p.SetState(5377)
			p.StringLiteral()
		}

	case MySqlParserID:
		{
			p.SetState(5378)
			p.Match(MySqlParserID)
		}

	case MySqlParserREVERSE_QUOTE_ID:
		{
			p.SetState(5379)
			p.Match(MySqlParserREVERSE_QUOTE_ID)
		}

	case MySqlParserEOF, MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGET, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserRESIGNAL, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserSIGNAL, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserMINUSMINUS, MySqlParserLR_BRACKET, MySqlParserSEMI:

	default:
	}
	p.SetState(5391)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 775, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5382)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(5383)
			p.SignalConditionInformation()
		}
		p.SetState(5388)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5384)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5385)
				p.SignalConditionInformation()
			}

			p.SetState(5390)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ISignalConditionInformationContext is an interface to support dynamic dispatch.
type ISignalConditionInformationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignalConditionInformationContext differentiates from other interfaces.
	IsSignalConditionInformationContext()
}

type SignalConditionInformationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignalConditionInformationContext() *SignalConditionInformationContext {
	var p = new(SignalConditionInformationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_signalConditionInformation
	return p
}

func (*SignalConditionInformationContext) IsSignalConditionInformationContext() {}

func NewSignalConditionInformationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignalConditionInformationContext {
	var p = new(SignalConditionInformationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_signalConditionInformation

	return p
}

func (s *SignalConditionInformationContext) GetParser() antlr.Parser { return s.parser }

func (s *SignalConditionInformationContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *SignalConditionInformationContext) CLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLASS_ORIGIN, 0)
}

func (s *SignalConditionInformationContext) SUBCLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBCLASS_ORIGIN, 0)
}

func (s *SignalConditionInformationContext) MESSAGE_TEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMESSAGE_TEXT, 0)
}

func (s *SignalConditionInformationContext) MYSQL_ERRNO() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYSQL_ERRNO, 0)
}

func (s *SignalConditionInformationContext) CONSTRAINT_CATALOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_CATALOG, 0)
}

func (s *SignalConditionInformationContext) CONSTRAINT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_SCHEMA, 0)
}

func (s *SignalConditionInformationContext) CONSTRAINT_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_NAME, 0)
}

func (s *SignalConditionInformationContext) CATALOG_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCATALOG_NAME, 0)
}

func (s *SignalConditionInformationContext) SCHEMA_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA_NAME, 0)
}

func (s *SignalConditionInformationContext) TABLE_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE_NAME, 0)
}

func (s *SignalConditionInformationContext) COLUMN_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN_NAME, 0)
}

func (s *SignalConditionInformationContext) CURSOR_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURSOR_NAME, 0)
}

func (s *SignalConditionInformationContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *SignalConditionInformationContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL_LITERAL, 0)
}

func (s *SignalConditionInformationContext) MysqlVariable() IMysqlVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMysqlVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMysqlVariableContext)
}

func (s *SignalConditionInformationContext) SimpleId() ISimpleIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdContext)
}

func (s *SignalConditionInformationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignalConditionInformationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignalConditionInformationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSignalConditionInformation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SignalConditionInformation() (localctx ISignalConditionInformationContext) {
	localctx = NewSignalConditionInformationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 492, MySqlParserRULE_signalConditionInformation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5393)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-329)&-(0x1f+1)) == 0 && ((1<<uint((_la-329)))&((1<<(MySqlParserCLASS_ORIGIN-329))|(1<<(MySqlParserCOLUMN_NAME-329))|(1<<(MySqlParserCONSTRAINT_CATALOG-329))|(1<<(MySqlParserCONSTRAINT_SCHEMA-329))|(1<<(MySqlParserCONSTRAINT_NAME-329))|(1<<(MySqlParserCURSOR_NAME-329)))) != 0) || _la == MySqlParserMESSAGE_TEXT || _la == MySqlParserMYSQL_ERRNO || _la == MySqlParserSUBCLASS_ORIGIN || _la == MySqlParserTABLE_NAME || _la == MySqlParserCATALOG_NAME || _la == MySqlParserSCHEMA_NAME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5394)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	p.SetState(5399)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 776, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5395)
			p.StringLiteral()
		}

	case 2:
		{
			p.SetState(5396)
			p.Match(MySqlParserDECIMAL_LITERAL)
		}

	case 3:
		{
			p.SetState(5397)
			p.MysqlVariable()
		}

	case 4:
		{
			p.SetState(5398)
			p.SimpleId()
		}

	}

	return localctx
}

// IDiagnosticsStatementContext is an interface to support dynamic dispatch.
type IDiagnosticsStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDiagnosticsStatementContext differentiates from other interfaces.
	IsDiagnosticsStatementContext()
}

type DiagnosticsStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDiagnosticsStatementContext() *DiagnosticsStatementContext {
	var p = new(DiagnosticsStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_diagnosticsStatement
	return p
}

func (*DiagnosticsStatementContext) IsDiagnosticsStatementContext() {}

func NewDiagnosticsStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DiagnosticsStatementContext {
	var p = new(DiagnosticsStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_diagnosticsStatement

	return p
}

func (s *DiagnosticsStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DiagnosticsStatementContext) GET() antlr.TerminalNode {
	return s.GetToken(MySqlParserGET, 0)
}

func (s *DiagnosticsStatementContext) DIAGNOSTICS() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIAGNOSTICS, 0)
}

func (s *DiagnosticsStatementContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT, 0)
}

func (s *DiagnosticsStatementContext) STACKED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTACKED, 0)
}

func (s *DiagnosticsStatementContext) AllVariableClause() []IVariableClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableClauseContext)(nil)).Elem())
	var tst = make([]IVariableClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableClauseContext)
		}
	}

	return tst
}

func (s *DiagnosticsStatementContext) VariableClause(i int) IVariableClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableClauseContext)
}

func (s *DiagnosticsStatementContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserEQUAL_SYMBOL)
}

func (s *DiagnosticsStatementContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, i)
}

func (s *DiagnosticsStatementContext) CONDITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONDITION, 0)
}

func (s *DiagnosticsStatementContext) AllDiagnosticsConditionInformationName() []IDiagnosticsConditionInformationNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDiagnosticsConditionInformationNameContext)(nil)).Elem())
	var tst = make([]IDiagnosticsConditionInformationNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDiagnosticsConditionInformationNameContext)
		}
	}

	return tst
}

func (s *DiagnosticsStatementContext) DiagnosticsConditionInformationName(i int) IDiagnosticsConditionInformationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDiagnosticsConditionInformationNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDiagnosticsConditionInformationNameContext)
}

func (s *DiagnosticsStatementContext) AllNUMBER() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNUMBER)
}

func (s *DiagnosticsStatementContext) NUMBER(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMBER, i)
}

func (s *DiagnosticsStatementContext) AllROW_COUNT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserROW_COUNT)
}

func (s *DiagnosticsStatementContext) ROW_COUNT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserROW_COUNT, i)
}

func (s *DiagnosticsStatementContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *DiagnosticsStatementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *DiagnosticsStatementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *DiagnosticsStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DiagnosticsStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DiagnosticsStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDiagnosticsStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DiagnosticsStatement() (localctx IDiagnosticsStatementContext) {
	localctx = NewDiagnosticsStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 494, MySqlParserRULE_diagnosticsStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5401)
		p.Match(MySqlParserGET)
	}
	p.SetState(5403)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCURRENT || _la == MySqlParserSTACKED {
		{
			p.SetState(5402)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCURRENT || _la == MySqlParserSTACKED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(5405)
		p.Match(MySqlParserDIAGNOSTICS)
	}
	p.SetState(5437)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserAT_SIGN, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID, MySqlParserLOCAL_ID, MySqlParserGLOBAL_ID:
		{
			p.SetState(5406)
			p.VariableClause()
		}
		{
			p.SetState(5407)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(5408)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNUMBER || _la == MySqlParserROW_COUNT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5416)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5409)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5410)
				p.VariableClause()
			}
			{
				p.SetState(5411)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}
			{
				p.SetState(5412)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserNUMBER || _la == MySqlParserROW_COUNT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

			p.SetState(5418)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySqlParserCONDITION:
		{
			p.SetState(5419)
			p.Match(MySqlParserCONDITION)
		}
		p.SetState(5422)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL:
			{
				p.SetState(5420)
				p.DecimalLiteral()
			}

		case MySqlParserCURRENT, MySqlParserDATABASE, MySqlParserDIAGNOSTICS, MySqlParserGROUP, MySqlParserLEFT, MySqlParserNUMBER, MySqlParserORDER, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserSTACKED, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserSERIAL, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserPOSITION, MySqlParserACCOUNT, MySqlParserACTION, MySqlParserAFTER, MySqlParserAGGREGATE, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBLOCK, MySqlParserBOOL, MySqlParserBOOLEAN, MySqlParserBTREE, MySqlParserCACHE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHANGED, MySqlParserCHANNEL, MySqlParserCHECKSUM, MySqlParserPAGE_CHECKSUM, MySqlParserCIPHER, MySqlParserCLASS_ORIGIN, MySqlParserCLIENT, MySqlParserCLOSE, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOLUMN_NAME, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCOMPRESSION, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONSTRAINT_CATALOG, MySqlParserCONSTRAINT_SCHEMA, MySqlParserCONSTRAINT_NAME, MySqlParserCONTAINS, MySqlParserCONTEXT, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserCPU, MySqlParserCURSOR_NAME, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEALLOCATE, MySqlParserDEFAULT_AUTH, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDES_KEY_FILE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENCRYPTION, MySqlParserEND, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERROR, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXPORT, MySqlParserEXTENDED, MySqlParserEXTENT_SIZE, MySqlParserFAST, MySqlParserFAULTS, MySqlParserFIELDS, MySqlParserFILE_BLOCK_SIZE, MySqlParserFILTER, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFLUSH, MySqlParserFOLLOWS, MySqlParserFOUND, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGENERAL, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserGROUP_REPLICATION, MySqlParserHANDLER, MySqlParserHASH, MySqlParserHELP, MySqlParserHOST, MySqlParserHOSTS, MySqlParserIDENTIFIED, MySqlParserIGNORE_SERVER_IDS, MySqlParserIMPORT, MySqlParserINDEXES, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINSTALL, MySqlParserINSTANCE, MySqlParserINVISIBLE, MySqlParserINVOKER, MySqlParserIO, MySqlParserIO_THREAD, MySqlParserIPC, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserJSON, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLEAVES, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_HEARTBEAT_PERIOD, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserMASTER_SSL, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMEDIUM, MySqlParserMEMBER, MySqlParserMERGE, MySqlParserMESSAGE_TEXT, MySqlParserMID, MySqlParserMIGRATE, MySqlParserMIN_ROWS, MySqlParserMODE, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserMYSQL_ERRNO, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNEVER, MySqlParserNEXT, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOF, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONE, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPEN, MySqlParserOPTIMIZER_COSTS, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPAGE, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPHASE, MySqlParserPLUGIN, MySqlParserPLUGIN_DIR, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRECEDES, MySqlParserPREPARE, MySqlParserPRESERVE, MySqlParserPREV, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserRECOVER, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAY, MySqlParserRELAY_LOG_FILE, MySqlParserRELAY_LOG_POS, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATE_DO_DB, MySqlParserREPLICATE_DO_TABLE, MySqlParserREPLICATE_IGNORE_DB, MySqlParserREPLICATE_IGNORE_TABLE, MySqlParserREPLICATE_REWRITE_DB, MySqlParserREPLICATE_WILD_DO_TABLE, MySqlParserREPLICATE_WILD_IGNORE_TABLE, MySqlParserREPLICATION, MySqlParserRESET, MySqlParserRESUME, MySqlParserRETURNED_SQLSTATE, MySqlParserRETURNS, MySqlParserROLE, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROTATE, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSLOW, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSONAME, MySqlParserSOUNDS, MySqlParserSOURCE, MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_AFTER_MTS_GAPS, MySqlParserSQL_BEFORE_GTIDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSQL_THREAD, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTOP, MySqlParserSTORAGE, MySqlParserSTRING, MySqlParserSUBCLASS_ORIGIN, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserSUSPEND, MySqlParserSWAPS, MySqlParserSWITCHES, MySqlParserTABLE_NAME, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRADITIONAL, MySqlParserTRANSACTION, MySqlParserTRANSACTIONAL, MySqlParserTRIGGERS, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNINSTALL, MySqlParserUNKNOWN, MySqlParserUNTIL, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserUSE_FRM, MySqlParserUSER_RESOURCES, MySqlParserVALIDATION, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserVISIBLE, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWITHOUT, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXA, MySqlParserXML, MySqlParserINTERNAL, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserAUDIT_ADMIN, MySqlParserBACKUP_ADMIN, MySqlParserBINLOG_ADMIN, MySqlParserBINLOG_ENCRYPTION_ADMIN, MySqlParserCLONE_ADMIN, MySqlParserCONNECTION_ADMIN, MySqlParserENCRYPTION_KEY_ADMIN, MySqlParserFIREWALL_ADMIN, MySqlParserFIREWALL_USER, MySqlParserGROUP_REPLICATION_ADMIN, MySqlParserINNODB_REDO_LOG_ARCHIVE, MySqlParserNDB_STORED_USER, MySqlParserPERSIST_RO_VARIABLES_ADMIN, MySqlParserREPLICATION_APPLIER, MySqlParserREPLICATION_SLAVE_ADMIN, MySqlParserRESOURCE_GROUP_ADMIN, MySqlParserRESOURCE_GROUP_USER, MySqlParserROLE_ADMIN, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserSET_USER_ID, MySqlParserSHOW_ROUTINE, MySqlParserSYSTEM_VARIABLES_ADMIN, MySqlParserTABLE_ENCRYPTION_ADMIN, MySqlParserVERSION_TOKEN_ADMIN, MySqlParserXA_RECOVER_ADMIN, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFORMANCE_SCHEMA, MySqlParserTOKUDB, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCATALOG_NAME, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSCHEMA_NAME, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD, MySqlParserAT_SIGN, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL, MySqlParserID, MySqlParserREVERSE_QUOTE_ID, MySqlParserLOCAL_ID, MySqlParserGLOBAL_ID:
			{
				p.SetState(5421)
				p.VariableClause()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(5424)
			p.VariableClause()
		}
		{
			p.SetState(5425)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(5426)
			p.DiagnosticsConditionInformationName()
		}
		p.SetState(5434)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5427)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5428)
				p.VariableClause()
			}
			{
				p.SetState(5429)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}
			{
				p.SetState(5430)
				p.DiagnosticsConditionInformationName()
			}

			p.SetState(5436)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDiagnosticsConditionInformationNameContext is an interface to support dynamic dispatch.
type IDiagnosticsConditionInformationNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDiagnosticsConditionInformationNameContext differentiates from other interfaces.
	IsDiagnosticsConditionInformationNameContext()
}

type DiagnosticsConditionInformationNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDiagnosticsConditionInformationNameContext() *DiagnosticsConditionInformationNameContext {
	var p = new(DiagnosticsConditionInformationNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_diagnosticsConditionInformationName
	return p
}

func (*DiagnosticsConditionInformationNameContext) IsDiagnosticsConditionInformationNameContext() {}

func NewDiagnosticsConditionInformationNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DiagnosticsConditionInformationNameContext {
	var p = new(DiagnosticsConditionInformationNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_diagnosticsConditionInformationName

	return p
}

func (s *DiagnosticsConditionInformationNameContext) GetParser() antlr.Parser { return s.parser }

func (s *DiagnosticsConditionInformationNameContext) CLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLASS_ORIGIN, 0)
}

func (s *DiagnosticsConditionInformationNameContext) SUBCLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBCLASS_ORIGIN, 0)
}

func (s *DiagnosticsConditionInformationNameContext) RETURNED_SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNED_SQLSTATE, 0)
}

func (s *DiagnosticsConditionInformationNameContext) MESSAGE_TEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMESSAGE_TEXT, 0)
}

func (s *DiagnosticsConditionInformationNameContext) MYSQL_ERRNO() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYSQL_ERRNO, 0)
}

func (s *DiagnosticsConditionInformationNameContext) CONSTRAINT_CATALOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_CATALOG, 0)
}

func (s *DiagnosticsConditionInformationNameContext) CONSTRAINT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_SCHEMA, 0)
}

func (s *DiagnosticsConditionInformationNameContext) CONSTRAINT_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_NAME, 0)
}

func (s *DiagnosticsConditionInformationNameContext) CATALOG_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCATALOG_NAME, 0)
}

func (s *DiagnosticsConditionInformationNameContext) SCHEMA_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA_NAME, 0)
}

func (s *DiagnosticsConditionInformationNameContext) TABLE_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE_NAME, 0)
}

func (s *DiagnosticsConditionInformationNameContext) COLUMN_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN_NAME, 0)
}

func (s *DiagnosticsConditionInformationNameContext) CURSOR_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURSOR_NAME, 0)
}

func (s *DiagnosticsConditionInformationNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DiagnosticsConditionInformationNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DiagnosticsConditionInformationNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDiagnosticsConditionInformationName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DiagnosticsConditionInformationName() (localctx IDiagnosticsConditionInformationNameContext) {
	localctx = NewDiagnosticsConditionInformationNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 496, MySqlParserRULE_diagnosticsConditionInformationName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5439)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-329)&-(0x1f+1)) == 0 && ((1<<uint((_la-329)))&((1<<(MySqlParserCLASS_ORIGIN-329))|(1<<(MySqlParserCOLUMN_NAME-329))|(1<<(MySqlParserCONSTRAINT_CATALOG-329))|(1<<(MySqlParserCONSTRAINT_SCHEMA-329))|(1<<(MySqlParserCONSTRAINT_NAME-329))|(1<<(MySqlParserCURSOR_NAME-329)))) != 0) || _la == MySqlParserMESSAGE_TEXT || _la == MySqlParserMYSQL_ERRNO || _la == MySqlParserRETURNED_SQLSTATE || _la == MySqlParserSUBCLASS_ORIGIN || _la == MySqlParserTABLE_NAME || _la == MySqlParserCATALOG_NAME || _la == MySqlParserSCHEMA_NAME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDescribeObjectClauseContext is an interface to support dynamic dispatch.
type IDescribeObjectClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribeObjectClauseContext differentiates from other interfaces.
	IsDescribeObjectClauseContext()
}

type DescribeObjectClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribeObjectClauseContext() *DescribeObjectClauseContext {
	var p = new(DescribeObjectClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_describeObjectClause
	return p
}

func (*DescribeObjectClauseContext) IsDescribeObjectClauseContext() {}

func NewDescribeObjectClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DescribeObjectClauseContext {
	var p = new(DescribeObjectClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_describeObjectClause

	return p
}

func (s *DescribeObjectClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *DescribeObjectClauseContext) CopyFrom(ctx *DescribeObjectClauseContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *DescribeObjectClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescribeObjectClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DescribeStatementsContext struct {
	*DescribeObjectClauseContext
}

func NewDescribeStatementsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DescribeStatementsContext {
	var p = new(DescribeStatementsContext)

	p.DescribeObjectClauseContext = NewEmptyDescribeObjectClauseContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DescribeObjectClauseContext))

	return p
}

func (s *DescribeStatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescribeStatementsContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *DescribeStatementsContext) DeleteStatement() IDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteStatementContext)
}

func (s *DescribeStatementsContext) InsertStatement() IInsertStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertStatementContext)
}

func (s *DescribeStatementsContext) ReplaceStatement() IReplaceStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplaceStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplaceStatementContext)
}

func (s *DescribeStatementsContext) UpdateStatement() IUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateStatementContext)
}

func (s *DescribeStatementsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDescribeStatements(s)

	default:
		return t.VisitChildren(s)
	}
}

type DescribeConnectionContext struct {
	*DescribeObjectClauseContext
}

func NewDescribeConnectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DescribeConnectionContext {
	var p = new(DescribeConnectionContext)

	p.DescribeObjectClauseContext = NewEmptyDescribeObjectClauseContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DescribeObjectClauseContext))

	return p
}

func (s *DescribeConnectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescribeConnectionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *DescribeConnectionContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION, 0)
}

func (s *DescribeConnectionContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DescribeConnectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDescribeConnection(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DescribeObjectClause() (localctx IDescribeObjectClauseContext) {
	localctx = NewDescribeObjectClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 498, MySqlParserRULE_describeObjectClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5451)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserDELETE, MySqlParserINSERT, MySqlParserREPLACE, MySqlParserSELECT, MySqlParserUPDATE, MySqlParserLR_BRACKET:
		localctx = NewDescribeStatementsContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5446)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserSELECT, MySqlParserLR_BRACKET:
			{
				p.SetState(5441)
				p.SelectStatement()
			}

		case MySqlParserDELETE:
			{
				p.SetState(5442)
				p.DeleteStatement()
			}

		case MySqlParserINSERT:
			{
				p.SetState(5443)
				p.InsertStatement()
			}

		case MySqlParserREPLACE:
			{
				p.SetState(5444)
				p.ReplaceStatement()
			}

		case MySqlParserUPDATE:
			{
				p.SetState(5445)
				p.UpdateStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySqlParserFOR:
		localctx = NewDescribeConnectionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5448)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(5449)
			p.Match(MySqlParserCONNECTION)
		}
		{
			p.SetState(5450)
			p.Uid()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFullIdContext is an interface to support dynamic dispatch.
type IFullIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFullIdContext differentiates from other interfaces.
	IsFullIdContext()
}

type FullIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFullIdContext() *FullIdContext {
	var p = new(FullIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_fullId
	return p
}

func (*FullIdContext) IsFullIdContext() {}

func NewFullIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FullIdContext {
	var p = new(FullIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_fullId

	return p
}

func (s *FullIdContext) GetParser() antlr.Parser { return s.parser }

func (s *FullIdContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *FullIdContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *FullIdContext) DOT_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT_ID, 0)
}

func (s *FullIdContext) DOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, 0)
}

func (s *FullIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FullIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FullIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFullId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) FullId() (localctx IFullIdContext) {
	localctx = NewFullIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 500, MySqlParserRULE_fullId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5453)
		p.Uid()
	}
	p.SetState(5457)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 784, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5454)
			p.Match(MySqlParserDOT_ID)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 784, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(5455)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(5456)
			p.Uid()
		}

	}

	return localctx
}

// ITableNameContext is an interface to support dynamic dispatch.
type ITableNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableNameContext differentiates from other interfaces.
	IsTableNameContext()
}

type TableNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableNameContext() *TableNameContext {
	var p = new(TableNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tableName
	return p
}

func (*TableNameContext) IsTableNameContext() {}

func NewTableNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableNameContext {
	var p = new(TableNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tableName

	return p
}

func (s *TableNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TableNameContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *TableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TableName() (localctx ITableNameContext) {
	localctx = NewTableNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 502, MySqlParserRULE_tableName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5459)
		p.FullId()
	}

	return localctx
}

// IFullColumnNameContext is an interface to support dynamic dispatch.
type IFullColumnNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFullColumnNameContext differentiates from other interfaces.
	IsFullColumnNameContext()
}

type FullColumnNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFullColumnNameContext() *FullColumnNameContext {
	var p = new(FullColumnNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_fullColumnName
	return p
}

func (*FullColumnNameContext) IsFullColumnNameContext() {}

func NewFullColumnNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FullColumnNameContext {
	var p = new(FullColumnNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_fullColumnName

	return p
}

func (s *FullColumnNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FullColumnNameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *FullColumnNameContext) AllDottedId() []IDottedIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDottedIdContext)(nil)).Elem())
	var tst = make([]IDottedIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDottedIdContext)
		}
	}

	return tst
}

func (s *FullColumnNameContext) DottedId(i int) IDottedIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDottedIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDottedIdContext)
}

func (s *FullColumnNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FullColumnNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FullColumnNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFullColumnName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) FullColumnName() (localctx IFullColumnNameContext) {
	localctx = NewFullColumnNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 504, MySqlParserRULE_fullColumnName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5473)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 788, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5461)
			p.Uid()
		}
		p.SetState(5466)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 786, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5462)
				p.DottedId()
			}
			p.SetState(5464)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 785, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(5463)
					p.DottedId()
				}

			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5468)
		p.MatchWildcard()

		{
			p.SetState(5469)
			p.DottedId()
		}
		p.SetState(5471)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 787, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5470)
				p.DottedId()
			}

		}

	}

	return localctx
}

// IIndexColumnNameContext is an interface to support dynamic dispatch.
type IIndexColumnNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSortType returns the sortType token.
	GetSortType() antlr.Token

	// SetSortType sets the sortType token.
	SetSortType(antlr.Token)

	// IsIndexColumnNameContext differentiates from other interfaces.
	IsIndexColumnNameContext()
}

type IndexColumnNameContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	sortType antlr.Token
}

func NewEmptyIndexColumnNameContext() *IndexColumnNameContext {
	var p = new(IndexColumnNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexColumnName
	return p
}

func (*IndexColumnNameContext) IsIndexColumnNameContext() {}

func NewIndexColumnNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexColumnNameContext {
	var p = new(IndexColumnNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexColumnName

	return p
}

func (s *IndexColumnNameContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexColumnNameContext) GetSortType() antlr.Token { return s.sortType }

func (s *IndexColumnNameContext) SetSortType(v antlr.Token) { s.sortType = v }

func (s *IndexColumnNameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *IndexColumnNameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *IndexColumnNameContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *IndexColumnNameContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *IndexColumnNameContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *IndexColumnNameContext) ASC() antlr.TerminalNode {
	return s.GetToken(MySqlParserASC, 0)
}

func (s *IndexColumnNameContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *IndexColumnNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexColumnNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexColumnNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIndexColumnName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IndexColumnName() (localctx IIndexColumnNameContext) {
	localctx = NewIndexColumnNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 506, MySqlParserRULE_indexColumnName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5477)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 789, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5475)
			p.Uid()
		}

	case 2:
		{
			p.SetState(5476)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	}
	p.SetState(5483)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(5479)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5480)
			p.DecimalLiteral()
		}
		{
			p.SetState(5481)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(5486)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserASC || _la == MySqlParserDESC {
		{
			p.SetState(5485)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IndexColumnNameContext).sortType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserASC || _la == MySqlParserDESC) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IndexColumnNameContext).sortType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IUserNameContext is an interface to support dynamic dispatch.
type IUserNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserNameContext differentiates from other interfaces.
	IsUserNameContext()
}

type UserNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserNameContext() *UserNameContext {
	var p = new(UserNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userName
	return p
}

func (*UserNameContext) IsUserNameContext() {}

func NewUserNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserNameContext {
	var p = new(UserNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userName

	return p
}

func (s *UserNameContext) GetParser() antlr.Parser { return s.parser }

func (s *UserNameContext) STRING_USER_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_USER_NAME, 0)
}

func (s *UserNameContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *UserNameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *UserNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUserName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UserName() (localctx IUserNameContext) {
	localctx = NewUserNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 508, MySqlParserRULE_userName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5488)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-1076)&-(0x1f+1)) == 0 && ((1<<uint((_la-1076)))&((1<<(MySqlParserSTRING_LITERAL-1076))|(1<<(MySqlParserID-1076))|(1<<(MySqlParserSTRING_USER_NAME-1076)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMysqlVariableContext is an interface to support dynamic dispatch.
type IMysqlVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMysqlVariableContext differentiates from other interfaces.
	IsMysqlVariableContext()
}

type MysqlVariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMysqlVariableContext() *MysqlVariableContext {
	var p = new(MysqlVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_mysqlVariable
	return p
}

func (*MysqlVariableContext) IsMysqlVariableContext() {}

func NewMysqlVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MysqlVariableContext {
	var p = new(MysqlVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_mysqlVariable

	return p
}

func (s *MysqlVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *MysqlVariableContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *MysqlVariableContext) GLOBAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL_ID, 0)
}

func (s *MysqlVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MysqlVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MysqlVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMysqlVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) MysqlVariable() (localctx IMysqlVariableContext) {
	localctx = NewMysqlVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 510, MySqlParserRULE_mysqlVariable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5490)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserLOCAL_ID || _la == MySqlParserGLOBAL_ID) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICharsetNameContext is an interface to support dynamic dispatch.
type ICharsetNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharsetNameContext differentiates from other interfaces.
	IsCharsetNameContext()
}

type CharsetNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharsetNameContext() *CharsetNameContext {
	var p = new(CharsetNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_charsetName
	return p
}

func (*CharsetNameContext) IsCharsetNameContext() {}

func NewCharsetNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharsetNameContext {
	var p = new(CharsetNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_charsetName

	return p
}

func (s *CharsetNameContext) GetParser() antlr.Parser { return s.parser }

func (s *CharsetNameContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *CharsetNameContext) CharsetNameBase() ICharsetNameBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameBaseContext)
}

func (s *CharsetNameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CharsetNameContext) CHARSET_REVERSE_QOUTE_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET_REVERSE_QOUTE_STRING, 0)
}

func (s *CharsetNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharsetNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharsetNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCharsetName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CharsetName() (localctx ICharsetNameContext) {
	localctx = NewCharsetNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 512, MySqlParserRULE_charsetName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5496)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserBINARY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5492)
			p.Match(MySqlParserBINARY)
		}

	case MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5493)
			p.CharsetNameBase()
		}

	case MySqlParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5494)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserCHARSET_REVERSE_QOUTE_STRING:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5495)
			p.Match(MySqlParserCHARSET_REVERSE_QOUTE_STRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICollationNameContext is an interface to support dynamic dispatch.
type ICollationNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollationNameContext differentiates from other interfaces.
	IsCollationNameContext()
}

type CollationNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollationNameContext() *CollationNameContext {
	var p = new(CollationNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_collationName
	return p
}

func (*CollationNameContext) IsCollationNameContext() {}

func NewCollationNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollationNameContext {
	var p = new(CollationNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_collationName

	return p
}

func (s *CollationNameContext) GetParser() antlr.Parser { return s.parser }

func (s *CollationNameContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *CollationNameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *CollationNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollationNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollationNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCollationName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CollationName() (localctx ICollationNameContext) {
	localctx = NewCollationNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 514, MySqlParserRULE_collationName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5500)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 793, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5498)
			p.Uid()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5499)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	}

	return localctx
}

// IEngineNameContext is an interface to support dynamic dispatch.
type IEngineNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEngineNameContext differentiates from other interfaces.
	IsEngineNameContext()
}

type EngineNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEngineNameContext() *EngineNameContext {
	var p = new(EngineNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_engineName
	return p
}

func (*EngineNameContext) IsEngineNameContext() {}

func NewEngineNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EngineNameContext {
	var p = new(EngineNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_engineName

	return p
}

func (s *EngineNameContext) GetParser() antlr.Parser { return s.parser }

func (s *EngineNameContext) ARCHIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserARCHIVE, 0)
}

func (s *EngineNameContext) BLACKHOLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBLACKHOLE, 0)
}

func (s *EngineNameContext) CSV() antlr.TerminalNode {
	return s.GetToken(MySqlParserCSV, 0)
}

func (s *EngineNameContext) FEDERATED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFEDERATED, 0)
}

func (s *EngineNameContext) INNODB() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNODB, 0)
}

func (s *EngineNameContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *EngineNameContext) MRG_MYISAM() antlr.TerminalNode {
	return s.GetToken(MySqlParserMRG_MYISAM, 0)
}

func (s *EngineNameContext) MYISAM() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYISAM, 0)
}

func (s *EngineNameContext) NDB() antlr.TerminalNode {
	return s.GetToken(MySqlParserNDB, 0)
}

func (s *EngineNameContext) NDBCLUSTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNDBCLUSTER, 0)
}

func (s *EngineNameContext) PERFORMANCE_SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERFORMANCE_SCHEMA, 0)
}

func (s *EngineNameContext) TOKUDB() antlr.TerminalNode {
	return s.GetToken(MySqlParserTOKUDB, 0)
}

func (s *EngineNameContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *EngineNameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *EngineNameContext) REVERSE_QUOTE_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE_QUOTE_ID, 0)
}

func (s *EngineNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EngineNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EngineNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitEngineName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) EngineName() (localctx IEngineNameContext) {
	localctx = NewEngineNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 516, MySqlParserRULE_engineName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5502)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-718)&-(0x1f+1)) == 0 && ((1<<uint((_la-718)))&((1<<(MySqlParserARCHIVE-718))|(1<<(MySqlParserBLACKHOLE-718))|(1<<(MySqlParserCSV-718))|(1<<(MySqlParserFEDERATED-718))|(1<<(MySqlParserINNODB-718))|(1<<(MySqlParserMEMORY-718))|(1<<(MySqlParserMRG_MYISAM-718))|(1<<(MySqlParserMYISAM-718))|(1<<(MySqlParserNDB-718))|(1<<(MySqlParserNDBCLUSTER-718))|(1<<(MySqlParserPERFORMANCE_SCHEMA-718))|(1<<(MySqlParserTOKUDB-718)))) != 0) || (((_la-1076)&-(0x1f+1)) == 0 && ((1<<uint((_la-1076)))&((1<<(MySqlParserSTRING_LITERAL-1076))|(1<<(MySqlParserID-1076))|(1<<(MySqlParserREVERSE_QUOTE_ID-1076)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IUuidSetContext is an interface to support dynamic dispatch.
type IUuidSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUuidSetContext differentiates from other interfaces.
	IsUuidSetContext()
}

type UuidSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUuidSetContext() *UuidSetContext {
	var p = new(UuidSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_uuidSet
	return p
}

func (*UuidSetContext) IsUuidSetContext() {}

func NewUuidSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UuidSetContext {
	var p = new(UuidSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_uuidSet

	return p
}

func (s *UuidSetContext) GetParser() antlr.Parser { return s.parser }

func (s *UuidSetContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *UuidSetContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *UuidSetContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserMINUS)
}

func (s *UuidSetContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, i)
}

func (s *UuidSetContext) AllCOLON_SYMB() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOLON_SYMB)
}

func (s *UuidSetContext) COLON_SYMB(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLON_SYMB, i)
}

func (s *UuidSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UuidSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UuidSetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUuidSet(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UuidSet() (localctx IUuidSetContext) {
	localctx = NewUuidSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 518, MySqlParserRULE_uuidSet)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5504)
		p.DecimalLiteral()
	}
	{
		p.SetState(5505)
		p.Match(MySqlParserMINUS)
	}
	{
		p.SetState(5506)
		p.DecimalLiteral()
	}
	{
		p.SetState(5507)
		p.Match(MySqlParserMINUS)
	}
	{
		p.SetState(5508)
		p.DecimalLiteral()
	}
	{
		p.SetState(5509)
		p.Match(MySqlParserMINUS)
	}
	{
		p.SetState(5510)
		p.DecimalLiteral()
	}
	{
		p.SetState(5511)
		p.Match(MySqlParserMINUS)
	}
	{
		p.SetState(5512)
		p.DecimalLiteral()
	}
	p.SetState(5518)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySqlParserCOLON_SYMB {
		{
			p.SetState(5513)
			p.Match(MySqlParserCOLON_SYMB)
		}
		{
			p.SetState(5514)
			p.DecimalLiteral()
		}
		{
			p.SetState(5515)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(5516)
			p.DecimalLiteral()
		}

		p.SetState(5520)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IXidContext is an interface to support dynamic dispatch.
type IXidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetGlobalTableUid returns the globalTableUid rule contexts.
	GetGlobalTableUid() IXuidStringIdContext

	// GetQualifier returns the qualifier rule contexts.
	GetQualifier() IXuidStringIdContext

	// GetIdFormat returns the idFormat rule contexts.
	GetIdFormat() IDecimalLiteralContext

	// SetGlobalTableUid sets the globalTableUid rule contexts.
	SetGlobalTableUid(IXuidStringIdContext)

	// SetQualifier sets the qualifier rule contexts.
	SetQualifier(IXuidStringIdContext)

	// SetIdFormat sets the idFormat rule contexts.
	SetIdFormat(IDecimalLiteralContext)

	// IsXidContext differentiates from other interfaces.
	IsXidContext()
}

type XidContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	globalTableUid IXuidStringIdContext
	qualifier      IXuidStringIdContext
	idFormat       IDecimalLiteralContext
}

func NewEmptyXidContext() *XidContext {
	var p = new(XidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xid
	return p
}

func (*XidContext) IsXidContext() {}

func NewXidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XidContext {
	var p = new(XidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xid

	return p
}

func (s *XidContext) GetParser() antlr.Parser { return s.parser }

func (s *XidContext) GetGlobalTableUid() IXuidStringIdContext { return s.globalTableUid }

func (s *XidContext) GetQualifier() IXuidStringIdContext { return s.qualifier }

func (s *XidContext) GetIdFormat() IDecimalLiteralContext { return s.idFormat }

func (s *XidContext) SetGlobalTableUid(v IXuidStringIdContext) { s.globalTableUid = v }

func (s *XidContext) SetQualifier(v IXuidStringIdContext) { s.qualifier = v }

func (s *XidContext) SetIdFormat(v IDecimalLiteralContext) { s.idFormat = v }

func (s *XidContext) AllXuidStringId() []IXuidStringIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IXuidStringIdContext)(nil)).Elem())
	var tst = make([]IXuidStringIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IXuidStringIdContext)
		}
	}

	return tst
}

func (s *XidContext) XuidStringId(i int) IXuidStringIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXuidStringIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IXuidStringIdContext)
}

func (s *XidContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *XidContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *XidContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *XidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXid(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Xid() (localctx IXidContext) {
	localctx = NewXidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 520, MySqlParserRULE_xid)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5522)

		var _x = p.XuidStringId()

		localctx.(*XidContext).globalTableUid = _x
	}
	p.SetState(5529)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMA {
		{
			p.SetState(5523)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5524)

			var _x = p.XuidStringId()

			localctx.(*XidContext).qualifier = _x
		}
		p.SetState(5527)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOMMA {
			{
				p.SetState(5525)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5526)

				var _x = p.DecimalLiteral()

				localctx.(*XidContext).idFormat = _x
			}

		}

	}

	return localctx
}

// IXuidStringIdContext is an interface to support dynamic dispatch.
type IXuidStringIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXuidStringIdContext differentiates from other interfaces.
	IsXuidStringIdContext()
}

type XuidStringIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXuidStringIdContext() *XuidStringIdContext {
	var p = new(XuidStringIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xuidStringId
	return p
}

func (*XuidStringIdContext) IsXuidStringIdContext() {}

func NewXuidStringIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XuidStringIdContext {
	var p = new(XuidStringIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xuidStringId

	return p
}

func (s *XuidStringIdContext) GetParser() antlr.Parser { return s.parser }

func (s *XuidStringIdContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *XuidStringIdContext) BIT_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_STRING, 0)
}

func (s *XuidStringIdContext) AllHEXADECIMAL_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserHEXADECIMAL_LITERAL)
}

func (s *XuidStringIdContext) HEXADECIMAL_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserHEXADECIMAL_LITERAL, i)
}

func (s *XuidStringIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XuidStringIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XuidStringIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXuidStringId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) XuidStringId() (localctx IXuidStringIdContext) {
	localctx = NewXuidStringIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 522, MySqlParserRULE_xuidStringId)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5538)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5531)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserBIT_STRING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5532)
			p.Match(MySqlParserBIT_STRING)
		}

	case MySqlParserHEXADECIMAL_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(5534)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserHEXADECIMAL_LITERAL {
			{
				p.SetState(5533)
				p.Match(MySqlParserHEXADECIMAL_LITERAL)
			}

			p.SetState(5536)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAuthPluginContext is an interface to support dynamic dispatch.
type IAuthPluginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAuthPluginContext differentiates from other interfaces.
	IsAuthPluginContext()
}

type AuthPluginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAuthPluginContext() *AuthPluginContext {
	var p = new(AuthPluginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_authPlugin
	return p
}

func (*AuthPluginContext) IsAuthPluginContext() {}

func NewAuthPluginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AuthPluginContext {
	var p = new(AuthPluginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_authPlugin

	return p
}

func (s *AuthPluginContext) GetParser() antlr.Parser { return s.parser }

func (s *AuthPluginContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *AuthPluginContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *AuthPluginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AuthPluginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AuthPluginContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAuthPlugin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AuthPlugin() (localctx IAuthPluginContext) {
	localctx = NewAuthPluginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 524, MySqlParserRULE_authPlugin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5542)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 799, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5540)
			p.Uid()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5541)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	}

	return localctx
}

// IUidContext is an interface to support dynamic dispatch.
type IUidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUidContext differentiates from other interfaces.
	IsUidContext()
}

type UidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUidContext() *UidContext {
	var p = new(UidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_uid
	return p
}

func (*UidContext) IsUidContext() {}

func NewUidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UidContext {
	var p = new(UidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_uid

	return p
}

func (s *UidContext) GetParser() antlr.Parser { return s.parser }

func (s *UidContext) SimpleId() ISimpleIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdContext)
}

func (s *UidContext) REVERSE_QUOTE_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE_QUOTE_ID, 0)
}

func (s *UidContext) CHARSET_REVERSE_QOUTE_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET_REVERSE_QOUTE_STRING, 0)
}

func (s *UidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUid(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Uid() (localctx IUidContext) {
	localctx = NewUidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 526, MySqlParserRULE_uid)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5547)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 800, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5544)
			p.SimpleId()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5545)
			p.Match(MySqlParserREVERSE_QUOTE_ID)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5546)
			p.Match(MySqlParserCHARSET_REVERSE_QOUTE_STRING)
		}

	}

	return localctx
}

// ISimpleIdContext is an interface to support dynamic dispatch.
type ISimpleIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleIdContext differentiates from other interfaces.
	IsSimpleIdContext()
}

type SimpleIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleIdContext() *SimpleIdContext {
	var p = new(SimpleIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_simpleId
	return p
}

func (*SimpleIdContext) IsSimpleIdContext() {}

func NewSimpleIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleIdContext {
	var p = new(SimpleIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_simpleId

	return p
}

func (s *SimpleIdContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleIdContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *SimpleIdContext) CharsetNameBase() ICharsetNameBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameBaseContext)
}

func (s *SimpleIdContext) TransactionLevelBase() ITransactionLevelBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransactionLevelBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransactionLevelBaseContext)
}

func (s *SimpleIdContext) EngineName() IEngineNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngineNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngineNameContext)
}

func (s *SimpleIdContext) PrivilegesBase() IPrivilegesBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegesBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegesBaseContext)
}

func (s *SimpleIdContext) IntervalTypeBase() IIntervalTypeBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalTypeBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalTypeBaseContext)
}

func (s *SimpleIdContext) DataTypeBase() IDataTypeBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataTypeBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataTypeBaseContext)
}

func (s *SimpleIdContext) KeywordsCanBeId() IKeywordsCanBeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeywordsCanBeIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeywordsCanBeIdContext)
}

func (s *SimpleIdContext) FunctionNameBase() IFunctionNameBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameBaseContext)
}

func (s *SimpleIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimpleId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SimpleId() (localctx ISimpleIdContext) {
	localctx = NewSimpleIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 528, MySqlParserRULE_simpleId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5558)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 801, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5549)
			p.Match(MySqlParserID)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5550)
			p.CharsetNameBase()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5551)
			p.TransactionLevelBase()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5552)
			p.EngineName()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5553)
			p.PrivilegesBase()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5554)
			p.IntervalTypeBase()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5555)
			p.DataTypeBase()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5556)
			p.KeywordsCanBeId()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5557)
			p.FunctionNameBase()
		}

	}

	return localctx
}

// IDottedIdContext is an interface to support dynamic dispatch.
type IDottedIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDottedIdContext differentiates from other interfaces.
	IsDottedIdContext()
}

type DottedIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDottedIdContext() *DottedIdContext {
	var p = new(DottedIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dottedId
	return p
}

func (*DottedIdContext) IsDottedIdContext() {}

func NewDottedIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DottedIdContext {
	var p = new(DottedIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dottedId

	return p
}

func (s *DottedIdContext) GetParser() antlr.Parser { return s.parser }

func (s *DottedIdContext) DOT_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT_ID, 0)
}

func (s *DottedIdContext) DOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT, 0)
}

func (s *DottedIdContext) Uid() IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *DottedIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DottedIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DottedIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDottedId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DottedId() (localctx IDottedIdContext) {
	localctx = NewDottedIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 530, MySqlParserRULE_dottedId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5563)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserDOT_ID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5560)
			p.Match(MySqlParserDOT_ID)
		}

	case MySqlParserDOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5561)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(5562)
			p.Uid()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDecimalLiteralContext is an interface to support dynamic dispatch.
type IDecimalLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecimalLiteralContext differentiates from other interfaces.
	IsDecimalLiteralContext()
}

type DecimalLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecimalLiteralContext() *DecimalLiteralContext {
	var p = new(DecimalLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_decimalLiteral
	return p
}

func (*DecimalLiteralContext) IsDecimalLiteralContext() {}

func NewDecimalLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecimalLiteralContext {
	var p = new(DecimalLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_decimalLiteral

	return p
}

func (s *DecimalLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *DecimalLiteralContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL_LITERAL, 0)
}

func (s *DecimalLiteralContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *DecimalLiteralContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *DecimalLiteralContext) TWO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTWO_DECIMAL, 0)
}

func (s *DecimalLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecimalLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecimalLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDecimalLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DecimalLiteral() (localctx IDecimalLiteralContext) {
	localctx = NewDecimalLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 532, MySqlParserRULE_decimalLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5565)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-1066)&-(0x1f+1)) == 0 && ((1<<uint((_la-1066)))&((1<<(MySqlParserZERO_DECIMAL-1066))|(1<<(MySqlParserONE_DECIMAL-1066))|(1<<(MySqlParserTWO_DECIMAL-1066))|(1<<(MySqlParserDECIMAL_LITERAL-1066)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFileSizeLiteralContext is an interface to support dynamic dispatch.
type IFileSizeLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFileSizeLiteralContext differentiates from other interfaces.
	IsFileSizeLiteralContext()
}

type FileSizeLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFileSizeLiteralContext() *FileSizeLiteralContext {
	var p = new(FileSizeLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_fileSizeLiteral
	return p
}

func (*FileSizeLiteralContext) IsFileSizeLiteralContext() {}

func NewFileSizeLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FileSizeLiteralContext {
	var p = new(FileSizeLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_fileSizeLiteral

	return p
}

func (s *FileSizeLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *FileSizeLiteralContext) FILESIZE_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILESIZE_LITERAL, 0)
}

func (s *FileSizeLiteralContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *FileSizeLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FileSizeLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FileSizeLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFileSizeLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) FileSizeLiteral() (localctx IFileSizeLiteralContext) {
	localctx = NewFileSizeLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 534, MySqlParserRULE_fileSizeLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5569)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserFILESIZE_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5567)
			p.Match(MySqlParserFILESIZE_LITERAL)
		}

	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5568)
			p.DecimalLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStringLiteralContext is an interface to support dynamic dispatch.
type IStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringLiteralContext differentiates from other interfaces.
	IsStringLiteralContext()
}

type StringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringLiteralContext() *StringLiteralContext {
	var p = new(StringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_stringLiteral
	return p
}

func (*StringLiteralContext) IsStringLiteralContext() {}

func NewStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringLiteralContext {
	var p = new(StringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_stringLiteral

	return p
}

func (s *StringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StringLiteralContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *StringLiteralContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *StringLiteralContext) START_NATIONAL_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART_NATIONAL_STRING_LITERAL, 0)
}

func (s *StringLiteralContext) STRING_CHARSET_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_CHARSET_NAME, 0)
}

func (s *StringLiteralContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *StringLiteralContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *StringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) StringLiteral() (localctx IStringLiteralContext) {
	localctx = NewStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 536, MySqlParserRULE_stringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(5594)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 810, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5576)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserSTRING_LITERAL, MySqlParserSTRING_CHARSET_NAME:
			p.SetState(5572)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserSTRING_CHARSET_NAME {
				{
					p.SetState(5571)
					p.Match(MySqlParserSTRING_CHARSET_NAME)
				}

			}
			{
				p.SetState(5574)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		case MySqlParserSTART_NATIONAL_STRING_LITERAL:
			{
				p.SetState(5575)
				p.Match(MySqlParserSTART_NATIONAL_STRING_LITERAL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(5579)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(5578)
					p.Match(MySqlParserSTRING_LITERAL)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(5581)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 806, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5588)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserSTRING_LITERAL, MySqlParserSTRING_CHARSET_NAME:
			p.SetState(5584)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserSTRING_CHARSET_NAME {
				{
					p.SetState(5583)
					p.Match(MySqlParserSTRING_CHARSET_NAME)
				}

			}
			{
				p.SetState(5586)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		case MySqlParserSTART_NATIONAL_STRING_LITERAL:
			{
				p.SetState(5587)
				p.Match(MySqlParserSTART_NATIONAL_STRING_LITERAL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(5592)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 809, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5590)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(5591)
				p.CollationName()
			}

		}

	}

	return localctx
}

// IBooleanLiteralContext is an interface to support dynamic dispatch.
type IBooleanLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBooleanLiteralContext differentiates from other interfaces.
	IsBooleanLiteralContext()
}

type BooleanLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBooleanLiteralContext() *BooleanLiteralContext {
	var p = new(BooleanLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_booleanLiteral
	return p
}

func (*BooleanLiteralContext) IsBooleanLiteralContext() {}

func NewBooleanLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BooleanLiteralContext {
	var p = new(BooleanLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_booleanLiteral

	return p
}

func (s *BooleanLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *BooleanLiteralContext) TRUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUE, 0)
}

func (s *BooleanLiteralContext) FALSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFALSE, 0)
}

func (s *BooleanLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BooleanLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBooleanLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) BooleanLiteral() (localctx IBooleanLiteralContext) {
	localctx = NewBooleanLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 538, MySqlParserRULE_booleanLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5596)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFALSE || _la == MySqlParserTRUE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IHexadecimalLiteralContext is an interface to support dynamic dispatch.
type IHexadecimalLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHexadecimalLiteralContext differentiates from other interfaces.
	IsHexadecimalLiteralContext()
}

type HexadecimalLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHexadecimalLiteralContext() *HexadecimalLiteralContext {
	var p = new(HexadecimalLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_hexadecimalLiteral
	return p
}

func (*HexadecimalLiteralContext) IsHexadecimalLiteralContext() {}

func NewHexadecimalLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HexadecimalLiteralContext {
	var p = new(HexadecimalLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_hexadecimalLiteral

	return p
}

func (s *HexadecimalLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *HexadecimalLiteralContext) HEXADECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserHEXADECIMAL_LITERAL, 0)
}

func (s *HexadecimalLiteralContext) STRING_CHARSET_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_CHARSET_NAME, 0)
}

func (s *HexadecimalLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HexadecimalLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HexadecimalLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHexadecimalLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) HexadecimalLiteral() (localctx IHexadecimalLiteralContext) {
	localctx = NewHexadecimalLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 540, MySqlParserRULE_hexadecimalLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5599)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSTRING_CHARSET_NAME {
		{
			p.SetState(5598)
			p.Match(MySqlParserSTRING_CHARSET_NAME)
		}

	}
	{
		p.SetState(5601)
		p.Match(MySqlParserHEXADECIMAL_LITERAL)
	}

	return localctx
}

// INullNotnullContext is an interface to support dynamic dispatch.
type INullNotnullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNullNotnullContext differentiates from other interfaces.
	IsNullNotnullContext()
}

type NullNotnullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNullNotnullContext() *NullNotnullContext {
	var p = new(NullNotnullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_nullNotnull
	return p
}

func (*NullNotnullContext) IsNullNotnullContext() {}

func NewNullNotnullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NullNotnullContext {
	var p = new(NullNotnullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_nullNotnull

	return p
}

func (s *NullNotnullContext) GetParser() antlr.Parser { return s.parser }

func (s *NullNotnullContext) NULL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_LITERAL, 0)
}

func (s *NullNotnullContext) NULL_SPEC_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_SPEC_LITERAL, 0)
}

func (s *NullNotnullContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *NullNotnullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullNotnullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NullNotnullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitNullNotnull(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) NullNotnull() (localctx INullNotnullContext) {
	localctx = NewNullNotnullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 542, MySqlParserRULE_nullNotnull)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5604)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNOT {
		{
			p.SetState(5603)
			p.Match(MySqlParserNOT)
		}

	}
	{
		p.SetState(5606)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserNULL_LITERAL || _la == MySqlParserNULL_SPEC_LITERAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNullLiteral returns the nullLiteral token.
	GetNullLiteral() antlr.Token

	// SetNullLiteral sets the nullLiteral token.
	SetNullLiteral(antlr.Token)

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	nullLiteral antlr.Token
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) GetNullLiteral() antlr.Token { return s.nullLiteral }

func (s *ConstantContext) SetNullLiteral(v antlr.Token) { s.nullLiteral = v }

func (s *ConstantContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *ConstantContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *ConstantContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, 0)
}

func (s *ConstantContext) HexadecimalLiteral() IHexadecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexadecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHexadecimalLiteralContext)
}

func (s *ConstantContext) BooleanLiteral() IBooleanLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanLiteralContext)
}

func (s *ConstantContext) REAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAL_LITERAL, 0)
}

func (s *ConstantContext) BIT_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_STRING, 0)
}

func (s *ConstantContext) NULL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_LITERAL, 0)
}

func (s *ConstantContext) NULL_SPEC_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_SPEC_LITERAL, 0)
}

func (s *ConstantContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitConstant(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Constant() (localctx IConstantContext) {
	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 544, MySqlParserRULE_constant)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5620)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 814, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5608)
			p.StringLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5609)
			p.DecimalLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5610)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(5611)
			p.DecimalLiteral()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5612)
			p.HexadecimalLiteral()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5613)
			p.BooleanLiteral()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5614)
			p.Match(MySqlParserREAL_LITERAL)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5615)
			p.Match(MySqlParserBIT_STRING)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(5617)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(5616)
				p.Match(MySqlParserNOT)
			}

		}
		{
			p.SetState(5619)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ConstantContext).nullLiteral = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNULL_LITERAL || _la == MySqlParserNULL_SPEC_LITERAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ConstantContext).nullLiteral = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IDataTypeContext is an interface to support dynamic dispatch.
type IDataTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDataTypeContext differentiates from other interfaces.
	IsDataTypeContext()
}

type DataTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDataTypeContext() *DataTypeContext {
	var p = new(DataTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dataType
	return p
}

func (*DataTypeContext) IsDataTypeContext() {}

func NewDataTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataTypeContext {
	var p = new(DataTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dataType

	return p
}

func (s *DataTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *DataTypeContext) CopyFrom(ctx *DataTypeContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *DataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SpatialDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewSpatialDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SpatialDataTypeContext {
	var p = new(SpatialDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *SpatialDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *SpatialDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *SpatialDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpatialDataTypeContext) GEOMETRYCOLLECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYCOLLECTION, 0)
}

func (s *SpatialDataTypeContext) GEOMCOLLECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMCOLLECTION, 0)
}

func (s *SpatialDataTypeContext) LINESTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINESTRING, 0)
}

func (s *SpatialDataTypeContext) MULTILINESTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTILINESTRING, 0)
}

func (s *SpatialDataTypeContext) MULTIPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOINT, 0)
}

func (s *SpatialDataTypeContext) MULTIPOLYGON() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOLYGON, 0)
}

func (s *SpatialDataTypeContext) POINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINT, 0)
}

func (s *SpatialDataTypeContext) POLYGON() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYGON, 0)
}

func (s *SpatialDataTypeContext) JSON() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON, 0)
}

func (s *SpatialDataTypeContext) GEOMETRY() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRY, 0)
}

func (s *SpatialDataTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSpatialDataType(s)

	default:
		return t.VisitChildren(s)
	}
}

type LongVarbinaryDataTypeContext struct {
	*DataTypeContext
}

func NewLongVarbinaryDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LongVarbinaryDataTypeContext {
	var p = new(LongVarbinaryDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *LongVarbinaryDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LongVarbinaryDataTypeContext) LONG() antlr.TerminalNode {
	return s.GetToken(MySqlParserLONG, 0)
}

func (s *LongVarbinaryDataTypeContext) VARBINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARBINARY, 0)
}

func (s *LongVarbinaryDataTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLongVarbinaryDataType(s)

	default:
		return t.VisitChildren(s)
	}
}

type CollectionDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
	cs       antlr.Token
}

func NewCollectionDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CollectionDataTypeContext {
	var p = new(CollectionDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *CollectionDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *CollectionDataTypeContext) GetCs() antlr.Token { return s.cs }

func (s *CollectionDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *CollectionDataTypeContext) SetCs(v antlr.Token) { s.cs = v }

func (s *CollectionDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionDataTypeContext) CollectionOptions() ICollectionOptionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollectionOptionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollectionOptionsContext)
}

func (s *CollectionDataTypeContext) ENUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserENUM, 0)
}

func (s *CollectionDataTypeContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSET)
}

func (s *CollectionDataTypeContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, i)
}

func (s *CollectionDataTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *CollectionDataTypeContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *CollectionDataTypeContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *CollectionDataTypeContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET, 0)
}

func (s *CollectionDataTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCollectionDataType(s)

	default:
		return t.VisitChildren(s)
	}
}

type NationalVaryingStringDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewNationalVaryingStringDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NationalVaryingStringDataTypeContext {
	var p = new(NationalVaryingStringDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *NationalVaryingStringDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *NationalVaryingStringDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *NationalVaryingStringDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NationalVaryingStringDataTypeContext) NATIONAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNATIONAL, 0)
}

func (s *NationalVaryingStringDataTypeContext) VARYING() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARYING, 0)
}

func (s *NationalVaryingStringDataTypeContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *NationalVaryingStringDataTypeContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *NationalVaryingStringDataTypeContext) LengthOneDimension() ILengthOneDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthOneDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthOneDimensionContext)
}

func (s *NationalVaryingStringDataTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *NationalVaryingStringDataTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitNationalVaryingStringDataType(s)

	default:
		return t.VisitChildren(s)
	}
}

type DimensionDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewDimensionDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DimensionDataTypeContext {
	var p = new(DimensionDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *DimensionDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *DimensionDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *DimensionDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DimensionDataTypeContext) TINYINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTINYINT, 0)
}

func (s *DimensionDataTypeContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSMALLINT, 0)
}

func (s *DimensionDataTypeContext) MEDIUMINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUMINT, 0)
}

func (s *DimensionDataTypeContext) INT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT, 0)
}

func (s *DimensionDataTypeContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTEGER, 0)
}

func (s *DimensionDataTypeContext) BIGINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIGINT, 0)
}

func (s *DimensionDataTypeContext) MIDDLEINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIDDLEINT, 0)
}

func (s *DimensionDataTypeContext) INT1() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT1, 0)
}

func (s *DimensionDataTypeContext) INT2() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT2, 0)
}

func (s *DimensionDataTypeContext) INT3() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT3, 0)
}

func (s *DimensionDataTypeContext) INT4() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT4, 0)
}

func (s *DimensionDataTypeContext) INT8() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT8, 0)
}

func (s *DimensionDataTypeContext) LengthOneDimension() ILengthOneDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthOneDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthOneDimensionContext)
}

func (s *DimensionDataTypeContext) ZEROFILL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZEROFILL, 0)
}

func (s *DimensionDataTypeContext) SIGNED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIGNED, 0)
}

func (s *DimensionDataTypeContext) UNSIGNED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNSIGNED, 0)
}

func (s *DimensionDataTypeContext) REAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAL, 0)
}

func (s *DimensionDataTypeContext) LengthTwoDimension() ILengthTwoDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthTwoDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthTwoDimensionContext)
}

func (s *DimensionDataTypeContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOUBLE, 0)
}

func (s *DimensionDataTypeContext) PRECISION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRECISION, 0)
}

func (s *DimensionDataTypeContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL, 0)
}

func (s *DimensionDataTypeContext) DEC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEC, 0)
}

func (s *DimensionDataTypeContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIXED, 0)
}

func (s *DimensionDataTypeContext) NUMERIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMERIC, 0)
}

func (s *DimensionDataTypeContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLOAT, 0)
}

func (s *DimensionDataTypeContext) FLOAT4() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLOAT4, 0)
}

func (s *DimensionDataTypeContext) FLOAT8() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLOAT8, 0)
}

func (s *DimensionDataTypeContext) LengthTwoOptionalDimension() ILengthTwoOptionalDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthTwoOptionalDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthTwoOptionalDimensionContext)
}

func (s *DimensionDataTypeContext) BIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT, 0)
}

func (s *DimensionDataTypeContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *DimensionDataTypeContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMP, 0)
}

func (s *DimensionDataTypeContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATETIME, 0)
}

func (s *DimensionDataTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *DimensionDataTypeContext) VARBINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARBINARY, 0)
}

func (s *DimensionDataTypeContext) BLOB() antlr.TerminalNode {
	return s.GetToken(MySqlParserBLOB, 0)
}

func (s *DimensionDataTypeContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR, 0)
}

func (s *DimensionDataTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDimensionDataType(s)

	default:
		return t.VisitChildren(s)
	}
}

type StringDataTypeContext struct {
	*DataTypeContext
	typeName      antlr.Token
	binaryType    antlr.Token
	collateBinary antlr.Token
}

func NewStringDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StringDataTypeContext {
	var p = new(StringDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *StringDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *StringDataTypeContext) GetBinaryType() antlr.Token { return s.binaryType }

func (s *StringDataTypeContext) GetCollateBinary() antlr.Token { return s.collateBinary }

func (s *StringDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *StringDataTypeContext) SetBinaryType(v antlr.Token) { s.binaryType = v }

func (s *StringDataTypeContext) SetCollateBinary(v antlr.Token) { s.collateBinary = v }

func (s *StringDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringDataTypeContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *StringDataTypeContext) AllCHARACTER() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCHARACTER)
}

func (s *StringDataTypeContext) CHARACTER(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, i)
}

func (s *StringDataTypeContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARCHAR, 0)
}

func (s *StringDataTypeContext) TINYTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTINYTEXT, 0)
}

func (s *StringDataTypeContext) TEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEXT, 0)
}

func (s *StringDataTypeContext) MEDIUMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUMTEXT, 0)
}

func (s *StringDataTypeContext) LONGTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLONGTEXT, 0)
}

func (s *StringDataTypeContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserNCHAR, 0)
}

func (s *StringDataTypeContext) NVARCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserNVARCHAR, 0)
}

func (s *StringDataTypeContext) LONG() antlr.TerminalNode {
	return s.GetToken(MySqlParserLONG, 0)
}

func (s *StringDataTypeContext) VARYING() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARYING, 0)
}

func (s *StringDataTypeContext) LengthOneDimension() ILengthOneDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthOneDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthOneDimensionContext)
}

func (s *StringDataTypeContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *StringDataTypeContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *StringDataTypeContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *StringDataTypeContext) AllBINARY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserBINARY)
}

func (s *StringDataTypeContext) BINARY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, i)
}

func (s *StringDataTypeContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *StringDataTypeContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET, 0)
}

func (s *StringDataTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStringDataType(s)

	default:
		return t.VisitChildren(s)
	}
}

type LongVarcharDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewLongVarcharDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LongVarcharDataTypeContext {
	var p = new(LongVarcharDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *LongVarcharDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *LongVarcharDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *LongVarcharDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LongVarcharDataTypeContext) LONG() antlr.TerminalNode {
	return s.GetToken(MySqlParserLONG, 0)
}

func (s *LongVarcharDataTypeContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARCHAR, 0)
}

func (s *LongVarcharDataTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *LongVarcharDataTypeContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *LongVarcharDataTypeContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *LongVarcharDataTypeContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *LongVarcharDataTypeContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *LongVarcharDataTypeContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *LongVarcharDataTypeContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET, 0)
}

func (s *LongVarcharDataTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLongVarcharDataType(s)

	default:
		return t.VisitChildren(s)
	}
}

type NationalStringDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewNationalStringDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NationalStringDataTypeContext {
	var p = new(NationalStringDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *NationalStringDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *NationalStringDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *NationalStringDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NationalStringDataTypeContext) NATIONAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNATIONAL, 0)
}

func (s *NationalStringDataTypeContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARCHAR, 0)
}

func (s *NationalStringDataTypeContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *NationalStringDataTypeContext) LengthOneDimension() ILengthOneDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthOneDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthOneDimensionContext)
}

func (s *NationalStringDataTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *NationalStringDataTypeContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserNCHAR, 0)
}

func (s *NationalStringDataTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitNationalStringDataType(s)

	default:
		return t.VisitChildren(s)
	}
}

type SimpleDataTypeContext struct {
	*DataTypeContext
	typeName antlr.Token
}

func NewSimpleDataTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleDataTypeContext {
	var p = new(SimpleDataTypeContext)

	p.DataTypeContext = NewEmptyDataTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*DataTypeContext))

	return p
}

func (s *SimpleDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *SimpleDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *SimpleDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleDataTypeContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *SimpleDataTypeContext) TINYBLOB() antlr.TerminalNode {
	return s.GetToken(MySqlParserTINYBLOB, 0)
}

func (s *SimpleDataTypeContext) MEDIUMBLOB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUMBLOB, 0)
}

func (s *SimpleDataTypeContext) LONGBLOB() antlr.TerminalNode {
	return s.GetToken(MySqlParserLONGBLOB, 0)
}

func (s *SimpleDataTypeContext) BOOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserBOOL, 0)
}

func (s *SimpleDataTypeContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBOOLEAN, 0)
}

func (s *SimpleDataTypeContext) SERIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERIAL, 0)
}

func (s *SimpleDataTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimpleDataType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DataType() (localctx IDataTypeContext) {
	localctx = NewDataTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 546, MySqlParserRULE_dataType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5753)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 849, p.GetParserRuleContext()) {
	case 1:
		localctx = NewStringDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5622)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*StringDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCHARACTER || (((_la-206)&-(0x1f+1)) == 0 && ((1<<uint((_la-206)))&((1<<(MySqlParserCHAR-206))|(1<<(MySqlParserVARCHAR-206))|(1<<(MySqlParserNVARCHAR-206))|(1<<(MySqlParserLONG-206))|(1<<(MySqlParserTINYTEXT-206))|(1<<(MySqlParserTEXT-206))|(1<<(MySqlParserMEDIUMTEXT-206))|(1<<(MySqlParserLONGTEXT-206)))) != 0) || _la == MySqlParserNCHAR) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*StringDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5624)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVARYING {
			{
				p.SetState(5623)
				p.Match(MySqlParserVARYING)
			}

		}
		p.SetState(5627)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 816, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5626)
				p.LengthOneDimension()
			}

		}
		p.SetState(5630)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 817, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5629)

				var _m = p.Match(MySqlParserBINARY)

				localctx.(*StringDataTypeContext).binaryType = _m
			}

		}
		p.SetState(5638)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 819, p.GetParserRuleContext()) == 1 {
			p.SetState(5635)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserCHARACTER:
				{
					p.SetState(5632)
					p.Match(MySqlParserCHARACTER)
				}
				{
					p.SetState(5633)
					p.Match(MySqlParserSET)
				}

			case MySqlParserCHARSET:
				{
					p.SetState(5634)
					p.Match(MySqlParserCHARSET)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(5637)
				p.CharsetName()
			}

		}
		p.SetState(5643)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 820, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5640)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(5641)
				p.CollationName()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 820, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(5642)

				var _m = p.Match(MySqlParserBINARY)

				localctx.(*StringDataTypeContext).collateBinary = _m
			}

		}

	case 2:
		localctx = NewNationalStringDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5645)
			p.Match(MySqlParserNATIONAL)
		}
		{
			p.SetState(5646)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*NationalStringDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCHARACTER || _la == MySqlParserVARCHAR) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*NationalStringDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5648)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 821, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5647)
				p.LengthOneDimension()
			}

		}
		p.SetState(5651)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserBINARY {
			{
				p.SetState(5650)
				p.Match(MySqlParserBINARY)
			}

		}

	case 3:
		localctx = NewNationalStringDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5653)
			p.Match(MySqlParserNCHAR)
		}
		{
			p.SetState(5654)

			var _m = p.Match(MySqlParserVARCHAR)

			localctx.(*NationalStringDataTypeContext).typeName = _m
		}
		p.SetState(5656)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 823, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5655)
				p.LengthOneDimension()
			}

		}
		p.SetState(5659)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserBINARY {
			{
				p.SetState(5658)
				p.Match(MySqlParserBINARY)
			}

		}

	case 4:
		localctx = NewNationalVaryingStringDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5661)
			p.Match(MySqlParserNATIONAL)
		}
		{
			p.SetState(5662)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*NationalVaryingStringDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCHARACTER || _la == MySqlParserCHAR) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*NationalVaryingStringDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5663)
			p.Match(MySqlParserVARYING)
		}
		p.SetState(5665)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 825, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5664)
				p.LengthOneDimension()
			}

		}
		p.SetState(5668)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserBINARY {
			{
				p.SetState(5667)
				p.Match(MySqlParserBINARY)
			}

		}

	case 5:
		localctx = NewDimensionDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5670)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DimensionDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-180)&-(0x1f+1)) == 0 && ((1<<uint((_la-180)))&((1<<(MySqlParserTINYINT-180))|(1<<(MySqlParserSMALLINT-180))|(1<<(MySqlParserMEDIUMINT-180))|(1<<(MySqlParserMIDDLEINT-180))|(1<<(MySqlParserINT-180))|(1<<(MySqlParserINT1-180))|(1<<(MySqlParserINT2-180))|(1<<(MySqlParserINT3-180))|(1<<(MySqlParserINT4-180))|(1<<(MySqlParserINT8-180))|(1<<(MySqlParserINTEGER-180))|(1<<(MySqlParserBIGINT-180)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DimensionDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5672)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 827, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5671)
				p.LengthOneDimension()
			}

		}
		p.SetState(5675)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 828, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5674)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserUNSIGNED || _la == MySqlParserSIGNED) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(5678)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserZEROFILL {
			{
				p.SetState(5677)
				p.Match(MySqlParserZEROFILL)
			}

		}

	case 6:
		localctx = NewDimensionDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5680)

			var _m = p.Match(MySqlParserREAL)

			localctx.(*DimensionDataTypeContext).typeName = _m
		}
		p.SetState(5682)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 830, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5681)
				p.LengthTwoDimension()
			}

		}
		p.SetState(5685)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 831, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5684)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserUNSIGNED || _la == MySqlParserSIGNED) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(5688)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserZEROFILL {
			{
				p.SetState(5687)
				p.Match(MySqlParserZEROFILL)
			}

		}

	case 7:
		localctx = NewDimensionDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5690)

			var _m = p.Match(MySqlParserDOUBLE)

			localctx.(*DimensionDataTypeContext).typeName = _m
		}
		p.SetState(5692)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPRECISION {
			{
				p.SetState(5691)
				p.Match(MySqlParserPRECISION)
			}

		}
		p.SetState(5695)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 834, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5694)
				p.LengthTwoDimension()
			}

		}
		p.SetState(5698)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 835, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5697)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserUNSIGNED || _la == MySqlParserSIGNED) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(5701)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserZEROFILL {
			{
				p.SetState(5700)
				p.Match(MySqlParserZEROFILL)
			}

		}

	case 8:
		localctx = NewDimensionDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5703)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DimensionDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !((((_la-195)&-(0x1f+1)) == 0 && ((1<<uint((_la-195)))&((1<<(MySqlParserFLOAT-195))|(1<<(MySqlParserFLOAT4-195))|(1<<(MySqlParserFLOAT8-195))|(1<<(MySqlParserDECIMAL-195))|(1<<(MySqlParserDEC-195))|(1<<(MySqlParserNUMERIC-195)))) != 0) || _la == MySqlParserFIXED) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DimensionDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5705)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 837, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5704)
				p.LengthTwoOptionalDimension()
			}

		}
		p.SetState(5708)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 838, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5707)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserUNSIGNED || _la == MySqlParserSIGNED) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(5711)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserZEROFILL {
			{
				p.SetState(5710)
				p.Match(MySqlParserZEROFILL)
			}

		}

	case 9:
		localctx = NewSimpleDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5713)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SimpleDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !((((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTINYBLOB-201))|(1<<(MySqlParserMEDIUMBLOB-201))|(1<<(MySqlParserLONGBLOB-201))|(1<<(MySqlParserSERIAL-201)))) != 0) || _la == MySqlParserBOOL || _la == MySqlParserBOOLEAN) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SimpleDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 10:
		localctx = NewDimensionDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5714)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DimensionDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !((((_la-202)&-(0x1f+1)) == 0 && ((1<<uint((_la-202)))&((1<<(MySqlParserTIME-202))|(1<<(MySqlParserTIMESTAMP-202))|(1<<(MySqlParserDATETIME-202))|(1<<(MySqlParserYEAR-202))|(1<<(MySqlParserBINARY-202))|(1<<(MySqlParserVARBINARY-202))|(1<<(MySqlParserBLOB-202)))) != 0) || _la == MySqlParserBIT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DimensionDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5716)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 840, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5715)
				p.LengthOneDimension()
			}

		}

	case 11:
		localctx = NewCollectionDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5718)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*CollectionDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserSET || _la == MySqlParserENUM) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*CollectionDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5719)
			p.CollectionOptions()
		}
		p.SetState(5721)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserBINARY {
			{
				p.SetState(5720)
				p.Match(MySqlParserBINARY)
			}

		}
		p.SetState(5729)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 843, p.GetParserRuleContext()) == 1 {
			p.SetState(5726)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserCHARACTER:
				{
					p.SetState(5723)
					p.Match(MySqlParserCHARACTER)
				}
				{
					p.SetState(5724)

					var _m = p.Match(MySqlParserSET)

					localctx.(*CollectionDataTypeContext).cs = _m
				}

			case MySqlParserCHARSET:
				{
					p.SetState(5725)
					p.Match(MySqlParserCHARSET)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(5728)
				p.CharsetName()
			}

		}

	case 12:
		localctx = NewSpatialDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5731)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SpatialDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserJSON || (((_la-734)&-(0x1f+1)) == 0 && ((1<<uint((_la-734)))&((1<<(MySqlParserGEOMETRYCOLLECTION-734))|(1<<(MySqlParserGEOMCOLLECTION-734))|(1<<(MySqlParserGEOMETRY-734))|(1<<(MySqlParserLINESTRING-734))|(1<<(MySqlParserMULTILINESTRING-734))|(1<<(MySqlParserMULTIPOINT-734))|(1<<(MySqlParserMULTIPOLYGON-734))|(1<<(MySqlParserPOINT-734))|(1<<(MySqlParserPOLYGON-734)))) != 0)) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SpatialDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 13:
		localctx = NewLongVarcharDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5732)

			var _m = p.Match(MySqlParserLONG)

			localctx.(*LongVarcharDataTypeContext).typeName = _m
		}
		p.SetState(5734)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVARCHAR {
			{
				p.SetState(5733)
				p.Match(MySqlParserVARCHAR)
			}

		}
		p.SetState(5737)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserBINARY {
			{
				p.SetState(5736)
				p.Match(MySqlParserBINARY)
			}

		}
		p.SetState(5745)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 847, p.GetParserRuleContext()) == 1 {
			p.SetState(5742)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserCHARACTER:
				{
					p.SetState(5739)
					p.Match(MySqlParserCHARACTER)
				}
				{
					p.SetState(5740)
					p.Match(MySqlParserSET)
				}

			case MySqlParserCHARSET:
				{
					p.SetState(5741)
					p.Match(MySqlParserCHARSET)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(5744)
				p.CharsetName()
			}

		}
		p.SetState(5749)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 848, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5747)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(5748)
				p.CollationName()
			}

		}

	case 14:
		localctx = NewLongVarbinaryDataTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(5751)
			p.Match(MySqlParserLONG)
		}
		{
			p.SetState(5752)
			p.Match(MySqlParserVARBINARY)
		}

	}

	return localctx
}

// ICollectionOptionsContext is an interface to support dynamic dispatch.
type ICollectionOptionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollectionOptionsContext differentiates from other interfaces.
	IsCollectionOptionsContext()
}

type CollectionOptionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectionOptionsContext() *CollectionOptionsContext {
	var p = new(CollectionOptionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_collectionOptions
	return p
}

func (*CollectionOptionsContext) IsCollectionOptionsContext() {}

func NewCollectionOptionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectionOptionsContext {
	var p = new(CollectionOptionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_collectionOptions

	return p
}

func (s *CollectionOptionsContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectionOptionsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CollectionOptionsContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *CollectionOptionsContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *CollectionOptionsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CollectionOptionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *CollectionOptionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *CollectionOptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionOptionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectionOptionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCollectionOptions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CollectionOptions() (localctx ICollectionOptionsContext) {
	localctx = NewCollectionOptionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 548, MySqlParserRULE_collectionOptions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5755)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(5756)
		p.Match(MySqlParserSTRING_LITERAL)
	}
	p.SetState(5761)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5757)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5758)
			p.Match(MySqlParserSTRING_LITERAL)
		}

		p.SetState(5763)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5764)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IConvertedDataTypeContext is an interface to support dynamic dispatch.
type IConvertedDataTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTypeName returns the typeName token.
	GetTypeName() antlr.Token

	// SetTypeName sets the typeName token.
	SetTypeName(antlr.Token)

	// IsConvertedDataTypeContext differentiates from other interfaces.
	IsConvertedDataTypeContext()
}

type ConvertedDataTypeContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	typeName antlr.Token
}

func NewEmptyConvertedDataTypeContext() *ConvertedDataTypeContext {
	var p = new(ConvertedDataTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_convertedDataType
	return p
}

func (*ConvertedDataTypeContext) IsConvertedDataTypeContext() {}

func NewConvertedDataTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConvertedDataTypeContext {
	var p = new(ConvertedDataTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_convertedDataType

	return p
}

func (s *ConvertedDataTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ConvertedDataTypeContext) GetTypeName() antlr.Token { return s.typeName }

func (s *ConvertedDataTypeContext) SetTypeName(v antlr.Token) { s.typeName = v }

func (s *ConvertedDataTypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *ConvertedDataTypeContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserNCHAR, 0)
}

func (s *ConvertedDataTypeContext) LengthOneDimension() ILengthOneDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthOneDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthOneDimensionContext)
}

func (s *ConvertedDataTypeContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *ConvertedDataTypeContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *ConvertedDataTypeContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *ConvertedDataTypeContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *ConvertedDataTypeContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET, 0)
}

func (s *ConvertedDataTypeContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *ConvertedDataTypeContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATETIME, 0)
}

func (s *ConvertedDataTypeContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *ConvertedDataTypeContext) JSON() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON, 0)
}

func (s *ConvertedDataTypeContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL, 0)
}

func (s *ConvertedDataTypeContext) LengthTwoDimension() ILengthTwoDimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILengthTwoDimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILengthTwoDimensionContext)
}

func (s *ConvertedDataTypeContext) SIGNED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIGNED, 0)
}

func (s *ConvertedDataTypeContext) UNSIGNED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNSIGNED, 0)
}

func (s *ConvertedDataTypeContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTEGER, 0)
}

func (s *ConvertedDataTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConvertedDataTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConvertedDataTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitConvertedDataType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ConvertedDataType() (localctx IConvertedDataTypeContext) {
	localctx = NewConvertedDataTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 550, MySqlParserRULE_convertedDataType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5791)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserBINARY, MySqlParserNCHAR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5766)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ConvertedDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserBINARY || _la == MySqlParserNCHAR) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ConvertedDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5768)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(5767)
				p.LengthOneDimension()
			}

		}

	case MySqlParserCHAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5770)

			var _m = p.Match(MySqlParserCHAR)

			localctx.(*ConvertedDataTypeContext).typeName = _m
		}
		p.SetState(5772)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(5771)
				p.LengthOneDimension()
			}

		}
		p.SetState(5780)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCHARACTER || _la == MySqlParserCHARSET {
			p.SetState(5777)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserCHARACTER:
				{
					p.SetState(5774)
					p.Match(MySqlParserCHARACTER)
				}
				{
					p.SetState(5775)
					p.Match(MySqlParserSET)
				}

			case MySqlParserCHARSET:
				{
					p.SetState(5776)
					p.Match(MySqlParserCHARSET)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(5779)
				p.CharsetName()
			}

		}

	case MySqlParserDATE, MySqlParserTIME, MySqlParserDATETIME, MySqlParserJSON:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5782)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ConvertedDataTypeContext).typeName = _lt

			_la = p.GetTokenStream().LA(1)

			if !((((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserDATETIME-201)))) != 0) || _la == MySqlParserJSON) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ConvertedDataTypeContext).typeName = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MySqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5783)

			var _m = p.Match(MySqlParserDECIMAL)

			localctx.(*ConvertedDataTypeContext).typeName = _m
		}
		p.SetState(5785)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(5784)
				p.LengthTwoDimension()
			}

		}

	case MySqlParserUNSIGNED, MySqlParserSIGNED:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5787)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserUNSIGNED || _la == MySqlParserSIGNED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5789)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINTEGER {
			{
				p.SetState(5788)
				p.Match(MySqlParserINTEGER)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILengthOneDimensionContext is an interface to support dynamic dispatch.
type ILengthOneDimensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLengthOneDimensionContext differentiates from other interfaces.
	IsLengthOneDimensionContext()
}

type LengthOneDimensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLengthOneDimensionContext() *LengthOneDimensionContext {
	var p = new(LengthOneDimensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lengthOneDimension
	return p
}

func (*LengthOneDimensionContext) IsLengthOneDimensionContext() {}

func NewLengthOneDimensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LengthOneDimensionContext {
	var p = new(LengthOneDimensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lengthOneDimension

	return p
}

func (s *LengthOneDimensionContext) GetParser() antlr.Parser { return s.parser }

func (s *LengthOneDimensionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *LengthOneDimensionContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LengthOneDimensionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *LengthOneDimensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LengthOneDimensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LengthOneDimensionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLengthOneDimension(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LengthOneDimension() (localctx ILengthOneDimensionContext) {
	localctx = NewLengthOneDimensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 552, MySqlParserRULE_lengthOneDimension)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5793)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(5794)
		p.DecimalLiteral()
	}
	{
		p.SetState(5795)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// ILengthTwoDimensionContext is an interface to support dynamic dispatch.
type ILengthTwoDimensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLengthTwoDimensionContext differentiates from other interfaces.
	IsLengthTwoDimensionContext()
}

type LengthTwoDimensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLengthTwoDimensionContext() *LengthTwoDimensionContext {
	var p = new(LengthTwoDimensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lengthTwoDimension
	return p
}

func (*LengthTwoDimensionContext) IsLengthTwoDimensionContext() {}

func NewLengthTwoDimensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LengthTwoDimensionContext {
	var p = new(LengthTwoDimensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lengthTwoDimension

	return p
}

func (s *LengthTwoDimensionContext) GetParser() antlr.Parser { return s.parser }

func (s *LengthTwoDimensionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *LengthTwoDimensionContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *LengthTwoDimensionContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LengthTwoDimensionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *LengthTwoDimensionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *LengthTwoDimensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LengthTwoDimensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LengthTwoDimensionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLengthTwoDimension(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LengthTwoDimension() (localctx ILengthTwoDimensionContext) {
	localctx = NewLengthTwoDimensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 554, MySqlParserRULE_lengthTwoDimension)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5797)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(5798)
		p.DecimalLiteral()
	}
	{
		p.SetState(5799)
		p.Match(MySqlParserCOMMA)
	}
	{
		p.SetState(5800)
		p.DecimalLiteral()
	}
	{
		p.SetState(5801)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// ILengthTwoOptionalDimensionContext is an interface to support dynamic dispatch.
type ILengthTwoOptionalDimensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLengthTwoOptionalDimensionContext differentiates from other interfaces.
	IsLengthTwoOptionalDimensionContext()
}

type LengthTwoOptionalDimensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLengthTwoOptionalDimensionContext() *LengthTwoOptionalDimensionContext {
	var p = new(LengthTwoOptionalDimensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lengthTwoOptionalDimension
	return p
}

func (*LengthTwoOptionalDimensionContext) IsLengthTwoOptionalDimensionContext() {}

func NewLengthTwoOptionalDimensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LengthTwoOptionalDimensionContext {
	var p = new(LengthTwoOptionalDimensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lengthTwoOptionalDimension

	return p
}

func (s *LengthTwoOptionalDimensionContext) GetParser() antlr.Parser { return s.parser }

func (s *LengthTwoOptionalDimensionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *LengthTwoOptionalDimensionContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *LengthTwoOptionalDimensionContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LengthTwoOptionalDimensionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *LengthTwoOptionalDimensionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *LengthTwoOptionalDimensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LengthTwoOptionalDimensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LengthTwoOptionalDimensionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLengthTwoOptionalDimension(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LengthTwoOptionalDimension() (localctx ILengthTwoOptionalDimensionContext) {
	localctx = NewLengthTwoOptionalDimensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 556, MySqlParserRULE_lengthTwoOptionalDimension)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5803)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(5804)
		p.DecimalLiteral()
	}
	p.SetState(5807)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMA {
		{
			p.SetState(5805)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5806)
			p.DecimalLiteral()
		}

	}
	{
		p.SetState(5809)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IUidListContext is an interface to support dynamic dispatch.
type IUidListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUidListContext differentiates from other interfaces.
	IsUidListContext()
}

type UidListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUidListContext() *UidListContext {
	var p = new(UidListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_uidList
	return p
}

func (*UidListContext) IsUidListContext() {}

func NewUidListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UidListContext {
	var p = new(UidListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_uidList

	return p
}

func (s *UidListContext) GetParser() antlr.Parser { return s.parser }

func (s *UidListContext) AllUid() []IUidContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUidContext)(nil)).Elem())
	var tst = make([]IUidContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUidContext)
		}
	}

	return tst
}

func (s *UidListContext) Uid(i int) IUidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUidContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUidContext)
}

func (s *UidListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *UidListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *UidListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UidListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UidListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUidList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UidList() (localctx IUidListContext) {
	localctx = NewUidListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 558, MySqlParserRULE_uidList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5811)
		p.Uid()
	}
	p.SetState(5816)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 859, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5812)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5813)
				p.Uid()
			}

		}
		p.SetState(5818)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 859, p.GetParserRuleContext())
	}

	return localctx
}

// ITablesContext is an interface to support dynamic dispatch.
type ITablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTablesContext differentiates from other interfaces.
	IsTablesContext()
}

type TablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTablesContext() *TablesContext {
	var p = new(TablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tables
	return p
}

func (*TablesContext) IsTablesContext() {}

func NewTablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TablesContext {
	var p = new(TablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tables

	return p
}

func (s *TablesContext) GetParser() antlr.Parser { return s.parser }

func (s *TablesContext) AllTableName() []ITableNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITableNameContext)(nil)).Elem())
	var tst = make([]ITableNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITableNameContext)
		}
	}

	return tst
}

func (s *TablesContext) TableName(i int) ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *TablesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *TablesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *TablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTables(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Tables() (localctx ITablesContext) {
	localctx = NewTablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 560, MySqlParserRULE_tables)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5819)
		p.TableName()
	}
	p.SetState(5824)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 860, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5820)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5821)
				p.TableName()
			}

		}
		p.SetState(5826)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 860, p.GetParserRuleContext())
	}

	return localctx
}

// IIndexColumnNamesContext is an interface to support dynamic dispatch.
type IIndexColumnNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexColumnNamesContext differentiates from other interfaces.
	IsIndexColumnNamesContext()
}

type IndexColumnNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexColumnNamesContext() *IndexColumnNamesContext {
	var p = new(IndexColumnNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_indexColumnNames
	return p
}

func (*IndexColumnNamesContext) IsIndexColumnNamesContext() {}

func NewIndexColumnNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexColumnNamesContext {
	var p = new(IndexColumnNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_indexColumnNames

	return p
}

func (s *IndexColumnNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexColumnNamesContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *IndexColumnNamesContext) AllIndexColumnName() []IIndexColumnNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndexColumnNameContext)(nil)).Elem())
	var tst = make([]IIndexColumnNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndexColumnNameContext)
		}
	}

	return tst
}

func (s *IndexColumnNamesContext) IndexColumnName(i int) IIndexColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexColumnNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndexColumnNameContext)
}

func (s *IndexColumnNamesContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *IndexColumnNamesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *IndexColumnNamesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *IndexColumnNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexColumnNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexColumnNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIndexColumnNames(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IndexColumnNames() (localctx IIndexColumnNamesContext) {
	localctx = NewIndexColumnNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 562, MySqlParserRULE_indexColumnNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5827)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(5828)
		p.IndexColumnName()
	}
	p.SetState(5833)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5829)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5830)
			p.IndexColumnName()
		}

		p.SetState(5835)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5836)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IExpressionsContext is an interface to support dynamic dispatch.
type IExpressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionsContext differentiates from other interfaces.
	IsExpressionsContext()
}

type ExpressionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionsContext() *ExpressionsContext {
	var p = new(ExpressionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_expressions
	return p
}

func (*ExpressionsContext) IsExpressionsContext() {}

func NewExpressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionsContext {
	var p = new(ExpressionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_expressions

	return p
}

func (s *ExpressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionsContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionsContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ExpressionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ExpressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitExpressions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Expressions() (localctx IExpressionsContext) {
	localctx = NewExpressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 564, MySqlParserRULE_expressions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5838)
		p.expression(0)
	}
	p.SetState(5843)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5839)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5840)
			p.expression(0)
		}

		p.SetState(5845)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IExpressionsWithDefaultsContext is an interface to support dynamic dispatch.
type IExpressionsWithDefaultsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionsWithDefaultsContext differentiates from other interfaces.
	IsExpressionsWithDefaultsContext()
}

type ExpressionsWithDefaultsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionsWithDefaultsContext() *ExpressionsWithDefaultsContext {
	var p = new(ExpressionsWithDefaultsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_expressionsWithDefaults
	return p
}

func (*ExpressionsWithDefaultsContext) IsExpressionsWithDefaultsContext() {}

func NewExpressionsWithDefaultsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionsWithDefaultsContext {
	var p = new(ExpressionsWithDefaultsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_expressionsWithDefaults

	return p
}

func (s *ExpressionsWithDefaultsContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionsWithDefaultsContext) AllExpressionOrDefault() []IExpressionOrDefaultContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionOrDefaultContext)(nil)).Elem())
	var tst = make([]IExpressionOrDefaultContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionOrDefaultContext)
		}
	}

	return tst
}

func (s *ExpressionsWithDefaultsContext) ExpressionOrDefault(i int) IExpressionOrDefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionOrDefaultContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionOrDefaultContext)
}

func (s *ExpressionsWithDefaultsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ExpressionsWithDefaultsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ExpressionsWithDefaultsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionsWithDefaultsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionsWithDefaultsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitExpressionsWithDefaults(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ExpressionsWithDefaults() (localctx IExpressionsWithDefaultsContext) {
	localctx = NewExpressionsWithDefaultsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 566, MySqlParserRULE_expressionsWithDefaults)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5846)
		p.ExpressionOrDefault()
	}
	p.SetState(5851)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5847)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5848)
			p.ExpressionOrDefault()
		}

		p.SetState(5853)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IConstantsContext is an interface to support dynamic dispatch.
type IConstantsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantsContext differentiates from other interfaces.
	IsConstantsContext()
}

type ConstantsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantsContext() *ConstantsContext {
	var p = new(ConstantsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_constants
	return p
}

func (*ConstantsContext) IsConstantsContext() {}

func NewConstantsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantsContext {
	var p = new(ConstantsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_constants

	return p
}

func (s *ConstantsContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantsContext) AllConstant() []IConstantContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstantContext)(nil)).Elem())
	var tst = make([]IConstantContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstantContext)
		}
	}

	return tst
}

func (s *ConstantsContext) Constant(i int) IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *ConstantsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *ConstantsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *ConstantsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitConstants(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Constants() (localctx IConstantsContext) {
	localctx = NewConstantsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 568, MySqlParserRULE_constants)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5854)
		p.Constant()
	}
	p.SetState(5859)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5855)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5856)
			p.Constant()
		}

		p.SetState(5861)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISimpleStringsContext is an interface to support dynamic dispatch.
type ISimpleStringsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleStringsContext differentiates from other interfaces.
	IsSimpleStringsContext()
}

type SimpleStringsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleStringsContext() *SimpleStringsContext {
	var p = new(SimpleStringsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_simpleStrings
	return p
}

func (*SimpleStringsContext) IsSimpleStringsContext() {}

func NewSimpleStringsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleStringsContext {
	var p = new(SimpleStringsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_simpleStrings

	return p
}

func (s *SimpleStringsContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleStringsContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *SimpleStringsContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *SimpleStringsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *SimpleStringsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *SimpleStringsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleStringsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleStringsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimpleStrings(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SimpleStrings() (localctx ISimpleStringsContext) {
	localctx = NewSimpleStringsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 570, MySqlParserRULE_simpleStrings)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5862)
		p.Match(MySqlParserSTRING_LITERAL)
	}
	p.SetState(5867)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5863)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5864)
			p.Match(MySqlParserSTRING_LITERAL)
		}

		p.SetState(5869)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUserVariablesContext is an interface to support dynamic dispatch.
type IUserVariablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserVariablesContext differentiates from other interfaces.
	IsUserVariablesContext()
}

type UserVariablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserVariablesContext() *UserVariablesContext {
	var p = new(UserVariablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_userVariables
	return p
}

func (*UserVariablesContext) IsUserVariablesContext() {}

func NewUserVariablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserVariablesContext {
	var p = new(UserVariablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_userVariables

	return p
}

func (s *UserVariablesContext) GetParser() antlr.Parser { return s.parser }

func (s *UserVariablesContext) AllLOCAL_ID() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLOCAL_ID)
}

func (s *UserVariablesContext) LOCAL_ID(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, i)
}

func (s *UserVariablesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *UserVariablesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *UserVariablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserVariablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserVariablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUserVariables(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UserVariables() (localctx IUserVariablesContext) {
	localctx = NewUserVariablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 572, MySqlParserRULE_userVariables)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5870)
		p.Match(MySqlParserLOCAL_ID)
	}
	p.SetState(5875)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5871)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5872)
			p.Match(MySqlParserLOCAL_ID)
		}

		p.SetState(5877)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDefaultValueContext is an interface to support dynamic dispatch.
type IDefaultValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultValueContext differentiates from other interfaces.
	IsDefaultValueContext()
}

type DefaultValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultValueContext() *DefaultValueContext {
	var p = new(DefaultValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_defaultValue
	return p
}

func (*DefaultValueContext) IsDefaultValueContext() {}

func NewDefaultValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultValueContext {
	var p = new(DefaultValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_defaultValue

	return p
}

func (s *DefaultValueContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultValueContext) NULL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_LITERAL, 0)
}

func (s *DefaultValueContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *DefaultValueContext) AllCurrentTimestamp() []ICurrentTimestampContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICurrentTimestampContext)(nil)).Elem())
	var tst = make([]ICurrentTimestampContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICurrentTimestampContext)
		}
	}

	return tst
}

func (s *DefaultValueContext) CurrentTimestamp(i int) ICurrentTimestampContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICurrentTimestampContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICurrentTimestampContext)
}

func (s *DefaultValueContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *DefaultValueContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DefaultValueContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *DefaultValueContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *DefaultValueContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *DefaultValueContext) UnaryOperator() IUnaryOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryOperatorContext)
}

func (s *DefaultValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDefaultValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DefaultValue() (localctx IDefaultValueContext) {
	localctx = NewDefaultValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 574, MySqlParserRULE_defaultValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5888)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 868, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5878)
			p.Match(MySqlParserNULL_LITERAL)
		}

	case 2:
		p.SetState(5880)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 867, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5879)
				p.UnaryOperator()
			}

		}
		{
			p.SetState(5882)
			p.Constant()
		}

	case 3:
		{
			p.SetState(5883)
			p.CurrentTimestamp()
		}

	case 4:
		{
			p.SetState(5884)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5885)
			p.expression(0)
		}
		{
			p.SetState(5886)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(5893)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 869, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5890)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(5891)
			p.Match(MySqlParserUPDATE)
		}
		{
			p.SetState(5892)
			p.CurrentTimestamp()
		}

	}

	return localctx
}

// ICurrentTimestampContext is an interface to support dynamic dispatch.
type ICurrentTimestampContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCurrentTimestampContext differentiates from other interfaces.
	IsCurrentTimestampContext()
}

type CurrentTimestampContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCurrentTimestampContext() *CurrentTimestampContext {
	var p = new(CurrentTimestampContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_currentTimestamp
	return p
}

func (*CurrentTimestampContext) IsCurrentTimestampContext() {}

func NewCurrentTimestampContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CurrentTimestampContext {
	var p = new(CurrentTimestampContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_currentTimestamp

	return p
}

func (s *CurrentTimestampContext) GetParser() antlr.Parser { return s.parser }

func (s *CurrentTimestampContext) NOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOW, 0)
}

func (s *CurrentTimestampContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CurrentTimestampContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CurrentTimestampContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIMESTAMP, 0)
}

func (s *CurrentTimestampContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCALTIME, 0)
}

func (s *CurrentTimestampContext) LOCALTIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCALTIMESTAMP, 0)
}

func (s *CurrentTimestampContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *CurrentTimestampContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CurrentTimestampContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CurrentTimestampContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCurrentTimestamp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CurrentTimestamp() (localctx ICurrentTimestampContext) {
	localctx = NewCurrentTimestampContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 576, MySqlParserRULE_currentTimestamp)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5909)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCURRENT_TIMESTAMP, MySqlParserLOCALTIME, MySqlParserLOCALTIMESTAMP:
		{
			p.SetState(5895)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-285)&-(0x1f+1)) == 0 && ((1<<uint((_la-285)))&((1<<(MySqlParserCURRENT_TIMESTAMP-285))|(1<<(MySqlParserLOCALTIME-285))|(1<<(MySqlParserLOCALTIMESTAMP-285)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5901)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 871, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5896)
				p.Match(MySqlParserLR_BRACKET)
			}
			p.SetState(5898)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if ((_la-1066)&-(0x1f+1)) == 0 && ((1<<uint((_la-1066)))&((1<<(MySqlParserZERO_DECIMAL-1066))|(1<<(MySqlParserONE_DECIMAL-1066))|(1<<(MySqlParserTWO_DECIMAL-1066))|(1<<(MySqlParserDECIMAL_LITERAL-1066)))) != 0 {
				{
					p.SetState(5897)
					p.DecimalLiteral()
				}

			}
			{
				p.SetState(5900)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case MySqlParserNOW:
		{
			p.SetState(5903)
			p.Match(MySqlParserNOW)
		}
		{
			p.SetState(5904)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5906)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-1066)&-(0x1f+1)) == 0 && ((1<<uint((_la-1066)))&((1<<(MySqlParserZERO_DECIMAL-1066))|(1<<(MySqlParserONE_DECIMAL-1066))|(1<<(MySqlParserTWO_DECIMAL-1066))|(1<<(MySqlParserDECIMAL_LITERAL-1066)))) != 0 {
			{
				p.SetState(5905)
				p.DecimalLiteral()
			}

		}
		{
			p.SetState(5908)
			p.Match(MySqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionOrDefaultContext is an interface to support dynamic dispatch.
type IExpressionOrDefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionOrDefaultContext differentiates from other interfaces.
	IsExpressionOrDefaultContext()
}

type ExpressionOrDefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionOrDefaultContext() *ExpressionOrDefaultContext {
	var p = new(ExpressionOrDefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_expressionOrDefault
	return p
}

func (*ExpressionOrDefaultContext) IsExpressionOrDefaultContext() {}

func NewExpressionOrDefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionOrDefaultContext {
	var p = new(ExpressionOrDefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_expressionOrDefault

	return p
}

func (s *ExpressionOrDefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionOrDefaultContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionOrDefaultContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *ExpressionOrDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionOrDefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionOrDefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitExpressionOrDefault(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ExpressionOrDefault() (localctx IExpressionOrDefaultContext) {
	localctx = NewExpressionOrDefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 578, MySqlParserRULE_expressionOrDefault)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5913)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 874, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5911)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5912)
			p.Match(MySqlParserDEFAULT)
		}

	}

	return localctx
}

// IIfExistsContext is an interface to support dynamic dispatch.
type IIfExistsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfExistsContext differentiates from other interfaces.
	IsIfExistsContext()
}

type IfExistsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfExistsContext() *IfExistsContext {
	var p = new(IfExistsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_ifExists
	return p
}

func (*IfExistsContext) IsIfExistsContext() {}

func NewIfExistsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfExistsContext {
	var p = new(IfExistsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_ifExists

	return p
}

func (s *IfExistsContext) GetParser() antlr.Parser { return s.parser }

func (s *IfExistsContext) IF() antlr.TerminalNode {
	return s.GetToken(MySqlParserIF, 0)
}

func (s *IfExistsContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXISTS, 0)
}

func (s *IfExistsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfExistsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfExistsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIfExists(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IfExists() (localctx IIfExistsContext) {
	localctx = NewIfExistsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 580, MySqlParserRULE_ifExists)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5915)
		p.Match(MySqlParserIF)
	}
	{
		p.SetState(5916)
		p.Match(MySqlParserEXISTS)
	}

	return localctx
}

// IIfNotExistsContext is an interface to support dynamic dispatch.
type IIfNotExistsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfNotExistsContext differentiates from other interfaces.
	IsIfNotExistsContext()
}

type IfNotExistsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfNotExistsContext() *IfNotExistsContext {
	var p = new(IfNotExistsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_ifNotExists
	return p
}

func (*IfNotExistsContext) IsIfNotExistsContext() {}

func NewIfNotExistsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfNotExistsContext {
	var p = new(IfNotExistsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_ifNotExists

	return p
}

func (s *IfNotExistsContext) GetParser() antlr.Parser { return s.parser }

func (s *IfNotExistsContext) IF() antlr.TerminalNode {
	return s.GetToken(MySqlParserIF, 0)
}

func (s *IfNotExistsContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *IfNotExistsContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXISTS, 0)
}

func (s *IfNotExistsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfNotExistsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfNotExistsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIfNotExists(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IfNotExists() (localctx IIfNotExistsContext) {
	localctx = NewIfNotExistsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 582, MySqlParserRULE_ifNotExists)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5918)
		p.Match(MySqlParserIF)
	}
	{
		p.SetState(5919)
		p.Match(MySqlParserNOT)
	}
	{
		p.SetState(5920)
		p.Match(MySqlParserEXISTS)
	}

	return localctx
}

// IFunctionCallContext is an interface to support dynamic dispatch.
type IFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallContext differentiates from other interfaces.
	IsFunctionCallContext()
}

type FunctionCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallContext() *FunctionCallContext {
	var p = new(FunctionCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_functionCall
	return p
}

func (*FunctionCallContext) IsFunctionCallContext() {}

func NewFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallContext {
	var p = new(FunctionCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_functionCall

	return p
}

func (s *FunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallContext) CopyFrom(ctx *FunctionCallContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SpecificFunctionCallContext struct {
	*FunctionCallContext
}

func NewSpecificFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SpecificFunctionCallContext {
	var p = new(SpecificFunctionCallContext)

	p.FunctionCallContext = NewEmptyFunctionCallContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctionCallContext))

	return p
}

func (s *SpecificFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecificFunctionCallContext) SpecificFunction() ISpecificFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecificFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecificFunctionContext)
}

func (s *SpecificFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSpecificFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type PasswordFunctionCallContext struct {
	*FunctionCallContext
}

func NewPasswordFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PasswordFunctionCallContext {
	var p = new(PasswordFunctionCallContext)

	p.FunctionCallContext = NewEmptyFunctionCallContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctionCallContext))

	return p
}

func (s *PasswordFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PasswordFunctionCallContext) PasswordFunctionClause() IPasswordFunctionClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPasswordFunctionClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPasswordFunctionClauseContext)
}

func (s *PasswordFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPasswordFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type UdfFunctionCallContext struct {
	*FunctionCallContext
}

func NewUdfFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UdfFunctionCallContext {
	var p = new(UdfFunctionCallContext)

	p.FunctionCallContext = NewEmptyFunctionCallContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctionCallContext))

	return p
}

func (s *UdfFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UdfFunctionCallContext) FullId() IFullIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullIdContext)
}

func (s *UdfFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *UdfFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *UdfFunctionCallContext) FunctionArgs() IFunctionArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgsContext)
}

func (s *UdfFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUdfFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type AggregateFunctionCallContext struct {
	*FunctionCallContext
}

func NewAggregateFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AggregateFunctionCallContext {
	var p = new(AggregateFunctionCallContext)

	p.FunctionCallContext = NewEmptyFunctionCallContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctionCallContext))

	return p
}

func (s *AggregateFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AggregateFunctionCallContext) AggregateWindowedFunction() IAggregateWindowedFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregateWindowedFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAggregateWindowedFunctionContext)
}

func (s *AggregateFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAggregateFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type ScalarFunctionCallContext struct {
	*FunctionCallContext
}

func NewScalarFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ScalarFunctionCallContext {
	var p = new(ScalarFunctionCallContext)

	p.FunctionCallContext = NewEmptyFunctionCallContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FunctionCallContext))

	return p
}

func (s *ScalarFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScalarFunctionCallContext) ScalarFunctionName() IScalarFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScalarFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScalarFunctionNameContext)
}

func (s *ScalarFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *ScalarFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *ScalarFunctionCallContext) FunctionArgs() IFunctionArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgsContext)
}

func (s *ScalarFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitScalarFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) FunctionCall() (localctx IFunctionCallContext) {
	localctx = NewFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 584, MySqlParserRULE_functionCall)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5939)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 877, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSpecificFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5922)
			p.SpecificFunction()
		}

	case 2:
		localctx = NewAggregateFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5923)
			p.AggregateWindowedFunction()
		}

	case 3:
		localctx = NewScalarFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5924)
			p.ScalarFunctionName()
		}
		{
			p.SetState(5925)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5927)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 875, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5926)
				p.FunctionArgs()
			}

		}
		{
			p.SetState(5929)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 4:
		localctx = NewUdfFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5931)
			p.FullId()
		}
		{
			p.SetState(5932)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5934)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 876, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5933)
				p.FunctionArgs()
			}

		}
		{
			p.SetState(5936)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 5:
		localctx = NewPasswordFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5938)
			p.PasswordFunctionClause()
		}

	}

	return localctx
}

// ISpecificFunctionContext is an interface to support dynamic dispatch.
type ISpecificFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecificFunctionContext differentiates from other interfaces.
	IsSpecificFunctionContext()
}

type SpecificFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecificFunctionContext() *SpecificFunctionContext {
	var p = new(SpecificFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_specificFunction
	return p
}

func (*SpecificFunctionContext) IsSpecificFunctionContext() {}

func NewSpecificFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SpecificFunctionContext {
	var p = new(SpecificFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_specificFunction

	return p
}

func (s *SpecificFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *SpecificFunctionContext) CopyFrom(ctx *SpecificFunctionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SpecificFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecificFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PositionFunctionCallContext struct {
	*SpecificFunctionContext
	positionString     IStringLiteralContext
	positionExpression IExpressionContext
	inString           IStringLiteralContext
	inExpression       IExpressionContext
}

func NewPositionFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PositionFunctionCallContext {
	var p = new(PositionFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *PositionFunctionCallContext) GetPositionString() IStringLiteralContext {
	return s.positionString
}

func (s *PositionFunctionCallContext) GetPositionExpression() IExpressionContext {
	return s.positionExpression
}

func (s *PositionFunctionCallContext) GetInString() IStringLiteralContext { return s.inString }

func (s *PositionFunctionCallContext) GetInExpression() IExpressionContext { return s.inExpression }

func (s *PositionFunctionCallContext) SetPositionString(v IStringLiteralContext) {
	s.positionString = v
}

func (s *PositionFunctionCallContext) SetPositionExpression(v IExpressionContext) {
	s.positionExpression = v
}

func (s *PositionFunctionCallContext) SetInString(v IStringLiteralContext) { s.inString = v }

func (s *PositionFunctionCallContext) SetInExpression(v IExpressionContext) { s.inExpression = v }

func (s *PositionFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PositionFunctionCallContext) POSITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOSITION, 0)
}

func (s *PositionFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PositionFunctionCallContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *PositionFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PositionFunctionCallContext) AllStringLiteral() []IStringLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem())
	var tst = make([]IStringLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStringLiteralContext)
		}
	}

	return tst
}

func (s *PositionFunctionCallContext) StringLiteral(i int) IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *PositionFunctionCallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PositionFunctionCallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PositionFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPositionFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type TrimFunctionCallContext struct {
	*SpecificFunctionContext
	positioinForm    antlr.Token
	sourceString     IStringLiteralContext
	sourceExpression IExpressionContext
	fromString       IStringLiteralContext
	fromExpression   IExpressionContext
}

func NewTrimFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TrimFunctionCallContext {
	var p = new(TrimFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *TrimFunctionCallContext) GetPositioinForm() antlr.Token { return s.positioinForm }

func (s *TrimFunctionCallContext) SetPositioinForm(v antlr.Token) { s.positioinForm = v }

func (s *TrimFunctionCallContext) GetSourceString() IStringLiteralContext { return s.sourceString }

func (s *TrimFunctionCallContext) GetSourceExpression() IExpressionContext { return s.sourceExpression }

func (s *TrimFunctionCallContext) GetFromString() IStringLiteralContext { return s.fromString }

func (s *TrimFunctionCallContext) GetFromExpression() IExpressionContext { return s.fromExpression }

func (s *TrimFunctionCallContext) SetSourceString(v IStringLiteralContext) { s.sourceString = v }

func (s *TrimFunctionCallContext) SetSourceExpression(v IExpressionContext) { s.sourceExpression = v }

func (s *TrimFunctionCallContext) SetFromString(v IStringLiteralContext) { s.fromString = v }

func (s *TrimFunctionCallContext) SetFromExpression(v IExpressionContext) { s.fromExpression = v }

func (s *TrimFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrimFunctionCallContext) TRIM() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIM, 0)
}

func (s *TrimFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *TrimFunctionCallContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *TrimFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *TrimFunctionCallContext) BOTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserBOTH, 0)
}

func (s *TrimFunctionCallContext) LEADING() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEADING, 0)
}

func (s *TrimFunctionCallContext) TRAILING() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRAILING, 0)
}

func (s *TrimFunctionCallContext) AllStringLiteral() []IStringLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem())
	var tst = make([]IStringLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStringLiteralContext)
		}
	}

	return tst
}

func (s *TrimFunctionCallContext) StringLiteral(i int) IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *TrimFunctionCallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TrimFunctionCallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TrimFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTrimFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type JsonValueFunctionCallContext struct {
	*SpecificFunctionContext
}

func NewJsonValueFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JsonValueFunctionCallContext {
	var p = new(JsonValueFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *JsonValueFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JsonValueFunctionCallContext) JSON_VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_VALUE, 0)
}

func (s *JsonValueFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *JsonValueFunctionCallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *JsonValueFunctionCallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JsonValueFunctionCallContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *JsonValueFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *JsonValueFunctionCallContext) RETURNING() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNING, 0)
}

func (s *JsonValueFunctionCallContext) ConvertedDataType() IConvertedDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConvertedDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConvertedDataTypeContext)
}

func (s *JsonValueFunctionCallContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *JsonValueFunctionCallContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *JsonValueFunctionCallContext) EMPTY() antlr.TerminalNode {
	return s.GetToken(MySqlParserEMPTY, 0)
}

func (s *JsonValueFunctionCallContext) AllERROR() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserERROR)
}

func (s *JsonValueFunctionCallContext) ERROR(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserERROR, i)
}

func (s *JsonValueFunctionCallContext) AllNULL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNULL)
}

func (s *JsonValueFunctionCallContext) NULL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL, i)
}

func (s *JsonValueFunctionCallContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDEFAULT)
}

func (s *JsonValueFunctionCallContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, i)
}

func (s *JsonValueFunctionCallContext) AllDefaultValue() []IDefaultValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDefaultValueContext)(nil)).Elem())
	var tst = make([]IDefaultValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDefaultValueContext)
		}
	}

	return tst
}

func (s *JsonValueFunctionCallContext) DefaultValue(i int) IDefaultValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDefaultValueContext)
}

func (s *JsonValueFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitJsonValueFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type CaseFunctionCallContext struct {
	*SpecificFunctionContext
	elseArg IFunctionArgContext
}

func NewCaseFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CaseFunctionCallContext {
	var p = new(CaseFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *CaseFunctionCallContext) GetElseArg() IFunctionArgContext { return s.elseArg }

func (s *CaseFunctionCallContext) SetElseArg(v IFunctionArgContext) { s.elseArg = v }

func (s *CaseFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseFunctionCallContext) CASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASE, 0)
}

func (s *CaseFunctionCallContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *CaseFunctionCallContext) AllCaseFuncAlternative() []ICaseFuncAlternativeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseFuncAlternativeContext)(nil)).Elem())
	var tst = make([]ICaseFuncAlternativeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseFuncAlternativeContext)
		}
	}

	return tst
}

func (s *CaseFunctionCallContext) CaseFuncAlternative(i int) ICaseFuncAlternativeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseFuncAlternativeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseFuncAlternativeContext)
}

func (s *CaseFunctionCallContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserELSE, 0)
}

func (s *CaseFunctionCallContext) FunctionArg() IFunctionArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgContext)
}

func (s *CaseFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCaseFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExtractFunctionCallContext struct {
	*SpecificFunctionContext
	sourceString     IStringLiteralContext
	sourceExpression IExpressionContext
}

func NewExtractFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExtractFunctionCallContext {
	var p = new(ExtractFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *ExtractFunctionCallContext) GetSourceString() IStringLiteralContext { return s.sourceString }

func (s *ExtractFunctionCallContext) GetSourceExpression() IExpressionContext {
	return s.sourceExpression
}

func (s *ExtractFunctionCallContext) SetSourceString(v IStringLiteralContext) { s.sourceString = v }

func (s *ExtractFunctionCallContext) SetSourceExpression(v IExpressionContext) {
	s.sourceExpression = v
}

func (s *ExtractFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtractFunctionCallContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTRACT, 0)
}

func (s *ExtractFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *ExtractFunctionCallContext) IntervalType() IIntervalTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalTypeContext)
}

func (s *ExtractFunctionCallContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ExtractFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *ExtractFunctionCallContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *ExtractFunctionCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExtractFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitExtractFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type DataTypeFunctionCallContext struct {
	*SpecificFunctionContext
	separator antlr.Token
}

func NewDataTypeFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DataTypeFunctionCallContext {
	var p = new(DataTypeFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *DataTypeFunctionCallContext) GetSeparator() antlr.Token { return s.separator }

func (s *DataTypeFunctionCallContext) SetSeparator(v antlr.Token) { s.separator = v }

func (s *DataTypeFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataTypeFunctionCallContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONVERT, 0)
}

func (s *DataTypeFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *DataTypeFunctionCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DataTypeFunctionCallContext) ConvertedDataType() IConvertedDataTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConvertedDataTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConvertedDataTypeContext)
}

func (s *DataTypeFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *DataTypeFunctionCallContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *DataTypeFunctionCallContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *DataTypeFunctionCallContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *DataTypeFunctionCallContext) CAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserCAST, 0)
}

func (s *DataTypeFunctionCallContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *DataTypeFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDataTypeFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type ValuesFunctionCallContext struct {
	*SpecificFunctionContext
}

func NewValuesFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ValuesFunctionCallContext {
	var p = new(ValuesFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *ValuesFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValuesFunctionCallContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUES, 0)
}

func (s *ValuesFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *ValuesFunctionCallContext) FullColumnName() IFullColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullColumnNameContext)
}

func (s *ValuesFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *ValuesFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitValuesFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type CaseExpressionFunctionCallContext struct {
	*SpecificFunctionContext
	elseArg IFunctionArgContext
}

func NewCaseExpressionFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CaseExpressionFunctionCallContext {
	var p = new(CaseExpressionFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *CaseExpressionFunctionCallContext) GetElseArg() IFunctionArgContext { return s.elseArg }

func (s *CaseExpressionFunctionCallContext) SetElseArg(v IFunctionArgContext) { s.elseArg = v }

func (s *CaseExpressionFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseExpressionFunctionCallContext) CASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASE, 0)
}

func (s *CaseExpressionFunctionCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CaseExpressionFunctionCallContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *CaseExpressionFunctionCallContext) AllCaseFuncAlternative() []ICaseFuncAlternativeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseFuncAlternativeContext)(nil)).Elem())
	var tst = make([]ICaseFuncAlternativeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseFuncAlternativeContext)
		}
	}

	return tst
}

func (s *CaseExpressionFunctionCallContext) CaseFuncAlternative(i int) ICaseFuncAlternativeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseFuncAlternativeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseFuncAlternativeContext)
}

func (s *CaseExpressionFunctionCallContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserELSE, 0)
}

func (s *CaseExpressionFunctionCallContext) FunctionArg() IFunctionArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgContext)
}

func (s *CaseExpressionFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCaseExpressionFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type SimpleFunctionCallContext struct {
	*SpecificFunctionContext
}

func NewSimpleFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleFunctionCallContext {
	var p = new(SimpleFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *SimpleFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleFunctionCallContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_DATE, 0)
}

func (s *SimpleFunctionCallContext) CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIME, 0)
}

func (s *SimpleFunctionCallContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIMESTAMP, 0)
}

func (s *SimpleFunctionCallContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_USER, 0)
}

func (s *SimpleFunctionCallContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCALTIME, 0)
}

func (s *SimpleFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SimpleFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SimpleFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimpleFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type CharFunctionCallContext struct {
	*SpecificFunctionContext
}

func NewCharFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CharFunctionCallContext {
	var p = new(CharFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *CharFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharFunctionCallContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *CharFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *CharFunctionCallContext) FunctionArgs() IFunctionArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgsContext)
}

func (s *CharFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *CharFunctionCallContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *CharFunctionCallContext) CharsetName() ICharsetNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharsetNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharsetNameContext)
}

func (s *CharFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCharFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type WeightFunctionCallContext struct {
	*SpecificFunctionContext
	stringFormat antlr.Token
}

func NewWeightFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WeightFunctionCallContext {
	var p = new(WeightFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *WeightFunctionCallContext) GetStringFormat() antlr.Token { return s.stringFormat }

func (s *WeightFunctionCallContext) SetStringFormat(v antlr.Token) { s.stringFormat = v }

func (s *WeightFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WeightFunctionCallContext) WEIGHT_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEIGHT_STRING, 0)
}

func (s *WeightFunctionCallContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLR_BRACKET)
}

func (s *WeightFunctionCallContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, i)
}

func (s *WeightFunctionCallContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserRR_BRACKET)
}

func (s *WeightFunctionCallContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, i)
}

func (s *WeightFunctionCallContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *WeightFunctionCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WeightFunctionCallContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *WeightFunctionCallContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *WeightFunctionCallContext) LevelsInWeightString() ILevelsInWeightStringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILevelsInWeightStringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILevelsInWeightStringContext)
}

func (s *WeightFunctionCallContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *WeightFunctionCallContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *WeightFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitWeightFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type GetFormatFunctionCallContext struct {
	*SpecificFunctionContext
	datetimeFormat antlr.Token
}

func NewGetFormatFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GetFormatFunctionCallContext {
	var p = new(GetFormatFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *GetFormatFunctionCallContext) GetDatetimeFormat() antlr.Token { return s.datetimeFormat }

func (s *GetFormatFunctionCallContext) SetDatetimeFormat(v antlr.Token) { s.datetimeFormat = v }

func (s *GetFormatFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GetFormatFunctionCallContext) GET_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGET_FORMAT, 0)
}

func (s *GetFormatFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *GetFormatFunctionCallContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, 0)
}

func (s *GetFormatFunctionCallContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *GetFormatFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *GetFormatFunctionCallContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *GetFormatFunctionCallContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *GetFormatFunctionCallContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATETIME, 0)
}

func (s *GetFormatFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGetFormatFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type SubstrFunctionCallContext struct {
	*SpecificFunctionContext
	sourceString     IStringLiteralContext
	sourceExpression IExpressionContext
	fromDecimal      IDecimalLiteralContext
	fromExpression   IExpressionContext
	forDecimal       IDecimalLiteralContext
	forExpression    IExpressionContext
}

func NewSubstrFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubstrFunctionCallContext {
	var p = new(SubstrFunctionCallContext)

	p.SpecificFunctionContext = NewEmptySpecificFunctionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SpecificFunctionContext))

	return p
}

func (s *SubstrFunctionCallContext) GetSourceString() IStringLiteralContext { return s.sourceString }

func (s *SubstrFunctionCallContext) GetSourceExpression() IExpressionContext {
	return s.sourceExpression
}

func (s *SubstrFunctionCallContext) GetFromDecimal() IDecimalLiteralContext { return s.fromDecimal }

func (s *SubstrFunctionCallContext) GetFromExpression() IExpressionContext { return s.fromExpression }

func (s *SubstrFunctionCallContext) GetForDecimal() IDecimalLiteralContext { return s.forDecimal }

func (s *SubstrFunctionCallContext) GetForExpression() IExpressionContext { return s.forExpression }

func (s *SubstrFunctionCallContext) SetSourceString(v IStringLiteralContext) { s.sourceString = v }

func (s *SubstrFunctionCallContext) SetSourceExpression(v IExpressionContext) { s.sourceExpression = v }

func (s *SubstrFunctionCallContext) SetFromDecimal(v IDecimalLiteralContext) { s.fromDecimal = v }

func (s *SubstrFunctionCallContext) SetFromExpression(v IExpressionContext) { s.fromExpression = v }

func (s *SubstrFunctionCallContext) SetForDecimal(v IDecimalLiteralContext) { s.forDecimal = v }

func (s *SubstrFunctionCallContext) SetForExpression(v IExpressionContext) { s.forExpression = v }

func (s *SubstrFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstrFunctionCallContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SubstrFunctionCallContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *SubstrFunctionCallContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SubstrFunctionCallContext) SUBSTR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTR, 0)
}

func (s *SubstrFunctionCallContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTRING, 0)
}

func (s *SubstrFunctionCallContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *SubstrFunctionCallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SubstrFunctionCallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SubstrFunctionCallContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *SubstrFunctionCallContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *SubstrFunctionCallContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *SubstrFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSubstrFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) SpecificFunction() (localctx ISpecificFunctionContext) {
	localctx = NewSpecificFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 586, MySqlParserRULE_specificFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6133)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 903, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSimpleFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5941)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCURRENT_USER || (((_la-283)&-(0x1f+1)) == 0 && ((1<<uint((_la-283)))&((1<<(MySqlParserCURRENT_DATE-283))|(1<<(MySqlParserCURRENT_TIME-283))|(1<<(MySqlParserCURRENT_TIMESTAMP-283))|(1<<(MySqlParserLOCALTIME-283)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5944)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 878, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5942)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(5943)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case 2:
		localctx = NewDataTypeFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5946)
			p.Match(MySqlParserCONVERT)
		}
		{
			p.SetState(5947)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5948)
			p.expression(0)
		}
		{
			p.SetState(5949)

			var _m = p.Match(MySqlParserCOMMA)

			localctx.(*DataTypeFunctionCallContext).separator = _m
		}
		{
			p.SetState(5950)
			p.ConvertedDataType()
		}
		{
			p.SetState(5951)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 3:
		localctx = NewDataTypeFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5953)
			p.Match(MySqlParserCONVERT)
		}
		{
			p.SetState(5954)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5955)
			p.expression(0)
		}
		{
			p.SetState(5956)
			p.Match(MySqlParserUSING)
		}
		{
			p.SetState(5957)
			p.CharsetName()
		}
		{
			p.SetState(5958)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 4:
		localctx = NewDataTypeFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5960)
			p.Match(MySqlParserCAST)
		}
		{
			p.SetState(5961)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5962)
			p.expression(0)
		}
		{
			p.SetState(5963)
			p.Match(MySqlParserAS)
		}
		{
			p.SetState(5964)
			p.ConvertedDataType()
		}
		{
			p.SetState(5965)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 5:
		localctx = NewValuesFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5967)
			p.Match(MySqlParserVALUES)
		}
		{
			p.SetState(5968)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5969)
			p.FullColumnName()
		}
		{
			p.SetState(5970)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 6:
		localctx = NewCaseExpressionFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5972)
			p.Match(MySqlParserCASE)
		}
		{
			p.SetState(5973)
			p.expression(0)
		}
		p.SetState(5975)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserWHEN {
			{
				p.SetState(5974)
				p.CaseFuncAlternative()
			}

			p.SetState(5977)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(5981)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserELSE {
			{
				p.SetState(5979)
				p.Match(MySqlParserELSE)
			}
			{
				p.SetState(5980)

				var _x = p.FunctionArg()

				localctx.(*CaseExpressionFunctionCallContext).elseArg = _x
			}

		}
		{
			p.SetState(5983)
			p.Match(MySqlParserEND)
		}

	case 7:
		localctx = NewCaseFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5985)
			p.Match(MySqlParserCASE)
		}
		p.SetState(5987)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserWHEN {
			{
				p.SetState(5986)
				p.CaseFuncAlternative()
			}

			p.SetState(5989)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(5993)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserELSE {
			{
				p.SetState(5991)
				p.Match(MySqlParserELSE)
			}
			{
				p.SetState(5992)

				var _x = p.FunctionArg()

				localctx.(*CaseFunctionCallContext).elseArg = _x
			}

		}
		{
			p.SetState(5995)
			p.Match(MySqlParserEND)
		}

	case 8:
		localctx = NewCharFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5997)
			p.Match(MySqlParserCHAR)
		}
		{
			p.SetState(5998)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5999)
			p.FunctionArgs()
		}
		p.SetState(6002)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(6000)
				p.Match(MySqlParserUSING)
			}
			{
				p.SetState(6001)
				p.CharsetName()
			}

		}
		{
			p.SetState(6004)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 9:
		localctx = NewPositionFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6006)
			p.Match(MySqlParserPOSITION)
		}
		{
			p.SetState(6007)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6010)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 884, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6008)

				var _x = p.StringLiteral()

				localctx.(*PositionFunctionCallContext).positionString = _x
			}

		case 2:
			{
				p.SetState(6009)

				var _x = p.expression(0)

				localctx.(*PositionFunctionCallContext).positionExpression = _x
			}

		}
		{
			p.SetState(6012)
			p.Match(MySqlParserIN)
		}
		p.SetState(6015)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 885, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6013)

				var _x = p.StringLiteral()

				localctx.(*PositionFunctionCallContext).inString = _x
			}

		case 2:
			{
				p.SetState(6014)

				var _x = p.expression(0)

				localctx.(*PositionFunctionCallContext).inExpression = _x
			}

		}
		{
			p.SetState(6017)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 10:
		localctx = NewSubstrFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(6019)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserSUBSTR || _la == MySqlParserSUBSTRING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6020)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6023)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 886, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6021)

				var _x = p.StringLiteral()

				localctx.(*SubstrFunctionCallContext).sourceString = _x
			}

		case 2:
			{
				p.SetState(6022)

				var _x = p.expression(0)

				localctx.(*SubstrFunctionCallContext).sourceExpression = _x
			}

		}
		{
			p.SetState(6025)
			p.Match(MySqlParserFROM)
		}
		p.SetState(6028)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 887, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6026)

				var _x = p.DecimalLiteral()

				localctx.(*SubstrFunctionCallContext).fromDecimal = _x
			}

		case 2:
			{
				p.SetState(6027)

				var _x = p.expression(0)

				localctx.(*SubstrFunctionCallContext).fromExpression = _x
			}

		}
		p.SetState(6035)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(6030)
				p.Match(MySqlParserFOR)
			}
			p.SetState(6033)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 888, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(6031)

					var _x = p.DecimalLiteral()

					localctx.(*SubstrFunctionCallContext).forDecimal = _x
				}

			case 2:
				{
					p.SetState(6032)

					var _x = p.expression(0)

					localctx.(*SubstrFunctionCallContext).forExpression = _x
				}

			}

		}
		{
			p.SetState(6037)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 11:
		localctx = NewTrimFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(6039)
			p.Match(MySqlParserTRIM)
		}
		{
			p.SetState(6040)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6041)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*TrimFunctionCallContext).positioinForm = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserBOTH || _la == MySqlParserLEADING || _la == MySqlParserTRAILING) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*TrimFunctionCallContext).positioinForm = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(6044)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 890, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6042)

				var _x = p.StringLiteral()

				localctx.(*TrimFunctionCallContext).sourceString = _x
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 890, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(6043)

				var _x = p.expression(0)

				localctx.(*TrimFunctionCallContext).sourceExpression = _x
			}

		}
		{
			p.SetState(6046)
			p.Match(MySqlParserFROM)
		}
		p.SetState(6049)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 891, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6047)

				var _x = p.StringLiteral()

				localctx.(*TrimFunctionCallContext).fromString = _x
			}

		case 2:
			{
				p.SetState(6048)

				var _x = p.expression(0)

				localctx.(*TrimFunctionCallContext).fromExpression = _x
			}

		}
		{
			p.SetState(6051)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 12:
		localctx = NewTrimFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(6053)
			p.Match(MySqlParserTRIM)
		}
		{
			p.SetState(6054)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6057)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 892, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6055)

				var _x = p.StringLiteral()

				localctx.(*TrimFunctionCallContext).sourceString = _x
			}

		case 2:
			{
				p.SetState(6056)

				var _x = p.expression(0)

				localctx.(*TrimFunctionCallContext).sourceExpression = _x
			}

		}
		{
			p.SetState(6059)
			p.Match(MySqlParserFROM)
		}
		p.SetState(6062)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 893, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6060)

				var _x = p.StringLiteral()

				localctx.(*TrimFunctionCallContext).fromString = _x
			}

		case 2:
			{
				p.SetState(6061)

				var _x = p.expression(0)

				localctx.(*TrimFunctionCallContext).fromExpression = _x
			}

		}
		{
			p.SetState(6064)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 13:
		localctx = NewWeightFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(6066)
			p.Match(MySqlParserWEIGHT_STRING)
		}
		{
			p.SetState(6067)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6070)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 894, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6068)
				p.StringLiteral()
			}

		case 2:
			{
				p.SetState(6069)
				p.expression(0)
			}

		}
		p.SetState(6078)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(6072)
				p.Match(MySqlParserAS)
			}
			{
				p.SetState(6073)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*WeightFunctionCallContext).stringFormat = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserCHAR || _la == MySqlParserBINARY) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*WeightFunctionCallContext).stringFormat = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(6074)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(6075)
				p.DecimalLiteral()
			}
			{
				p.SetState(6076)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		p.SetState(6081)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEVEL {
			{
				p.SetState(6080)
				p.LevelsInWeightString()
			}

		}
		{
			p.SetState(6083)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 14:
		localctx = NewExtractFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(6085)
			p.Match(MySqlParserEXTRACT)
		}
		{
			p.SetState(6086)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6087)
			p.IntervalType()
		}
		{
			p.SetState(6088)
			p.Match(MySqlParserFROM)
		}
		p.SetState(6091)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 897, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6089)

				var _x = p.StringLiteral()

				localctx.(*ExtractFunctionCallContext).sourceString = _x
			}

		case 2:
			{
				p.SetState(6090)

				var _x = p.expression(0)

				localctx.(*ExtractFunctionCallContext).sourceExpression = _x
			}

		}
		{
			p.SetState(6093)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 15:
		localctx = NewGetFormatFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(6095)
			p.Match(MySqlParserGET_FORMAT)
		}
		{
			p.SetState(6096)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6097)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*GetFormatFunctionCallContext).datetimeFormat = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserDATETIME-201)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*GetFormatFunctionCallContext).datetimeFormat = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6098)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6099)
			p.StringLiteral()
		}
		{
			p.SetState(6100)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 16:
		localctx = NewJsonValueFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(6102)
			p.Match(MySqlParserJSON_VALUE)
		}
		{
			p.SetState(6103)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6104)
			p.expression(0)
		}
		{
			p.SetState(6105)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(6106)
			p.expression(0)
		}
		p.SetState(6109)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserRETURNING {
			{
				p.SetState(6107)
				p.Match(MySqlParserRETURNING)
			}
			{
				p.SetState(6108)
				p.ConvertedDataType()
			}

		}
		p.SetState(6119)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 900, p.GetParserRuleContext()) == 1 {
			p.SetState(6115)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserNULL:
				{
					p.SetState(6111)
					p.Match(MySqlParserNULL)
				}

			case MySqlParserERROR:
				{
					p.SetState(6112)
					p.Match(MySqlParserERROR)
				}

			case MySqlParserDEFAULT:
				{
					p.SetState(6113)
					p.Match(MySqlParserDEFAULT)
				}
				{
					p.SetState(6114)
					p.DefaultValue()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(6117)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(6118)
				p.Match(MySqlParserEMPTY)
			}

		}
		p.SetState(6129)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT || _la == MySqlParserNULL || _la == MySqlParserERROR {
			p.SetState(6125)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserNULL:
				{
					p.SetState(6121)
					p.Match(MySqlParserNULL)
				}

			case MySqlParserERROR:
				{
					p.SetState(6122)
					p.Match(MySqlParserERROR)
				}

			case MySqlParserDEFAULT:
				{
					p.SetState(6123)
					p.Match(MySqlParserDEFAULT)
				}
				{
					p.SetState(6124)
					p.DefaultValue()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(6127)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(6128)
				p.Match(MySqlParserERROR)
			}

		}
		{
			p.SetState(6131)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ICaseFuncAlternativeContext is an interface to support dynamic dispatch.
type ICaseFuncAlternativeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCondition returns the condition rule contexts.
	GetCondition() IFunctionArgContext

	// GetConsequent returns the consequent rule contexts.
	GetConsequent() IFunctionArgContext

	// SetCondition sets the condition rule contexts.
	SetCondition(IFunctionArgContext)

	// SetConsequent sets the consequent rule contexts.
	SetConsequent(IFunctionArgContext)

	// IsCaseFuncAlternativeContext differentiates from other interfaces.
	IsCaseFuncAlternativeContext()
}

type CaseFuncAlternativeContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	condition  IFunctionArgContext
	consequent IFunctionArgContext
}

func NewEmptyCaseFuncAlternativeContext() *CaseFuncAlternativeContext {
	var p = new(CaseFuncAlternativeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_caseFuncAlternative
	return p
}

func (*CaseFuncAlternativeContext) IsCaseFuncAlternativeContext() {}

func NewCaseFuncAlternativeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseFuncAlternativeContext {
	var p = new(CaseFuncAlternativeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_caseFuncAlternative

	return p
}

func (s *CaseFuncAlternativeContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseFuncAlternativeContext) GetCondition() IFunctionArgContext { return s.condition }

func (s *CaseFuncAlternativeContext) GetConsequent() IFunctionArgContext { return s.consequent }

func (s *CaseFuncAlternativeContext) SetCondition(v IFunctionArgContext) { s.condition = v }

func (s *CaseFuncAlternativeContext) SetConsequent(v IFunctionArgContext) { s.consequent = v }

func (s *CaseFuncAlternativeContext) WHEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHEN, 0)
}

func (s *CaseFuncAlternativeContext) THEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHEN, 0)
}

func (s *CaseFuncAlternativeContext) AllFunctionArg() []IFunctionArgContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem())
	var tst = make([]IFunctionArgContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionArgContext)
		}
	}

	return tst
}

func (s *CaseFuncAlternativeContext) FunctionArg(i int) IFunctionArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgContext)
}

func (s *CaseFuncAlternativeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseFuncAlternativeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseFuncAlternativeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCaseFuncAlternative(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CaseFuncAlternative() (localctx ICaseFuncAlternativeContext) {
	localctx = NewCaseFuncAlternativeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 588, MySqlParserRULE_caseFuncAlternative)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6135)
		p.Match(MySqlParserWHEN)
	}
	{
		p.SetState(6136)

		var _x = p.FunctionArg()

		localctx.(*CaseFuncAlternativeContext).condition = _x
	}
	{
		p.SetState(6137)
		p.Match(MySqlParserTHEN)
	}
	{
		p.SetState(6138)

		var _x = p.FunctionArg()

		localctx.(*CaseFuncAlternativeContext).consequent = _x
	}

	return localctx
}

// ILevelsInWeightStringContext is an interface to support dynamic dispatch.
type ILevelsInWeightStringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLevelsInWeightStringContext differentiates from other interfaces.
	IsLevelsInWeightStringContext()
}

type LevelsInWeightStringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLevelsInWeightStringContext() *LevelsInWeightStringContext {
	var p = new(LevelsInWeightStringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_levelsInWeightString
	return p
}

func (*LevelsInWeightStringContext) IsLevelsInWeightStringContext() {}

func NewLevelsInWeightStringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LevelsInWeightStringContext {
	var p = new(LevelsInWeightStringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_levelsInWeightString

	return p
}

func (s *LevelsInWeightStringContext) GetParser() antlr.Parser { return s.parser }

func (s *LevelsInWeightStringContext) CopyFrom(ctx *LevelsInWeightStringContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *LevelsInWeightStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelsInWeightStringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LevelWeightRangeContext struct {
	*LevelsInWeightStringContext
	firstLevel IDecimalLiteralContext
	lastLevel  IDecimalLiteralContext
}

func NewLevelWeightRangeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LevelWeightRangeContext {
	var p = new(LevelWeightRangeContext)

	p.LevelsInWeightStringContext = NewEmptyLevelsInWeightStringContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LevelsInWeightStringContext))

	return p
}

func (s *LevelWeightRangeContext) GetFirstLevel() IDecimalLiteralContext { return s.firstLevel }

func (s *LevelWeightRangeContext) GetLastLevel() IDecimalLiteralContext { return s.lastLevel }

func (s *LevelWeightRangeContext) SetFirstLevel(v IDecimalLiteralContext) { s.firstLevel = v }

func (s *LevelWeightRangeContext) SetLastLevel(v IDecimalLiteralContext) { s.lastLevel = v }

func (s *LevelWeightRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelWeightRangeContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEVEL, 0)
}

func (s *LevelWeightRangeContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, 0)
}

func (s *LevelWeightRangeContext) AllDecimalLiteral() []IDecimalLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem())
	var tst = make([]IDecimalLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimalLiteralContext)
		}
	}

	return tst
}

func (s *LevelWeightRangeContext) DecimalLiteral(i int) IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LevelWeightRangeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLevelWeightRange(s)

	default:
		return t.VisitChildren(s)
	}
}

type LevelWeightListContext struct {
	*LevelsInWeightStringContext
}

func NewLevelWeightListContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LevelWeightListContext {
	var p = new(LevelWeightListContext)

	p.LevelsInWeightStringContext = NewEmptyLevelsInWeightStringContext()
	p.parser = parser
	p.CopyFrom(ctx.(*LevelsInWeightStringContext))

	return p
}

func (s *LevelWeightListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelWeightListContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEVEL, 0)
}

func (s *LevelWeightListContext) AllLevelInWeightListElement() []ILevelInWeightListElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILevelInWeightListElementContext)(nil)).Elem())
	var tst = make([]ILevelInWeightListElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILevelInWeightListElementContext)
		}
	}

	return tst
}

func (s *LevelWeightListContext) LevelInWeightListElement(i int) ILevelInWeightListElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILevelInWeightListElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILevelInWeightListElementContext)
}

func (s *LevelWeightListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *LevelWeightListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *LevelWeightListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLevelWeightList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LevelsInWeightString() (localctx ILevelsInWeightStringContext) {
	localctx = NewLevelsInWeightStringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 590, MySqlParserRULE_levelsInWeightString)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6154)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 905, p.GetParserRuleContext()) {
	case 1:
		localctx = NewLevelWeightListContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6140)
			p.Match(MySqlParserLEVEL)
		}
		{
			p.SetState(6141)
			p.LevelInWeightListElement()
		}
		p.SetState(6146)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(6142)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(6143)
				p.LevelInWeightListElement()
			}

			p.SetState(6148)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewLevelWeightRangeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6149)
			p.Match(MySqlParserLEVEL)
		}
		{
			p.SetState(6150)

			var _x = p.DecimalLiteral()

			localctx.(*LevelWeightRangeContext).firstLevel = _x
		}
		{
			p.SetState(6151)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(6152)

			var _x = p.DecimalLiteral()

			localctx.(*LevelWeightRangeContext).lastLevel = _x
		}

	}

	return localctx
}

// ILevelInWeightListElementContext is an interface to support dynamic dispatch.
type ILevelInWeightListElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOrderType returns the orderType token.
	GetOrderType() antlr.Token

	// SetOrderType sets the orderType token.
	SetOrderType(antlr.Token)

	// IsLevelInWeightListElementContext differentiates from other interfaces.
	IsLevelInWeightListElementContext()
}

type LevelInWeightListElementContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	orderType antlr.Token
}

func NewEmptyLevelInWeightListElementContext() *LevelInWeightListElementContext {
	var p = new(LevelInWeightListElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_levelInWeightListElement
	return p
}

func (*LevelInWeightListElementContext) IsLevelInWeightListElementContext() {}

func NewLevelInWeightListElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LevelInWeightListElementContext {
	var p = new(LevelInWeightListElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_levelInWeightListElement

	return p
}

func (s *LevelInWeightListElementContext) GetParser() antlr.Parser { return s.parser }

func (s *LevelInWeightListElementContext) GetOrderType() antlr.Token { return s.orderType }

func (s *LevelInWeightListElementContext) SetOrderType(v antlr.Token) { s.orderType = v }

func (s *LevelInWeightListElementContext) DecimalLiteral() IDecimalLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimalLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimalLiteralContext)
}

func (s *LevelInWeightListElementContext) ASC() antlr.TerminalNode {
	return s.GetToken(MySqlParserASC, 0)
}

func (s *LevelInWeightListElementContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *LevelInWeightListElementContext) REVERSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE, 0)
}

func (s *LevelInWeightListElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelInWeightListElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LevelInWeightListElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLevelInWeightListElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LevelInWeightListElement() (localctx ILevelInWeightListElementContext) {
	localctx = NewLevelInWeightListElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 592, MySqlParserRULE_levelInWeightListElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6156)
		p.DecimalLiteral()
	}
	p.SetState(6158)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserASC || _la == MySqlParserDESC || _la == MySqlParserREVERSE {
		{
			p.SetState(6157)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LevelInWeightListElementContext).orderType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserASC || _la == MySqlParserDESC || _la == MySqlParserREVERSE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LevelInWeightListElementContext).orderType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IAggregateWindowedFunctionContext is an interface to support dynamic dispatch.
type IAggregateWindowedFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAggregator returns the aggregator token.
	GetAggregator() antlr.Token

	// GetStarArg returns the starArg token.
	GetStarArg() antlr.Token

	// GetSeparator returns the separator token.
	GetSeparator() antlr.Token

	// SetAggregator sets the aggregator token.
	SetAggregator(antlr.Token)

	// SetStarArg sets the starArg token.
	SetStarArg(antlr.Token)

	// SetSeparator sets the separator token.
	SetSeparator(antlr.Token)

	// IsAggregateWindowedFunctionContext differentiates from other interfaces.
	IsAggregateWindowedFunctionContext()
}

type AggregateWindowedFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	aggregator antlr.Token
	starArg    antlr.Token
	separator  antlr.Token
}

func NewEmptyAggregateWindowedFunctionContext() *AggregateWindowedFunctionContext {
	var p = new(AggregateWindowedFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_aggregateWindowedFunction
	return p
}

func (*AggregateWindowedFunctionContext) IsAggregateWindowedFunctionContext() {}

func NewAggregateWindowedFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AggregateWindowedFunctionContext {
	var p = new(AggregateWindowedFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_aggregateWindowedFunction

	return p
}

func (s *AggregateWindowedFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *AggregateWindowedFunctionContext) GetAggregator() antlr.Token { return s.aggregator }

func (s *AggregateWindowedFunctionContext) GetStarArg() antlr.Token { return s.starArg }

func (s *AggregateWindowedFunctionContext) GetSeparator() antlr.Token { return s.separator }

func (s *AggregateWindowedFunctionContext) SetAggregator(v antlr.Token) { s.aggregator = v }

func (s *AggregateWindowedFunctionContext) SetStarArg(v antlr.Token) { s.starArg = v }

func (s *AggregateWindowedFunctionContext) SetSeparator(v antlr.Token) { s.separator = v }

func (s *AggregateWindowedFunctionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *AggregateWindowedFunctionContext) FunctionArg() IFunctionArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgContext)
}

func (s *AggregateWindowedFunctionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *AggregateWindowedFunctionContext) AVG() antlr.TerminalNode {
	return s.GetToken(MySqlParserAVG, 0)
}

func (s *AggregateWindowedFunctionContext) MAX() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX, 0)
}

func (s *AggregateWindowedFunctionContext) MIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN, 0)
}

func (s *AggregateWindowedFunctionContext) SUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUM, 0)
}

func (s *AggregateWindowedFunctionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AggregateWindowedFunctionContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *AggregateWindowedFunctionContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOUNT, 0)
}

func (s *AggregateWindowedFunctionContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *AggregateWindowedFunctionContext) FunctionArgs() IFunctionArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgsContext)
}

func (s *AggregateWindowedFunctionContext) BIT_AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_AND, 0)
}

func (s *AggregateWindowedFunctionContext) BIT_OR() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_OR, 0)
}

func (s *AggregateWindowedFunctionContext) BIT_XOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_XOR, 0)
}

func (s *AggregateWindowedFunctionContext) STD() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTD, 0)
}

func (s *AggregateWindowedFunctionContext) STDDEV() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV, 0)
}

func (s *AggregateWindowedFunctionContext) STDDEV_POP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV_POP, 0)
}

func (s *AggregateWindowedFunctionContext) STDDEV_SAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV_SAMP, 0)
}

func (s *AggregateWindowedFunctionContext) VAR_POP() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_POP, 0)
}

func (s *AggregateWindowedFunctionContext) VAR_SAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_SAMP, 0)
}

func (s *AggregateWindowedFunctionContext) VARIANCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARIANCE, 0)
}

func (s *AggregateWindowedFunctionContext) GROUP_CONCAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_CONCAT, 0)
}

func (s *AggregateWindowedFunctionContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *AggregateWindowedFunctionContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *AggregateWindowedFunctionContext) AllOrderByExpression() []IOrderByExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrderByExpressionContext)(nil)).Elem())
	var tst = make([]IOrderByExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrderByExpressionContext)
		}
	}

	return tst
}

func (s *AggregateWindowedFunctionContext) OrderByExpression(i int) IOrderByExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrderByExpressionContext)
}

func (s *AggregateWindowedFunctionContext) SEPARATOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSEPARATOR, 0)
}

func (s *AggregateWindowedFunctionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *AggregateWindowedFunctionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *AggregateWindowedFunctionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *AggregateWindowedFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AggregateWindowedFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AggregateWindowedFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAggregateWindowedFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) AggregateWindowedFunction() (localctx IAggregateWindowedFunctionContext) {
	localctx = NewAggregateWindowedFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 594, MySqlParserRULE_aggregateWindowedFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6216)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 915, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6160)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSUM-267)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6161)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6163)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 907, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6162)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*AggregateWindowedFunctionContext).aggregator = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*AggregateWindowedFunctionContext).aggregator = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(6165)
			p.FunctionArg()
		}
		{
			p.SetState(6166)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6168)
			p.Match(MySqlParserCOUNT)
		}
		{
			p.SetState(6169)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6175)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 909, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6170)

				var _m = p.Match(MySqlParserSTAR)

				localctx.(*AggregateWindowedFunctionContext).starArg = _m
			}

		case 2:
			p.SetState(6172)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 908, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(6171)

					var _m = p.Match(MySqlParserALL)

					localctx.(*AggregateWindowedFunctionContext).aggregator = _m
				}

			}
			{
				p.SetState(6174)
				p.FunctionArg()
			}

		}
		{
			p.SetState(6177)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6178)
			p.Match(MySqlParserCOUNT)
		}
		{
			p.SetState(6179)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6180)

			var _m = p.Match(MySqlParserDISTINCT)

			localctx.(*AggregateWindowedFunctionContext).aggregator = _m
		}
		{
			p.SetState(6181)
			p.FunctionArgs()
		}
		{
			p.SetState(6182)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6184)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-268)&-(0x1f+1)) == 0 && ((1<<uint((_la-268)))&((1<<(MySqlParserBIT_AND-268))|(1<<(MySqlParserBIT_OR-268))|(1<<(MySqlParserBIT_XOR-268))|(1<<(MySqlParserSTD-268))|(1<<(MySqlParserSTDDEV-268))|(1<<(MySqlParserSTDDEV_POP-268))|(1<<(MySqlParserSTDDEV_SAMP-268))|(1<<(MySqlParserVAR_POP-268))|(1<<(MySqlParserVAR_SAMP-268))|(1<<(MySqlParserVARIANCE-268)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6185)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6187)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 910, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6186)

				var _m = p.Match(MySqlParserALL)

				localctx.(*AggregateWindowedFunctionContext).aggregator = _m
			}

		}
		{
			p.SetState(6189)
			p.FunctionArg()
		}
		{
			p.SetState(6190)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6192)
			p.Match(MySqlParserGROUP_CONCAT)
		}
		{
			p.SetState(6193)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(6195)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 911, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6194)

				var _m = p.Match(MySqlParserDISTINCT)

				localctx.(*AggregateWindowedFunctionContext).aggregator = _m
			}

		}
		{
			p.SetState(6197)
			p.FunctionArgs()
		}
		p.SetState(6208)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserORDER {
			{
				p.SetState(6198)
				p.Match(MySqlParserORDER)
			}
			{
				p.SetState(6199)
				p.Match(MySqlParserBY)
			}
			{
				p.SetState(6200)
				p.OrderByExpression()
			}
			p.SetState(6205)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(6201)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(6202)
					p.OrderByExpression()
				}

				p.SetState(6207)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(6212)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSEPARATOR {
			{
				p.SetState(6210)
				p.Match(MySqlParserSEPARATOR)
			}
			{
				p.SetState(6211)

				var _m = p.Match(MySqlParserSTRING_LITERAL)

				localctx.(*AggregateWindowedFunctionContext).separator = _m
			}

		}
		{
			p.SetState(6214)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IScalarFunctionNameContext is an interface to support dynamic dispatch.
type IScalarFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScalarFunctionNameContext differentiates from other interfaces.
	IsScalarFunctionNameContext()
}

type ScalarFunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScalarFunctionNameContext() *ScalarFunctionNameContext {
	var p = new(ScalarFunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_scalarFunctionName
	return p
}

func (*ScalarFunctionNameContext) IsScalarFunctionNameContext() {}

func NewScalarFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScalarFunctionNameContext {
	var p = new(ScalarFunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_scalarFunctionName

	return p
}

func (s *ScalarFunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ScalarFunctionNameContext) FunctionNameBase() IFunctionNameBaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameBaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameBaseContext)
}

func (s *ScalarFunctionNameContext) ASCII() antlr.TerminalNode {
	return s.GetToken(MySqlParserASCII, 0)
}

func (s *ScalarFunctionNameContext) CURDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURDATE, 0)
}

func (s *ScalarFunctionNameContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_DATE, 0)
}

func (s *ScalarFunctionNameContext) CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIME, 0)
}

func (s *ScalarFunctionNameContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIMESTAMP, 0)
}

func (s *ScalarFunctionNameContext) CURTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURTIME, 0)
}

func (s *ScalarFunctionNameContext) DATE_ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE_ADD, 0)
}

func (s *ScalarFunctionNameContext) DATE_SUB() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE_SUB, 0)
}

func (s *ScalarFunctionNameContext) IF() antlr.TerminalNode {
	return s.GetToken(MySqlParserIF, 0)
}

func (s *ScalarFunctionNameContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT, 0)
}

func (s *ScalarFunctionNameContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCALTIME, 0)
}

func (s *ScalarFunctionNameContext) LOCALTIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCALTIMESTAMP, 0)
}

func (s *ScalarFunctionNameContext) MID() antlr.TerminalNode {
	return s.GetToken(MySqlParserMID, 0)
}

func (s *ScalarFunctionNameContext) NOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOW, 0)
}

func (s *ScalarFunctionNameContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *ScalarFunctionNameContext) SUBSTR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTR, 0)
}

func (s *ScalarFunctionNameContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTRING, 0)
}

func (s *ScalarFunctionNameContext) SYSDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSYSDATE, 0)
}

func (s *ScalarFunctionNameContext) TRIM() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIM, 0)
}

func (s *ScalarFunctionNameContext) UTC_DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTC_DATE, 0)
}

func (s *ScalarFunctionNameContext) UTC_TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTC_TIME, 0)
}

func (s *ScalarFunctionNameContext) UTC_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTC_TIMESTAMP, 0)
}

func (s *ScalarFunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScalarFunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScalarFunctionNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitScalarFunctionName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ScalarFunctionName() (localctx IScalarFunctionNameContext) {
	localctx = NewScalarFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 596, MySqlParserRULE_scalarFunctionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6241)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserDATABASE, MySqlParserLEFT, MySqlParserRIGHT, MySqlParserSCHEMA, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserYEAR, MySqlParserJSON_ARRAY, MySqlParserJSON_OBJECT, MySqlParserJSON_QUOTE, MySqlParserJSON_CONTAINS, MySqlParserJSON_CONTAINS_PATH, MySqlParserJSON_EXTRACT, MySqlParserJSON_KEYS, MySqlParserJSON_OVERLAPS, MySqlParserJSON_SEARCH, MySqlParserJSON_VALUE, MySqlParserJSON_ARRAY_APPEND, MySqlParserJSON_ARRAY_INSERT, MySqlParserJSON_INSERT, MySqlParserJSON_MERGE, MySqlParserJSON_MERGE_PATCH, MySqlParserJSON_MERGE_PRESERVE, MySqlParserJSON_REMOVE, MySqlParserJSON_REPLACE, MySqlParserJSON_SET, MySqlParserJSON_UNQUOTE, MySqlParserJSON_DEPTH, MySqlParserJSON_LENGTH, MySqlParserJSON_TYPE, MySqlParserJSON_VALID, MySqlParserJSON_TABLE, MySqlParserJSON_SCHEMA_VALID, MySqlParserJSON_SCHEMA_VALIDATION_REPORT, MySqlParserJSON_PRETTY, MySqlParserJSON_STORAGE_FREE, MySqlParserJSON_STORAGE_SIZE, MySqlParserJSON_ARRAYAGG, MySqlParserJSON_OBJECTAGG, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserINVISIBLE, MySqlParserVISIBLE, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserSESSION_VARIABLES_ADMIN, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMOD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6218)
			p.FunctionNameBase()
		}

	case MySqlParserASCII:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6219)
			p.Match(MySqlParserASCII)
		}

	case MySqlParserCURDATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6220)
			p.Match(MySqlParserCURDATE)
		}

	case MySqlParserCURRENT_DATE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6221)
			p.Match(MySqlParserCURRENT_DATE)
		}

	case MySqlParserCURRENT_TIME:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6222)
			p.Match(MySqlParserCURRENT_TIME)
		}

	case MySqlParserCURRENT_TIMESTAMP:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6223)
			p.Match(MySqlParserCURRENT_TIMESTAMP)
		}

	case MySqlParserCURTIME:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6224)
			p.Match(MySqlParserCURTIME)
		}

	case MySqlParserDATE_ADD:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6225)
			p.Match(MySqlParserDATE_ADD)
		}

	case MySqlParserDATE_SUB:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6226)
			p.Match(MySqlParserDATE_SUB)
		}

	case MySqlParserIF:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(6227)
			p.Match(MySqlParserIF)
		}

	case MySqlParserINSERT:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(6228)
			p.Match(MySqlParserINSERT)
		}

	case MySqlParserLOCALTIME:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(6229)
			p.Match(MySqlParserLOCALTIME)
		}

	case MySqlParserLOCALTIMESTAMP:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(6230)
			p.Match(MySqlParserLOCALTIMESTAMP)
		}

	case MySqlParserMID:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(6231)
			p.Match(MySqlParserMID)
		}

	case MySqlParserNOW:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(6232)
			p.Match(MySqlParserNOW)
		}

	case MySqlParserREPLACE:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(6233)
			p.Match(MySqlParserREPLACE)
		}

	case MySqlParserSUBSTR:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(6234)
			p.Match(MySqlParserSUBSTR)
		}

	case MySqlParserSUBSTRING:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(6235)
			p.Match(MySqlParserSUBSTRING)
		}

	case MySqlParserSYSDATE:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(6236)
			p.Match(MySqlParserSYSDATE)
		}

	case MySqlParserTRIM:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(6237)
			p.Match(MySqlParserTRIM)
		}

	case MySqlParserUTC_DATE:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(6238)
			p.Match(MySqlParserUTC_DATE)
		}

	case MySqlParserUTC_TIME:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(6239)
			p.Match(MySqlParserUTC_TIME)
		}

	case MySqlParserUTC_TIMESTAMP:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(6240)
			p.Match(MySqlParserUTC_TIMESTAMP)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPasswordFunctionClauseContext is an interface to support dynamic dispatch.
type IPasswordFunctionClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFunctionName returns the functionName token.
	GetFunctionName() antlr.Token

	// SetFunctionName sets the functionName token.
	SetFunctionName(antlr.Token)

	// IsPasswordFunctionClauseContext differentiates from other interfaces.
	IsPasswordFunctionClauseContext()
}

type PasswordFunctionClauseContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	functionName antlr.Token
}

func NewEmptyPasswordFunctionClauseContext() *PasswordFunctionClauseContext {
	var p = new(PasswordFunctionClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_passwordFunctionClause
	return p
}

func (*PasswordFunctionClauseContext) IsPasswordFunctionClauseContext() {}

func NewPasswordFunctionClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PasswordFunctionClauseContext {
	var p = new(PasswordFunctionClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_passwordFunctionClause

	return p
}

func (s *PasswordFunctionClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PasswordFunctionClauseContext) GetFunctionName() antlr.Token { return s.functionName }

func (s *PasswordFunctionClauseContext) SetFunctionName(v antlr.Token) { s.functionName = v }

func (s *PasswordFunctionClauseContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *PasswordFunctionClauseContext) FunctionArg() IFunctionArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgContext)
}

func (s *PasswordFunctionClauseContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *PasswordFunctionClauseContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *PasswordFunctionClauseContext) OLD_PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserOLD_PASSWORD, 0)
}

func (s *PasswordFunctionClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PasswordFunctionClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PasswordFunctionClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPasswordFunctionClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) PasswordFunctionClause() (localctx IPasswordFunctionClauseContext) {
	localctx = NewPasswordFunctionClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 598, MySqlParserRULE_passwordFunctionClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6243)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PasswordFunctionClauseContext).functionName = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserOLD_PASSWORD || _la == MySqlParserPASSWORD) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PasswordFunctionClauseContext).functionName = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(6244)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(6245)
		p.FunctionArg()
	}
	{
		p.SetState(6246)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IFunctionArgsContext is an interface to support dynamic dispatch.
type IFunctionArgsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionArgsContext differentiates from other interfaces.
	IsFunctionArgsContext()
}

type FunctionArgsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionArgsContext() *FunctionArgsContext {
	var p = new(FunctionArgsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_functionArgs
	return p
}

func (*FunctionArgsContext) IsFunctionArgsContext() {}

func NewFunctionArgsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionArgsContext {
	var p = new(FunctionArgsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_functionArgs

	return p
}

func (s *FunctionArgsContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionArgsContext) AllConstant() []IConstantContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstantContext)(nil)).Elem())
	var tst = make([]IConstantContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstantContext)
		}
	}

	return tst
}

func (s *FunctionArgsContext) Constant(i int) IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *FunctionArgsContext) AllFullColumnName() []IFullColumnNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem())
	var tst = make([]IFullColumnNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFullColumnNameContext)
		}
	}

	return tst
}

func (s *FunctionArgsContext) FullColumnName(i int) IFullColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFullColumnNameContext)
}

func (s *FunctionArgsContext) AllFunctionCall() []IFunctionCallContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem())
	var tst = make([]IFunctionCallContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionCallContext)
		}
	}

	return tst
}

func (s *FunctionArgsContext) FunctionCall(i int) IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *FunctionArgsContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *FunctionArgsContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionArgsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *FunctionArgsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *FunctionArgsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionArgsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionArgsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFunctionArgs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) FunctionArgs() (localctx IFunctionArgsContext) {
	localctx = NewFunctionArgsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 600, MySqlParserRULE_functionArgs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6252)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 917, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6248)
			p.Constant()
		}

	case 2:
		{
			p.SetState(6249)
			p.FullColumnName()
		}

	case 3:
		{
			p.SetState(6250)
			p.FunctionCall()
		}

	case 4:
		{
			p.SetState(6251)
			p.expression(0)
		}

	}
	p.SetState(6263)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(6254)
			p.Match(MySqlParserCOMMA)
		}
		p.SetState(6259)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 918, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6255)
				p.Constant()
			}

		case 2:
			{
				p.SetState(6256)
				p.FullColumnName()
			}

		case 3:
			{
				p.SetState(6257)
				p.FunctionCall()
			}

		case 4:
			{
				p.SetState(6258)
				p.expression(0)
			}

		}

		p.SetState(6265)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunctionArgContext is an interface to support dynamic dispatch.
type IFunctionArgContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionArgContext differentiates from other interfaces.
	IsFunctionArgContext()
}

type FunctionArgContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionArgContext() *FunctionArgContext {
	var p = new(FunctionArgContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_functionArg
	return p
}

func (*FunctionArgContext) IsFunctionArgContext() {}

func NewFunctionArgContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionArgContext {
	var p = new(FunctionArgContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_functionArg

	return p
}

func (s *FunctionArgContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionArgContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *FunctionArgContext) FullColumnName() IFullColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullColumnNameContext)
}

func (s *FunctionArgContext) FunctionCall() IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *FunctionArgContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionArgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionArgContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionArgContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFunctionArg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) FunctionArg() (localctx IFunctionArgContext) {
	localctx = NewFunctionArgContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 602, MySqlParserRULE_functionArg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6270)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 920, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6266)
			p.Constant()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6267)
			p.FullColumnName()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6268)
			p.FunctionCall()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6269)
			p.expression(0)
		}

	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) CopyFrom(ctx *ExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IsExpressionContext struct {
	*ExpressionContext
	testValue antlr.Token
}

func NewIsExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IsExpressionContext {
	var p = new(IsExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *IsExpressionContext) GetTestValue() antlr.Token { return s.testValue }

func (s *IsExpressionContext) SetTestValue(v antlr.Token) { s.testValue = v }

func (s *IsExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsExpressionContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *IsExpressionContext) IS() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS, 0)
}

func (s *IsExpressionContext) TRUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUE, 0)
}

func (s *IsExpressionContext) FALSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFALSE, 0)
}

func (s *IsExpressionContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNKNOWN, 0)
}

func (s *IsExpressionContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *IsExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIsExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type NotExpressionContext struct {
	*ExpressionContext
	notOperator antlr.Token
}

func NewNotExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NotExpressionContext {
	var p = new(NotExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *NotExpressionContext) GetNotOperator() antlr.Token { return s.notOperator }

func (s *NotExpressionContext) SetNotOperator(v antlr.Token) { s.notOperator = v }

func (s *NotExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NotExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NotExpressionContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *NotExpressionContext) EXCLAMATION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLAMATION_SYMBOL, 0)
}

func (s *NotExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitNotExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LogicalExpressionContext struct {
	*ExpressionContext
}

func NewLogicalExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalExpressionContext {
	var p = new(LogicalExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *LogicalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *LogicalExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LogicalExpressionContext) LogicalOperator() ILogicalOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalOperatorContext)
}

func (s *LogicalExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLogicalExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type PredicateExpressionContext struct {
	*ExpressionContext
}

func NewPredicateExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PredicateExpressionContext {
	var p = new(PredicateExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *PredicateExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateExpressionContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *PredicateExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPredicateExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *MySqlParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 604
	p.EnterRecursionRule(localctx, 604, MySqlParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6283)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 922, p.GetParserRuleContext()) {
	case 1:
		localctx = NewNotExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(6273)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*NotExpressionContext).notOperator = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserNOT || _la == MySqlParserEXCLAMATION_SYMBOL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*NotExpressionContext).notOperator = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6274)
			p.expression(4)
		}

	case 2:
		localctx = NewIsExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6275)
			p.predicate(0)
		}
		{
			p.SetState(6276)
			p.Match(MySqlParserIS)
		}
		p.SetState(6278)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(6277)
				p.Match(MySqlParserNOT)
			}

		}
		{
			p.SetState(6280)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IsExpressionContext).testValue = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFALSE || _la == MySqlParserTRUE || _la == MySqlParserUNKNOWN) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IsExpressionContext).testValue = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 3:
		localctx = NewPredicateExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6282)
			p.predicate(0)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(6291)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 923, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
			p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_expression)
			p.SetState(6285)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(6286)
				p.LogicalOperator()
			}
			{
				p.SetState(6287)
				p.expression(4)
			}

		}
		p.SetState(6293)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 923, p.GetParserRuleContext())
	}

	return localctx
}

// IPredicateContext is an interface to support dynamic dispatch.
type IPredicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPredicateContext differentiates from other interfaces.
	IsPredicateContext()
}

type PredicateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPredicateContext() *PredicateContext {
	var p = new(PredicateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_predicate
	return p
}

func (*PredicateContext) IsPredicateContext() {}

func NewPredicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredicateContext {
	var p = new(PredicateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_predicate

	return p
}

func (s *PredicateContext) GetParser() antlr.Parser { return s.parser }

func (s *PredicateContext) CopyFrom(ctx *PredicateContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SoundsLikePredicateContext struct {
	*PredicateContext
}

func NewSoundsLikePredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SoundsLikePredicateContext {
	var p = new(SoundsLikePredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *SoundsLikePredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SoundsLikePredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *SoundsLikePredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *SoundsLikePredicateContext) SOUNDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOUNDS, 0)
}

func (s *SoundsLikePredicateContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIKE, 0)
}

func (s *SoundsLikePredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSoundsLikePredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExpressionAtomPredicateContext struct {
	*PredicateContext
}

func NewExpressionAtomPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionAtomPredicateContext {
	var p = new(ExpressionAtomPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *ExpressionAtomPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionAtomPredicateContext) ExpressionAtom() IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *ExpressionAtomPredicateContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *ExpressionAtomPredicateContext) VAR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_ASSIGN, 0)
}

func (s *ExpressionAtomPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitExpressionAtomPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type SubqueryComparisonPredicateContext struct {
	*PredicateContext
	quantifier antlr.Token
}

func NewSubqueryComparisonPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryComparisonPredicateContext {
	var p = new(SubqueryComparisonPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *SubqueryComparisonPredicateContext) GetQuantifier() antlr.Token { return s.quantifier }

func (s *SubqueryComparisonPredicateContext) SetQuantifier(v antlr.Token) { s.quantifier = v }

func (s *SubqueryComparisonPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryComparisonPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *SubqueryComparisonPredicateContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *SubqueryComparisonPredicateContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SubqueryComparisonPredicateContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *SubqueryComparisonPredicateContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SubqueryComparisonPredicateContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *SubqueryComparisonPredicateContext) ANY() antlr.TerminalNode {
	return s.GetToken(MySqlParserANY, 0)
}

func (s *SubqueryComparisonPredicateContext) SOME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOME, 0)
}

func (s *SubqueryComparisonPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSubqueryComparisonPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type JsonMemberOfPredicateContext struct {
	*PredicateContext
}

func NewJsonMemberOfPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JsonMemberOfPredicateContext {
	var p = new(JsonMemberOfPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *JsonMemberOfPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JsonMemberOfPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *JsonMemberOfPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *JsonMemberOfPredicateContext) MEMBER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMBER, 0)
}

func (s *JsonMemberOfPredicateContext) OF() antlr.TerminalNode {
	return s.GetToken(MySqlParserOF, 0)
}

func (s *JsonMemberOfPredicateContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *JsonMemberOfPredicateContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *JsonMemberOfPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitJsonMemberOfPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type BinaryComparisonPredicateContext struct {
	*PredicateContext
	left  IPredicateContext
	right IPredicateContext
}

func NewBinaryComparisonPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryComparisonPredicateContext {
	var p = new(BinaryComparisonPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *BinaryComparisonPredicateContext) GetLeft() IPredicateContext { return s.left }

func (s *BinaryComparisonPredicateContext) GetRight() IPredicateContext { return s.right }

func (s *BinaryComparisonPredicateContext) SetLeft(v IPredicateContext) { s.left = v }

func (s *BinaryComparisonPredicateContext) SetRight(v IPredicateContext) { s.right = v }

func (s *BinaryComparisonPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryComparisonPredicateContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *BinaryComparisonPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *BinaryComparisonPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *BinaryComparisonPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBinaryComparisonPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type InPredicateContext struct {
	*PredicateContext
}

func NewInPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InPredicateContext {
	var p = new(InPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *InPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *InPredicateContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *InPredicateContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *InPredicateContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *InPredicateContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *InPredicateContext) Expressions() IExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsContext)
}

func (s *InPredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *InPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitInPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type BetweenPredicateContext struct {
	*PredicateContext
}

func NewBetweenPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BetweenPredicateContext {
	var p = new(BetweenPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *BetweenPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BetweenPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *BetweenPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *BetweenPredicateContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBETWEEN, 0)
}

func (s *BetweenPredicateContext) AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, 0)
}

func (s *BetweenPredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *BetweenPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBetweenPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type IsNullPredicateContext struct {
	*PredicateContext
}

func NewIsNullPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IsNullPredicateContext {
	var p = new(IsNullPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *IsNullPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsNullPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *IsNullPredicateContext) IS() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS, 0)
}

func (s *IsNullPredicateContext) NullNotnull() INullNotnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INullNotnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INullNotnullContext)
}

func (s *IsNullPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIsNullPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type LikePredicateContext struct {
	*PredicateContext
}

func NewLikePredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LikePredicateContext {
	var p = new(LikePredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *LikePredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LikePredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *LikePredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *LikePredicateContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIKE, 0)
}

func (s *LikePredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *LikePredicateContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserESCAPE, 0)
}

func (s *LikePredicateContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *LikePredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLikePredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type RegexpPredicateContext struct {
	*PredicateContext
	regex antlr.Token
}

func NewRegexpPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RegexpPredicateContext {
	var p = new(RegexpPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *RegexpPredicateContext) GetRegex() antlr.Token { return s.regex }

func (s *RegexpPredicateContext) SetRegex(v antlr.Token) { s.regex = v }

func (s *RegexpPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RegexpPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *RegexpPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *RegexpPredicateContext) REGEXP() antlr.TerminalNode {
	return s.GetToken(MySqlParserREGEXP, 0)
}

func (s *RegexpPredicateContext) RLIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRLIKE, 0)
}

func (s *RegexpPredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *RegexpPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRegexpPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Predicate() (localctx IPredicateContext) {
	return p.predicate(0)
}

func (p *MySqlParser) predicate(_p int) (localctx IPredicateContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPredicateContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPredicateContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 606
	p.EnterRecursionRule(localctx, 606, MySqlParserRULE_predicate, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewExpressionAtomPredicateContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	p.SetState(6297)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 924, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6295)
			p.Match(MySqlParserLOCAL_ID)
		}
		{
			p.SetState(6296)
			p.Match(MySqlParserVAR_ASSIGN)
		}

	}
	{
		p.SetState(6299)
		p.expressionAtom(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(6365)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 932, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(6363)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 931, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBinaryComparisonPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				localctx.(*BinaryComparisonPredicateContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6301)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(6302)
					p.ComparisonOperator()
				}
				{
					p.SetState(6303)

					var _x = p.predicate(9)

					localctx.(*BinaryComparisonPredicateContext).right = _x
				}

			case 2:
				localctx = NewBetweenPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6305)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				p.SetState(6307)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserNOT {
					{
						p.SetState(6306)
						p.Match(MySqlParserNOT)
					}

				}
				{
					p.SetState(6309)
					p.Match(MySqlParserBETWEEN)
				}
				{
					p.SetState(6310)
					p.predicate(0)
				}
				{
					p.SetState(6311)
					p.Match(MySqlParserAND)
				}
				{
					p.SetState(6312)
					p.predicate(7)
				}

			case 3:
				localctx = NewSoundsLikePredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6314)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(6315)
					p.Match(MySqlParserSOUNDS)
				}
				{
					p.SetState(6316)
					p.Match(MySqlParserLIKE)
				}
				{
					p.SetState(6317)
					p.predicate(6)
				}

			case 4:
				localctx = NewRegexpPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6318)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				p.SetState(6320)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserNOT {
					{
						p.SetState(6319)
						p.Match(MySqlParserNOT)
					}

				}
				{
					p.SetState(6322)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*RegexpPredicateContext).regex = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserREGEXP || _la == MySqlParserRLIKE) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*RegexpPredicateContext).regex = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(6323)
					p.predicate(4)
				}

			case 5:
				localctx = NewInPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6324)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				p.SetState(6326)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserNOT {
					{
						p.SetState(6325)
						p.Match(MySqlParserNOT)
					}

				}
				{
					p.SetState(6328)
					p.Match(MySqlParserIN)
				}
				{
					p.SetState(6329)
					p.Match(MySqlParserLR_BRACKET)
				}
				p.SetState(6332)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 928, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(6330)
						p.SelectStatement()
					}

				case 2:
					{
						p.SetState(6331)
						p.Expressions()
					}

				}
				{
					p.SetState(6334)
					p.Match(MySqlParserRR_BRACKET)
				}

			case 6:
				localctx = NewIsNullPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6336)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(6337)
					p.Match(MySqlParserIS)
				}
				{
					p.SetState(6338)
					p.NullNotnull()
				}

			case 7:
				localctx = NewSubqueryComparisonPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6339)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(6340)
					p.ComparisonOperator()
				}
				{
					p.SetState(6341)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*SubqueryComparisonPredicateContext).quantifier = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == MySqlParserALL || _la == MySqlParserANY || _la == MySqlParserSOME) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*SubqueryComparisonPredicateContext).quantifier = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(6342)
					p.Match(MySqlParserLR_BRACKET)
				}
				{
					p.SetState(6343)
					p.SelectStatement()
				}
				{
					p.SetState(6344)
					p.Match(MySqlParserRR_BRACKET)
				}

			case 8:
				localctx = NewLikePredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6346)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				p.SetState(6348)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserNOT {
					{
						p.SetState(6347)
						p.Match(MySqlParserNOT)
					}

				}
				{
					p.SetState(6350)
					p.Match(MySqlParserLIKE)
				}
				{
					p.SetState(6351)
					p.predicate(0)
				}
				p.SetState(6354)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 930, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(6352)
						p.Match(MySqlParserESCAPE)
					}
					{
						p.SetState(6353)
						p.Match(MySqlParserSTRING_LITERAL)
					}

				}

			case 9:
				localctx = NewJsonMemberOfPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(6356)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(6357)
					p.Match(MySqlParserMEMBER)
				}
				{
					p.SetState(6358)
					p.Match(MySqlParserOF)
				}
				{
					p.SetState(6359)
					p.Match(MySqlParserLR_BRACKET)
				}
				{
					p.SetState(6360)
					p.predicate(0)
				}
				{
					p.SetState(6361)
					p.Match(MySqlParserRR_BRACKET)
				}

			}

		}
		p.SetState(6367)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 932, p.GetParserRuleContext())
	}

	return localctx
}

// IExpressionAtomContext is an interface to support dynamic dispatch.
type IExpressionAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionAtomContext differentiates from other interfaces.
	IsExpressionAtomContext()
}

type ExpressionAtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionAtomContext() *ExpressionAtomContext {
	var p = new(ExpressionAtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_expressionAtom
	return p
}

func (*ExpressionAtomContext) IsExpressionAtomContext() {}

func NewExpressionAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionAtomContext {
	var p = new(ExpressionAtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_expressionAtom

	return p
}

func (s *ExpressionAtomContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionAtomContext) CopyFrom(ctx *ExpressionAtomContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionAtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type UnaryExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewUnaryExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnaryExpressionAtomContext {
	var p = new(UnaryExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *UnaryExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpressionAtomContext) UnaryOperator() IUnaryOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryOperatorContext)
}

func (s *UnaryExpressionAtomContext) ExpressionAtom() IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *UnaryExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnaryExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type CollateExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewCollateExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CollateExpressionAtomContext {
	var p = new(CollateExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *CollateExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollateExpressionAtomContext) ExpressionAtom() IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *CollateExpressionAtomContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *CollateExpressionAtomContext) CollationName() ICollationNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollationNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollationNameContext)
}

func (s *CollateExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCollateExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type MysqlVariableExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewMysqlVariableExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MysqlVariableExpressionAtomContext {
	var p = new(MysqlVariableExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *MysqlVariableExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MysqlVariableExpressionAtomContext) MysqlVariable() IMysqlVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMysqlVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMysqlVariableContext)
}

func (s *MysqlVariableExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMysqlVariableExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type NestedExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewNestedExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NestedExpressionAtomContext {
	var p = new(NestedExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *NestedExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NestedExpressionAtomContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *NestedExpressionAtomContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *NestedExpressionAtomContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NestedExpressionAtomContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *NestedExpressionAtomContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *NestedExpressionAtomContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *NestedExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitNestedExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type NestedRowExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewNestedRowExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NestedRowExpressionAtomContext {
	var p = new(NestedRowExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *NestedRowExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NestedRowExpressionAtomContext) ROW() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW, 0)
}

func (s *NestedRowExpressionAtomContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *NestedRowExpressionAtomContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *NestedRowExpressionAtomContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NestedRowExpressionAtomContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *NestedRowExpressionAtomContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCOMMA)
}

func (s *NestedRowExpressionAtomContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMA, i)
}

func (s *NestedRowExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitNestedRowExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type MathExpressionAtomContext struct {
	*ExpressionAtomContext
	left  IExpressionAtomContext
	right IExpressionAtomContext
}

func NewMathExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MathExpressionAtomContext {
	var p = new(MathExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *MathExpressionAtomContext) GetLeft() IExpressionAtomContext { return s.left }

func (s *MathExpressionAtomContext) GetRight() IExpressionAtomContext { return s.right }

func (s *MathExpressionAtomContext) SetLeft(v IExpressionAtomContext) { s.left = v }

func (s *MathExpressionAtomContext) SetRight(v IExpressionAtomContext) { s.right = v }

func (s *MathExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MathExpressionAtomContext) MathOperator() IMathOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMathOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMathOperatorContext)
}

func (s *MathExpressionAtomContext) AllExpressionAtom() []IExpressionAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem())
	var tst = make([]IExpressionAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionAtomContext)
		}
	}

	return tst
}

func (s *MathExpressionAtomContext) ExpressionAtom(i int) IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *MathExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMathExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExistsExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewExistsExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExistsExpressionAtomContext {
	var p = new(ExistsExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *ExistsExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExistsExpressionAtomContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXISTS, 0)
}

func (s *ExistsExpressionAtomContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *ExistsExpressionAtomContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *ExistsExpressionAtomContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *ExistsExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitExistsExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type IntervalExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewIntervalExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntervalExpressionAtomContext {
	var p = new(IntervalExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *IntervalExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalExpressionAtomContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERVAL, 0)
}

func (s *IntervalExpressionAtomContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IntervalExpressionAtomContext) IntervalType() IIntervalTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalTypeContext)
}

func (s *IntervalExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIntervalExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type JsonExpressionAtomContext struct {
	*ExpressionAtomContext
	left  IExpressionAtomContext
	right IExpressionAtomContext
}

func NewJsonExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JsonExpressionAtomContext {
	var p = new(JsonExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *JsonExpressionAtomContext) GetLeft() IExpressionAtomContext { return s.left }

func (s *JsonExpressionAtomContext) GetRight() IExpressionAtomContext { return s.right }

func (s *JsonExpressionAtomContext) SetLeft(v IExpressionAtomContext) { s.left = v }

func (s *JsonExpressionAtomContext) SetRight(v IExpressionAtomContext) { s.right = v }

func (s *JsonExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JsonExpressionAtomContext) JsonOperator() IJsonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJsonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJsonOperatorContext)
}

func (s *JsonExpressionAtomContext) AllExpressionAtom() []IExpressionAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem())
	var tst = make([]IExpressionAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionAtomContext)
		}
	}

	return tst
}

func (s *JsonExpressionAtomContext) ExpressionAtom(i int) IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *JsonExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitJsonExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type SubqueryExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewSubqueryExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryExpressionAtomContext {
	var p = new(SubqueryExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *SubqueryExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryExpressionAtomContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserLR_BRACKET, 0)
}

func (s *SubqueryExpressionAtomContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *SubqueryExpressionAtomContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRR_BRACKET, 0)
}

func (s *SubqueryExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSubqueryExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type ConstantExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewConstantExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantExpressionAtomContext {
	var p = new(ConstantExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *ConstantExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantExpressionAtomContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *ConstantExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitConstantExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type FunctionCallExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewFunctionCallExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionCallExpressionAtomContext {
	var p = new(FunctionCallExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *FunctionCallExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallExpressionAtomContext) FunctionCall() IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *FunctionCallExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFunctionCallExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type BinaryExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewBinaryExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryExpressionAtomContext {
	var p = new(BinaryExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *BinaryExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryExpressionAtomContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *BinaryExpressionAtomContext) ExpressionAtom() IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *BinaryExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBinaryExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type FullColumnNameExpressionAtomContext struct {
	*ExpressionAtomContext
}

func NewFullColumnNameExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FullColumnNameExpressionAtomContext {
	var p = new(FullColumnNameExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *FullColumnNameExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FullColumnNameExpressionAtomContext) FullColumnName() IFullColumnNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFullColumnNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFullColumnNameContext)
}

func (s *FullColumnNameExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFullColumnNameExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitExpressionAtomContext struct {
	*ExpressionAtomContext
	left  IExpressionAtomContext
	right IExpressionAtomContext
}

func NewBitExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitExpressionAtomContext {
	var p = new(BitExpressionAtomContext)

	p.ExpressionAtomContext = NewEmptyExpressionAtomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionAtomContext))

	return p
}

func (s *BitExpressionAtomContext) GetLeft() IExpressionAtomContext { return s.left }

func (s *BitExpressionAtomContext) GetRight() IExpressionAtomContext { return s.right }

func (s *BitExpressionAtomContext) SetLeft(v IExpressionAtomContext) { s.left = v }

func (s *BitExpressionAtomContext) SetRight(v IExpressionAtomContext) { s.right = v }

func (s *BitExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitExpressionAtomContext) BitOperator() IBitOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitOperatorContext)
}

func (s *BitExpressionAtomContext) AllExpressionAtom() []IExpressionAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem())
	var tst = make([]IExpressionAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionAtomContext)
		}
	}

	return tst
}

func (s *BitExpressionAtomContext) ExpressionAtom(i int) IExpressionAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionAtomContext)
}

func (s *BitExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBitExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ExpressionAtom() (localctx IExpressionAtomContext) {
	return p.expressionAtom(0)
}

func (p *MySqlParser) expressionAtom(_p int) (localctx IExpressionAtomContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionAtomContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionAtomContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 608
	p.EnterRecursionRule(localctx, 608, MySqlParserRULE_expressionAtom, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6413)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 935, p.GetParserRuleContext()) {
	case 1:
		localctx = NewConstantExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(6369)
			p.Constant()
		}

	case 2:
		localctx = NewFullColumnNameExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6370)
			p.FullColumnName()
		}

	case 3:
		localctx = NewFunctionCallExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6371)
			p.FunctionCall()
		}

	case 4:
		localctx = NewMysqlVariableExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6372)
			p.MysqlVariable()
		}

	case 5:
		localctx = NewUnaryExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6373)
			p.UnaryOperator()
		}
		{
			p.SetState(6374)
			p.expressionAtom(10)
		}

	case 6:
		localctx = NewBinaryExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6376)
			p.Match(MySqlParserBINARY)
		}
		{
			p.SetState(6377)
			p.expressionAtom(9)
		}

	case 7:
		localctx = NewNestedExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6378)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6379)
			p.expression(0)
		}
		p.SetState(6384)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(6380)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(6381)
				p.expression(0)
			}

			p.SetState(6386)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6387)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 8:
		localctx = NewNestedRowExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6389)
			p.Match(MySqlParserROW)
		}
		{
			p.SetState(6390)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6391)
			p.expression(0)
		}
		p.SetState(6394)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserCOMMA {
			{
				p.SetState(6392)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(6393)
				p.expression(0)
			}

			p.SetState(6396)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6398)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 9:
		localctx = NewExistsExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6400)
			p.Match(MySqlParserEXISTS)
		}
		{
			p.SetState(6401)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6402)
			p.SelectStatement()
		}
		{
			p.SetState(6403)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 10:
		localctx = NewSubqueryExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6405)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(6406)
			p.SelectStatement()
		}
		{
			p.SetState(6407)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 11:
		localctx = NewIntervalExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(6409)
			p.Match(MySqlParserINTERVAL)
		}
		{
			p.SetState(6410)
			p.expression(0)
		}
		{
			p.SetState(6411)
			p.IntervalType()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(6432)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 937, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(6430)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 936, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBitExpressionAtomContext(p, NewExpressionAtomContext(p, _parentctx, _parentState))
				localctx.(*BitExpressionAtomContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_expressionAtom)
				p.SetState(6415)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(6416)
					p.BitOperator()
				}
				{
					p.SetState(6417)

					var _x = p.expressionAtom(4)

					localctx.(*BitExpressionAtomContext).right = _x
				}

			case 2:
				localctx = NewMathExpressionAtomContext(p, NewExpressionAtomContext(p, _parentctx, _parentState))
				localctx.(*MathExpressionAtomContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_expressionAtom)
				p.SetState(6419)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(6420)
					p.MathOperator()
				}
				{
					p.SetState(6421)

					var _x = p.expressionAtom(3)

					localctx.(*MathExpressionAtomContext).right = _x
				}

			case 3:
				localctx = NewJsonExpressionAtomContext(p, NewExpressionAtomContext(p, _parentctx, _parentState))
				localctx.(*JsonExpressionAtomContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_expressionAtom)
				p.SetState(6423)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(6424)
					p.JsonOperator()
				}
				{
					p.SetState(6425)

					var _x = p.expressionAtom(2)

					localctx.(*JsonExpressionAtomContext).right = _x
				}

			case 4:
				localctx = NewCollateExpressionAtomContext(p, NewExpressionAtomContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_expressionAtom)
				p.SetState(6427)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(6428)
					p.Match(MySqlParserCOLLATE)
				}
				{
					p.SetState(6429)
					p.CollationName()
				}

			}

		}
		p.SetState(6434)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 937, p.GetParserRuleContext())
	}

	return localctx
}

// IUnaryOperatorContext is an interface to support dynamic dispatch.
type IUnaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryOperatorContext differentiates from other interfaces.
	IsUnaryOperatorContext()
}

type UnaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryOperatorContext() *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_unaryOperator
	return p
}

func (*UnaryOperatorContext) IsUnaryOperatorContext() {}

func NewUnaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_unaryOperator

	return p
}

func (s *UnaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryOperatorContext) EXCLAMATION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLAMATION_SYMBOL, 0)
}

func (s *UnaryOperatorContext) BIT_NOT_OP() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_NOT_OP, 0)
}

func (s *UnaryOperatorContext) PLUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUS, 0)
}

func (s *UnaryOperatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, 0)
}

func (s *UnaryOperatorContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *UnaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) UnaryOperator() (localctx IUnaryOperatorContext) {
	localctx = NewUnaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 610, MySqlParserRULE_unaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6435)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserNOT || (((_la-1047)&-(0x1f+1)) == 0 && ((1<<uint((_la-1047)))&((1<<(MySqlParserPLUS-1047))|(1<<(MySqlParserMINUS-1047))|(1<<(MySqlParserEXCLAMATION_SYMBOL-1047))|(1<<(MySqlParserBIT_NOT_OP-1047)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IComparisonOperatorContext is an interface to support dynamic dispatch.
type IComparisonOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparisonOperatorContext differentiates from other interfaces.
	IsComparisonOperatorContext()
}

type ComparisonOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisonOperatorContext() *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_comparisonOperator
	return p
}

func (*ComparisonOperatorContext) IsComparisonOperatorContext() {}

func NewComparisonOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_comparisonOperator

	return p
}

func (s *ComparisonOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisonOperatorContext) EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUAL_SYMBOL, 0)
}

func (s *ComparisonOperatorContext) GREATER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGREATER_SYMBOL, 0)
}

func (s *ComparisonOperatorContext) LESS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLESS_SYMBOL, 0)
}

func (s *ComparisonOperatorContext) EXCLAMATION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLAMATION_SYMBOL, 0)
}

func (s *ComparisonOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitComparisonOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) ComparisonOperator() (localctx IComparisonOperatorContext) {
	localctx = NewComparisonOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 612, MySqlParserRULE_comparisonOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6451)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 938, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6437)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6438)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6439)
			p.Match(MySqlParserLESS_SYMBOL)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6440)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(6441)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6442)
			p.Match(MySqlParserGREATER_SYMBOL)
		}
		{
			p.SetState(6443)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6444)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(6445)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6446)
			p.Match(MySqlParserEXCLAMATION_SYMBOL)
		}
		{
			p.SetState(6447)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6448)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(6449)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(6450)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	}

	return localctx
}

// ILogicalOperatorContext is an interface to support dynamic dispatch.
type ILogicalOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalOperatorContext differentiates from other interfaces.
	IsLogicalOperatorContext()
}

type LogicalOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalOperatorContext() *LogicalOperatorContext {
	var p = new(LogicalOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_logicalOperator
	return p
}

func (*LogicalOperatorContext) IsLogicalOperatorContext() {}

func NewLogicalOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalOperatorContext {
	var p = new(LogicalOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_logicalOperator

	return p
}

func (s *LogicalOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalOperatorContext) AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, 0)
}

func (s *LogicalOperatorContext) AllBIT_AND_OP() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserBIT_AND_OP)
}

func (s *LogicalOperatorContext) BIT_AND_OP(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_AND_OP, i)
}

func (s *LogicalOperatorContext) XOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserXOR, 0)
}

func (s *LogicalOperatorContext) OR() antlr.TerminalNode {
	return s.GetToken(MySqlParserOR, 0)
}

func (s *LogicalOperatorContext) AllBIT_OR_OP() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserBIT_OR_OP)
}

func (s *LogicalOperatorContext) BIT_OR_OP(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_OR_OP, i)
}

func (s *LogicalOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLogicalOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) LogicalOperator() (localctx ILogicalOperatorContext) {
	localctx = NewLogicalOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 614, MySqlParserRULE_logicalOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6460)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserAND:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6453)
			p.Match(MySqlParserAND)
		}

	case MySqlParserBIT_AND_OP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6454)
			p.Match(MySqlParserBIT_AND_OP)
		}
		{
			p.SetState(6455)
			p.Match(MySqlParserBIT_AND_OP)
		}

	case MySqlParserXOR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6456)
			p.Match(MySqlParserXOR)
		}

	case MySqlParserOR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6457)
			p.Match(MySqlParserOR)
		}

	case MySqlParserBIT_OR_OP:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6458)
			p.Match(MySqlParserBIT_OR_OP)
		}
		{
			p.SetState(6459)
			p.Match(MySqlParserBIT_OR_OP)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBitOperatorContext is an interface to support dynamic dispatch.
type IBitOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitOperatorContext differentiates from other interfaces.
	IsBitOperatorContext()
}

type BitOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitOperatorContext() *BitOperatorContext {
	var p = new(BitOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_bitOperator
	return p
}

func (*BitOperatorContext) IsBitOperatorContext() {}

func NewBitOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitOperatorContext {
	var p = new(BitOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_bitOperator

	return p
}

func (s *BitOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *BitOperatorContext) AllLESS_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLESS_SYMBOL)
}

func (s *BitOperatorContext) LESS_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLESS_SYMBOL, i)
}

func (s *BitOperatorContext) AllGREATER_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserGREATER_SYMBOL)
}

func (s *BitOperatorContext) GREATER_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserGREATER_SYMBOL, i)
}

func (s *BitOperatorContext) BIT_AND_OP() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_AND_OP, 0)
}

func (s *BitOperatorContext) BIT_XOR_OP() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_XOR_OP, 0)
}

func (s *BitOperatorContext) BIT_OR_OP() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_OR_OP, 0)
}

func (s *BitOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBitOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) BitOperator() (localctx IBitOperatorContext) {
	localctx = NewBitOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 616, MySqlParserRULE_bitOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6469)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLESS_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6462)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(6463)
			p.Match(MySqlParserLESS_SYMBOL)
		}

	case MySqlParserGREATER_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6464)
			p.Match(MySqlParserGREATER_SYMBOL)
		}
		{
			p.SetState(6465)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	case MySqlParserBIT_AND_OP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6466)
			p.Match(MySqlParserBIT_AND_OP)
		}

	case MySqlParserBIT_XOR_OP:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6467)
			p.Match(MySqlParserBIT_XOR_OP)
		}

	case MySqlParserBIT_OR_OP:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6468)
			p.Match(MySqlParserBIT_OR_OP)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMathOperatorContext is an interface to support dynamic dispatch.
type IMathOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMathOperatorContext differentiates from other interfaces.
	IsMathOperatorContext()
}

type MathOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMathOperatorContext() *MathOperatorContext {
	var p = new(MathOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_mathOperator
	return p
}

func (*MathOperatorContext) IsMathOperatorContext() {}

func NewMathOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MathOperatorContext {
	var p = new(MathOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_mathOperator

	return p
}

func (s *MathOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *MathOperatorContext) STAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTAR, 0)
}

func (s *MathOperatorContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIVIDE, 0)
}

func (s *MathOperatorContext) MODULE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODULE, 0)
}

func (s *MathOperatorContext) DIV() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIV, 0)
}

func (s *MathOperatorContext) MOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMOD, 0)
}

func (s *MathOperatorContext) PLUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUS, 0)
}

func (s *MathOperatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, 0)
}

func (s *MathOperatorContext) MINUSMINUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUSMINUS, 0)
}

func (s *MathOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MathOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MathOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMathOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) MathOperator() (localctx IMathOperatorContext) {
	localctx = NewMathOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 618, MySqlParserRULE_mathOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6471)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-1044)&-(0x1f+1)) == 0 && ((1<<uint((_la-1044)))&((1<<(MySqlParserSTAR-1044))|(1<<(MySqlParserDIVIDE-1044))|(1<<(MySqlParserMODULE-1044))|(1<<(MySqlParserPLUS-1044))|(1<<(MySqlParserMINUSMINUS-1044))|(1<<(MySqlParserMINUS-1044))|(1<<(MySqlParserDIV-1044))|(1<<(MySqlParserMOD-1044)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IJsonOperatorContext is an interface to support dynamic dispatch.
type IJsonOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJsonOperatorContext differentiates from other interfaces.
	IsJsonOperatorContext()
}

type JsonOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJsonOperatorContext() *JsonOperatorContext {
	var p = new(JsonOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_jsonOperator
	return p
}

func (*JsonOperatorContext) IsJsonOperatorContext() {}

func NewJsonOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JsonOperatorContext {
	var p = new(JsonOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_jsonOperator

	return p
}

func (s *JsonOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *JsonOperatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, 0)
}

func (s *JsonOperatorContext) AllGREATER_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserGREATER_SYMBOL)
}

func (s *JsonOperatorContext) GREATER_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserGREATER_SYMBOL, i)
}

func (s *JsonOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JsonOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JsonOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitJsonOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) JsonOperator() (localctx IJsonOperatorContext) {
	localctx = NewJsonOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 620, MySqlParserRULE_jsonOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6478)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 941, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6473)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(6474)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6475)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(6476)
			p.Match(MySqlParserGREATER_SYMBOL)
		}
		{
			p.SetState(6477)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	}

	return localctx
}

// ICharsetNameBaseContext is an interface to support dynamic dispatch.
type ICharsetNameBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharsetNameBaseContext differentiates from other interfaces.
	IsCharsetNameBaseContext()
}

type CharsetNameBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharsetNameBaseContext() *CharsetNameBaseContext {
	var p = new(CharsetNameBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_charsetNameBase
	return p
}

func (*CharsetNameBaseContext) IsCharsetNameBaseContext() {}

func NewCharsetNameBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CharsetNameBaseContext {
	var p = new(CharsetNameBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_charsetNameBase

	return p
}

func (s *CharsetNameBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *CharsetNameBaseContext) ARMSCII8() antlr.TerminalNode {
	return s.GetToken(MySqlParserARMSCII8, 0)
}

func (s *CharsetNameBaseContext) ASCII() antlr.TerminalNode {
	return s.GetToken(MySqlParserASCII, 0)
}

func (s *CharsetNameBaseContext) BIG5() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIG5, 0)
}

func (s *CharsetNameBaseContext) CP1250() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP1250, 0)
}

func (s *CharsetNameBaseContext) CP1251() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP1251, 0)
}

func (s *CharsetNameBaseContext) CP1256() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP1256, 0)
}

func (s *CharsetNameBaseContext) CP1257() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP1257, 0)
}

func (s *CharsetNameBaseContext) CP850() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP850, 0)
}

func (s *CharsetNameBaseContext) CP852() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP852, 0)
}

func (s *CharsetNameBaseContext) CP866() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP866, 0)
}

func (s *CharsetNameBaseContext) CP932() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP932, 0)
}

func (s *CharsetNameBaseContext) DEC8() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEC8, 0)
}

func (s *CharsetNameBaseContext) EUCJPMS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEUCJPMS, 0)
}

func (s *CharsetNameBaseContext) EUCKR() antlr.TerminalNode {
	return s.GetToken(MySqlParserEUCKR, 0)
}

func (s *CharsetNameBaseContext) GB2312() antlr.TerminalNode {
	return s.GetToken(MySqlParserGB2312, 0)
}

func (s *CharsetNameBaseContext) GBK() antlr.TerminalNode {
	return s.GetToken(MySqlParserGBK, 0)
}

func (s *CharsetNameBaseContext) GEOSTD8() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOSTD8, 0)
}

func (s *CharsetNameBaseContext) GREEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserGREEK, 0)
}

func (s *CharsetNameBaseContext) HEBREW() antlr.TerminalNode {
	return s.GetToken(MySqlParserHEBREW, 0)
}

func (s *CharsetNameBaseContext) HP8() antlr.TerminalNode {
	return s.GetToken(MySqlParserHP8, 0)
}

func (s *CharsetNameBaseContext) KEYBCS2() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEYBCS2, 0)
}

func (s *CharsetNameBaseContext) KOI8R() antlr.TerminalNode {
	return s.GetToken(MySqlParserKOI8R, 0)
}

func (s *CharsetNameBaseContext) KOI8U() antlr.TerminalNode {
	return s.GetToken(MySqlParserKOI8U, 0)
}

func (s *CharsetNameBaseContext) LATIN1() antlr.TerminalNode {
	return s.GetToken(MySqlParserLATIN1, 0)
}

func (s *CharsetNameBaseContext) LATIN2() antlr.TerminalNode {
	return s.GetToken(MySqlParserLATIN2, 0)
}

func (s *CharsetNameBaseContext) LATIN5() antlr.TerminalNode {
	return s.GetToken(MySqlParserLATIN5, 0)
}

func (s *CharsetNameBaseContext) LATIN7() antlr.TerminalNode {
	return s.GetToken(MySqlParserLATIN7, 0)
}

func (s *CharsetNameBaseContext) MACCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMACCE, 0)
}

func (s *CharsetNameBaseContext) MACROMAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserMACROMAN, 0)
}

func (s *CharsetNameBaseContext) SJIS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSJIS, 0)
}

func (s *CharsetNameBaseContext) SWE7() antlr.TerminalNode {
	return s.GetToken(MySqlParserSWE7, 0)
}

func (s *CharsetNameBaseContext) TIS620() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIS620, 0)
}

func (s *CharsetNameBaseContext) UCS2() antlr.TerminalNode {
	return s.GetToken(MySqlParserUCS2, 0)
}

func (s *CharsetNameBaseContext) UJIS() antlr.TerminalNode {
	return s.GetToken(MySqlParserUJIS, 0)
}

func (s *CharsetNameBaseContext) UTF16() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF16, 0)
}

func (s *CharsetNameBaseContext) UTF16LE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF16LE, 0)
}

func (s *CharsetNameBaseContext) UTF32() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF32, 0)
}

func (s *CharsetNameBaseContext) UTF8() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF8, 0)
}

func (s *CharsetNameBaseContext) UTF8MB3() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF8MB3, 0)
}

func (s *CharsetNameBaseContext) UTF8MB4() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF8MB4, 0)
}

func (s *CharsetNameBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharsetNameBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CharsetNameBaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCharsetNameBase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) CharsetNameBase() (localctx ICharsetNameBaseContext) {
	localctx = NewCharsetNameBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 622, MySqlParserRULE_charsetNameBase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6480)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-678)&-(0x1f+1)) == 0 && ((1<<uint((_la-678)))&((1<<(MySqlParserARMSCII8-678))|(1<<(MySqlParserASCII-678))|(1<<(MySqlParserBIG5-678))|(1<<(MySqlParserCP1250-678))|(1<<(MySqlParserCP1251-678))|(1<<(MySqlParserCP1256-678))|(1<<(MySqlParserCP1257-678))|(1<<(MySqlParserCP850-678))|(1<<(MySqlParserCP852-678))|(1<<(MySqlParserCP866-678))|(1<<(MySqlParserCP932-678))|(1<<(MySqlParserDEC8-678))|(1<<(MySqlParserEUCJPMS-678))|(1<<(MySqlParserEUCKR-678))|(1<<(MySqlParserGB2312-678))|(1<<(MySqlParserGBK-678))|(1<<(MySqlParserGEOSTD8-678))|(1<<(MySqlParserGREEK-678))|(1<<(MySqlParserHEBREW-678))|(1<<(MySqlParserHP8-678))|(1<<(MySqlParserKEYBCS2-678))|(1<<(MySqlParserKOI8R-678))|(1<<(MySqlParserKOI8U-678))|(1<<(MySqlParserLATIN1-678))|(1<<(MySqlParserLATIN2-678))|(1<<(MySqlParserLATIN5-678))|(1<<(MySqlParserLATIN7-678))|(1<<(MySqlParserMACCE-678))|(1<<(MySqlParserMACROMAN-678))|(1<<(MySqlParserSJIS-678))|(1<<(MySqlParserSWE7-678))|(1<<(MySqlParserTIS620-678)))) != 0) || (((_la-710)&-(0x1f+1)) == 0 && ((1<<uint((_la-710)))&((1<<(MySqlParserUCS2-710))|(1<<(MySqlParserUJIS-710))|(1<<(MySqlParserUTF16-710))|(1<<(MySqlParserUTF16LE-710))|(1<<(MySqlParserUTF32-710))|(1<<(MySqlParserUTF8-710))|(1<<(MySqlParserUTF8MB3-710))|(1<<(MySqlParserUTF8MB4-710)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITransactionLevelBaseContext is an interface to support dynamic dispatch.
type ITransactionLevelBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransactionLevelBaseContext differentiates from other interfaces.
	IsTransactionLevelBaseContext()
}

type TransactionLevelBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransactionLevelBaseContext() *TransactionLevelBaseContext {
	var p = new(TransactionLevelBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transactionLevelBase
	return p
}

func (*TransactionLevelBaseContext) IsTransactionLevelBaseContext() {}

func NewTransactionLevelBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransactionLevelBaseContext {
	var p = new(TransactionLevelBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transactionLevelBase

	return p
}

func (s *TransactionLevelBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *TransactionLevelBaseContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPEATABLE, 0)
}

func (s *TransactionLevelBaseContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMITTED, 0)
}

func (s *TransactionLevelBaseContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNCOMMITTED, 0)
}

func (s *TransactionLevelBaseContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERIALIZABLE, 0)
}

func (s *TransactionLevelBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransactionLevelBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransactionLevelBaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTransactionLevelBase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) TransactionLevelBase() (localctx ITransactionLevelBaseContext) {
	localctx = NewTransactionLevelBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 624, MySqlParserRULE_transactionLevelBase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6482)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-730)&-(0x1f+1)) == 0 && ((1<<uint((_la-730)))&((1<<(MySqlParserREPEATABLE-730))|(1<<(MySqlParserCOMMITTED-730))|(1<<(MySqlParserUNCOMMITTED-730))|(1<<(MySqlParserSERIALIZABLE-730)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPrivilegesBaseContext is an interface to support dynamic dispatch.
type IPrivilegesBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivilegesBaseContext differentiates from other interfaces.
	IsPrivilegesBaseContext()
}

type PrivilegesBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegesBaseContext() *PrivilegesBaseContext {
	var p = new(PrivilegesBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_privilegesBase
	return p
}

func (*PrivilegesBaseContext) IsPrivilegesBaseContext() {}

func NewPrivilegesBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegesBaseContext {
	var p = new(PrivilegesBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_privilegesBase

	return p
}

func (s *PrivilegesBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegesBaseContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *PrivilegesBaseContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROUTINE, 0)
}

func (s *PrivilegesBaseContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXECUTE, 0)
}

func (s *PrivilegesBaseContext) FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILE, 0)
}

func (s *PrivilegesBaseContext) PROCESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCESS, 0)
}

func (s *PrivilegesBaseContext) RELOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELOAD, 0)
}

func (s *PrivilegesBaseContext) SHUTDOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHUTDOWN, 0)
}

func (s *PrivilegesBaseContext) SUPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUPER, 0)
}

func (s *PrivilegesBaseContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *PrivilegesBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegesBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivilegesBaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPrivilegesBase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) PrivilegesBase() (localctx IPrivilegesBaseContext) {
	localctx = NewPrivilegesBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 626, MySqlParserRULE_privilegesBase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6484)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-637)&-(0x1f+1)) == 0 && ((1<<uint((_la-637)))&((1<<(MySqlParserTABLES-637))|(1<<(MySqlParserROUTINE-637))|(1<<(MySqlParserEXECUTE-637))|(1<<(MySqlParserFILE-637))|(1<<(MySqlParserPROCESS-637))|(1<<(MySqlParserRELOAD-637))|(1<<(MySqlParserSHUTDOWN-637))|(1<<(MySqlParserSUPER-637))|(1<<(MySqlParserPRIVILEGES-637)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIntervalTypeBaseContext is an interface to support dynamic dispatch.
type IIntervalTypeBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalTypeBaseContext differentiates from other interfaces.
	IsIntervalTypeBaseContext()
}

type IntervalTypeBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalTypeBaseContext() *IntervalTypeBaseContext {
	var p = new(IntervalTypeBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_intervalTypeBase
	return p
}

func (*IntervalTypeBaseContext) IsIntervalTypeBaseContext() {}

func NewIntervalTypeBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalTypeBaseContext {
	var p = new(IntervalTypeBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_intervalTypeBase

	return p
}

func (s *IntervalTypeBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalTypeBaseContext) QUARTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUARTER, 0)
}

func (s *IntervalTypeBaseContext) MONTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMONTH, 0)
}

func (s *IntervalTypeBaseContext) DAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY, 0)
}

func (s *IntervalTypeBaseContext) HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR, 0)
}

func (s *IntervalTypeBaseContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUTE, 0)
}

func (s *IntervalTypeBaseContext) WEEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEEK, 0)
}

func (s *IntervalTypeBaseContext) SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECOND, 0)
}

func (s *IntervalTypeBaseContext) MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMICROSECOND, 0)
}

func (s *IntervalTypeBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalTypeBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalTypeBaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIntervalTypeBase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) IntervalTypeBase() (localctx IIntervalTypeBaseContext) {
	localctx = NewIntervalTypeBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 628, MySqlParserRULE_intervalTypeBase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6486)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-629)&-(0x1f+1)) == 0 && ((1<<uint((_la-629)))&((1<<(MySqlParserQUARTER-629))|(1<<(MySqlParserMONTH-629))|(1<<(MySqlParserDAY-629))|(1<<(MySqlParserHOUR-629))|(1<<(MySqlParserMINUTE-629))|(1<<(MySqlParserWEEK-629))|(1<<(MySqlParserSECOND-629))|(1<<(MySqlParserMICROSECOND-629)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDataTypeBaseContext is an interface to support dynamic dispatch.
type IDataTypeBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDataTypeBaseContext differentiates from other interfaces.
	IsDataTypeBaseContext()
}

type DataTypeBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDataTypeBaseContext() *DataTypeBaseContext {
	var p = new(DataTypeBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dataTypeBase
	return p
}

func (*DataTypeBaseContext) IsDataTypeBaseContext() {}

func NewDataTypeBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataTypeBaseContext {
	var p = new(DataTypeBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dataTypeBase

	return p
}

func (s *DataTypeBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *DataTypeBaseContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *DataTypeBaseContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *DataTypeBaseContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMP, 0)
}

func (s *DataTypeBaseContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATETIME, 0)
}

func (s *DataTypeBaseContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR, 0)
}

func (s *DataTypeBaseContext) ENUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserENUM, 0)
}

func (s *DataTypeBaseContext) TEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEXT, 0)
}

func (s *DataTypeBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataTypeBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DataTypeBaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDataTypeBase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) DataTypeBase() (localctx IDataTypeBaseContext) {
	localctx = NewDataTypeBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 630, MySqlParserRULE_dataTypeBase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6488)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserDATETIME-201))|(1<<(MySqlParserYEAR-201))|(1<<(MySqlParserTEXT-201))|(1<<(MySqlParserENUM-201)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IKeywordsCanBeIdContext is an interface to support dynamic dispatch.
type IKeywordsCanBeIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeywordsCanBeIdContext differentiates from other interfaces.
	IsKeywordsCanBeIdContext()
}

type KeywordsCanBeIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordsCanBeIdContext() *KeywordsCanBeIdContext {
	var p = new(KeywordsCanBeIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_keywordsCanBeId
	return p
}

func (*KeywordsCanBeIdContext) IsKeywordsCanBeIdContext() {}

func NewKeywordsCanBeIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordsCanBeIdContext {
	var p = new(KeywordsCanBeIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_keywordsCanBeId

	return p
}

func (s *KeywordsCanBeIdContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordsCanBeIdContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserACCOUNT, 0)
}

func (s *KeywordsCanBeIdContext) ACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserACTION, 0)
}

func (s *KeywordsCanBeIdContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *KeywordsCanBeIdContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserAGGREGATE, 0)
}

func (s *KeywordsCanBeIdContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *KeywordsCanBeIdContext) ANY() antlr.TerminalNode {
	return s.GetToken(MySqlParserANY, 0)
}

func (s *KeywordsCanBeIdContext) AT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAT, 0)
}

func (s *KeywordsCanBeIdContext) AUDIT_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUDIT_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) AUTHORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTHORS, 0)
}

func (s *KeywordsCanBeIdContext) AUTOCOMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTOCOMMIT, 0)
}

func (s *KeywordsCanBeIdContext) AUTOEXTEND_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTOEXTEND_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) AUTO_INCREMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTO_INCREMENT, 0)
}

func (s *KeywordsCanBeIdContext) AVG() antlr.TerminalNode {
	return s.GetToken(MySqlParserAVG, 0)
}

func (s *KeywordsCanBeIdContext) AVG_ROW_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserAVG_ROW_LENGTH, 0)
}

func (s *KeywordsCanBeIdContext) BACKUP_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBACKUP_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEGIN, 0)
}

func (s *KeywordsCanBeIdContext) BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG, 0)
}

func (s *KeywordsCanBeIdContext) BINLOG_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) BINLOG_ENCRYPTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG_ENCRYPTION_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) BIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT, 0)
}

func (s *KeywordsCanBeIdContext) BIT_AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_AND, 0)
}

func (s *KeywordsCanBeIdContext) BIT_OR() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_OR, 0)
}

func (s *KeywordsCanBeIdContext) BIT_XOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_XOR, 0)
}

func (s *KeywordsCanBeIdContext) BLOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserBLOCK, 0)
}

func (s *KeywordsCanBeIdContext) BOOL() antlr.TerminalNode {
	return s.GetToken(MySqlParserBOOL, 0)
}

func (s *KeywordsCanBeIdContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBOOLEAN, 0)
}

func (s *KeywordsCanBeIdContext) BTREE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBTREE, 0)
}

func (s *KeywordsCanBeIdContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *KeywordsCanBeIdContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADED, 0)
}

func (s *KeywordsCanBeIdContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAIN, 0)
}

func (s *KeywordsCanBeIdContext) CHANGED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGED, 0)
}

func (s *KeywordsCanBeIdContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANNEL, 0)
}

func (s *KeywordsCanBeIdContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECKSUM, 0)
}

func (s *KeywordsCanBeIdContext) PAGE_CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserPAGE_CHECKSUM, 0)
}

func (s *KeywordsCanBeIdContext) CATALOG_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCATALOG_NAME, 0)
}

func (s *KeywordsCanBeIdContext) CIPHER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCIPHER, 0)
}

func (s *KeywordsCanBeIdContext) CLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLASS_ORIGIN, 0)
}

func (s *KeywordsCanBeIdContext) CLIENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLIENT, 0)
}

func (s *KeywordsCanBeIdContext) CLONE_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLONE_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLOSE, 0)
}

func (s *KeywordsCanBeIdContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOALESCE, 0)
}

func (s *KeywordsCanBeIdContext) CODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCODE, 0)
}

func (s *KeywordsCanBeIdContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *KeywordsCanBeIdContext) COLUMN_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN_FORMAT, 0)
}

func (s *KeywordsCanBeIdContext) COLUMN_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN_NAME, 0)
}

func (s *KeywordsCanBeIdContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *KeywordsCanBeIdContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMIT, 0)
}

func (s *KeywordsCanBeIdContext) COMPACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPACT, 0)
}

func (s *KeywordsCanBeIdContext) COMPLETION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPLETION, 0)
}

func (s *KeywordsCanBeIdContext) COMPRESSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESSED, 0)
}

func (s *KeywordsCanBeIdContext) COMPRESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESSION, 0)
}

func (s *KeywordsCanBeIdContext) CONCURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCURRENT, 0)
}

func (s *KeywordsCanBeIdContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION, 0)
}

func (s *KeywordsCanBeIdContext) CONNECTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) CONSISTENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSISTENT, 0)
}

func (s *KeywordsCanBeIdContext) CONSTRAINT_CATALOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_CATALOG, 0)
}

func (s *KeywordsCanBeIdContext) CONSTRAINT_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_NAME, 0)
}

func (s *KeywordsCanBeIdContext) CONSTRAINT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT_SCHEMA, 0)
}

func (s *KeywordsCanBeIdContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTAINS, 0)
}

func (s *KeywordsCanBeIdContext) CONTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTEXT, 0)
}

func (s *KeywordsCanBeIdContext) CONTRIBUTORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTRIBUTORS, 0)
}

func (s *KeywordsCanBeIdContext) COPY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOPY, 0)
}

func (s *KeywordsCanBeIdContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOUNT, 0)
}

func (s *KeywordsCanBeIdContext) CPU() antlr.TerminalNode {
	return s.GetToken(MySqlParserCPU, 0)
}

func (s *KeywordsCanBeIdContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT, 0)
}

func (s *KeywordsCanBeIdContext) CURSOR_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURSOR_NAME, 0)
}

func (s *KeywordsCanBeIdContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *KeywordsCanBeIdContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATAFILE, 0)
}

func (s *KeywordsCanBeIdContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEALLOCATE, 0)
}

func (s *KeywordsCanBeIdContext) DEFAULT_AUTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT_AUTH, 0)
}

func (s *KeywordsCanBeIdContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *KeywordsCanBeIdContext) DELAY_KEY_WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELAY_KEY_WRITE, 0)
}

func (s *KeywordsCanBeIdContext) DES_KEY_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDES_KEY_FILE, 0)
}

func (s *KeywordsCanBeIdContext) DIAGNOSTICS() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIAGNOSTICS, 0)
}

func (s *KeywordsCanBeIdContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *KeywordsCanBeIdContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISABLE, 0)
}

func (s *KeywordsCanBeIdContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISCARD, 0)
}

func (s *KeywordsCanBeIdContext) DISK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISK, 0)
}

func (s *KeywordsCanBeIdContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *KeywordsCanBeIdContext) DUMPFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDUMPFILE, 0)
}

func (s *KeywordsCanBeIdContext) DUPLICATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDUPLICATE, 0)
}

func (s *KeywordsCanBeIdContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDYNAMIC, 0)
}

func (s *KeywordsCanBeIdContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENABLE, 0)
}

func (s *KeywordsCanBeIdContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCRYPTION, 0)
}

func (s *KeywordsCanBeIdContext) ENCRYPTION_KEY_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCRYPTION_KEY_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *KeywordsCanBeIdContext) ENDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserENDS, 0)
}

func (s *KeywordsCanBeIdContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *KeywordsCanBeIdContext) ENGINES() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINES, 0)
}

func (s *KeywordsCanBeIdContext) ERROR() antlr.TerminalNode {
	return s.GetToken(MySqlParserERROR, 0)
}

func (s *KeywordsCanBeIdContext) ERRORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserERRORS, 0)
}

func (s *KeywordsCanBeIdContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserESCAPE, 0)
}

func (s *KeywordsCanBeIdContext) EVEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVEN, 0)
}

func (s *KeywordsCanBeIdContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *KeywordsCanBeIdContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENTS, 0)
}

func (s *KeywordsCanBeIdContext) EVERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVERY, 0)
}

func (s *KeywordsCanBeIdContext) EXCHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCHANGE, 0)
}

func (s *KeywordsCanBeIdContext) EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLUSIVE, 0)
}

func (s *KeywordsCanBeIdContext) EXPIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPIRE, 0)
}

func (s *KeywordsCanBeIdContext) EXPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPORT, 0)
}

func (s *KeywordsCanBeIdContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *KeywordsCanBeIdContext) EXTENT_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENT_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) FAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFAST, 0)
}

func (s *KeywordsCanBeIdContext) FAULTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFAULTS, 0)
}

func (s *KeywordsCanBeIdContext) FIELDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELDS, 0)
}

func (s *KeywordsCanBeIdContext) FILE_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILE_BLOCK_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) FILTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILTER, 0)
}

func (s *KeywordsCanBeIdContext) FIREWALL_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIREWALL_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) FIREWALL_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIREWALL_USER, 0)
}

func (s *KeywordsCanBeIdContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *KeywordsCanBeIdContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIXED, 0)
}

func (s *KeywordsCanBeIdContext) FLUSH() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLUSH, 0)
}

func (s *KeywordsCanBeIdContext) FOLLOWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOLLOWS, 0)
}

func (s *KeywordsCanBeIdContext) FOUND() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOUND, 0)
}

func (s *KeywordsCanBeIdContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *KeywordsCanBeIdContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *KeywordsCanBeIdContext) GENERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGENERAL, 0)
}

func (s *KeywordsCanBeIdContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL, 0)
}

func (s *KeywordsCanBeIdContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANTS, 0)
}

func (s *KeywordsCanBeIdContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *KeywordsCanBeIdContext) GROUP_CONCAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_CONCAT, 0)
}

func (s *KeywordsCanBeIdContext) GROUP_REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_REPLICATION, 0)
}

func (s *KeywordsCanBeIdContext) GROUP_REPLICATION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_REPLICATION_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *KeywordsCanBeIdContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySqlParserHASH, 0)
}

func (s *KeywordsCanBeIdContext) HELP() antlr.TerminalNode {
	return s.GetToken(MySqlParserHELP, 0)
}

func (s *KeywordsCanBeIdContext) HOST() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOST, 0)
}

func (s *KeywordsCanBeIdContext) HOSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOSTS, 0)
}

func (s *KeywordsCanBeIdContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *KeywordsCanBeIdContext) IGNORE_SERVER_IDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE_SERVER_IDS, 0)
}

func (s *KeywordsCanBeIdContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserIMPORT, 0)
}

func (s *KeywordsCanBeIdContext) INDEXES() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEXES, 0)
}

func (s *KeywordsCanBeIdContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) INNODB_REDO_LOG_ARCHIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNODB_REDO_LOG_ARCHIVE, 0)
}

func (s *KeywordsCanBeIdContext) INPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINPLACE, 0)
}

func (s *KeywordsCanBeIdContext) INSERT_METHOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT_METHOD, 0)
}

func (s *KeywordsCanBeIdContext) INSTALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTALL, 0)
}

func (s *KeywordsCanBeIdContext) INSTANCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTANCE, 0)
}

func (s *KeywordsCanBeIdContext) INTERNAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERNAL, 0)
}

func (s *KeywordsCanBeIdContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVOKER, 0)
}

func (s *KeywordsCanBeIdContext) IO() antlr.TerminalNode {
	return s.GetToken(MySqlParserIO, 0)
}

func (s *KeywordsCanBeIdContext) IO_THREAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserIO_THREAD, 0)
}

func (s *KeywordsCanBeIdContext) IPC() antlr.TerminalNode {
	return s.GetToken(MySqlParserIPC, 0)
}

func (s *KeywordsCanBeIdContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserISOLATION, 0)
}

func (s *KeywordsCanBeIdContext) ISSUER() antlr.TerminalNode {
	return s.GetToken(MySqlParserISSUER, 0)
}

func (s *KeywordsCanBeIdContext) JSON() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON, 0)
}

func (s *KeywordsCanBeIdContext) KEY_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY_BLOCK_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLANGUAGE, 0)
}

func (s *KeywordsCanBeIdContext) LAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST, 0)
}

func (s *KeywordsCanBeIdContext) LEAVES() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEAVES, 0)
}

func (s *KeywordsCanBeIdContext) LESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLESS, 0)
}

func (s *KeywordsCanBeIdContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEVEL, 0)
}

func (s *KeywordsCanBeIdContext) LIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIST, 0)
}

func (s *KeywordsCanBeIdContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *KeywordsCanBeIdContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *KeywordsCanBeIdContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *KeywordsCanBeIdContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_AUTO_POSITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_AUTO_POSITION, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_CONNECT_RETRY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_CONNECT_RETRY, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_DELAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_DELAY, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_HEARTBEAT_PERIOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_HEARTBEAT_PERIOD, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_HOST() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_HOST, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_FILE, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_POS, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_PASSWORD, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_PORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_PORT, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_RETRY_COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_RETRY_COUNT, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_CA() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CA, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_CAPATH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CAPATH, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_CERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CERT, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_CIPHER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CIPHER, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_CRL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CRL, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_CRLPATH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CRLPATH, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_SSL_KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_KEY, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_TLS_VERSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_TLS_VERSION, 0)
}

func (s *KeywordsCanBeIdContext) MASTER_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_USER, 0)
}

func (s *KeywordsCanBeIdContext) MAX_CONNECTIONS_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_CONNECTIONS_PER_HOUR, 0)
}

func (s *KeywordsCanBeIdContext) MAX_QUERIES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_QUERIES_PER_HOUR, 0)
}

func (s *KeywordsCanBeIdContext) MAX() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX, 0)
}

func (s *KeywordsCanBeIdContext) MAX_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_ROWS, 0)
}

func (s *KeywordsCanBeIdContext) MAX_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) MAX_UPDATES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_UPDATES_PER_HOUR, 0)
}

func (s *KeywordsCanBeIdContext) MAX_USER_CONNECTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_USER_CONNECTIONS, 0)
}

func (s *KeywordsCanBeIdContext) MEDIUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUM, 0)
}

func (s *KeywordsCanBeIdContext) MEMBER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMBER, 0)
}

func (s *KeywordsCanBeIdContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *KeywordsCanBeIdContext) MERGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMERGE, 0)
}

func (s *KeywordsCanBeIdContext) MESSAGE_TEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMESSAGE_TEXT, 0)
}

func (s *KeywordsCanBeIdContext) MID() antlr.TerminalNode {
	return s.GetToken(MySqlParserMID, 0)
}

func (s *KeywordsCanBeIdContext) MIGRATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIGRATE, 0)
}

func (s *KeywordsCanBeIdContext) MIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN, 0)
}

func (s *KeywordsCanBeIdContext) MIN_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN_ROWS, 0)
}

func (s *KeywordsCanBeIdContext) MODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODE, 0)
}

func (s *KeywordsCanBeIdContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODIFY, 0)
}

func (s *KeywordsCanBeIdContext) MUTEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserMUTEX, 0)
}

func (s *KeywordsCanBeIdContext) MYSQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYSQL, 0)
}

func (s *KeywordsCanBeIdContext) MYSQL_ERRNO() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYSQL_ERRNO, 0)
}

func (s *KeywordsCanBeIdContext) NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAME, 0)
}

func (s *KeywordsCanBeIdContext) NAMES() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAMES, 0)
}

func (s *KeywordsCanBeIdContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserNCHAR, 0)
}

func (s *KeywordsCanBeIdContext) NDB_STORED_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNDB_STORED_USER, 0)
}

func (s *KeywordsCanBeIdContext) NEVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEVER, 0)
}

func (s *KeywordsCanBeIdContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEXT, 0)
}

func (s *KeywordsCanBeIdContext) NO() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, 0)
}

func (s *KeywordsCanBeIdContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserNODEGROUP, 0)
}

func (s *KeywordsCanBeIdContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *KeywordsCanBeIdContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMBER, 0)
}

func (s *KeywordsCanBeIdContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFLINE, 0)
}

func (s *KeywordsCanBeIdContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFSET, 0)
}

func (s *KeywordsCanBeIdContext) OF() antlr.TerminalNode {
	return s.GetToken(MySqlParserOF, 0)
}

func (s *KeywordsCanBeIdContext) OJ() antlr.TerminalNode {
	return s.GetToken(MySqlParserOJ, 0)
}

func (s *KeywordsCanBeIdContext) OLD_PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserOLD_PASSWORD, 0)
}

func (s *KeywordsCanBeIdContext) ONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE, 0)
}

func (s *KeywordsCanBeIdContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLINE, 0)
}

func (s *KeywordsCanBeIdContext) ONLY() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLY, 0)
}

func (s *KeywordsCanBeIdContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPEN, 0)
}

func (s *KeywordsCanBeIdContext) OPTIMIZER_COSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIMIZER_COSTS, 0)
}

func (s *KeywordsCanBeIdContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONS, 0)
}

func (s *KeywordsCanBeIdContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *KeywordsCanBeIdContext) OWNER() antlr.TerminalNode {
	return s.GetToken(MySqlParserOWNER, 0)
}

func (s *KeywordsCanBeIdContext) PACK_KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPACK_KEYS, 0)
}

func (s *KeywordsCanBeIdContext) PAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPAGE, 0)
}

func (s *KeywordsCanBeIdContext) PARSER() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARSER, 0)
}

func (s *KeywordsCanBeIdContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTIAL, 0)
}

func (s *KeywordsCanBeIdContext) PARTITIONING() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONING, 0)
}

func (s *KeywordsCanBeIdContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONS, 0)
}

func (s *KeywordsCanBeIdContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *KeywordsCanBeIdContext) PERSIST_RO_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERSIST_RO_VARIABLES_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) PHASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPHASE, 0)
}

func (s *KeywordsCanBeIdContext) PLUGINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGINS, 0)
}

func (s *KeywordsCanBeIdContext) PLUGIN_DIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGIN_DIR, 0)
}

func (s *KeywordsCanBeIdContext) PLUGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGIN, 0)
}

func (s *KeywordsCanBeIdContext) PORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPORT, 0)
}

func (s *KeywordsCanBeIdContext) PRECEDES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRECEDES, 0)
}

func (s *KeywordsCanBeIdContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREPARE, 0)
}

func (s *KeywordsCanBeIdContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRESERVE, 0)
}

func (s *KeywordsCanBeIdContext) PREV() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREV, 0)
}

func (s *KeywordsCanBeIdContext) PROCESSLIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCESSLIST, 0)
}

func (s *KeywordsCanBeIdContext) PROFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROFILE, 0)
}

func (s *KeywordsCanBeIdContext) PROFILES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROFILES, 0)
}

func (s *KeywordsCanBeIdContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROXY, 0)
}

func (s *KeywordsCanBeIdContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *KeywordsCanBeIdContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *KeywordsCanBeIdContext) REBUILD() antlr.TerminalNode {
	return s.GetToken(MySqlParserREBUILD, 0)
}

func (s *KeywordsCanBeIdContext) RECOVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserRECOVER, 0)
}

func (s *KeywordsCanBeIdContext) REDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREDO_BUFFER_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) REDUNDANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserREDUNDANT, 0)
}

func (s *KeywordsCanBeIdContext) RELAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY, 0)
}

func (s *KeywordsCanBeIdContext) RELAYLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAYLOG, 0)
}

func (s *KeywordsCanBeIdContext) RELAY_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_FILE, 0)
}

func (s *KeywordsCanBeIdContext) RELAY_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_POS, 0)
}

func (s *KeywordsCanBeIdContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREMOVE, 0)
}

func (s *KeywordsCanBeIdContext) REORGANIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREORGANIZE, 0)
}

func (s *KeywordsCanBeIdContext) REPAIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPAIR, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_DO_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_DO_DB, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_DO_TABLE, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_IGNORE_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_IGNORE_DB, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_IGNORE_TABLE, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_REWRITE_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_REWRITE_DB, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_WILD_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_WILD_DO_TABLE, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATE_WILD_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_WILD_IGNORE_TABLE, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATION_APPLIER() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION_APPLIER, 0)
}

func (s *KeywordsCanBeIdContext) REPLICATION_SLAVE_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION_SLAVE_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESET, 0)
}

func (s *KeywordsCanBeIdContext) RESOURCE_GROUP_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESOURCE_GROUP_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) RESOURCE_GROUP_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESOURCE_GROUP_USER, 0)
}

func (s *KeywordsCanBeIdContext) RESUME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESUME, 0)
}

func (s *KeywordsCanBeIdContext) RETURNED_SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNED_SQLSTATE, 0)
}

func (s *KeywordsCanBeIdContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNS, 0)
}

func (s *KeywordsCanBeIdContext) ROLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLE, 0)
}

func (s *KeywordsCanBeIdContext) ROLE_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLE_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLBACK, 0)
}

func (s *KeywordsCanBeIdContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLUP, 0)
}

func (s *KeywordsCanBeIdContext) ROTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROTATE, 0)
}

func (s *KeywordsCanBeIdContext) ROW() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW, 0)
}

func (s *KeywordsCanBeIdContext) ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserROWS, 0)
}

func (s *KeywordsCanBeIdContext) ROW_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW_FORMAT, 0)
}

func (s *KeywordsCanBeIdContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSAVEPOINT, 0)
}

func (s *KeywordsCanBeIdContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEDULE, 0)
}

func (s *KeywordsCanBeIdContext) SCHEMA_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA_NAME, 0)
}

func (s *KeywordsCanBeIdContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECURITY, 0)
}

func (s *KeywordsCanBeIdContext) SERIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERIAL, 0)
}

func (s *KeywordsCanBeIdContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVER, 0)
}

func (s *KeywordsCanBeIdContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION, 0)
}

func (s *KeywordsCanBeIdContext) SESSION_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION_VARIABLES_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) SET_USER_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET_USER_ID, 0)
}

func (s *KeywordsCanBeIdContext) SHARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARE, 0)
}

func (s *KeywordsCanBeIdContext) SHARED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARED, 0)
}

func (s *KeywordsCanBeIdContext) SHOW_ROUTINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW_ROUTINE, 0)
}

func (s *KeywordsCanBeIdContext) SIGNED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIGNED, 0)
}

func (s *KeywordsCanBeIdContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIMPLE, 0)
}

func (s *KeywordsCanBeIdContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *KeywordsCanBeIdContext) SLOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLOW, 0)
}

func (s *KeywordsCanBeIdContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSNAPSHOT, 0)
}

func (s *KeywordsCanBeIdContext) SOCKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOCKET, 0)
}

func (s *KeywordsCanBeIdContext) SOME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOME, 0)
}

func (s *KeywordsCanBeIdContext) SONAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSONAME, 0)
}

func (s *KeywordsCanBeIdContext) SOUNDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOUNDS, 0)
}

func (s *KeywordsCanBeIdContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOURCE, 0)
}

func (s *KeywordsCanBeIdContext) SQL_AFTER_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_AFTER_GTIDS, 0)
}

func (s *KeywordsCanBeIdContext) SQL_AFTER_MTS_GAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_AFTER_MTS_GAPS, 0)
}

func (s *KeywordsCanBeIdContext) SQL_BEFORE_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BEFORE_GTIDS, 0)
}

func (s *KeywordsCanBeIdContext) SQL_BUFFER_RESULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BUFFER_RESULT, 0)
}

func (s *KeywordsCanBeIdContext) SQL_CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_CACHE, 0)
}

func (s *KeywordsCanBeIdContext) SQL_NO_CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_NO_CACHE, 0)
}

func (s *KeywordsCanBeIdContext) SQL_THREAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_THREAD, 0)
}

func (s *KeywordsCanBeIdContext) STACKED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTACKED, 0)
}

func (s *KeywordsCanBeIdContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *KeywordsCanBeIdContext) STARTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTARTS, 0)
}

func (s *KeywordsCanBeIdContext) STATS_AUTO_RECALC() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_AUTO_RECALC, 0)
}

func (s *KeywordsCanBeIdContext) STATS_PERSISTENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_PERSISTENT, 0)
}

func (s *KeywordsCanBeIdContext) STATS_SAMPLE_PAGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_SAMPLE_PAGES, 0)
}

func (s *KeywordsCanBeIdContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *KeywordsCanBeIdContext) STD() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTD, 0)
}

func (s *KeywordsCanBeIdContext) STDDEV() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV, 0)
}

func (s *KeywordsCanBeIdContext) STDDEV_POP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV_POP, 0)
}

func (s *KeywordsCanBeIdContext) STDDEV_SAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV_SAMP, 0)
}

func (s *KeywordsCanBeIdContext) STOP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTOP, 0)
}

func (s *KeywordsCanBeIdContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *KeywordsCanBeIdContext) STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING, 0)
}

func (s *KeywordsCanBeIdContext) SUBCLASS_ORIGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBCLASS_ORIGIN, 0)
}

func (s *KeywordsCanBeIdContext) SUBJECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBJECT, 0)
}

func (s *KeywordsCanBeIdContext) SUBPARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITION, 0)
}

func (s *KeywordsCanBeIdContext) SUBPARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITIONS, 0)
}

func (s *KeywordsCanBeIdContext) SUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUM, 0)
}

func (s *KeywordsCanBeIdContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUSPEND, 0)
}

func (s *KeywordsCanBeIdContext) SWAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSWAPS, 0)
}

func (s *KeywordsCanBeIdContext) SWITCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserSWITCHES, 0)
}

func (s *KeywordsCanBeIdContext) SYSTEM_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSYSTEM_VARIABLES_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) TABLE_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE_NAME, 0)
}

func (s *KeywordsCanBeIdContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *KeywordsCanBeIdContext) TABLE_ENCRYPTION_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE_ENCRYPTION_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *KeywordsCanBeIdContext) TEMPTABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPTABLE, 0)
}

func (s *KeywordsCanBeIdContext) THAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHAN, 0)
}

func (s *KeywordsCanBeIdContext) TRADITIONAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRADITIONAL, 0)
}

func (s *KeywordsCanBeIdContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRANSACTION, 0)
}

func (s *KeywordsCanBeIdContext) TRANSACTIONAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRANSACTIONAL, 0)
}

func (s *KeywordsCanBeIdContext) TRIGGERS() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGERS, 0)
}

func (s *KeywordsCanBeIdContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUNCATE, 0)
}

func (s *KeywordsCanBeIdContext) UNDEFINED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDEFINED, 0)
}

func (s *KeywordsCanBeIdContext) UNDOFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDOFILE, 0)
}

func (s *KeywordsCanBeIdContext) UNDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDO_BUFFER_SIZE, 0)
}

func (s *KeywordsCanBeIdContext) UNINSTALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNINSTALL, 0)
}

func (s *KeywordsCanBeIdContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNKNOWN, 0)
}

func (s *KeywordsCanBeIdContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNTIL, 0)
}

func (s *KeywordsCanBeIdContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPGRADE, 0)
}

func (s *KeywordsCanBeIdContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *KeywordsCanBeIdContext) USE_FRM() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE_FRM, 0)
}

func (s *KeywordsCanBeIdContext) USER_RESOURCES() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER_RESOURCES, 0)
}

func (s *KeywordsCanBeIdContext) VALIDATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALIDATION, 0)
}

func (s *KeywordsCanBeIdContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *KeywordsCanBeIdContext) VAR_POP() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_POP, 0)
}

func (s *KeywordsCanBeIdContext) VAR_SAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_SAMP, 0)
}

func (s *KeywordsCanBeIdContext) VARIABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARIABLES, 0)
}

func (s *KeywordsCanBeIdContext) VARIANCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARIANCE, 0)
}

func (s *KeywordsCanBeIdContext) VERSION_TOKEN_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserVERSION_TOKEN_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *KeywordsCanBeIdContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *KeywordsCanBeIdContext) WARNINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserWARNINGS, 0)
}

func (s *KeywordsCanBeIdContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITHOUT, 0)
}

func (s *KeywordsCanBeIdContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *KeywordsCanBeIdContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRAPPER, 0)
}

func (s *KeywordsCanBeIdContext) X509() antlr.TerminalNode {
	return s.GetToken(MySqlParserX509, 0)
}

func (s *KeywordsCanBeIdContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *KeywordsCanBeIdContext) XA_RECOVER_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA_RECOVER_ADMIN, 0)
}

func (s *KeywordsCanBeIdContext) XML() antlr.TerminalNode {
	return s.GetToken(MySqlParserXML, 0)
}

func (s *KeywordsCanBeIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordsCanBeIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordsCanBeIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitKeywordsCanBeId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) KeywordsCanBeId() (localctx IKeywordsCanBeIdContext) {
	localctx = NewKeywordsCanBeIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 632, MySqlParserRULE_keywordsCanBeId)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6490)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserCURRENT || _la == MySqlParserDIAGNOSTICS || _la == MySqlParserGROUP || _la == MySqlParserNUMBER || _la == MySqlParserORDER || _la == MySqlParserSTACKED || _la == MySqlParserSERIAL || (((_la-267)&-(0x1f+1)) == 0 && ((1<<uint((_la-267)))&((1<<(MySqlParserAVG-267))|(1<<(MySqlParserBIT_AND-267))|(1<<(MySqlParserBIT_OR-267))|(1<<(MySqlParserBIT_XOR-267))|(1<<(MySqlParserCOUNT-267))|(1<<(MySqlParserGROUP_CONCAT-267))|(1<<(MySqlParserMAX-267))|(1<<(MySqlParserMIN-267))|(1<<(MySqlParserSTD-267))|(1<<(MySqlParserSTDDEV-267))|(1<<(MySqlParserSTDDEV_POP-267))|(1<<(MySqlParserSTDDEV_SAMP-267))|(1<<(MySqlParserSUM-267))|(1<<(MySqlParserVAR_POP-267))|(1<<(MySqlParserVAR_SAMP-267))|(1<<(MySqlParserVARIANCE-267)))) != 0) || (((_la-302)&-(0x1f+1)) == 0 && ((1<<uint((_la-302)))&((1<<(MySqlParserACCOUNT-302))|(1<<(MySqlParserACTION-302))|(1<<(MySqlParserAFTER-302))|(1<<(MySqlParserAGGREGATE-302))|(1<<(MySqlParserALGORITHM-302))|(1<<(MySqlParserANY-302))|(1<<(MySqlParserAT-302))|(1<<(MySqlParserAUTHORS-302))|(1<<(MySqlParserAUTOCOMMIT-302))|(1<<(MySqlParserAUTOEXTEND_SIZE-302))|(1<<(MySqlParserAUTO_INCREMENT-302))|(1<<(MySqlParserAVG_ROW_LENGTH-302))|(1<<(MySqlParserBEGIN-302))|(1<<(MySqlParserBINLOG-302))|(1<<(MySqlParserBIT-302))|(1<<(MySqlParserBLOCK-302))|(1<<(MySqlParserBOOL-302))|(1<<(MySqlParserBOOLEAN-302))|(1<<(MySqlParserBTREE-302))|(1<<(MySqlParserCACHE-302))|(1<<(MySqlParserCASCADED-302))|(1<<(MySqlParserCHAIN-302))|(1<<(MySqlParserCHANGED-302))|(1<<(MySqlParserCHANNEL-302))|(1<<(MySqlParserCHECKSUM-302))|(1<<(MySqlParserPAGE_CHECKSUM-302))|(1<<(MySqlParserCIPHER-302))|(1<<(MySqlParserCLASS_ORIGIN-302))|(1<<(MySqlParserCLIENT-302))|(1<<(MySqlParserCLOSE-302))|(1<<(MySqlParserCOALESCE-302))|(1<<(MySqlParserCODE-302)))) != 0) || (((_la-334)&-(0x1f+1)) == 0 && ((1<<uint((_la-334)))&((1<<(MySqlParserCOLUMNS-334))|(1<<(MySqlParserCOLUMN_FORMAT-334))|(1<<(MySqlParserCOLUMN_NAME-334))|(1<<(MySqlParserCOMMENT-334))|(1<<(MySqlParserCOMMIT-334))|(1<<(MySqlParserCOMPACT-334))|(1<<(MySqlParserCOMPLETION-334))|(1<<(MySqlParserCOMPRESSED-334))|(1<<(MySqlParserCOMPRESSION-334))|(1<<(MySqlParserCONCURRENT-334))|(1<<(MySqlParserCONNECTION-334))|(1<<(MySqlParserCONSISTENT-334))|(1<<(MySqlParserCONSTRAINT_CATALOG-334))|(1<<(MySqlParserCONSTRAINT_SCHEMA-334))|(1<<(MySqlParserCONSTRAINT_NAME-334))|(1<<(MySqlParserCONTAINS-334))|(1<<(MySqlParserCONTEXT-334))|(1<<(MySqlParserCONTRIBUTORS-334))|(1<<(MySqlParserCOPY-334))|(1<<(MySqlParserCPU-334))|(1<<(MySqlParserCURSOR_NAME-334))|(1<<(MySqlParserDATA-334))|(1<<(MySqlParserDATAFILE-334))|(1<<(MySqlParserDEALLOCATE-334))|(1<<(MySqlParserDEFAULT_AUTH-334))|(1<<(MySqlParserDEFINER-334))|(1<<(MySqlParserDELAY_KEY_WRITE-334))|(1<<(MySqlParserDES_KEY_FILE-334))|(1<<(MySqlParserDIRECTORY-334))|(1<<(MySqlParserDISABLE-334))|(1<<(MySqlParserDISCARD-334))|(1<<(MySqlParserDISK-334)))) != 0) || (((_la-366)&-(0x1f+1)) == 0 && ((1<<uint((_la-366)))&((1<<(MySqlParserDO-366))|(1<<(MySqlParserDUMPFILE-366))|(1<<(MySqlParserDUPLICATE-366))|(1<<(MySqlParserDYNAMIC-366))|(1<<(MySqlParserENABLE-366))|(1<<(MySqlParserENCRYPTION-366))|(1<<(MySqlParserEND-366))|(1<<(MySqlParserENDS-366))|(1<<(MySqlParserENGINE-366))|(1<<(MySqlParserENGINES-366))|(1<<(MySqlParserERROR-366))|(1<<(MySqlParserERRORS-366))|(1<<(MySqlParserESCAPE-366))|(1<<(MySqlParserEVEN-366))|(1<<(MySqlParserEVENT-366))|(1<<(MySqlParserEVENTS-366))|(1<<(MySqlParserEVERY-366))|(1<<(MySqlParserEXCHANGE-366))|(1<<(MySqlParserEXCLUSIVE-366))|(1<<(MySqlParserEXPIRE-366))|(1<<(MySqlParserEXPORT-366))|(1<<(MySqlParserEXTENDED-366))|(1<<(MySqlParserEXTENT_SIZE-366))|(1<<(MySqlParserFAST-366))|(1<<(MySqlParserFAULTS-366))|(1<<(MySqlParserFIELDS-366))|(1<<(MySqlParserFILE_BLOCK_SIZE-366))|(1<<(MySqlParserFILTER-366))|(1<<(MySqlParserFIRST-366))|(1<<(MySqlParserFIXED-366))|(1<<(MySqlParserFLUSH-366))|(1<<(MySqlParserFOLLOWS-366)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserFOUND-398))|(1<<(MySqlParserFULL-398))|(1<<(MySqlParserFUNCTION-398))|(1<<(MySqlParserGENERAL-398))|(1<<(MySqlParserGLOBAL-398))|(1<<(MySqlParserGRANTS-398))|(1<<(MySqlParserGROUP_REPLICATION-398))|(1<<(MySqlParserHANDLER-398))|(1<<(MySqlParserHASH-398))|(1<<(MySqlParserHELP-398))|(1<<(MySqlParserHOST-398))|(1<<(MySqlParserHOSTS-398))|(1<<(MySqlParserIDENTIFIED-398))|(1<<(MySqlParserIGNORE_SERVER_IDS-398))|(1<<(MySqlParserIMPORT-398))|(1<<(MySqlParserINDEXES-398))|(1<<(MySqlParserINITIAL_SIZE-398))|(1<<(MySqlParserINPLACE-398))|(1<<(MySqlParserINSERT_METHOD-398))|(1<<(MySqlParserINSTALL-398))|(1<<(MySqlParserINSTANCE-398))|(1<<(MySqlParserINVOKER-398))|(1<<(MySqlParserIO-398))|(1<<(MySqlParserIO_THREAD-398))|(1<<(MySqlParserIPC-398))|(1<<(MySqlParserISOLATION-398))|(1<<(MySqlParserISSUER-398))|(1<<(MySqlParserJSON-398))|(1<<(MySqlParserKEY_BLOCK_SIZE-398))|(1<<(MySqlParserLANGUAGE-398))|(1<<(MySqlParserLAST-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserLEAVES-430))|(1<<(MySqlParserLESS-430))|(1<<(MySqlParserLEVEL-430))|(1<<(MySqlParserLIST-430))|(1<<(MySqlParserLOCAL-430))|(1<<(MySqlParserLOGFILE-430))|(1<<(MySqlParserLOGS-430))|(1<<(MySqlParserMASTER-430))|(1<<(MySqlParserMASTER_AUTO_POSITION-430))|(1<<(MySqlParserMASTER_CONNECT_RETRY-430))|(1<<(MySqlParserMASTER_DELAY-430))|(1<<(MySqlParserMASTER_HEARTBEAT_PERIOD-430))|(1<<(MySqlParserMASTER_HOST-430))|(1<<(MySqlParserMASTER_LOG_FILE-430))|(1<<(MySqlParserMASTER_LOG_POS-430))|(1<<(MySqlParserMASTER_PASSWORD-430))|(1<<(MySqlParserMASTER_PORT-430))|(1<<(MySqlParserMASTER_RETRY_COUNT-430))|(1<<(MySqlParserMASTER_SSL-430))|(1<<(MySqlParserMASTER_SSL_CA-430))|(1<<(MySqlParserMASTER_SSL_CAPATH-430))|(1<<(MySqlParserMASTER_SSL_CERT-430))|(1<<(MySqlParserMASTER_SSL_CIPHER-430))|(1<<(MySqlParserMASTER_SSL_CRL-430))|(1<<(MySqlParserMASTER_SSL_CRLPATH-430))|(1<<(MySqlParserMASTER_SSL_KEY-430))|(1<<(MySqlParserMASTER_TLS_VERSION-430))|(1<<(MySqlParserMASTER_USER-430))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-430))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-430))|(1<<(MySqlParserMAX_ROWS-430))|(1<<(MySqlParserMAX_SIZE-430)))) != 0) || (((_la-462)&-(0x1f+1)) == 0 && ((1<<uint((_la-462)))&((1<<(MySqlParserMAX_UPDATES_PER_HOUR-462))|(1<<(MySqlParserMAX_USER_CONNECTIONS-462))|(1<<(MySqlParserMEDIUM-462))|(1<<(MySqlParserMEMBER-462))|(1<<(MySqlParserMERGE-462))|(1<<(MySqlParserMESSAGE_TEXT-462))|(1<<(MySqlParserMID-462))|(1<<(MySqlParserMIGRATE-462))|(1<<(MySqlParserMIN_ROWS-462))|(1<<(MySqlParserMODE-462))|(1<<(MySqlParserMODIFY-462))|(1<<(MySqlParserMUTEX-462))|(1<<(MySqlParserMYSQL-462))|(1<<(MySqlParserMYSQL_ERRNO-462))|(1<<(MySqlParserNAME-462))|(1<<(MySqlParserNAMES-462))|(1<<(MySqlParserNCHAR-462))|(1<<(MySqlParserNEVER-462))|(1<<(MySqlParserNEXT-462))|(1<<(MySqlParserNO-462))|(1<<(MySqlParserNODEGROUP-462))|(1<<(MySqlParserNONE-462))|(1<<(MySqlParserOFFLINE-462))|(1<<(MySqlParserOFFSET-462))|(1<<(MySqlParserOF-462))|(1<<(MySqlParserOJ-462))|(1<<(MySqlParserOLD_PASSWORD-462))|(1<<(MySqlParserONE-462))|(1<<(MySqlParserONLINE-462))|(1<<(MySqlParserONLY-462))|(1<<(MySqlParserOPEN-462))|(1<<(MySqlParserOPTIMIZER_COSTS-462)))) != 0) || (((_la-494)&-(0x1f+1)) == 0 && ((1<<uint((_la-494)))&((1<<(MySqlParserOPTIONS-494))|(1<<(MySqlParserOWNER-494))|(1<<(MySqlParserPACK_KEYS-494))|(1<<(MySqlParserPAGE-494))|(1<<(MySqlParserPARSER-494))|(1<<(MySqlParserPARTIAL-494))|(1<<(MySqlParserPARTITIONING-494))|(1<<(MySqlParserPARTITIONS-494))|(1<<(MySqlParserPASSWORD-494))|(1<<(MySqlParserPHASE-494))|(1<<(MySqlParserPLUGIN-494))|(1<<(MySqlParserPLUGIN_DIR-494))|(1<<(MySqlParserPLUGINS-494))|(1<<(MySqlParserPORT-494))|(1<<(MySqlParserPRECEDES-494))|(1<<(MySqlParserPREPARE-494))|(1<<(MySqlParserPRESERVE-494))|(1<<(MySqlParserPREV-494))|(1<<(MySqlParserPROCESSLIST-494))|(1<<(MySqlParserPROFILE-494))|(1<<(MySqlParserPROFILES-494))|(1<<(MySqlParserPROXY-494))|(1<<(MySqlParserQUERY-494))|(1<<(MySqlParserQUICK-494))|(1<<(MySqlParserREBUILD-494))|(1<<(MySqlParserRECOVER-494))|(1<<(MySqlParserREDO_BUFFER_SIZE-494))|(1<<(MySqlParserREDUNDANT-494))|(1<<(MySqlParserRELAY-494))|(1<<(MySqlParserRELAY_LOG_FILE-494))|(1<<(MySqlParserRELAY_LOG_POS-494))|(1<<(MySqlParserRELAYLOG-494)))) != 0) || (((_la-526)&-(0x1f+1)) == 0 && ((1<<uint((_la-526)))&((1<<(MySqlParserREMOVE-526))|(1<<(MySqlParserREORGANIZE-526))|(1<<(MySqlParserREPAIR-526))|(1<<(MySqlParserREPLICATE_DO_DB-526))|(1<<(MySqlParserREPLICATE_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_IGNORE_DB-526))|(1<<(MySqlParserREPLICATE_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATE_REWRITE_DB-526))|(1<<(MySqlParserREPLICATE_WILD_DO_TABLE-526))|(1<<(MySqlParserREPLICATE_WILD_IGNORE_TABLE-526))|(1<<(MySqlParserREPLICATION-526))|(1<<(MySqlParserRESET-526))|(1<<(MySqlParserRESUME-526))|(1<<(MySqlParserRETURNED_SQLSTATE-526))|(1<<(MySqlParserRETURNS-526))|(1<<(MySqlParserROLE-526))|(1<<(MySqlParserROLLBACK-526))|(1<<(MySqlParserROLLUP-526))|(1<<(MySqlParserROTATE-526))|(1<<(MySqlParserROW-526))|(1<<(MySqlParserROWS-526))|(1<<(MySqlParserROW_FORMAT-526))|(1<<(MySqlParserSAVEPOINT-526))|(1<<(MySqlParserSCHEDULE-526))|(1<<(MySqlParserSECURITY-526))|(1<<(MySqlParserSERVER-526))|(1<<(MySqlParserSESSION-526))|(1<<(MySqlParserSHARE-526))|(1<<(MySqlParserSHARED-526))|(1<<(MySqlParserSIGNED-526))|(1<<(MySqlParserSIMPLE-526)))) != 0) || (((_la-558)&-(0x1f+1)) == 0 && ((1<<uint((_la-558)))&((1<<(MySqlParserSLAVE-558))|(1<<(MySqlParserSLOW-558))|(1<<(MySqlParserSNAPSHOT-558))|(1<<(MySqlParserSOCKET-558))|(1<<(MySqlParserSOME-558))|(1<<(MySqlParserSONAME-558))|(1<<(MySqlParserSOUNDS-558))|(1<<(MySqlParserSOURCE-558))|(1<<(MySqlParserSQL_AFTER_GTIDS-558))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-558))|(1<<(MySqlParserSQL_BEFORE_GTIDS-558))|(1<<(MySqlParserSQL_BUFFER_RESULT-558))|(1<<(MySqlParserSQL_CACHE-558))|(1<<(MySqlParserSQL_NO_CACHE-558))|(1<<(MySqlParserSQL_THREAD-558))|(1<<(MySqlParserSTART-558))|(1<<(MySqlParserSTARTS-558))|(1<<(MySqlParserSTATS_AUTO_RECALC-558))|(1<<(MySqlParserSTATS_PERSISTENT-558))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-558))|(1<<(MySqlParserSTATUS-558))|(1<<(MySqlParserSTOP-558))|(1<<(MySqlParserSTORAGE-558))|(1<<(MySqlParserSTRING-558))|(1<<(MySqlParserSUBCLASS_ORIGIN-558))|(1<<(MySqlParserSUBJECT-558))|(1<<(MySqlParserSUBPARTITION-558))|(1<<(MySqlParserSUBPARTITIONS-558))|(1<<(MySqlParserSUSPEND-558))|(1<<(MySqlParserSWAPS-558))|(1<<(MySqlParserSWITCHES-558)))) != 0) || (((_la-590)&-(0x1f+1)) == 0 && ((1<<uint((_la-590)))&((1<<(MySqlParserTABLE_NAME-590))|(1<<(MySqlParserTABLESPACE-590))|(1<<(MySqlParserTEMPORARY-590))|(1<<(MySqlParserTEMPTABLE-590))|(1<<(MySqlParserTHAN-590))|(1<<(MySqlParserTRADITIONAL-590))|(1<<(MySqlParserTRANSACTION-590))|(1<<(MySqlParserTRANSACTIONAL-590))|(1<<(MySqlParserTRIGGERS-590))|(1<<(MySqlParserTRUNCATE-590))|(1<<(MySqlParserUNDEFINED-590))|(1<<(MySqlParserUNDOFILE-590))|(1<<(MySqlParserUNDO_BUFFER_SIZE-590))|(1<<(MySqlParserUNINSTALL-590))|(1<<(MySqlParserUNKNOWN-590))|(1<<(MySqlParserUNTIL-590))|(1<<(MySqlParserUPGRADE-590))|(1<<(MySqlParserUSER-590))|(1<<(MySqlParserUSE_FRM-590))|(1<<(MySqlParserUSER_RESOURCES-590))|(1<<(MySqlParserVALIDATION-590))|(1<<(MySqlParserVALUE-590))|(1<<(MySqlParserVARIABLES-590))|(1<<(MySqlParserVIEW-590))|(1<<(MySqlParserWAIT-590))|(1<<(MySqlParserWARNINGS-590))|(1<<(MySqlParserWITHOUT-590))|(1<<(MySqlParserWORK-590))|(1<<(MySqlParserWRAPPER-590))|(1<<(MySqlParserX509-590)))) != 0) || (((_la-622)&-(0x1f+1)) == 0 && ((1<<uint((_la-622)))&((1<<(MySqlParserXA-622))|(1<<(MySqlParserXML-622))|(1<<(MySqlParserINTERNAL-622))|(1<<(MySqlParserAUDIT_ADMIN-622))|(1<<(MySqlParserBACKUP_ADMIN-622))|(1<<(MySqlParserBINLOG_ADMIN-622))|(1<<(MySqlParserBINLOG_ENCRYPTION_ADMIN-622))|(1<<(MySqlParserCLONE_ADMIN-622))|(1<<(MySqlParserCONNECTION_ADMIN-622))|(1<<(MySqlParserENCRYPTION_KEY_ADMIN-622)))) != 0) || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(MySqlParserFIREWALL_ADMIN-654))|(1<<(MySqlParserFIREWALL_USER-654))|(1<<(MySqlParserGROUP_REPLICATION_ADMIN-654))|(1<<(MySqlParserINNODB_REDO_LOG_ARCHIVE-654))|(1<<(MySqlParserNDB_STORED_USER-654))|(1<<(MySqlParserPERSIST_RO_VARIABLES_ADMIN-654))|(1<<(MySqlParserREPLICATION_APPLIER-654))|(1<<(MySqlParserREPLICATION_SLAVE_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_ADMIN-654))|(1<<(MySqlParserRESOURCE_GROUP_USER-654))|(1<<(MySqlParserROLE_ADMIN-654))|(1<<(MySqlParserSESSION_VARIABLES_ADMIN-654))|(1<<(MySqlParserSET_USER_ID-654))|(1<<(MySqlParserSHOW_ROUTINE-654))|(1<<(MySqlParserSYSTEM_VARIABLES_ADMIN-654))|(1<<(MySqlParserTABLE_ENCRYPTION_ADMIN-654))|(1<<(MySqlParserVERSION_TOKEN_ADMIN-654))|(1<<(MySqlParserXA_RECOVER_ADMIN-654)))) != 0) || _la == MySqlParserMEMORY || _la == MySqlParserCATALOG_NAME || _la == MySqlParserSCHEMA_NAME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFunctionNameBaseContext is an interface to support dynamic dispatch.
type IFunctionNameBaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionNameBaseContext differentiates from other interfaces.
	IsFunctionNameBaseContext()
}

type FunctionNameBaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameBaseContext() *FunctionNameBaseContext {
	var p = new(FunctionNameBaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_functionNameBase
	return p
}

func (*FunctionNameBaseContext) IsFunctionNameBaseContext() {}

func NewFunctionNameBaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameBaseContext {
	var p = new(FunctionNameBaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_functionNameBase

	return p
}

func (s *FunctionNameBaseContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameBaseContext) ABS() antlr.TerminalNode {
	return s.GetToken(MySqlParserABS, 0)
}

func (s *FunctionNameBaseContext) ACOS() antlr.TerminalNode {
	return s.GetToken(MySqlParserACOS, 0)
}

func (s *FunctionNameBaseContext) ADDDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserADDDATE, 0)
}

func (s *FunctionNameBaseContext) ADDTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserADDTIME, 0)
}

func (s *FunctionNameBaseContext) AES_DECRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAES_DECRYPT, 0)
}

func (s *FunctionNameBaseContext) AES_ENCRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAES_ENCRYPT, 0)
}

func (s *FunctionNameBaseContext) AREA() antlr.TerminalNode {
	return s.GetToken(MySqlParserAREA, 0)
}

func (s *FunctionNameBaseContext) ASBINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserASBINARY, 0)
}

func (s *FunctionNameBaseContext) ASIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserASIN, 0)
}

func (s *FunctionNameBaseContext) ASTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserASTEXT, 0)
}

func (s *FunctionNameBaseContext) ASWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserASWKB, 0)
}

func (s *FunctionNameBaseContext) ASWKT() antlr.TerminalNode {
	return s.GetToken(MySqlParserASWKT, 0)
}

func (s *FunctionNameBaseContext) ASYMMETRIC_DECRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_DECRYPT, 0)
}

func (s *FunctionNameBaseContext) ASYMMETRIC_DERIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_DERIVE, 0)
}

func (s *FunctionNameBaseContext) ASYMMETRIC_ENCRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_ENCRYPT, 0)
}

func (s *FunctionNameBaseContext) ASYMMETRIC_SIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_SIGN, 0)
}

func (s *FunctionNameBaseContext) ASYMMETRIC_VERIFY() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_VERIFY, 0)
}

func (s *FunctionNameBaseContext) ATAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserATAN, 0)
}

func (s *FunctionNameBaseContext) ATAN2() antlr.TerminalNode {
	return s.GetToken(MySqlParserATAN2, 0)
}

func (s *FunctionNameBaseContext) BENCHMARK() antlr.TerminalNode {
	return s.GetToken(MySqlParserBENCHMARK, 0)
}

func (s *FunctionNameBaseContext) BIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIN, 0)
}

func (s *FunctionNameBaseContext) BIT_COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_COUNT, 0)
}

func (s *FunctionNameBaseContext) BIT_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_LENGTH, 0)
}

func (s *FunctionNameBaseContext) BUFFER() antlr.TerminalNode {
	return s.GetToken(MySqlParserBUFFER, 0)
}

func (s *FunctionNameBaseContext) CEIL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCEIL, 0)
}

func (s *FunctionNameBaseContext) CEILING() antlr.TerminalNode {
	return s.GetToken(MySqlParserCEILING, 0)
}

func (s *FunctionNameBaseContext) CENTROID() antlr.TerminalNode {
	return s.GetToken(MySqlParserCENTROID, 0)
}

func (s *FunctionNameBaseContext) CHARACTER_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER_LENGTH, 0)
}

func (s *FunctionNameBaseContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET, 0)
}

func (s *FunctionNameBaseContext) CHAR_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR_LENGTH, 0)
}

func (s *FunctionNameBaseContext) COERCIBILITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOERCIBILITY, 0)
}

func (s *FunctionNameBaseContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATION, 0)
}

func (s *FunctionNameBaseContext) COMPRESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESS, 0)
}

func (s *FunctionNameBaseContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCAT, 0)
}

func (s *FunctionNameBaseContext) CONCAT_WS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCAT_WS, 0)
}

func (s *FunctionNameBaseContext) CONNECTION_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION_ID, 0)
}

func (s *FunctionNameBaseContext) CONV() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONV, 0)
}

func (s *FunctionNameBaseContext) CONVERT_TZ() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONVERT_TZ, 0)
}

func (s *FunctionNameBaseContext) COS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOS, 0)
}

func (s *FunctionNameBaseContext) COT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOT, 0)
}

func (s *FunctionNameBaseContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOUNT, 0)
}

func (s *FunctionNameBaseContext) CRC32() antlr.TerminalNode {
	return s.GetToken(MySqlParserCRC32, 0)
}

func (s *FunctionNameBaseContext) CREATE_ASYMMETRIC_PRIV_KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, 0)
}

func (s *FunctionNameBaseContext) CREATE_ASYMMETRIC_PUB_KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE_ASYMMETRIC_PUB_KEY, 0)
}

func (s *FunctionNameBaseContext) CREATE_DH_PARAMETERS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE_DH_PARAMETERS, 0)
}

func (s *FunctionNameBaseContext) CREATE_DIGEST() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE_DIGEST, 0)
}

func (s *FunctionNameBaseContext) CROSSES() antlr.TerminalNode {
	return s.GetToken(MySqlParserCROSSES, 0)
}

func (s *FunctionNameBaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *FunctionNameBaseContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *FunctionNameBaseContext) DATEDIFF() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATEDIFF, 0)
}

func (s *FunctionNameBaseContext) DATE_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE_FORMAT, 0)
}

func (s *FunctionNameBaseContext) DAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY, 0)
}

func (s *FunctionNameBaseContext) DAYNAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAYNAME, 0)
}

func (s *FunctionNameBaseContext) DAYOFMONTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAYOFMONTH, 0)
}

func (s *FunctionNameBaseContext) DAYOFWEEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAYOFWEEK, 0)
}

func (s *FunctionNameBaseContext) DAYOFYEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAYOFYEAR, 0)
}

func (s *FunctionNameBaseContext) DECODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECODE, 0)
}

func (s *FunctionNameBaseContext) DEGREES() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEGREES, 0)
}

func (s *FunctionNameBaseContext) DES_DECRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDES_DECRYPT, 0)
}

func (s *FunctionNameBaseContext) DES_ENCRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDES_ENCRYPT, 0)
}

func (s *FunctionNameBaseContext) DIMENSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIMENSION, 0)
}

func (s *FunctionNameBaseContext) DISJOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISJOINT, 0)
}

func (s *FunctionNameBaseContext) ELT() antlr.TerminalNode {
	return s.GetToken(MySqlParserELT, 0)
}

func (s *FunctionNameBaseContext) ENCODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCODE, 0)
}

func (s *FunctionNameBaseContext) ENCRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCRYPT, 0)
}

func (s *FunctionNameBaseContext) ENDPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserENDPOINT, 0)
}

func (s *FunctionNameBaseContext) ENVELOPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENVELOPE, 0)
}

func (s *FunctionNameBaseContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUALS, 0)
}

func (s *FunctionNameBaseContext) EXP() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXP, 0)
}

func (s *FunctionNameBaseContext) EXPORT_SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPORT_SET, 0)
}

func (s *FunctionNameBaseContext) EXTERIORRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTERIORRING, 0)
}

func (s *FunctionNameBaseContext) EXTRACTVALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTRACTVALUE, 0)
}

func (s *FunctionNameBaseContext) FIELD() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELD, 0)
}

func (s *FunctionNameBaseContext) FIND_IN_SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIND_IN_SET, 0)
}

func (s *FunctionNameBaseContext) FLOOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLOOR, 0)
}

func (s *FunctionNameBaseContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFORMAT, 0)
}

func (s *FunctionNameBaseContext) FOUND_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOUND_ROWS, 0)
}

func (s *FunctionNameBaseContext) FROM_BASE64() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM_BASE64, 0)
}

func (s *FunctionNameBaseContext) FROM_DAYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM_DAYS, 0)
}

func (s *FunctionNameBaseContext) FROM_UNIXTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM_UNIXTIME, 0)
}

func (s *FunctionNameBaseContext) GEOMCOLLFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMCOLLFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) GEOMCOLLFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMCOLLFROMWKB, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYCOLLECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYCOLLECTION, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYCOLLECTIONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYCOLLECTIONFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYCOLLECTIONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYCOLLECTIONFROMWKB, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYFROMWKB, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYN() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYN, 0)
}

func (s *FunctionNameBaseContext) GEOMETRYTYPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYTYPE, 0)
}

func (s *FunctionNameBaseContext) GEOMFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) GEOMFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMFROMWKB, 0)
}

func (s *FunctionNameBaseContext) GET_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGET_FORMAT, 0)
}

func (s *FunctionNameBaseContext) GET_LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserGET_LOCK, 0)
}

func (s *FunctionNameBaseContext) GLENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLENGTH, 0)
}

func (s *FunctionNameBaseContext) GREATEST() antlr.TerminalNode {
	return s.GetToken(MySqlParserGREATEST, 0)
}

func (s *FunctionNameBaseContext) GTID_SUBSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserGTID_SUBSET, 0)
}

func (s *FunctionNameBaseContext) GTID_SUBTRACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGTID_SUBTRACT, 0)
}

func (s *FunctionNameBaseContext) HEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserHEX, 0)
}

func (s *FunctionNameBaseContext) HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR, 0)
}

func (s *FunctionNameBaseContext) IFNULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserIFNULL, 0)
}

func (s *FunctionNameBaseContext) INET6_ATON() antlr.TerminalNode {
	return s.GetToken(MySqlParserINET6_ATON, 0)
}

func (s *FunctionNameBaseContext) INET6_NTOA() antlr.TerminalNode {
	return s.GetToken(MySqlParserINET6_NTOA, 0)
}

func (s *FunctionNameBaseContext) INET_ATON() antlr.TerminalNode {
	return s.GetToken(MySqlParserINET_ATON, 0)
}

func (s *FunctionNameBaseContext) INET_NTOA() antlr.TerminalNode {
	return s.GetToken(MySqlParserINET_NTOA, 0)
}

func (s *FunctionNameBaseContext) INSTR() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTR, 0)
}

func (s *FunctionNameBaseContext) INTERIORRINGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERIORRINGN, 0)
}

func (s *FunctionNameBaseContext) INTERSECTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERSECTS, 0)
}

func (s *FunctionNameBaseContext) INVISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVISIBLE, 0)
}

func (s *FunctionNameBaseContext) ISCLOSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserISCLOSED, 0)
}

func (s *FunctionNameBaseContext) ISEMPTY() antlr.TerminalNode {
	return s.GetToken(MySqlParserISEMPTY, 0)
}

func (s *FunctionNameBaseContext) ISNULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserISNULL, 0)
}

func (s *FunctionNameBaseContext) ISSIMPLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserISSIMPLE, 0)
}

func (s *FunctionNameBaseContext) IS_FREE_LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_FREE_LOCK, 0)
}

func (s *FunctionNameBaseContext) IS_IPV4() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_IPV4, 0)
}

func (s *FunctionNameBaseContext) IS_IPV4_COMPAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_IPV4_COMPAT, 0)
}

func (s *FunctionNameBaseContext) IS_IPV4_MAPPED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_IPV4_MAPPED, 0)
}

func (s *FunctionNameBaseContext) IS_IPV6() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_IPV6, 0)
}

func (s *FunctionNameBaseContext) IS_USED_LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_USED_LOCK, 0)
}

func (s *FunctionNameBaseContext) LAST_INSERT_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST_INSERT_ID, 0)
}

func (s *FunctionNameBaseContext) LCASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLCASE, 0)
}

func (s *FunctionNameBaseContext) LEAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEAST, 0)
}

func (s *FunctionNameBaseContext) LEFT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEFT, 0)
}

func (s *FunctionNameBaseContext) LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserLENGTH, 0)
}

func (s *FunctionNameBaseContext) LINEFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) LINEFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEFROMWKB, 0)
}

func (s *FunctionNameBaseContext) LINESTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINESTRING, 0)
}

func (s *FunctionNameBaseContext) LINESTRINGFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINESTRINGFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) LINESTRINGFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINESTRINGFROMWKB, 0)
}

func (s *FunctionNameBaseContext) LN() antlr.TerminalNode {
	return s.GetToken(MySqlParserLN, 0)
}

func (s *FunctionNameBaseContext) LOAD_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOAD_FILE, 0)
}

func (s *FunctionNameBaseContext) LOCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCATE, 0)
}

func (s *FunctionNameBaseContext) LOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOG, 0)
}

func (s *FunctionNameBaseContext) LOG10() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOG10, 0)
}

func (s *FunctionNameBaseContext) LOG2() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOG2, 0)
}

func (s *FunctionNameBaseContext) LOWER() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOWER, 0)
}

func (s *FunctionNameBaseContext) LPAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLPAD, 0)
}

func (s *FunctionNameBaseContext) LTRIM() antlr.TerminalNode {
	return s.GetToken(MySqlParserLTRIM, 0)
}

func (s *FunctionNameBaseContext) MAKEDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAKEDATE, 0)
}

func (s *FunctionNameBaseContext) MAKETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAKETIME, 0)
}

func (s *FunctionNameBaseContext) MAKE_SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAKE_SET, 0)
}

func (s *FunctionNameBaseContext) MASTER_POS_WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_POS_WAIT, 0)
}

func (s *FunctionNameBaseContext) MBRCONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRCONTAINS, 0)
}

func (s *FunctionNameBaseContext) MBRDISJOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRDISJOINT, 0)
}

func (s *FunctionNameBaseContext) MBREQUAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBREQUAL, 0)
}

func (s *FunctionNameBaseContext) MBRINTERSECTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRINTERSECTS, 0)
}

func (s *FunctionNameBaseContext) MBROVERLAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBROVERLAPS, 0)
}

func (s *FunctionNameBaseContext) MBRTOUCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRTOUCHES, 0)
}

func (s *FunctionNameBaseContext) MBRWITHIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRWITHIN, 0)
}

func (s *FunctionNameBaseContext) MD5() antlr.TerminalNode {
	return s.GetToken(MySqlParserMD5, 0)
}

func (s *FunctionNameBaseContext) MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMICROSECOND, 0)
}

func (s *FunctionNameBaseContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUTE, 0)
}

func (s *FunctionNameBaseContext) MLINEFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMLINEFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) MLINEFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMLINEFROMWKB, 0)
}

func (s *FunctionNameBaseContext) MOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMOD, 0)
}

func (s *FunctionNameBaseContext) MONTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMONTH, 0)
}

func (s *FunctionNameBaseContext) MONTHNAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserMONTHNAME, 0)
}

func (s *FunctionNameBaseContext) MPOINTFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMPOINTFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) MPOINTFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMPOINTFROMWKB, 0)
}

func (s *FunctionNameBaseContext) MPOLYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMPOLYFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) MPOLYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMPOLYFROMWKB, 0)
}

func (s *FunctionNameBaseContext) MULTILINESTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTILINESTRING, 0)
}

func (s *FunctionNameBaseContext) MULTILINESTRINGFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTILINESTRINGFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) MULTILINESTRINGFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTILINESTRINGFROMWKB, 0)
}

func (s *FunctionNameBaseContext) MULTIPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOINT, 0)
}

func (s *FunctionNameBaseContext) MULTIPOINTFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOINTFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) MULTIPOINTFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOINTFROMWKB, 0)
}

func (s *FunctionNameBaseContext) MULTIPOLYGON() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOLYGON, 0)
}

func (s *FunctionNameBaseContext) MULTIPOLYGONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOLYGONFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) MULTIPOLYGONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOLYGONFROMWKB, 0)
}

func (s *FunctionNameBaseContext) NAME_CONST() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAME_CONST, 0)
}

func (s *FunctionNameBaseContext) NULLIF() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULLIF, 0)
}

func (s *FunctionNameBaseContext) NUMGEOMETRIES() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMGEOMETRIES, 0)
}

func (s *FunctionNameBaseContext) NUMINTERIORRINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMINTERIORRINGS, 0)
}

func (s *FunctionNameBaseContext) NUMPOINTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMPOINTS, 0)
}

func (s *FunctionNameBaseContext) OCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserOCT, 0)
}

func (s *FunctionNameBaseContext) OCTET_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserOCTET_LENGTH, 0)
}

func (s *FunctionNameBaseContext) ORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserORD, 0)
}

func (s *FunctionNameBaseContext) OVERLAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOVERLAPS, 0)
}

func (s *FunctionNameBaseContext) PERIOD_ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERIOD_ADD, 0)
}

func (s *FunctionNameBaseContext) PERIOD_DIFF() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERIOD_DIFF, 0)
}

func (s *FunctionNameBaseContext) PI() antlr.TerminalNode {
	return s.GetToken(MySqlParserPI, 0)
}

func (s *FunctionNameBaseContext) POINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINT, 0)
}

func (s *FunctionNameBaseContext) POINTFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINTFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) POINTFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINTFROMWKB, 0)
}

func (s *FunctionNameBaseContext) POINTN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINTN, 0)
}

func (s *FunctionNameBaseContext) POLYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) POLYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYFROMWKB, 0)
}

func (s *FunctionNameBaseContext) POLYGON() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYGON, 0)
}

func (s *FunctionNameBaseContext) POLYGONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYGONFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) POLYGONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYGONFROMWKB, 0)
}

func (s *FunctionNameBaseContext) POSITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOSITION, 0)
}

func (s *FunctionNameBaseContext) POW() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOW, 0)
}

func (s *FunctionNameBaseContext) POWER() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOWER, 0)
}

func (s *FunctionNameBaseContext) QUARTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUARTER, 0)
}

func (s *FunctionNameBaseContext) QUOTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUOTE, 0)
}

func (s *FunctionNameBaseContext) RADIANS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRADIANS, 0)
}

func (s *FunctionNameBaseContext) RAND() antlr.TerminalNode {
	return s.GetToken(MySqlParserRAND, 0)
}

func (s *FunctionNameBaseContext) RANDOM_BYTES() antlr.TerminalNode {
	return s.GetToken(MySqlParserRANDOM_BYTES, 0)
}

func (s *FunctionNameBaseContext) RELEASE_LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELEASE_LOCK, 0)
}

func (s *FunctionNameBaseContext) REVERSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE, 0)
}

func (s *FunctionNameBaseContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRIGHT, 0)
}

func (s *FunctionNameBaseContext) ROUND() antlr.TerminalNode {
	return s.GetToken(MySqlParserROUND, 0)
}

func (s *FunctionNameBaseContext) ROW_COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW_COUNT, 0)
}

func (s *FunctionNameBaseContext) RPAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserRPAD, 0)
}

func (s *FunctionNameBaseContext) RTRIM() antlr.TerminalNode {
	return s.GetToken(MySqlParserRTRIM, 0)
}

func (s *FunctionNameBaseContext) SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECOND, 0)
}

func (s *FunctionNameBaseContext) SEC_TO_TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSEC_TO_TIME, 0)
}

func (s *FunctionNameBaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *FunctionNameBaseContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION_USER, 0)
}

func (s *FunctionNameBaseContext) SESSION_VARIABLES_ADMIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION_VARIABLES_ADMIN, 0)
}

func (s *FunctionNameBaseContext) SHA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHA, 0)
}

func (s *FunctionNameBaseContext) SHA1() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHA1, 0)
}

func (s *FunctionNameBaseContext) SHA2() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHA2, 0)
}

func (s *FunctionNameBaseContext) SIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIGN, 0)
}

func (s *FunctionNameBaseContext) SIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIN, 0)
}

func (s *FunctionNameBaseContext) SLEEP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLEEP, 0)
}

func (s *FunctionNameBaseContext) SOUNDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOUNDEX, 0)
}

func (s *FunctionNameBaseContext) SQL_THREAD_WAIT_AFTER_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, 0)
}

func (s *FunctionNameBaseContext) SQRT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQRT, 0)
}

func (s *FunctionNameBaseContext) SRID() antlr.TerminalNode {
	return s.GetToken(MySqlParserSRID, 0)
}

func (s *FunctionNameBaseContext) STARTPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTARTPOINT, 0)
}

func (s *FunctionNameBaseContext) STRCMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRCMP, 0)
}

func (s *FunctionNameBaseContext) STR_TO_DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTR_TO_DATE, 0)
}

func (s *FunctionNameBaseContext) ST_AREA() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_AREA, 0)
}

func (s *FunctionNameBaseContext) ST_ASBINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ASBINARY, 0)
}

func (s *FunctionNameBaseContext) ST_ASTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ASTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_ASWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ASWKB, 0)
}

func (s *FunctionNameBaseContext) ST_ASWKT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ASWKT, 0)
}

func (s *FunctionNameBaseContext) ST_BUFFER() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_BUFFER, 0)
}

func (s *FunctionNameBaseContext) ST_CENTROID() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_CENTROID, 0)
}

func (s *FunctionNameBaseContext) ST_CONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_CONTAINS, 0)
}

func (s *FunctionNameBaseContext) ST_CROSSES() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_CROSSES, 0)
}

func (s *FunctionNameBaseContext) ST_DIFFERENCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_DIFFERENCE, 0)
}

func (s *FunctionNameBaseContext) ST_DIMENSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_DIMENSION, 0)
}

func (s *FunctionNameBaseContext) ST_DISJOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_DISJOINT, 0)
}

func (s *FunctionNameBaseContext) ST_DISTANCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_DISTANCE, 0)
}

func (s *FunctionNameBaseContext) ST_ENDPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ENDPOINT, 0)
}

func (s *FunctionNameBaseContext) ST_ENVELOPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ENVELOPE, 0)
}

func (s *FunctionNameBaseContext) ST_EQUALS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_EQUALS, 0)
}

func (s *FunctionNameBaseContext) ST_EXTERIORRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_EXTERIORRING, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMCOLLFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMCOLLFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMCOLLFROMTXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMCOLLFROMTXT, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMCOLLFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMCOLLFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMETRYCOLLECTIONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMETRYCOLLECTIONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMETRYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMETRYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMETRYN() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYN, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMETRYTYPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYTYPE, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_GEOMFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_INTERIORRINGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_INTERIORRINGN, 0)
}

func (s *FunctionNameBaseContext) ST_INTERSECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_INTERSECTION, 0)
}

func (s *FunctionNameBaseContext) ST_INTERSECTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_INTERSECTS, 0)
}

func (s *FunctionNameBaseContext) ST_ISCLOSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ISCLOSED, 0)
}

func (s *FunctionNameBaseContext) ST_ISEMPTY() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ISEMPTY, 0)
}

func (s *FunctionNameBaseContext) ST_ISSIMPLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ISSIMPLE, 0)
}

func (s *FunctionNameBaseContext) ST_LINEFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_LINEFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_LINEFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_LINEFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_LINESTRINGFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_LINESTRINGFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_LINESTRINGFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_LINESTRINGFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_NUMGEOMETRIES() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_NUMGEOMETRIES, 0)
}

func (s *FunctionNameBaseContext) ST_NUMINTERIORRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_NUMINTERIORRING, 0)
}

func (s *FunctionNameBaseContext) ST_NUMINTERIORRINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_NUMINTERIORRINGS, 0)
}

func (s *FunctionNameBaseContext) ST_NUMPOINTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_NUMPOINTS, 0)
}

func (s *FunctionNameBaseContext) ST_OVERLAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_OVERLAPS, 0)
}

func (s *FunctionNameBaseContext) ST_POINTFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POINTFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_POINTFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POINTFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_POINTN() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POINTN, 0)
}

func (s *FunctionNameBaseContext) ST_POLYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POLYFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_POLYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POLYFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_POLYGONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POLYGONFROMTEXT, 0)
}

func (s *FunctionNameBaseContext) ST_POLYGONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POLYGONFROMWKB, 0)
}

func (s *FunctionNameBaseContext) ST_SRID() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_SRID, 0)
}

func (s *FunctionNameBaseContext) ST_STARTPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_STARTPOINT, 0)
}

func (s *FunctionNameBaseContext) ST_SYMDIFFERENCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_SYMDIFFERENCE, 0)
}

func (s *FunctionNameBaseContext) ST_TOUCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_TOUCHES, 0)
}

func (s *FunctionNameBaseContext) ST_UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_UNION, 0)
}

func (s *FunctionNameBaseContext) ST_WITHIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_WITHIN, 0)
}

func (s *FunctionNameBaseContext) ST_X() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_X, 0)
}

func (s *FunctionNameBaseContext) ST_Y() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_Y, 0)
}

func (s *FunctionNameBaseContext) SUBDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBDATE, 0)
}

func (s *FunctionNameBaseContext) SUBSTRING_INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTRING_INDEX, 0)
}

func (s *FunctionNameBaseContext) SUBTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBTIME, 0)
}

func (s *FunctionNameBaseContext) SYSTEM_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSYSTEM_USER, 0)
}

func (s *FunctionNameBaseContext) TAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTAN, 0)
}

func (s *FunctionNameBaseContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *FunctionNameBaseContext) TIMEDIFF() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMEDIFF, 0)
}

func (s *FunctionNameBaseContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMP, 0)
}

func (s *FunctionNameBaseContext) TIMESTAMPADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMPADD, 0)
}

func (s *FunctionNameBaseContext) TIMESTAMPDIFF() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMPDIFF, 0)
}

func (s *FunctionNameBaseContext) TIME_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME_FORMAT, 0)
}

func (s *FunctionNameBaseContext) TIME_TO_SEC() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME_TO_SEC, 0)
}

func (s *FunctionNameBaseContext) TOUCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTOUCHES, 0)
}

func (s *FunctionNameBaseContext) TO_BASE64() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO_BASE64, 0)
}

func (s *FunctionNameBaseContext) TO_DAYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO_DAYS, 0)
}

func (s *FunctionNameBaseContext) TO_SECONDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO_SECONDS, 0)
}

func (s *FunctionNameBaseContext) UCASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUCASE, 0)
}

func (s *FunctionNameBaseContext) UNCOMPRESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNCOMPRESS, 0)
}

func (s *FunctionNameBaseContext) UNCOMPRESSED_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNCOMPRESSED_LENGTH, 0)
}

func (s *FunctionNameBaseContext) UNHEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNHEX, 0)
}

func (s *FunctionNameBaseContext) UNIX_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIX_TIMESTAMP, 0)
}

func (s *FunctionNameBaseContext) UPDATEXML() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATEXML, 0)
}

func (s *FunctionNameBaseContext) UPPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPPER, 0)
}

func (s *FunctionNameBaseContext) UUID() antlr.TerminalNode {
	return s.GetToken(MySqlParserUUID, 0)
}

func (s *FunctionNameBaseContext) UUID_SHORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserUUID_SHORT, 0)
}

func (s *FunctionNameBaseContext) VALIDATE_PASSWORD_STRENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALIDATE_PASSWORD_STRENGTH, 0)
}

func (s *FunctionNameBaseContext) VERSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserVERSION, 0)
}

func (s *FunctionNameBaseContext) VISIBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVISIBLE, 0)
}

func (s *FunctionNameBaseContext) WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0)
}

func (s *FunctionNameBaseContext) WEEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEEK, 0)
}

func (s *FunctionNameBaseContext) WEEKDAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEEKDAY, 0)
}

func (s *FunctionNameBaseContext) WEEKOFYEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEEKOFYEAR, 0)
}

func (s *FunctionNameBaseContext) WEIGHT_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEIGHT_STRING, 0)
}

func (s *FunctionNameBaseContext) WITHIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITHIN, 0)
}

func (s *FunctionNameBaseContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR, 0)
}

func (s *FunctionNameBaseContext) YEARWEEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEARWEEK, 0)
}

func (s *FunctionNameBaseContext) Y_FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserY_FUNCTION, 0)
}

func (s *FunctionNameBaseContext) X_FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserX_FUNCTION, 0)
}

func (s *FunctionNameBaseContext) JSON_ARRAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_ARRAY, 0)
}

func (s *FunctionNameBaseContext) JSON_OBJECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_OBJECT, 0)
}

func (s *FunctionNameBaseContext) JSON_QUOTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_QUOTE, 0)
}

func (s *FunctionNameBaseContext) JSON_CONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_CONTAINS, 0)
}

func (s *FunctionNameBaseContext) JSON_CONTAINS_PATH() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_CONTAINS_PATH, 0)
}

func (s *FunctionNameBaseContext) JSON_EXTRACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_EXTRACT, 0)
}

func (s *FunctionNameBaseContext) JSON_KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_KEYS, 0)
}

func (s *FunctionNameBaseContext) JSON_OVERLAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_OVERLAPS, 0)
}

func (s *FunctionNameBaseContext) JSON_SEARCH() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_SEARCH, 0)
}

func (s *FunctionNameBaseContext) JSON_VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_VALUE, 0)
}

func (s *FunctionNameBaseContext) JSON_ARRAY_APPEND() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_ARRAY_APPEND, 0)
}

func (s *FunctionNameBaseContext) JSON_ARRAY_INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_ARRAY_INSERT, 0)
}

func (s *FunctionNameBaseContext) JSON_INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_INSERT, 0)
}

func (s *FunctionNameBaseContext) JSON_MERGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_MERGE, 0)
}

func (s *FunctionNameBaseContext) JSON_MERGE_PATCH() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_MERGE_PATCH, 0)
}

func (s *FunctionNameBaseContext) JSON_MERGE_PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_MERGE_PRESERVE, 0)
}

func (s *FunctionNameBaseContext) JSON_REMOVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_REMOVE, 0)
}

func (s *FunctionNameBaseContext) JSON_REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_REPLACE, 0)
}

func (s *FunctionNameBaseContext) JSON_SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_SET, 0)
}

func (s *FunctionNameBaseContext) JSON_UNQUOTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_UNQUOTE, 0)
}

func (s *FunctionNameBaseContext) JSON_DEPTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_DEPTH, 0)
}

func (s *FunctionNameBaseContext) JSON_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_LENGTH, 0)
}

func (s *FunctionNameBaseContext) JSON_TYPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_TYPE, 0)
}

func (s *FunctionNameBaseContext) JSON_VALID() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_VALID, 0)
}

func (s *FunctionNameBaseContext) JSON_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_TABLE, 0)
}

func (s *FunctionNameBaseContext) JSON_SCHEMA_VALID() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_SCHEMA_VALID, 0)
}

func (s *FunctionNameBaseContext) JSON_SCHEMA_VALIDATION_REPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_SCHEMA_VALIDATION_REPORT, 0)
}

func (s *FunctionNameBaseContext) JSON_PRETTY() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_PRETTY, 0)
}

func (s *FunctionNameBaseContext) JSON_STORAGE_FREE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_STORAGE_FREE, 0)
}

func (s *FunctionNameBaseContext) JSON_STORAGE_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_STORAGE_SIZE, 0)
}

func (s *FunctionNameBaseContext) JSON_ARRAYAGG() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_ARRAYAGG, 0)
}

func (s *FunctionNameBaseContext) JSON_OBJECTAGG() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON_OBJECTAGG, 0)
}

func (s *FunctionNameBaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameBaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionNameBaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFunctionNameBase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) FunctionNameBase() (localctx IFunctionNameBaseContext) {
	localctx = NewFunctionNameBaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 634, MySqlParserRULE_functionNameBase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6492)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDATABASE || _la == MySqlParserLEFT || _la == MySqlParserRIGHT || _la == MySqlParserSCHEMA || (((_la-201)&-(0x1f+1)) == 0 && ((1<<uint((_la-201)))&((1<<(MySqlParserDATE-201))|(1<<(MySqlParserTIME-201))|(1<<(MySqlParserTIMESTAMP-201))|(1<<(MySqlParserYEAR-201)))) != 0) || (((_la-235)&-(0x1f+1)) == 0 && ((1<<uint((_la-235)))&((1<<(MySqlParserJSON_ARRAY-235))|(1<<(MySqlParserJSON_OBJECT-235))|(1<<(MySqlParserJSON_QUOTE-235))|(1<<(MySqlParserJSON_CONTAINS-235))|(1<<(MySqlParserJSON_CONTAINS_PATH-235))|(1<<(MySqlParserJSON_EXTRACT-235))|(1<<(MySqlParserJSON_KEYS-235))|(1<<(MySqlParserJSON_OVERLAPS-235))|(1<<(MySqlParserJSON_SEARCH-235))|(1<<(MySqlParserJSON_VALUE-235))|(1<<(MySqlParserJSON_ARRAY_APPEND-235))|(1<<(MySqlParserJSON_ARRAY_INSERT-235))|(1<<(MySqlParserJSON_INSERT-235))|(1<<(MySqlParserJSON_MERGE-235))|(1<<(MySqlParserJSON_MERGE_PATCH-235))|(1<<(MySqlParserJSON_MERGE_PRESERVE-235))|(1<<(MySqlParserJSON_REMOVE-235))|(1<<(MySqlParserJSON_REPLACE-235))|(1<<(MySqlParserJSON_SET-235))|(1<<(MySqlParserJSON_UNQUOTE-235))|(1<<(MySqlParserJSON_DEPTH-235))|(1<<(MySqlParserJSON_LENGTH-235))|(1<<(MySqlParserJSON_TYPE-235))|(1<<(MySqlParserJSON_VALID-235))|(1<<(MySqlParserJSON_TABLE-235))|(1<<(MySqlParserJSON_SCHEMA_VALID-235))|(1<<(MySqlParserJSON_SCHEMA_VALIDATION_REPORT-235))|(1<<(MySqlParserJSON_PRETTY-235))|(1<<(MySqlParserJSON_STORAGE_FREE-235))|(1<<(MySqlParserJSON_STORAGE_SIZE-235))|(1<<(MySqlParserJSON_ARRAYAGG-235))|(1<<(MySqlParserJSON_OBJECTAGG-235)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || _la == MySqlParserINVISIBLE || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserVISIBLE-615))|(1<<(MySqlParserQUARTER-615))|(1<<(MySqlParserMONTH-615))|(1<<(MySqlParserDAY-615))|(1<<(MySqlParserHOUR-615))|(1<<(MySqlParserMINUTE-615))|(1<<(MySqlParserWEEK-615))|(1<<(MySqlParserSECOND-615))|(1<<(MySqlParserMICROSECOND-615)))) != 0) || _la == MySqlParserSESSION_VARIABLES_ADMIN || (((_la-734)&-(0x1f+1)) == 0 && ((1<<uint((_la-734)))&((1<<(MySqlParserGEOMETRYCOLLECTION-734))|(1<<(MySqlParserLINESTRING-734))|(1<<(MySqlParserMULTILINESTRING-734))|(1<<(MySqlParserMULTIPOINT-734))|(1<<(MySqlParserMULTIPOLYGON-734))|(1<<(MySqlParserPOINT-734))|(1<<(MySqlParserPOLYGON-734))|(1<<(MySqlParserABS-734))|(1<<(MySqlParserACOS-734))|(1<<(MySqlParserADDDATE-734))|(1<<(MySqlParserADDTIME-734))|(1<<(MySqlParserAES_DECRYPT-734))|(1<<(MySqlParserAES_ENCRYPT-734))|(1<<(MySqlParserAREA-734))|(1<<(MySqlParserASBINARY-734))|(1<<(MySqlParserASIN-734))|(1<<(MySqlParserASTEXT-734))|(1<<(MySqlParserASWKB-734))|(1<<(MySqlParserASWKT-734))|(1<<(MySqlParserASYMMETRIC_DECRYPT-734))|(1<<(MySqlParserASYMMETRIC_DERIVE-734))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-734))|(1<<(MySqlParserASYMMETRIC_SIGN-734))|(1<<(MySqlParserASYMMETRIC_VERIFY-734))|(1<<(MySqlParserATAN-734))|(1<<(MySqlParserATAN2-734))|(1<<(MySqlParserBENCHMARK-734))|(1<<(MySqlParserBIN-734))|(1<<(MySqlParserBIT_COUNT-734))|(1<<(MySqlParserBIT_LENGTH-734)))) != 0) || (((_la-766)&-(0x1f+1)) == 0 && ((1<<uint((_la-766)))&((1<<(MySqlParserBUFFER-766))|(1<<(MySqlParserCEIL-766))|(1<<(MySqlParserCEILING-766))|(1<<(MySqlParserCENTROID-766))|(1<<(MySqlParserCHARACTER_LENGTH-766))|(1<<(MySqlParserCHARSET-766))|(1<<(MySqlParserCHAR_LENGTH-766))|(1<<(MySqlParserCOERCIBILITY-766))|(1<<(MySqlParserCOLLATION-766))|(1<<(MySqlParserCOMPRESS-766))|(1<<(MySqlParserCONCAT-766))|(1<<(MySqlParserCONCAT_WS-766))|(1<<(MySqlParserCONNECTION_ID-766))|(1<<(MySqlParserCONV-766))|(1<<(MySqlParserCONVERT_TZ-766))|(1<<(MySqlParserCOS-766))|(1<<(MySqlParserCOT-766))|(1<<(MySqlParserCRC32-766))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-766))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-766))|(1<<(MySqlParserCREATE_DH_PARAMETERS-766))|(1<<(MySqlParserCREATE_DIGEST-766))|(1<<(MySqlParserCROSSES-766))|(1<<(MySqlParserDATEDIFF-766))|(1<<(MySqlParserDATE_FORMAT-766))|(1<<(MySqlParserDAYNAME-766))|(1<<(MySqlParserDAYOFMONTH-766))|(1<<(MySqlParserDAYOFWEEK-766))|(1<<(MySqlParserDAYOFYEAR-766))|(1<<(MySqlParserDECODE-766))|(1<<(MySqlParserDEGREES-766)))) != 0) || (((_la-798)&-(0x1f+1)) == 0 && ((1<<uint((_la-798)))&((1<<(MySqlParserDES_DECRYPT-798))|(1<<(MySqlParserDES_ENCRYPT-798))|(1<<(MySqlParserDIMENSION-798))|(1<<(MySqlParserDISJOINT-798))|(1<<(MySqlParserELT-798))|(1<<(MySqlParserENCODE-798))|(1<<(MySqlParserENCRYPT-798))|(1<<(MySqlParserENDPOINT-798))|(1<<(MySqlParserENVELOPE-798))|(1<<(MySqlParserEQUALS-798))|(1<<(MySqlParserEXP-798))|(1<<(MySqlParserEXPORT_SET-798))|(1<<(MySqlParserEXTERIORRING-798))|(1<<(MySqlParserEXTRACTVALUE-798))|(1<<(MySqlParserFIELD-798))|(1<<(MySqlParserFIND_IN_SET-798))|(1<<(MySqlParserFLOOR-798))|(1<<(MySqlParserFORMAT-798))|(1<<(MySqlParserFOUND_ROWS-798))|(1<<(MySqlParserFROM_BASE64-798))|(1<<(MySqlParserFROM_DAYS-798))|(1<<(MySqlParserFROM_UNIXTIME-798))|(1<<(MySqlParserGEOMCOLLFROMTEXT-798))|(1<<(MySqlParserGEOMCOLLFROMWKB-798))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-798))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-798))|(1<<(MySqlParserGEOMETRYFROMTEXT-798))|(1<<(MySqlParserGEOMETRYFROMWKB-798))|(1<<(MySqlParserGEOMETRYN-798))|(1<<(MySqlParserGEOMETRYTYPE-798))|(1<<(MySqlParserGEOMFROMTEXT-798))|(1<<(MySqlParserGEOMFROMWKB-798)))) != 0) || (((_la-830)&-(0x1f+1)) == 0 && ((1<<uint((_la-830)))&((1<<(MySqlParserGET_FORMAT-830))|(1<<(MySqlParserGET_LOCK-830))|(1<<(MySqlParserGLENGTH-830))|(1<<(MySqlParserGREATEST-830))|(1<<(MySqlParserGTID_SUBSET-830))|(1<<(MySqlParserGTID_SUBTRACT-830))|(1<<(MySqlParserHEX-830))|(1<<(MySqlParserIFNULL-830))|(1<<(MySqlParserINET6_ATON-830))|(1<<(MySqlParserINET6_NTOA-830))|(1<<(MySqlParserINET_ATON-830))|(1<<(MySqlParserINET_NTOA-830))|(1<<(MySqlParserINSTR-830))|(1<<(MySqlParserINTERIORRINGN-830))|(1<<(MySqlParserINTERSECTS-830))|(1<<(MySqlParserISCLOSED-830))|(1<<(MySqlParserISEMPTY-830))|(1<<(MySqlParserISNULL-830))|(1<<(MySqlParserISSIMPLE-830))|(1<<(MySqlParserIS_FREE_LOCK-830))|(1<<(MySqlParserIS_IPV4-830))|(1<<(MySqlParserIS_IPV4_COMPAT-830))|(1<<(MySqlParserIS_IPV4_MAPPED-830))|(1<<(MySqlParserIS_IPV6-830))|(1<<(MySqlParserIS_USED_LOCK-830))|(1<<(MySqlParserLAST_INSERT_ID-830))|(1<<(MySqlParserLCASE-830))|(1<<(MySqlParserLEAST-830))|(1<<(MySqlParserLENGTH-830))|(1<<(MySqlParserLINEFROMTEXT-830))|(1<<(MySqlParserLINEFROMWKB-830))|(1<<(MySqlParserLINESTRINGFROMTEXT-830)))) != 0) || (((_la-862)&-(0x1f+1)) == 0 && ((1<<uint((_la-862)))&((1<<(MySqlParserLINESTRINGFROMWKB-862))|(1<<(MySqlParserLN-862))|(1<<(MySqlParserLOAD_FILE-862))|(1<<(MySqlParserLOCATE-862))|(1<<(MySqlParserLOG-862))|(1<<(MySqlParserLOG10-862))|(1<<(MySqlParserLOG2-862))|(1<<(MySqlParserLOWER-862))|(1<<(MySqlParserLPAD-862))|(1<<(MySqlParserLTRIM-862))|(1<<(MySqlParserMAKEDATE-862))|(1<<(MySqlParserMAKETIME-862))|(1<<(MySqlParserMAKE_SET-862))|(1<<(MySqlParserMASTER_POS_WAIT-862))|(1<<(MySqlParserMBRCONTAINS-862))|(1<<(MySqlParserMBRDISJOINT-862))|(1<<(MySqlParserMBREQUAL-862))|(1<<(MySqlParserMBRINTERSECTS-862))|(1<<(MySqlParserMBROVERLAPS-862))|(1<<(MySqlParserMBRTOUCHES-862))|(1<<(MySqlParserMBRWITHIN-862))|(1<<(MySqlParserMD5-862))|(1<<(MySqlParserMLINEFROMTEXT-862))|(1<<(MySqlParserMLINEFROMWKB-862))|(1<<(MySqlParserMONTHNAME-862))|(1<<(MySqlParserMPOINTFROMTEXT-862))|(1<<(MySqlParserMPOINTFROMWKB-862))|(1<<(MySqlParserMPOLYFROMTEXT-862))|(1<<(MySqlParserMPOLYFROMWKB-862))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-862))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-862))|(1<<(MySqlParserMULTIPOINTFROMTEXT-862)))) != 0) || (((_la-894)&-(0x1f+1)) == 0 && ((1<<uint((_la-894)))&((1<<(MySqlParserMULTIPOINTFROMWKB-894))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-894))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-894))|(1<<(MySqlParserNAME_CONST-894))|(1<<(MySqlParserNULLIF-894))|(1<<(MySqlParserNUMGEOMETRIES-894))|(1<<(MySqlParserNUMINTERIORRINGS-894))|(1<<(MySqlParserNUMPOINTS-894))|(1<<(MySqlParserOCT-894))|(1<<(MySqlParserOCTET_LENGTH-894))|(1<<(MySqlParserORD-894))|(1<<(MySqlParserOVERLAPS-894))|(1<<(MySqlParserPERIOD_ADD-894))|(1<<(MySqlParserPERIOD_DIFF-894))|(1<<(MySqlParserPI-894))|(1<<(MySqlParserPOINTFROMTEXT-894))|(1<<(MySqlParserPOINTFROMWKB-894))|(1<<(MySqlParserPOINTN-894))|(1<<(MySqlParserPOLYFROMTEXT-894))|(1<<(MySqlParserPOLYFROMWKB-894))|(1<<(MySqlParserPOLYGONFROMTEXT-894))|(1<<(MySqlParserPOLYGONFROMWKB-894))|(1<<(MySqlParserPOW-894))|(1<<(MySqlParserPOWER-894))|(1<<(MySqlParserQUOTE-894))|(1<<(MySqlParserRADIANS-894))|(1<<(MySqlParserRAND-894))|(1<<(MySqlParserRANDOM_BYTES-894))|(1<<(MySqlParserRELEASE_LOCK-894))|(1<<(MySqlParserREVERSE-894))|(1<<(MySqlParserROUND-894))|(1<<(MySqlParserROW_COUNT-894)))) != 0) || (((_la-926)&-(0x1f+1)) == 0 && ((1<<uint((_la-926)))&((1<<(MySqlParserRPAD-926))|(1<<(MySqlParserRTRIM-926))|(1<<(MySqlParserSEC_TO_TIME-926))|(1<<(MySqlParserSESSION_USER-926))|(1<<(MySqlParserSHA-926))|(1<<(MySqlParserSHA1-926))|(1<<(MySqlParserSHA2-926))|(1<<(MySqlParserSIGN-926))|(1<<(MySqlParserSIN-926))|(1<<(MySqlParserSLEEP-926))|(1<<(MySqlParserSOUNDEX-926))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-926))|(1<<(MySqlParserSQRT-926))|(1<<(MySqlParserSRID-926))|(1<<(MySqlParserSTARTPOINT-926))|(1<<(MySqlParserSTRCMP-926))|(1<<(MySqlParserSTR_TO_DATE-926))|(1<<(MySqlParserST_AREA-926))|(1<<(MySqlParserST_ASBINARY-926))|(1<<(MySqlParserST_ASTEXT-926))|(1<<(MySqlParserST_ASWKB-926))|(1<<(MySqlParserST_ASWKT-926))|(1<<(MySqlParserST_BUFFER-926))|(1<<(MySqlParserST_CENTROID-926))|(1<<(MySqlParserST_CONTAINS-926))|(1<<(MySqlParserST_CROSSES-926))|(1<<(MySqlParserST_DIFFERENCE-926))|(1<<(MySqlParserST_DIMENSION-926))|(1<<(MySqlParserST_DISJOINT-926))|(1<<(MySqlParserST_DISTANCE-926))|(1<<(MySqlParserST_ENDPOINT-926)))) != 0) || (((_la-958)&-(0x1f+1)) == 0 && ((1<<uint((_la-958)))&((1<<(MySqlParserST_ENVELOPE-958))|(1<<(MySqlParserST_EQUALS-958))|(1<<(MySqlParserST_EXTERIORRING-958))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-958))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-958))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-958))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-958))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-958))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-958))|(1<<(MySqlParserST_GEOMETRYFROMWKB-958))|(1<<(MySqlParserST_GEOMETRYN-958))|(1<<(MySqlParserST_GEOMETRYTYPE-958))|(1<<(MySqlParserST_GEOMFROMTEXT-958))|(1<<(MySqlParserST_GEOMFROMWKB-958))|(1<<(MySqlParserST_INTERIORRINGN-958))|(1<<(MySqlParserST_INTERSECTION-958))|(1<<(MySqlParserST_INTERSECTS-958))|(1<<(MySqlParserST_ISCLOSED-958))|(1<<(MySqlParserST_ISEMPTY-958))|(1<<(MySqlParserST_ISSIMPLE-958))|(1<<(MySqlParserST_LINEFROMTEXT-958))|(1<<(MySqlParserST_LINEFROMWKB-958))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-958))|(1<<(MySqlParserST_LINESTRINGFROMWKB-958))|(1<<(MySqlParserST_NUMGEOMETRIES-958))|(1<<(MySqlParserST_NUMINTERIORRING-958))|(1<<(MySqlParserST_NUMINTERIORRINGS-958))|(1<<(MySqlParserST_NUMPOINTS-958))|(1<<(MySqlParserST_OVERLAPS-958))|(1<<(MySqlParserST_POINTFROMTEXT-958))|(1<<(MySqlParserST_POINTFROMWKB-958))|(1<<(MySqlParserST_POINTN-958)))) != 0) || (((_la-990)&-(0x1f+1)) == 0 && ((1<<uint((_la-990)))&((1<<(MySqlParserST_POLYFROMTEXT-990))|(1<<(MySqlParserST_POLYFROMWKB-990))|(1<<(MySqlParserST_POLYGONFROMTEXT-990))|(1<<(MySqlParserST_POLYGONFROMWKB-990))|(1<<(MySqlParserST_SRID-990))|(1<<(MySqlParserST_STARTPOINT-990))|(1<<(MySqlParserST_SYMDIFFERENCE-990))|(1<<(MySqlParserST_TOUCHES-990))|(1<<(MySqlParserST_UNION-990))|(1<<(MySqlParserST_WITHIN-990))|(1<<(MySqlParserST_X-990))|(1<<(MySqlParserST_Y-990))|(1<<(MySqlParserSUBDATE-990))|(1<<(MySqlParserSUBSTRING_INDEX-990))|(1<<(MySqlParserSUBTIME-990))|(1<<(MySqlParserSYSTEM_USER-990))|(1<<(MySqlParserTAN-990))|(1<<(MySqlParserTIMEDIFF-990))|(1<<(MySqlParserTIMESTAMPADD-990))|(1<<(MySqlParserTIMESTAMPDIFF-990))|(1<<(MySqlParserTIME_FORMAT-990))|(1<<(MySqlParserTIME_TO_SEC-990))|(1<<(MySqlParserTOUCHES-990))|(1<<(MySqlParserTO_BASE64-990))|(1<<(MySqlParserTO_DAYS-990))|(1<<(MySqlParserTO_SECONDS-990))|(1<<(MySqlParserUCASE-990))|(1<<(MySqlParserUNCOMPRESS-990))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-990))|(1<<(MySqlParserUNHEX-990))|(1<<(MySqlParserUNIX_TIMESTAMP-990))|(1<<(MySqlParserUPDATEXML-990)))) != 0) || (((_la-1022)&-(0x1f+1)) == 0 && ((1<<uint((_la-1022)))&((1<<(MySqlParserUPPER-1022))|(1<<(MySqlParserUUID-1022))|(1<<(MySqlParserUUID_SHORT-1022))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-1022))|(1<<(MySqlParserVERSION-1022))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-1022))|(1<<(MySqlParserWEEKDAY-1022))|(1<<(MySqlParserWEEKOFYEAR-1022))|(1<<(MySqlParserWEIGHT_STRING-1022))|(1<<(MySqlParserWITHIN-1022))|(1<<(MySqlParserYEARWEEK-1022))|(1<<(MySqlParserY_FUNCTION-1022))|(1<<(MySqlParserX_FUNCTION-1022))|(1<<(MySqlParserMOD-1022)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

func (p *MySqlParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 302:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 303:
		var t *PredicateContext = nil
		if localctx != nil {
			t = localctx.(*PredicateContext)
		}
		return p.Predicate_Sempred(t, predIndex)

	case 304:
		var t *ExpressionAtomContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionAtomContext)
		}
		return p.ExpressionAtom_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *MySqlParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MySqlParser) Predicate_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MySqlParser) ExpressionAtom_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 10:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 1)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 12)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
